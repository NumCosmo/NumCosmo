### Initial Parameter Definitions

We initialize the cosmological parameters and model-specific variables used for CCL and NumCosmo comparisons.
Scalar parameters are fixed across all models, while arrays define variations in dark energy and neutrino properties for multiple scenarios.
First, we instantiate a CCL cosmology object using the predefined global parameters. 
Next, using the `numcosmo_py`[^numcosmo_py] function `create_nc_obj`, we generate a NumCosmo cosmology object initialized with the same parameters as the CCL model. 
Fixed scalars apply universally, while arrays ($\Omega_v$, $w_0$, $w_a$, $m_\nu$) represent different model configurations.
Finally, in the `setup_models` function, one can enable high-precision computations in CCL, which increases accuracy at the cost of longer computation times. When this mode is activated, the overall agreement between CCL and NumCosmo improves significantly.

```{python}
# | code-fold: true

from numcosmo_py.ccl.nc_ccl import create_nc_obj

PARAMETERS_SET = [
    r"$\Lambda$CDM, flat",
    r"$\Lambda$CDM, flat, $1\nu$",
    r"XCDM, flat",
    r"XCDM, spherical, $2\nu$",
    r"XCDM, hyperbolic",
]
COLORS = plt.rcParams["axes.prop_cycle"].by_key()["color"][:5]


def setup_models(
    Omega_c: float = 0.25,  # Cold dark matter density
    Omega_b: float = 0.05,  # Baryonic matter density
    h: float = 0.7,  # Dimensionless Hubble constant
    sigma8: float = 0.9,  # Matter density contrast std. dev. (8 Mpc/h)
    n_s: float = 0.96,  # Scalar spectral index
    Neff: float = 3.046,  # Effective number of massless neutrinos
    high_precision: bool = False,  # Use high precision computations in CCL
    dist_z_max: float = 15.0,  # Maximum redshift for distance computations
):
    """Setup cosmological models."""
    Omega_v_vals = np.array([0.7, 0.7, 0.7, 0.65, 0.75])  # Dark energy density
    w0_vals = np.array([-1.0, -1.0, -0.9, -0.9, -0.9])  # DE equation of state w0
    wa_vals = np.array([0.0, 0.0, 0.1, 0.1, 0.1])  # DE equation of state wa

    # Neutrino masses (eV) for each model: [m1, m2, m3]
    mnu = np.array(
        [
            [0.0, 0.0, 0.0],
            [0.04, 0.0, 0.0],
            [0.0, 0.0, 0.0],
            [0.03, 0.02, 0.0],
            [0.0, 0.0, 0.0],
        ]
    )
    Omega_k_vals = [
        float(1.0 - Omega_c - Omega_b - Omega_v) for Omega_v in Omega_v_vals
    ]

    parameters = [
        ["$\\Omega_c$", "Cold Dark Matter Density", Omega_c],
        ["$\\Omega_b$", "Baryonic Matter Density", Omega_b],
        ["$\\Omega_v$", "Dark Energy Density", Omega_v_vals],
        ["$\\Omega_k$", "Curvature Density", [f"{v:.3f}" for v in Omega_k_vals]],
        ["$h$", "Hubble Constant (dimensionless)", h],
        ["$n_s$", "Scalar Spectral Index", n_s],
        ["$N_\\mathrm{eff}$", "Effective NÂº of Massless Neutrinos", Neff],
        ["$\\sigma_8$", "Matter Density Contrast Std. Dev. (8 Mpc/h)", sigma8],
        ["$w_0$", "DE Equation of State Parameter", w0_vals],
        ["$w_a$", "DE Equation of State Parameter", wa_vals],
        ["$m_\\nu$", "Neutrino Masses (eV)", [f"{m.tolist()}" for m in mnu]],
    ]
    models = []
    if high_precision:
        CCLParams.set_high_prec_params()

    for Omega_v, Omega_k, w0, wa, m in zip(
        Omega_v_vals, Omega_k_vals, w0_vals, wa_vals, mnu
    ):
        ccl_cosmo = pyccl.Cosmology(
            Omega_c=Omega_c,
            Omega_b=Omega_b,
            Neff=Neff,
            h=h,
            sigma8=sigma8,
            n_s=n_s,
            Omega_k=Omega_k,
            w0=w0,
            wa=wa,
            m_nu=m,
            transfer_function="eisenstein_hu",
        )
        cosmology = create_nc_obj(ccl_cosmo, dist_z_max=dist_z_max)
        models.append({"CCL": ccl_cosmo, "NC": cosmology})

    return parameters, models
```
