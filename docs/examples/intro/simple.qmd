---
title: "Simple Cosmological Distances Example"
author: "Sandro Dias Pinto Vitenti"
date: "2023-05-22"
---

{{< include ../../_definitions.qmd >}}

## Introduction

This example demonstrates how to compute cosmological distances using the `numcosmo`
library. In this example, we initialize the library, configure a cosmological model, and
compute comoving distances for a range of redshifts.

## Prerequisites

Before running this example, make sure the `numcosmo_py`[^numcosmo_py] package is installed in your
environment. If it is not already installed, follow the [installation instructions in
the NumCosmo documentation](https://numcosmo.readthedocs.io/en/latest/install.html). In
addition, we are using `numpy` and `matplotlib` for data manipulation and plotting.
If you are using the 
[conda installation](https://numcosmo.readthedocs.io/en/latest/install.html#mambaforge-development-environment), 
these packages are already installed.

## Import and Initialize

First, import the required modules and initialize the NumCosmo library. We also import
`numpy` and `matplotlib`. The `Nc` and `Ncm` modules provide the core functionality of 
the NumCosmo library. The call to `Ncm.cfg_init()` initializes the library objects.

```{python}
import numpy as np
import matplotlib.pyplot as plt

from numcosmo_py import Nc, Ncm

# Initialize the library objects
Ncm.cfg_init()
```

## Set Up the Cosmological Model

Create a homogeneous and isotropic cosmological model (`NcHICosmoDEXcdm`) with one
massive neutrino, and apply a reparameterization suitable for CMB-based parameters.

```{python}
# Initialize a cosmological model
cosmo = Nc.HICosmoDEXcdm(massnu_length=1)

# Set reparameterization
cosmo.set_reparam(Nc.HICosmoDEReparamCMB.new(cosmo.len()))
```

## Configure the Distance Calculator

Create a `Distance` object optimized for redshift calculations up to 2.0.

```{python}
# Initialize the distance calculator
dist = Nc.Distance.new(2.0)
```

## Set Cosmological Parameters

Assign values to the cosmological model parameters. The dictionary-based approach is
used below. This approach always uses the current parameterization. 

```{python}
# Set parameters using original parameterization
h = 0.70
cosmo["H0"] = 100.0 * h
cosmo["omegac"] = 0.25 * h**2
cosmo["omegab"] = 0.05 * h**2
cosmo["Omegak"] = 0.0
cosmo["Tgamma0"] = 2.72
cosmo["w"] = -1.10
cosmo["massnu_0"] = 0.06
```

Alternatively, you can use the property-based approach to set the parameters.
However, this approach always refers to the original parameterization.

```{python}
# Set parameters using object-oriented style
cosmo.props.H0 = 70.00
cosmo.props.Omegab = 0.04
cosmo.props.Omegac = 0.25
cosmo.props.Omegax = 0.70
cosmo.props.Tgamma0 = 2.72
cosmo.props.w = -1.10

# Set neutrino mass vector
massnu = Ncm.Vector.new_array([0.06])
cosmo.props.massnu = massnu
```

### Log and Prepare the Model

Log the parameter values and prepare the distance calculator for use. The calculator 
objects like `Distance` must be prepared before use.

```{python}
# Log all parameters
print("# Model parameters: ")
params = cosmo.param_names()

for param in params:
    print(f"{param} = {cosmo[param]}")

# Prepare the distance calculations
dist.prepare(cosmo)
```

## Compute and Display Distances

Calculate and display comoving distances for a range of redshifts.

```{python}
# Number of redshift steps
N = 20

# Comoving distance scaling factor
RH_Mpc = cosmo.RH_Mpc()

# Compute distances
z_array = np.linspace(0.0, 1.0, N)
Dc_array = np.array([dist.comoving(cosmo, z) for z in z_array])
dc_array = RH_Mpc * Dc_array / (1.0 + z_array)

# Print distances for redshift values
print("Redshift | Comoving Distance [c/H0] | Comoving Distance [Mpc]")
for z, Dc, dc in zip(z_array, Dc_array, dc_array):
    print(f"{z:10.8f} {Dc:22.15g} {dc:22.15g}")
```

### Plot the Results

You can plot the results using a plotting library such as `matplotlib`.

```{python}
# | label: fig:simple-comoving-distance
# | fig-cap: Comoving distance vs. redshift.
# | fig-cap-location: margin
# | fig-width: 100%
# | code-fold: true
plt.plot(z_array, dc_array)
plt.xlabel("Redshift")
plt.ylabel("Comoving Distance [Mpc]")
plt.title("Comoving Distance vs. Redshift")
plt.grid()
plt.show()
```

