<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <c:include name="numcosmo/numcosmo-math.h"/>
  <namespace name="NumCosmoMath"
             version="1.0"
             shared-library="/usr/local/lib/libnumcosmo.0.dylib"
             c:identifier-prefixes="Ncm"
             c:symbol-prefixes="ncm">
    <alias name="ModelID" c:type="NcmModelID">
      <type name="gint" c:type="gint"/>
    </alias>
    <class name="ABC"
           c:symbol-prefix="abc"
           c:type="NcmABC"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NcmABC"
           glib:get-type="ncm_abc_get_type"
           glib:type-struct="ABCClass">
      <function name="clear" c:identifier="ncm_abc_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="data_summary" invoker="data_summary">
        <doc xml:space="preserve">Calculates the data summary and stores internally.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">if the summary calculation was successful.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="distance_prob" invoker="distance_prob">
        <doc xml:space="preserve">Calculates the probability of the distance been accepted.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the probability of accepting the @distance.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
          <parameter name="distance" transfer-ownership="none">
            <doc xml:space="preserve">the distance</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_desc" invoker="get_desc">
        <doc xml:space="preserve">Gets the description of the current ABC implementation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the description of the ABC implementation.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="log_info" invoker="log_info">
        <doc xml:space="preserve">Gets the informations about the current run of ABC.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the informations about the current run.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="mock_distance" invoker="mock_distance">
        <doc xml:space="preserve">Calculates the distance of the new point given by @thetastar
given the old point @theta.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the distance to the new point @thetastar.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
          <parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="thetastar" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update_tkern" invoker="update_tkern">
        <doc xml:space="preserve">Updates the transition kernel present in @abc-&gt;tkern.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="data_summary" c:identifier="ncm_abc_data_summary">
        <doc xml:space="preserve">Calculates the data summary and stores internally.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">if the summary calculation was successful.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="distance_prob" c:identifier="ncm_abc_distance_prob">
        <doc xml:space="preserve">Calculates the probability of the distance been accepted.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the probability of accepting the @distance.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
          <parameter name="distance" transfer-ownership="none">
            <doc xml:space="preserve">the distance</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="end_run" c:identifier="ncm_abc_end_run">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="end_update" c:identifier="ncm_abc_end_update">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_abc_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_accept_ratio" c:identifier="ncm_abc_get_accept_ratio">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_depsilon" c:identifier="ncm_abc_get_depsilon">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_desc" c:identifier="ncm_abc_get_desc">
        <doc xml:space="preserve">Gets the description of the current ABC implementation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the description of the ABC implementation.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dist_quantile"
              c:identifier="ncm_abc_get_dist_quantile">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
          <parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_epsilon" c:identifier="ncm_abc_get_epsilon">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="log_info" c:identifier="ncm_abc_log_info">
        <doc xml:space="preserve">Gets the informations about the current run of ABC.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the informations about the current run.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mean_covar" c:identifier="ncm_abc_mean_covar">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
          <parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mock_distance" c:identifier="ncm_abc_mock_distance">
        <doc xml:space="preserve">Calculates the distance of the new point given by @thetastar
given the old point @theta.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the distance to the new point @thetastar.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
          <parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="thetastar" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="ncm_abc_reset">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="run" c:identifier="ncm_abc_run">
        <doc xml:space="preserve">Generates particlea until @n particles are accepted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
          <parameter name="nparticles" transfer-ownership="none">
            <doc xml:space="preserve">total number of particles to generate</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data_file" c:identifier="ncm_abc_set_data_file">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">a filename</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mtype" c:identifier="ncm_abc_set_mtype">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitRunMsgs</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nthreads" c:identifier="ncm_abc_set_nthreads">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
          <parameter name="nthreads" transfer-ownership="none">
            <doc xml:space="preserve">number of threads</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rng" c:identifier="ncm_abc_set_rng">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_trans_kern" c:identifier="ncm_abc_set_trans_kern">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
          <parameter name="tkern" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKern</doc>
            <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_run" c:identifier="ncm_abc_start_run">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="start_update" c:identifier="ncm_abc_start_update">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="ncm_abc_update">
        <doc xml:space="preserve">Runs the Monte Carlo until it reaches the @n-th realization. Note that
if the first_id is non-zero it will run @n - first_id realizations.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update_epsilon" c:identifier="ncm_abc_update_epsilon">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
          <parameter name="epsilon" transfer-ownership="none">
            <doc xml:space="preserve">new epsilon.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_tkern" c:identifier="ncm_abc_update_tkern">
        <doc xml:space="preserve">Updates the transition kernel present in @abc-&gt;tkern.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmABC</doc>
            <type name="ABC" c:type="NcmABC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="data-set"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Dataset"/>
      </property>
      <property name="epsilon"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="mset"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="MSet"/>
      </property>
      <property name="nparticles" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="prior"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="MSetTransKern"/>
      </property>
      <property name="trans-kernel" writable="1" transfer-ownership="none">
        <type name="MSetTransKern"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="mcat" readable="0" private="1">
        <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
      </field>
      <field name="dset" readable="0" private="1">
        <type name="Dataset" c:type="NcmDataset*"/>
      </field>
      <field name="dset_mock" readable="0" private="1">
        <type name="Dataset" c:type="NcmDataset*"/>
      </field>
      <field name="mp" readable="0" private="1">
        <type name="MemoryPool" c:type="NcmMemoryPool*"/>
      </field>
      <field name="prior" readable="0" private="1">
        <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
      </field>
      <field name="tkern" readable="0" private="1">
        <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
      </field>
      <field name="nt" readable="0" private="1">
        <type name="Timer" c:type="NcmTimer*"/>
      </field>
      <field name="ser" readable="0" private="1">
        <type name="Serialize" c:type="NcmSerialize*"/>
      </field>
      <field name="mtype" readable="0" private="1">
        <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
      </field>
      <field name="theta" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="thetastar" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="covar" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="weights" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="weights_tm1" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="pchoice" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="dists" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="epsilon" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="depsilon" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="dists_sorted" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="wran" introspectable="0" readable="0" private="1">
        <type c:type="gsl_ran_discrete_t*"/>
      </field>
      <field name="started" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="started_up" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="cur_sample_id" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="ntotal" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="naccepted" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="nthreads" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="nupdates" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="n" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="nparticles" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="ABCClass"
            c:type="NcmABCClass"
            glib:is-gtype-struct-for="ABC">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="data_summary">
        <callback name="data_summary">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">if the summary calculation was successful.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="abc" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmABC</doc>
              <type name="ABC" c:type="NcmABC*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="mock_distance">
        <callback name="mock_distance">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the distance to the new point @thetastar.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="abc" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmABC</doc>
              <type name="ABC" c:type="NcmABC*"/>
            </parameter>
            <parameter name="dset" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmDataset</doc>
              <type name="Dataset" c:type="NcmDataset*"/>
            </parameter>
            <parameter name="theta" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmVector</doc>
              <type name="Vector" c:type="NcmVector*"/>
            </parameter>
            <parameter name="thetastar" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmVector</doc>
              <type name="Vector" c:type="NcmVector*"/>
            </parameter>
            <parameter name="rng" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmRNG</doc>
              <type name="RNG" c:type="NcmRNG*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="distance_prob">
        <callback name="distance_prob">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the probability of accepting the @distance.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="abc" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmABC</doc>
              <type name="ABC" c:type="NcmABC*"/>
            </parameter>
            <parameter name="distance" transfer-ownership="none">
              <doc xml:space="preserve">the distance</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_tkern">
        <callback name="update_tkern">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="abc" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmABC</doc>
              <type name="ABC" c:type="NcmABC*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_desc">
        <callback name="get_desc">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the description of the ABC implementation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="abc" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmABC</doc>
              <type name="ABC" c:type="NcmABC*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="log_info">
        <callback name="log_info">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the informations about the current run.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="abc" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmABC</doc>
              <type name="ABC" c:type="NcmABC*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <constant name="ABC_MIN_SYNC_INTERVAL"
              value="10.000000"
              c:type="NCM_ABC_MIN_SYNC_INTERVAL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="BOOTSTRAP_RNG_NAME"
              value="bootstrap"
              c:type="NCM_BOOTSTRAP_RNG_NAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <record name="BinSplit" c:type="NcmBinSplit">
      <doc xml:space="preserve">FIXME</doc>
      <field name="userdata" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="n1" readable="0" private="1">
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="n2" readable="0" private="1">
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="P" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="Q" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="B" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="T" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="temp1" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="temp2" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="temp3" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="temp4" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="bs" readable="0" private="1">
        <array zero-terminated="0" c:type="NcmBinSplit" fixed-size="2">
          <type name="BinSplit" c:type="NcmBinSplit*"/>
        </array>
      </field>
    </record>
    <callback name="BinSplitEval" c:type="NcmBinSplitEval">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="bs" transfer-ownership="none">
          <type name="BinSplit" c:type="NcmBinSplit*"/>
        </parameter>
        <parameter name="n1" transfer-ownership="none">
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="n2" transfer-ownership="none">
          <type name="gulong" c:type="gulong"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Bootstrap"
           c:symbol-prefix="bootstrap"
           c:type="NcmBootstrap"
           parent="GObject.Object"
           glib:type-name="NcmBootstrap"
           glib:get-type="ncm_bootstrap_get_type"
           glib:type-struct="BootstrapClass">
      <constructor name="full_new" c:identifier="ncm_bootstrap_full_new">
        <doc xml:space="preserve">Creates a new #NcmBootstrap object for a sample of size @fsize. This object
will sample with replacement all indexes @bsize times.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmBootstrap.</doc>
          <type name="Bootstrap" c:type="NcmBootstrap*"/>
        </return-value>
        <parameters>
          <parameter name="fsize" transfer-ownership="none">
            <doc xml:space="preserve">sample size.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="bsize" transfer-ownership="none">
            <doc xml:space="preserve">bootstrap size.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new" c:identifier="ncm_bootstrap_new">
        <doc xml:space="preserve">Creates a new zero sized #NcmBootstrap object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmBootstrap.</doc>
          <type name="Bootstrap" c:type="NcmBootstrap*"/>
        </return-value>
      </constructor>
      <constructor name="sized_new" c:identifier="ncm_bootstrap_sized_new">
        <doc xml:space="preserve">Creates a new #NcmBootstrap object for a sample of size @fsize. This object
will sample with replacement all indexes @fsize times.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmBootstrap.</doc>
          <type name="Bootstrap" c:type="NcmBootstrap*"/>
        </return-value>
        <parameters>
          <parameter name="fsize" transfer-ownership="none">
            <doc xml:space="preserve">sample size.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_bootstrap_clear">
        <doc xml:space="preserve">Decreases the reference count of *@bstrap by one and sets *@bstrap tp NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bstrap" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmBootstrap.</doc>
            <type name="Bootstrap" c:type="NcmBootstrap**"/>
          </parameter>
        </parameters>
      </function>
      <method name="free" c:identifier="ncm_bootstrap_free">
        <doc xml:space="preserve">Decreases the reference count of @bstrap by one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bstrap" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmBootstrap.</doc>
            <type name="Bootstrap" c:type="NcmBootstrap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="ncm_bootstrap_get">
        <doc xml:space="preserve">Gets the index associated with the @i-th resampled index.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the @i-th resampled index.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="bstrap" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmBootstrap.</doc>
            <type name="Bootstrap" c:type="NcmBootstrap*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">index in [0, #NcmBootstrap:bootstrap-size - 1].</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_bsize" c:identifier="ncm_bootstrap_get_bsize">
        <doc xml:space="preserve">Gets the bootstrap size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the bootstrap size.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="bstrap" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmBootstrap.</doc>
            <type name="Bootstrap" c:type="NcmBootstrap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fsize" c:identifier="ncm_bootstrap_get_fsize">
        <doc xml:space="preserve">Gets the full sample size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the full sample size.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="bstrap" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmBootstrap.</doc>
            <type name="Bootstrap" c:type="NcmBootstrap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_init" c:identifier="ncm_bootstrap_is_init">
        <doc xml:space="preserve">Checks if the bootstrap object was initialized (remix or resample).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether @bstrap is initialized.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bstrap" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmBootstrap.</doc>
            <type name="Bootstrap" c:type="NcmBootstrap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_bootstrap_ref">
        <doc xml:space="preserve">Incresases the reference count of @bstrap by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmBootstrap.</doc>
          <type name="Bootstrap" c:type="NcmBootstrap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bstrap" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmBootstrap.</doc>
            <type name="Bootstrap" c:type="NcmBootstrap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remix" c:identifier="ncm_bootstrap_remix">
        <doc xml:space="preserve">Sample without replacement #NcmBootstrap:bootstrap-size from the
#NcmBootstrap:full-size indexes. Note that in this case
#NcmBootstrap:bootstrap-size must be equal or smaller than
#NcmBootstrap:full-size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bstrap" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmBootstrap.</doc>
            <type name="Bootstrap" c:type="NcmBootstrap*"/>
          </instance-parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <method name="resample" c:identifier="ncm_bootstrap_resample">
        <doc xml:space="preserve">Sample with replacement #NcmBootstrap:bootstrap-size from the
#NcmBootstrap:full-size indexes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bstrap" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmBootstrap.</doc>
            <type name="Bootstrap" c:type="NcmBootstrap*"/>
          </instance-parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bsize" c:identifier="ncm_bootstrap_set_bsize">
        <doc xml:space="preserve">Sets the bootstrap size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bstrap" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmBootstrap.</doc>
            <type name="Bootstrap" c:type="NcmBootstrap*"/>
          </instance-parameter>
          <parameter name="bsize" transfer-ownership="none">
            <doc xml:space="preserve">bootstrap size.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fsize" c:identifier="ncm_bootstrap_set_fsize">
        <doc xml:space="preserve">Sets the full sample size, it also sets the bsize to the same value @fsize.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bstrap" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmBootstrap.</doc>
            <type name="Bootstrap" c:type="NcmBootstrap*"/>
          </instance-parameter>
          <parameter name="fsize" transfer-ownership="none">
            <doc xml:space="preserve">full sample size.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="bootstrap-size"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="full-size"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="init" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="realization" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="fsize" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="bsize" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="bootstrap_index" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="increasing_index" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="init" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="BootstrapClass"
            c:type="NcmBootstrapClass"
            glib:is-gtype-struct-for="Bootstrap">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="C"
           c:symbol-prefix="c"
           c:type="NcmC"
           parent="GObject.Object"
           glib:type-name="NcmC"
           glib:get-type="ncm_c_get_type"
           glib:type-struct="CClass">
      <function name="2_pi_2" c:identifier="ncm_c_2_pi_2" introspectable="0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$2\pi^2$.</doc>
          <type name="long double" c:type="long double"/>
        </return-value>
      </function>
      <function name="AR" c:identifier="ncm_c_AR">
        <doc xml:space="preserve">Derived from CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Radiation constant AR.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="G" c:identifier="ncm_c_G">
        <doc xml:space="preserve">Using CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Newton's (or gravitational) constant $\mathrm{G} = 6.67408 \times 10^{-11} \,\left[\mathrm{m}^3\,\mathrm{kg}^{-1}\,\mathrm{s}^{-2}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="G_mass_solar" c:identifier="ncm_c_G_mass_solar">
        <doc xml:space="preserve">Using IAU 2015 recommendation see [description][NcmC.description].

IAU recomends the use of a fixed value for the gravitational constant
times the solar mass.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">One solar mass times the gravitational constant $(\mathcal{GM})_\odot = 1.3271244 \times 10^{20} \,\left[\mathrm{m}^3\,\mathrm{s}^{-2}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="Glightyear_Mpc" c:identifier="ncm_c_Glightyear_Mpc">
        <doc xml:space="preserve">One giga light-year in mega parsecs.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$1$ giga light-year $10^6 \times 365.25 \times 24 \times 60 \times 60 \times c \,\left[\mathrm{Mpc}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_Lyman_wl3_8pi_2p_2P0_5"
                c:identifier="ncm_c_HI_Lyman_wl3_8pi_2p_2P0_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Effective volume of the Lyman wavelength $V^\mathrm{Ly}_{2p\,{}^2\\!P_{1/2}} = \left(\lambda_{2p\,{}^2\\!P_{1/2}}^\mathrm{Ly}\right)^{3} / (8\pi)$,
see ncm_c_HI_Lyman_wl_2p_2P0_5().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Effective volume $V^\mathrm{Ly}_{2p\,{}^2\\!P_{1/2}} \,\left[\mathrm{m}^3\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_Lyman_wl3_8pi_2p_2P3_5"
                c:identifier="ncm_c_HI_Lyman_wl3_8pi_2p_2P3_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Effective volume of the Lyman wavelength $V^\mathrm{Ly}_{2p\,{}^2\\!P_{3/2}} = \left(\lambda_{2p\,{}^2\\!P_{3/2}}^\mathrm{Ly}\right)^{3} / (8\pi)$,
see ncm_c_HI_Lyman_wl_2p_2P3_5().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Effective volume $V^\mathrm{Ly}_{2p\,{}^2\\!P_{3/2}} \,\left[\mathrm{m}^3\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_Lyman_wl3_8pi_2p_2Pmean"
                c:identifier="ncm_c_HI_Lyman_wl3_8pi_2p_2Pmean">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Effective volume of the Lyman wavelength $V^\mathrm{Ly}_{2p\,{}^2\\!P_\mathrm{mean}} = \left(\lambda_{2p\,{}^2\\!P_\mathrm{mean}}^\mathrm{Ly}\right)^{3} / (8\pi)$,
see ncm_c_HI_Lyman_wl_2p_2Pmean().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Effective volume $V^\mathrm{Ly}_{2p\,{}^2\\!P_\mathrm{mean}} \,\left[\mathrm{m}^3\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_Lyman_wl3_8pi_2s_2S0_5"
                c:identifier="ncm_c_HI_Lyman_wl3_8pi_2s_2S0_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Effective volume of the Lyman wavelength $V^\mathrm{Ly}_{2s\,{}^2\\!S_{1/2}} = \left(\lambda_{2s\,{}^2\\!S_{1/2}}^\mathrm{Ly}\right)^{3} / (8\pi)$,
see ncm_c_HI_Lyman_wl_2s_2S0_5().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Effective volume $V^\mathrm{Ly}_{2s\,{}^2\\!S_{1/2}} \,\left[\mathrm{m}^3\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_Lyman_wl_2p_2P0_5"
                c:identifier="ncm_c_HI_Lyman_wl_2p_2P0_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Wavelength for the $2p\,{}^2\\!P_{1/2} \to 1s\,{}^2\\!S_{1/2}$ transition
$\lambda_{2p\,{}^2\\!P_{1/2}}^\mathrm{Ly} = \left(k_{2p\,{}^2\\!P_{1/2}}^\mathrm{Ly}\right)^{-1}$,
see ncm_c_HI_Lyman_wn_2p_2P0_5().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Wavelength for the $2p\,{}^2\\!P_{1/2} \to 1s\,{}^2\\!S_{1/2}$ transition, $\lambda_{2p\,{}^2\\!P_{1/2}}^\mathrm{Ly} \,\left[\mathrm{m}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_Lyman_wl_2p_2P3_5"
                c:identifier="ncm_c_HI_Lyman_wl_2p_2P3_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Wavelength for the $2p\,{}^2\\!P_{3/2} \to 1s\,{}^2\\!S_{1/2}$ transition
$\lambda_{2p\,{}^2\\!P_{3/2}}^\mathrm{Ly} = \left(k_{2p\,{}^2\\!P_{3/2}}^\mathrm{Ly}\right)^{-1}$,
see ncm_c_HI_Lyman_wn_2p_2P3_5().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Wavelength for the $2p\,{}^2\\!P_{3/2} \to 1s\,{}^2\\!S_{1/2}$ transition, $\lambda_{2p\,{}^2\\!P_{3/2}}^\mathrm{Ly} \,\left[\mathrm{m}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_Lyman_wl_2p_2Pmean"
                c:identifier="ncm_c_HI_Lyman_wl_2p_2Pmean">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Wavelength for the $2p\,{}^2\\!P_\mathrm{mean} \to 1s\,{}^2\\!S_{1/2}$ transition
$\lambda_{2p\,{}^2\\!P_\mathrm{mean}}^\mathrm{Ly} = \left(k_{2p\,{}^2\\!P_\mathrm{mean}}^\mathrm{Ly}\right)^{-1}$,
see ncm_c_HI_Lyman_wn_2p_2Pmean().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Wavelength for the $2p\,{}^2\\!P_\mathrm{mean} \to 1s\,{}^2\\!S_{1/2}$ transition, $\lambda_{2p\,{}^2\\!P_\mathrm{mean}}^\mathrm{Ly} \,\left[\mathrm{m}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_Lyman_wl_2s_2S0_5"
                c:identifier="ncm_c_HI_Lyman_wl_2s_2S0_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Wavelength for the $2s\,{}^2\\!S_{1/2} \to 1s\,{}^2\\!S_{1/2}$ transition
$\lambda_{2s\,{}^2\\!S_{1/2}}^\mathrm{Ly} = \left(k_{2s\,{}^2\\!S_{1/2}}^\mathrm{Ly}\right)^{-1}$,
see ncm_c_HI_Lyman_wn_2s_2S0_5().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Wavelength for the $2s\,{}^2\\!S_{1/2} \to 1s\,{}^2\\!S_{1/2}$ transition, $\lambda_{2s\,{}^2\\!S_{1/2}}^\mathrm{Ly} \,\left[\mathrm{m}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_Lyman_wn_2p_2P0_5"
                c:identifier="ncm_c_HI_Lyman_wn_2p_2P0_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Lyman emission wavenumber for the $2p\,{}^2\\!P_{1/2} \to 1s\,{}^2\\!S_{1/2}$ transition $k_{2p\,{}^2\\!P_{1/2}}^\mathrm{Ly}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$k_{2p\,{}^2\\!P_{1/2}}^\mathrm{Ly} = 8.22589191133 \times 10^6 \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_Lyman_wn_2p_2P3_5"
                c:identifier="ncm_c_HI_Lyman_wn_2p_2P3_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Lyman emission wavenumber for the $2p\,{}^2\\!P_{3/2} \to 1s\,{}^2\\!S_{1/2}$ transition $k_{2p\,{}^2\\!P_{3/2}}^\mathrm{Ly}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$k_{2p\,{}^2\\!P_{3/2}}^\mathrm{Ly} = 8.22592850014 \times 10^6 \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_Lyman_wn_2p_2Pmean"
                c:identifier="ncm_c_HI_Lyman_wn_2p_2Pmean">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Mean Lyman emission wavenumber for the $2p\,{}^2\\!P_{1/2}$ and $2p\,{}^2\\!P_{3/2}$
states, $k_{2p\,{}^2\\!P_{mean}^\mathrm{Ly}} = (k_{2p\,{}^2\\!P_{1/2}}^\mathrm{Ly} + k_{2p\,{}^2\\!P_{3/2}}^\mathrm{Ly}) / 2$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$k_{2p\,{}^2\\!P_{mean}}^\mathrm{Ly} \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_Lyman_wn_2s_2S0_5"
                c:identifier="ncm_c_HI_Lyman_wn_2s_2S0_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Lyman emission wavenumber for the $2s\,{}^2\\!S_{1/2} \to 1s\,{}^2\\!S_{1/2}$ transition $k_{2s\,{}^2\\!S_{1/2}}^\mathrm{Ly}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$k_{2s\,{}^2\\!S_{1/2}}^\mathrm{Ly} = 8.22589543992821 \times 10^6 \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_ion_E_1s_2S0_5"
                c:identifier="ncm_c_HI_ion_E_1s_2S0_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy calculated from the wavenumber $k_{1s\,{}^2\\!S_{1/2}}$,
see ncm_c_HI_ion_wn_1s_2S0_5().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Hydrogen $1s\,{}^2\\!S_{1/2}$ ionization energy, $E_{1s\,{}^2\\!S_{1/2}} = hc\times{}k_{1s\,{}^2\\!S_{1/2}} \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_ion_E_2p_2P0_5"
                c:identifier="ncm_c_HI_ion_E_2p_2P0_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy calculated from the wavenumber $k_{2p\,{}^2\\!P_{1/2}}$,
see ncm_c_HI_ion_wn_2p_2P0_5().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Hydrogen $2p\,{}^2\\!P_{1/2}$ ionization energy, $E_{2p\,{}^2\\!P_{1/2}} = hc\times{}k_{2p\,{}^2\\!P_{1/2}} \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_ion_E_2p_2P3_5"
                c:identifier="ncm_c_HI_ion_E_2p_2P3_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy calculated from the wavenumber $k_{2p\,{}^2\\!P_{3/2}}$,
see ncm_c_HI_ion_wn_2p_2P3_5().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Hydrogen $2p\,{}^2\\!P_{3/2}$ ionization energy, $E_{2p\,{}^2\\!P_{3/2}} = hc\times{}k_{2p\,{}^2\\!P_{3/2}} \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_ion_E_2p_2Pmean"
                c:identifier="ncm_c_HI_ion_E_2p_2Pmean">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy calculated from the wavenumber $k_{2p\,{}^2\\!P_\mathrm{mean}}$,
see ncm_c_HI_ion_wn_2p_2Pmean().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Hydrogen $2p\,{}^2\\!P_\mathrm{mean}$ ionization energy, $E_{2p\,{}^2\\!P_\mathrm{mean}} = hc\times{}k_{2p\,{}^2\\!P_\mathrm{mean}} \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_ion_E_2s_2S0_5"
                c:identifier="ncm_c_HI_ion_E_2s_2S0_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy calculated from the wavenumber $k_{2s\,{}^2\\!S_{1/2}}$,
see ncm_c_HI_ion_wn_2s_2S0_5().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Hydrogen $2s\,{}^2\\!S_{1/2}$ ionization energy, $E_{2s\,{}^2\\!S_{1/2}} = hc\times{}k_{2s\,{}^2\\!S_{1/2}} \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_ion_wn_1s_2S0_5"
                c:identifier="ncm_c_HI_ion_wn_1s_2S0_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy wavenumber for H-I $1s\,{}^2\\!S_{1/2}$ state, i.e., $k_{1s\,{}^2\\!S_{1/2}}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Hydrogen $1s\,{}^2\\!S_{1/2}$ ionization energy wavelength, $k_{1s\,{}^2\\!S_{1/2}} = 1.0967877174307 \times 10^{7} \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_ion_wn_2p_2P0_5"
                c:identifier="ncm_c_HI_ion_wn_2p_2P0_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy wavenumber for H-I $2p\,{}^2\\!P_{1/2}$ state calculated
from the difference between the first state and the corresponding Lyman
wavenumber, i.e., $k_{2p\,{}^2\\!P_{1/2}} = k_{1s\,{}^2\\!S_{1/2}} - k_{2p\,{}^2\\!P_{1/2}}^\mathrm{Ly}$,
see ncm_c_HI_Lyman_wn_2p_2P0_5().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Hydrogen $2p\,{}^2\\!P_{1/2}$ ionization energy wavelength, $k_{2p\,{}^2\\!P_{1/2}} \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_ion_wn_2p_2P3_5"
                c:identifier="ncm_c_HI_ion_wn_2p_2P3_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy wavenumber for H-I $2p\,{}^2\\!P_{3/2}$ state calculated
from the difference between the first state and the corresponding Lyman
wavenumber, i.e., $k_{2p\,{}^2\\!P_{3/2}} = k_{1s\,{}^2\\!S_{3/2}} - k_{2p\,{}^2\\!P_{3/2}}^\mathrm{Ly}$,
see ncm_c_HI_Lyman_wn_2p_2P3_5().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Hydrogen $2p\,{}^2\\!P_{3/2}$ ionization energy wavelength, $k_{2p\,{}^2\\!P_{3/2}} \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_ion_wn_2p_2Pmean"
                c:identifier="ncm_c_HI_ion_wn_2p_2Pmean">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

The mean ionization energy wavenumber for H-I $2p\,{}^2\\!P_{1/2}$ and
$2p\,{}^2\\!P_{3/2}$ states , i.e., $k_{2p\,{}^2\\!P_\mathrm{mean}} = (k_{2p\,{}^2\\!P_{1/2}} + k_{2p\,{}^2\\!P_{3/2}}) / 2$,
see ncm_c_HI_Lyman_wn_2p_2Pmean().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Hydrogen states $2p\,{}^2\\!P_{1/2}$ and $2p\,{}^2\\!P_{3/2}$ mean ionization energy wavelength, $k_{2p\,{}^2\\!P_\mathrm{mean}} \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HI_ion_wn_2s_2S0_5"
                c:identifier="ncm_c_HI_ion_wn_2s_2S0_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy wavenumber for H-I $2s\,{}^2\\!S_{1/2}$ state calculated
from the difference between the first state and the corresponding Lyman
wavenumber, i.e., $k_{2s\,{}^2\\!S_{1/2}} = k_{1s\,{}^2\\!S_{1/2}} - k_{2s\,{}^2\\!S_{1/2}}^\mathrm{Ly}$,
see ncm_c_HI_Lyman_wn_2s_2S0_5().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Hydrogen $2s\,{}^2\\!S_{1/2}$ ionization energy wavelength, $k_{2s\,{}^2\\!S_{1/2}} \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="H_bind" c:identifier="ncm_c_H_bind">
        <doc xml:space="preserve">Energy difference from unbounded state to state $(n,\,j)$, i.e., minus the
binding energy of the state $(n,\,j)$, calculated from
\begin{equation}
E^\mathrm{H}_{n,j} = m_\mathrm{e}c^2\left[1 - f(n,j)\right],
\end{equation}
where
\begin{align}
f(n, j)   &amp;= \left[1+\left(\frac{\alpha}{n - \delta(j)}\right)^2\right]^{-\frac{1}{2}}, \\\\
\delta(j) &amp;= j+\frac{1}{2} + \sqrt{\left(j+1/2\right)^2 - \alpha^2}.
\end{align}</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Hydrogen binding energy $E^\mathrm{H}_{n,j}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">Principal quantum number</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="j" transfer-ownership="none">
            <doc xml:space="preserve">Total angular momentum</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="H_reduced_energy" c:identifier="ncm_c_H_reduced_energy">
        <doc xml:space="preserve">Reduced mass times $c^2$, $m_\mathrm{r}c^2$, see ncm_c_H_reduced_mass().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$m_\mathrm{r}c^2 \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="H_reduced_mass" c:identifier="ncm_c_H_reduced_mass">
        <doc xml:space="preserve">Derived from CODATA values, see [description][NcmC.description].

Reduced mass for the electron in Hydrogen binding energy calculation, i.e.,
$m_\mathrm{r} = m_\mathrm{e} / (1 + m_\mathrm{e}/m_\mathrm{p})$</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Electron reduced mass $m_\mathrm{r} \,\left[\mathrm{kg}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeII_ion_E_1s_2S0_5"
                c:identifier="ncm_c_HeII_ion_E_1s_2S0_5">
        <doc xml:space="preserve">Ionization energy for He-II $1s\,{}^2\\!S_{1/2}$ state, i.e., $E_{1s\,{}^2\\!S_{1/2}} = hc \times k_{1s\,{}^2\\!S_{1/2}}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-II $1s\,{}^2\\!S_{1/2}$ ionization energy $E_{1s\,{}^2\\!S_{1/2}} \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeII_ion_wn_1s_2S0_5"
                c:identifier="ncm_c_HeII_ion_wn_1s_2S0_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy wavenumber for He-II $1s\,{}^2\\!S_{1/2}$ state, i.e., $k_{1s\,{}^2\\!S_{1/2}}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-II $1s\,{}^2\\!S_{1/2}$ ionization energy wavelength, $k_{1s\,{}^2\\!S_{1/2}} = 1.0967877174307 \times 10^{7} \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Balmer_E_kb_2p_1P1_2s_1S0"
                c:identifier="ncm_c_HeI_Balmer_E_kb_2p_1P1_2s_1S0">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Balmer emission energy $E_{2p\,{}^1\\!P_{1}}^{2s\,{}^1\\!S_{0}} = hc\times{}k_{2p\,{}^1\\!P_{1}}^{2s\,{}^1\\!S_{0}}$
over $k_\mathrm{B}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$E_{2p\,{}^1\\!P_{1}}^{2s\,{}^1\\!S_{0}} / k_\mathrm{B}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Balmer_E_kb_2p_3Pmean_2s_3S1"
                c:identifier="ncm_c_HeI_Balmer_E_kb_2p_3Pmean_2s_3S1">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Balmer emission energy $E_{2p\,{}^3\\!P_\mathrm{mean}}^{2s\,{}^3\\!S_{1}} = hc\times{}k_{2p\,{}^3\\!P_\mathrm{mean}}^{2s\,{}^3\\!S_{1}}$
over $k_\mathrm{B}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$E_{2p\,{}^3\\!P_\mathrm{mean}}^{2s\,{}^3\\!S_{1}} / k_\mathrm{B}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Balmer_wn_2p_1P1_2s_1S0"
                c:identifier="ncm_c_HeI_Balmer_wn_2p_1P1_2s_1S0">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Balmer emission wavenumber for the $2p\,{}^1\\!P_{1} \to 2s\,{}^1\\!S_{0}$ transition $k_{2p\,{}^1\\!P_{1}}^{2s\,{}^1\\!S_{0}}$,
calculated from the difference between the Lyman lines $2s\,{}^1\\!S_{0}$ state and the
corresponding Lyman wavenumber, i.e.,
$k_{2p\,{}^1\\!P_{1}}^{2s\,{}^1\\!S_{0}} = k_{2p\,{}^1\\!P_{1}}^\mathrm{Ly} - k_{2s\,{}^1\\!S_{0}}^\mathrm{Ly}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$k_{2p\,{}^1\\!P_{1}}^{2s\,{}^1\\!S_{0}} \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Balmer_wn_2p_3Pmean_2s_3S1"
                c:identifier="ncm_c_HeI_Balmer_wn_2p_3Pmean_2s_3S1">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Balmer emission wavenumber for the $2p\,{}^3\\!P_\mathrm{mean} \to 2s\,{}^3\\!S_{1}$ transition $k_{2p\,{}^3\\!P_\mathrm{mean}}^{2s\,{}^3\\!S_{1}}$,
calculated from the difference between the Lyman lines $2s\,{}^1\\!S_{0}$ state and the
corresponding Lyman wavenumber, i.e.,
$k_{2p\,{}^3\\!P_\mathrm{mean}}^{2s\,{}^3\\!S_{1}} = k_{2p\,{}^3\\!P_\mathrm{mean}}^\mathrm{Ly} - k_{2s\,{}^3\\!S_{1}}^\mathrm{Ly}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$k_{2p\,{}^3\\!P_\mathrm{mean}}^{2s\,{}^3\\!S_{1}} \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wl3_8pi_2p_1P1"
                c:identifier="ncm_c_HeI_Lyman_wl3_8pi_2p_1P1">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Effective volume of the Lyman wavelength $V^\mathrm{Ly}_{2p\,{}^1\\!P_{1}} = \left(\lambda_{2p\,{}^1\\!P_{1}}^\mathrm{Ly}\right)^{3} / (8\pi)$,
see ncm_c_HeI_Lyman_wl_2p_1P1().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Effective volume $V^\mathrm{Ly}_{2p\,{}^1\\!P_{1}} \,\left[\mathrm{m}^3\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wl3_8pi_2p_3P0"
                c:identifier="ncm_c_HeI_Lyman_wl3_8pi_2p_3P0">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Effective volume of the Lyman wavelength $V^\mathrm{Ly}_{2p\,{}^3\\!P_{0}} = \left(\lambda_{2p\,{}^3\\!P_{0}}^\mathrm{Ly}\right)^{3} / (8\pi)$,
see ncm_c_HeI_Lyman_wl_2p_3P0().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Effective volume $V^\mathrm{Ly}_{2p\,{}^3\\!P_{0}} \,\left[\mathrm{m}^3\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wl3_8pi_2p_3P1"
                c:identifier="ncm_c_HeI_Lyman_wl3_8pi_2p_3P1">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Effective volume of the Lyman wavelength $V^\mathrm{Ly}_{2p\,{}^3\\!P_{1}} = \left(\lambda_{2p\,{}^3\\!P_{1}}^\mathrm{Ly}\right)^{3} / (8\pi)$,
see ncm_c_HeI_Lyman_wl_2p_3P1().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Effective volume $V^\mathrm{Ly}_{2p\,{}^3\\!P_{1}} \,\left[\mathrm{m}^3\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wl3_8pi_2p_3P2"
                c:identifier="ncm_c_HeI_Lyman_wl3_8pi_2p_3P2">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Effective volume of the Lyman wavelength $V^\mathrm{Ly}_{2p\,{}^3\\!P_{2}} = \left(\lambda_{2p\,{}^3\\!P_{2}}^\mathrm{Ly}\right)^{3} / (8\pi)$,
see ncm_c_HeI_Lyman_wl_2p_3P2().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Effective volume $V^\mathrm{Ly}_{2p\,{}^3\\!P_{2}} \,\left[\mathrm{m}^3\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wl3_8pi_2p_3Pmean"
                c:identifier="ncm_c_HeI_Lyman_wl3_8pi_2p_3Pmean">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Effective volume of the Lyman wavelength $V^\mathrm{Ly}_{2p\,{}^3\\!P_\mathrm{mean}} = \left(\lambda_{2p\,{}^3\\!P_\mathrm{mean}}^\mathrm{Ly}\right)^{3} / (8\pi)$,
see ncm_c_HeI_Lyman_wl_2p_3Pmean().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Effective volume $V^\mathrm{Ly}_{2p\,{}^3\\!P_\mathrm{mean}} \,\left[\mathrm{m}^3\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wl3_8pi_2s_1S0"
                c:identifier="ncm_c_HeI_Lyman_wl3_8pi_2s_1S0">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Effective volume of the Lyman wavelength $V^\mathrm{Ly}_{2s\,{}^1\\!S_{0}} = \left(\lambda_{2s\,{}^1\\!S_{0}}^\mathrm{Ly}\right)^{3} / (8\pi)$,
see ncm_c_HeI_Lyman_wl_2s_1S0().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Effective volume $V^\mathrm{Ly}_{2s\,{}^1\\!S_{0}} \,\left[\mathrm{m}^3\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wl3_8pi_2s_3S1"
                c:identifier="ncm_c_HeI_Lyman_wl3_8pi_2s_3S1">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Effective volume of the Lyman wavelength $V^\mathrm{Ly}_{2s\,{}^3\\!S_{1}} = \left(\lambda_{2s\,{}^3\\!S_{1}}^\mathrm{Ly}\right)^{3} / (8\pi)$,
see ncm_c_HeI_Lyman_wl_2s_3S1().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Effective volume $V^\mathrm{Ly}_{2s\,{}^3\\!S_{1}} \,\left[\mathrm{m}^3\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wl_2p_1P1"
                c:identifier="ncm_c_HeI_Lyman_wl_2p_1P1">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Wavelength for the $2p\,{}^1\\!P_{1} \to 1s\,{}^1\\!S_{0}$ transition
$\lambda_{2p\,{}^1\\!P_{1}}^\mathrm{Ly} = \left(k_{2p\,{}^1\\!P_{1}}^\mathrm{Ly}\right)^{-1}$,
see ncm_c_HeI_Lyman_wn_2p_1P1().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Wavelength for the $2p\,{}^1\\!P_{1} \to 1s\,{}^1\\!S_{0}$ transition, $\lambda_{2p\,{}^1\\!P_{1}}^\mathrm{Ly} \,\left[\mathrm{m}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wl_2p_3P0"
                c:identifier="ncm_c_HeI_Lyman_wl_2p_3P0">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Wavelength for the $2p\,{}^3\\!P_{0} \to 1s\,{}^1\\!S_{0}$ transition
$\lambda_{2p\,{}^3\\!P_{0}}^\mathrm{Ly} = \left(k_{2p\,{}^3\\!P_{0}}^\mathrm{Ly}\right)^{-1}$,
see ncm_c_HeI_Lyman_wn_2p_3P0().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Wavelength for the $2p\,{}^3\\!P_{0} \to 1s\,{}^1\\!S_{0}$ transition, $\lambda_{2p\,{}^3\\!P_{0}}^\mathrm{Ly} \,\left[\mathrm{m}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wl_2p_3P1"
                c:identifier="ncm_c_HeI_Lyman_wl_2p_3P1">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Wavelength for the $2p\,{}^3\\!P_{1} \to 1s\,{}^1\\!S_{0}$ transition
$\lambda_{2p\,{}^3\\!P_{1}}^\mathrm{Ly} = \left(k_{2p\,{}^3\\!P_{1}}^\mathrm{Ly}\right)^{-1}$,
see ncm_c_HeI_Lyman_wn_2p_3P1().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Wavelength for the $2p\,{}^3\\!P_{1} \to 1s\,{}^1\\!S_{0}$ transition, $\lambda_{2p\,{}^3\\!P_{1}}^\mathrm{Ly} \,\left[\mathrm{m}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wl_2p_3P2"
                c:identifier="ncm_c_HeI_Lyman_wl_2p_3P2">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Wavelength for the $2p\,{}^3\\!P_{2} \to 1s\,{}^1\\!S_{0}$ transition
$\lambda_{2p\,{}^3\\!P_{2}}^\mathrm{Ly} = \left(k_{2p\,{}^3\\!P_{2}}^\mathrm{Ly}\right)^{-1}$,
see ncm_c_HeI_Lyman_wn_2p_3P2().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Wavelength for the $2p\,{}^3\\!P_{2} \to 1s\,{}^1\\!S_{0}$ transition, $\lambda_{2p\,{}^3\\!P_{2}}^\mathrm{Ly} \,\left[\mathrm{m}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wl_2p_3Pmean"
                c:identifier="ncm_c_HeI_Lyman_wl_2p_3Pmean">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Wavelength for the $2p\,{}^3\\!P_\mathrm{mean} \to 1s\,{}^1\\!S_{0}$ transition
$\lambda_{2p\,{}^3\\!P_\mathrm{mean}}^\mathrm{Ly} = \left(k_{2p\,{}^3\\!P_\mathrm{mean}}^\mathrm{Ly}\right)^{-1}$,
see ncm_c_HeI_Lyman_wn_2p_3Pmean().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Wavelength for the $2p\,{}^3\\!P_\mathrm{mean} \to 1s\,{}^1\\!S_{0}$ transition, $\lambda_{2p\,{}^3\\!P_\mathrm{mean}}^\mathrm{Ly} \,\left[\mathrm{m}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wl_2s_1S0"
                c:identifier="ncm_c_HeI_Lyman_wl_2s_1S0">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Wavelength for the $2s\,{}^1\\!S_{0} \to 1s\,{}^1\\!S_{0}$ transition
$\lambda_{2s\,{}^1\\!S_{0}}^\mathrm{Ly} = \left(k_{2s\,{}^1\\!S_{0}}^\mathrm{Ly}\right)^{-1}$,
see ncm_c_HeI_Lyman_wn_2s_1S0().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Wavelength for the $2s\,{}^1\\!S_{0} \to 1s\,{}^1\\!S_{0}$ transition, $\lambda_{2s\,{}^1\\!S_{0}}^\mathrm{Ly} \,\left[\mathrm{m}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wl_2s_3S1"
                c:identifier="ncm_c_HeI_Lyman_wl_2s_3S1">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Wavelength for the $2s\,{}^3\\!S_{1} \to 1s\,{}^1\\!S_{0}$ transition
$\lambda_{2s\,{}^3\\!S_{1}}^\mathrm{Ly} = \left(k_{2s\,{}^3\\!S_{1}}^\mathrm{Ly}\right)^{-1}$,
see ncm_c_HeI_Lyman_wn_2s_3S1().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Wavelength for the $2s\,{}^3\\!S_{1} \to 1s\,{}^1\\!S_{0}$ transition, $\lambda_{2s\,{}^3\\!S_{1}}^\mathrm{Ly} \,\left[\mathrm{m}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wn_2p_1P1"
                c:identifier="ncm_c_HeI_Lyman_wn_2p_1P1">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Lyman emission wavenumber for the $2p\,{}^1\\!P_{1} \to 1s\,{}^1\\!S_{0}$ transition $k_{2p\,{}^1\\!P_{1}}^\mathrm{Ly}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$k_{2p\,{}^1\\!P_{1}}^\mathrm{Ly} = 1.71134896946 \times 10^7 \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wn_2p_3P0"
                c:identifier="ncm_c_HeI_Lyman_wn_2p_3P0">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Lyman emission wavenumber for the $2p\,{}^3\\!P_{0} \to 1s\,{}^1\\!S_{0}$ transition $k_{2p\,{}^3\\!P_{0}}^\mathrm{Ly}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$k_{2p\,{}^3\\!P_{0}}^\mathrm{Ly} = 1.690878308131 \times 10^7 \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wn_2p_3P1"
                c:identifier="ncm_c_HeI_Lyman_wn_2p_3P1">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Lyman emission wavenumber for the $2p\,{}^3\\!P_{1} \to 1s\,{}^1\\!S_{0}$ transition $k_{2p\,{}^3\\!P_{1}}^\mathrm{Ly}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$k_{2p\,{}^3\\!P_{1}}^\mathrm{Ly} = 1.690868428979 \times 10^7 \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wn_2p_3P2"
                c:identifier="ncm_c_HeI_Lyman_wn_2p_3P2">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Lyman emission wavenumber for the $2p\,{}^3\\!P_{2} \to 1s\,{}^1\\!S_{0}$ transition $k_{2p\,{}^3\\!P_{2}}^\mathrm{Ly}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$k_{2p\,{}^3\\!P_{2}}^\mathrm{Ly} = 1.690867664725 \times 10^7 \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wn_2p_3Pmean"
                c:identifier="ncm_c_HeI_Lyman_wn_2p_3Pmean">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Mean Lyman emission wavenumber for the $2p\,{}^3\\!P_{*}$, i.e.,
$k_{2p\,{}^3\\!P_\mathrm{mean}}^\mathrm{Ly} = \left(k_{2p\,{}^3\\!P_{0}}^\mathrm{Ly} + k_{2p\,{}^3\\!P_{1}}^\mathrm{Ly} + k_{2p\,{}^3\\!P_{2}}^\mathrm{Ly}\right) / 3$.
See ncm_c_HeI_Lyman_wn_2p_3P0(), ncm_c_HeI_Lyman_wn_2p_3P1() and ncm_c_HeI_Lyman_wn_2p_3P2().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$k_{2p\,{}^3\\!P_\mathrm{mean}}^\mathrm{Ly} \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wn_2s_1S0"
                c:identifier="ncm_c_HeI_Lyman_wn_2s_1S0">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Lyman emission wavenumber for the $2s\,{}^1\\!S_{0} \to 1s\,{}^1\\!S_{0}$ transition $k_{2s\,{}^1\\!S_{0}}^\mathrm{Ly}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$k_{2s\,{}^1\\!S_{0}}^\mathrm{Ly} = 1.66277440141 \times 10^7 \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_Lyman_wn_2s_3S1"
                c:identifier="ncm_c_HeI_Lyman_wn_2s_3S1">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Lyman emission wavenumber for the $2s\,{}^3\\!S_{1} \to 1s\,{}^1\\!S_{0}$ transition $k_{2s\,{}^3\\!S_{1}}^\mathrm{Ly}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$k_{2s\,{}^3\\!S_{1}}^\mathrm{Ly} = 1.598559743297 \times 10^7 \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_ion_E_1s_1S0" c:identifier="ncm_c_HeI_ion_E_1s_1S0">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy calculated from the wavenumber $k_{1s\,{}^1\\!S_{0}}$,
see ncm_c_HeI_ion_wn_1s_1S0().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-I $1s\,{}^1\\!S_{0}$ ionization energy, $E_{1s\,{}^1\\!S_{0}} = hc\times{}k_{1s\,{}^1\\!S_{0}} \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_ion_E_2p_1P1" c:identifier="ncm_c_HeI_ion_E_2p_1P1">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy calculated from the wavenumber $k_{2p\,{}^1\\!P_{1}}$,
see ncm_c_HeI_ion_wn_2p_1P1().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-I $2p\,{}^1\\!P_{1}$ ionization energy, $E_{2p\,{}^1\\!P_{1}} = hc\times{}k_{2p\,{}^1\\!P_{1}} \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_ion_E_2p_3P0" c:identifier="ncm_c_HeI_ion_E_2p_3P0">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy calculated from the wavenumber $k_{2p\,{}^3\\!P_{0}}$,
see ncm_c_HeI_ion_wn_2p_3P0().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-I $2p\,{}^3\\!P_{0}$ ionization energy, $E_{2p\,{}^3\\!P_{0}} = hc\times{}k_{2p\,{}^3\\!P_{0}} \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_ion_E_2p_3P1" c:identifier="ncm_c_HeI_ion_E_2p_3P1">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy calculated from the wavenumber $k_{2p\,{}^3\\!P_{1}}$,
see ncm_c_HeI_ion_wn_2p_3P1().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-I $2p\,{}^3\\!P_{1}$ ionization energy, $E_{2p\,{}^3\\!P_{1}} = hc\times{}k_{2p\,{}^3\\!P_{1}} \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_ion_E_2p_3P2" c:identifier="ncm_c_HeI_ion_E_2p_3P2">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy calculated from the wavenumber $k_{2p\,{}^3\\!P_{2}}$,
see ncm_c_HeI_ion_wn_2p_3P2().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-I $2p\,{}^3\\!P_{2}$ ionization energy, $E_{2p\,{}^3\\!P_{2}} = hc\times{}k_{2p\,{}^3\\!P_{2}} \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_ion_E_2p_3Pmean"
                c:identifier="ncm_c_HeI_ion_E_2p_3Pmean">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy calculated from the wavenumber $k_{2p\,{}^3\\!P_\mathrm{mean}}$,
see ncm_c_HeI_ion_wn_2p_3Pmean().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-I $2p\,{}^3\\!P_\mathrm{mean}$ ionization energy, $E_{2p\,{}^3\\!P_\mathrm{mean}} = hc\times{}k_{2p\,{}^3\\!P_\mathrm{m}} \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_ion_E_2s_1S0" c:identifier="ncm_c_HeI_ion_E_2s_1S0">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy calculated from the wavenumber $k_{2s\,{}^1\\!S_{0}}$,
see ncm_c_HeI_ion_wn_2s_1S0().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-I $2s\,{}^1\\!S_{0}$ ionization energy, $E_{2s\,{}^1\\!S_{0}} = hc\times{}k_{2s\,{}^1\\!S_{0}} \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_ion_E_2s_3S1" c:identifier="ncm_c_HeI_ion_E_2s_3S1">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy calculated from the wavenumber $k_{2s\,{}^3\\!S_{1}}$,
see ncm_c_HeI_ion_wn_2s_3S1().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-I $2s\,{}^3\\!S_{1}$ ionization energy, $E_{2s\,{}^3\\!S_{1}} = hc\times{}k_{2s\,{}^3\\!S_{1}} \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_ion_wn_1s_1S0"
                c:identifier="ncm_c_HeI_ion_wn_1s_1S0">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy wavenumber for He-I $1s\,{}^1\\!S_{0}$ state, i.e., $k_{1s\,{}^1\\!S_{0}}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-I $1s\,{}^1\\!S_{0}$ ionization energy wavelength, $k_{1s\,{}^1\\!S_{0}} = 1.9831066637 \times 10^{7} \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_ion_wn_2p_1P1"
                c:identifier="ncm_c_HeI_ion_wn_2p_1P1">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy wavenumber for He-I $2p\,{}^1\\!P_{1}$ state calculated
from the difference between the first state and the corresponding Lyman
wavenumber, i.e., $k_{2p\,{}^1\\!P_{1}} = k_{1s\,{}^1\\!S_{0}} - k_{2p\,{}^1\\!P_{1}}^\mathrm{Ly}$,
see ncm_c_HeI_Lyman_wn_2p_1P1().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-I $2p\,{}^1\\!P_{1}$ ionization energy wavelength, $k_{2p\,{}^1\\!P_{1}} \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_ion_wn_2p_3P0"
                c:identifier="ncm_c_HeI_ion_wn_2p_3P0">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy wavenumber for He-I $2p\,{}^3\\!P_{0}$ state calculated
from the difference between the first state and the corresponding Lyman
wavenumber, i.e., $k_{2p\,{}^3\\!P_{0}} = k_{1s\,{}^1\\!S_{0}} - k_{2p\,{}^3\\!P_{0}}^\mathrm{Ly}$,
see ncm_c_HeI_Lyman_wn_2p_3P0().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-I $2p\,{}^3\\!P_{0}$ ionization energy wavelength, $k_{2p\,{}^3\\!P_{0}} \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_ion_wn_2p_3P1"
                c:identifier="ncm_c_HeI_ion_wn_2p_3P1">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy wavenumber for He-I $2p\,{}^3\\!P_{1}$ state calculated
from the difference between the first state and the corresponding Lyman
wavenumber, i.e., $k_{2p\,{}^3\\!P_{1}} = k_{1s\,{}^1\\!S_{0}} - k_{2p\,{}^3\\!P_{1}}^\mathrm{Ly}$,
see ncm_c_HeI_Lyman_wn_2p_3P1().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-I $2p\,{}^3\\!P_{1}$ ionization energy wavelength, $k_{2p\,{}^3\\!P_{1}} \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_ion_wn_2p_3P2"
                c:identifier="ncm_c_HeI_ion_wn_2p_3P2">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy wavenumber for He-I $2p\,{}^3\\!P_{2}$ state calculated
from the difference between the first state and the corresponding Lyman
wavenumber, i.e., $k_{2p\,{}^3\\!P_{2}} = k_{1s\,{}^1\\!S_{0}} - k_{2p\,{}^3\\!P_{2}}^\mathrm{Ly}$,
see ncm_c_HeI_Lyman_wn_2p_3P2().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-I $2p\,{}^3\\!P_{2}$ ionization energy wavelength, $k_{2p\,{}^3\\!P_{2}} \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_ion_wn_2p_3Pmean"
                c:identifier="ncm_c_HeI_ion_wn_2p_3Pmean">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy wavenumber for He-I $2p\,{}^3\\!P_\mathrm{mean}$ state calculated
from the difference between the first state and the corresponding Lyman
wavenumber, i.e., $k_{2p\,{}^3\\!P_{0}} = k_{1s\,{}^1\\!S_{0}} - k_{2p\,{}^3\\!P_\mathrm{mean}}^\mathrm{Ly}$,
see ncm_c_HeI_Lyman_wn_2p_3Pmean().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-I $2p\,{}^3\\!P_\mathrm{mean}$ ionization energy wavelength, $k_{2p\,{}^3\\!P_\mathrm{mean}} \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_ion_wn_2s_1S0"
                c:identifier="ncm_c_HeI_ion_wn_2s_1S0">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy wavenumber for He-I $2s\,{}^1\\!S_{0}$ state calculated
from the difference between the first state and the corresponding Lyman
wavenumber, i.e., $k_{2s\,{}^1\\!S_{0}} = k_{1s\,{}^1\\!S_{0}} - k_{2s\,{}^1\\!S_{0}}^\mathrm{Ly}$,
see ncm_c_HeI_Lyman_wn_2s_1S0().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-I $2s\,{}^1\\!S_{0}$ ionization energy wavelength, $k_{2s\,{}^1\\!S_{0}} \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="HeI_ion_wn_2s_3S1"
                c:identifier="ncm_c_HeI_ion_wn_2s_3S1">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Ionization energy wavenumber for He-I $2s\,{}^3\\!S_{1}$ state calculated
from the difference between the first state and the corresponding Lyman
wavenumber, i.e., $k_{2s\,{}^3\\!S_{1}} = k_{1s\,{}^1\\!S_{0}} - k_{2s\,{}^3\\!S_{1}}^\mathrm{Ly}$,
see ncm_c_HeI_Lyman_wn_2s_3S1().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-I $2s\,{}^3\\!S_{1}$ ionization energy wavelength, $k_{2s\,{}^3\\!S_{1}} \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="Mpc" c:identifier="ncm_c_Mpc">
        <doc xml:space="preserve">Using IAU 2015 recommendation see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">One mega parsec $\mathrm{Mpc} = 10^6 \mathrm{pc}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="Rinf" c:identifier="ncm_c_Rinf">
        <doc xml:space="preserve">Using CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The Rydberg constant $\mathrm{R}_\infty = 1.0973731568508 \times 10^{7} \,\left[\mathrm{m}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="Ry" c:identifier="ncm_c_Ry">
        <doc xml:space="preserve">Using CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The Rydberg unity of energy $\mathrm{Ry} = hc\mathrm{R}_\infty = 2.179872325 \times 10^{-18} \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="au" c:identifier="ncm_c_au">
        <doc xml:space="preserve">Using IAU 2015 recommendation see [description][NcmC.description],
compatible with [NASA JPL](http://ssd.jpl.nasa.gov/?constants) recommendations
(as in 5 January 2016).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">One astronomical unit in meters $\mathrm{au} = 1.49597870700 \times 10^{11} \,\left[\mathrm{m}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="blackbody_energy_density"
                c:identifier="ncm_c_blackbody_energy_density">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Blackbody energy density in ... units.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="blackbody_per_crit_density_h2"
                c:identifier="ncm_c_blackbody_per_crit_density_h2">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Blackbody energy density over critical density times $h^2$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="boltzmann_factor_HI_1s_2S0_5"
                c:identifier="ncm_c_boltzmann_factor_HI_1s_2S0_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Calculates the Boltzmann factor $B_{1s\,{}^2\\!S_{1/2}}(T) = k_\mathrm{e}^3 T^{-3/2}\,\exp\left[-E_{1s\,{}^2\\!S_{1/2}} / (k_\mathrm{B}T)\right]$,
for the $1s\,{}^2\\!S_{1/2}$ hydrogen energy level, see
ncm_c_HI_ion_E_1s_2S0_5() and ncm_c_thermal_wn_e().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Boltzmann factor $B_{1s\,{}^2\\!S_{1/2}}(T) \,\left[\mathrm{m}^3\,\mathrm{K}^{-3/2}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="T" transfer-ownership="none">
            <doc xml:space="preserve">temperature $T$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="boltzmann_factor_HI_2p_2P0_5"
                c:identifier="ncm_c_boltzmann_factor_HI_2p_2P0_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Calculates the Boltzmann factor $B_{2p\,{}^2\\!P_{1/2}}(T) = k_\mathrm{e}^3 T^{-3/2}\,\exp\left[-E_{2p\,{}^2\\!P_{1/2}} / (k_\mathrm{B}T)\right]$,
for the $2p\,{}^2\\!P_{1/2}$ hydrogen energy level, see
ncm_c_HI_ion_E_2p_2P0_5() and ncm_c_thermal_wn_e().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Boltzmann factor $B_{2p\,{}^2\\!P_{1/2}}(T) \,\left[\mathrm{m}^3\,\mathrm{K}^{-3/2}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="T" transfer-ownership="none">
            <doc xml:space="preserve">temperature $T$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="boltzmann_factor_HI_2p_2P3_5"
                c:identifier="ncm_c_boltzmann_factor_HI_2p_2P3_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Calculates the Boltzmann factor $B_{2p\,{}^2\\!P_{3/2}}(T) = k_\mathrm{e}^3 T^{-3/2}\,\exp\left[-E_{2p\,{}^2\\!P_{3/2}} / (k_\mathrm{B}T)\right]$,
for the $2p\,{}^2\\!P_{3/2}$ hydrogen energy level, see
ncm_c_HI_ion_E_2p_2P3_5() and ncm_c_thermal_wn_e().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Boltzmann factor $B_{2p\,{}^2\\!P_{3/2}}(T) \,\left[\mathrm{m}^3\,\mathrm{K}^{-3/2}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="T" transfer-ownership="none">
            <doc xml:space="preserve">temperature $T$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="boltzmann_factor_HI_2p_2Pmean"
                c:identifier="ncm_c_boltzmann_factor_HI_2p_2Pmean">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Calculates the Boltzmann factor $B_{2p\,{}^2\\!P_\mathrm{mean}}(T) = k_\mathrm{e}^3 T^{-3/2}\,\exp\left[-E_{2p\,{}^2\\!P_\mathrm{mean}} / (k_\mathrm{B}T)\right]$,
for the $2p\,{}^2\\!P_\mathrm{mean}$ hydrogen energy level, see
ncm_c_HI_ion_E_2p_2Pmean() and ncm_c_thermal_wn_e().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Boltzmann factor $B_{2p\,{}^2\\!P_\mathrm{mean}}(T) \,\left[\mathrm{m}^3\,\mathrm{K}^{-3/2}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="T" transfer-ownership="none">
            <doc xml:space="preserve">temperature $T$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="boltzmann_factor_HI_2s_2S0_5"
                c:identifier="ncm_c_boltzmann_factor_HI_2s_2S0_5">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Calculates the Boltzmann factor $B_{2s\,{}^2\\!S_{1/2}}(T) = k_\mathrm{e}^3 T^{-3/2}\,\exp\left[-E_{2s\,{}^2\\!S_{1/2}} / (k_\mathrm{B}T)\right]$,
for the $2s\,{}^2\\!S_{1/2}$ hydrogen energy level, see
ncm_c_HI_ion_E_2s_2S0_5() and ncm_c_thermal_wn_e().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Boltzmann factor $B_{2s\,{}^2\\!S_{1/2}}(T) \,\left[\mathrm{m}^3\,\mathrm{K}^{-3/2}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="T" transfer-ownership="none">
            <doc xml:space="preserve">temperature $T$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="boltzmann_factor_HeI_1s_1S0"
                c:identifier="ncm_c_boltzmann_factor_HeI_1s_1S0">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Calculates the Boltzmann factor $B_{1s\,{}^1\\!S_{0}}(T) = k_\mathrm{e}^3 T^{-3/2}\,\exp\left[-E_{1s\,{}^1\\!S_{0}} / (k_\mathrm{B}T)\right]$,
for the $1s\,{}^1\\!S_{0}$ helium energy level, see
ncm_c_HeI_ion_E_1s_1S0() and ncm_c_thermal_wn_e().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Boltzmann factor $B_{1s\,{}^1\\!S_{0}}(T) \,\left[\mathrm{m}^3\,\mathrm{K}^{-3/2}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="T" transfer-ownership="none">
            <doc xml:space="preserve">temperature $T$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="boltzmann_factor_HeI_2p_1P1"
                c:identifier="ncm_c_boltzmann_factor_HeI_2p_1P1">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Calculates the Boltzmann factor $B_{2p\,{}^1\\!P_{1}}(T) = k_\mathrm{e}^3 T^{-3/2}\,\exp\left[-E_{2p\,{}^1\\!P_{1}} / (k_\mathrm{B}T)\right]$,
for the $2p\,{}^1\\!P_{1}$ helium energy level, see
ncm_c_HeI_ion_E_2p_1P1() and ncm_c_thermal_wn_e().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Boltzmann factor $B_{2p\,{}^1\\!P_{1}}(T) \,\left[\mathrm{m}^3\,\mathrm{K}^{-3/2}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="T" transfer-ownership="none">
            <doc xml:space="preserve">temperature $T$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="boltzmann_factor_HeI_2p_3P0"
                c:identifier="ncm_c_boltzmann_factor_HeI_2p_3P0">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Calculates the Boltzmann factor $B_{2p\,{}^3\\!P_{0}}(T) = k_\mathrm{e}^3 T^{-3/2}\,\exp\left[-E_{2p\,{}^3\\!P_{0}} / (k_\mathrm{B}T)\right]$,
for the $2p\,{}^3\\!P_{0}$ helium energy level, see
ncm_c_HeI_ion_E_2p_3P0() and ncm_c_thermal_wn_e().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Boltzmann factor $B_{2p\,{}^3\\!P_{0}}(T) \,\left[\mathrm{m}^3\,\mathrm{K}^{-3/2}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="T" transfer-ownership="none">
            <doc xml:space="preserve">temperature $T$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="boltzmann_factor_HeI_2p_3P1"
                c:identifier="ncm_c_boltzmann_factor_HeI_2p_3P1">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Calculates the Boltzmann factor $B_{2p\,{}^3\\!P_{1}}(T) = k_\mathrm{e}^3 T^{-3/2}\,\exp\left[-E_{2p\,{}^3\\!P_{1}} / (k_\mathrm{B}T)\right]$,
for the $2p\,{}^3\\!P_{1}$ helium energy level, see
ncm_c_HeI_ion_E_2p_3P1() and ncm_c_thermal_wn_e().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Boltzmann factor $B_{2p\,{}^3\\!P_{1}}(T) \,\left[\mathrm{m}^3\,\mathrm{K}^{-3/2}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="T" transfer-ownership="none">
            <doc xml:space="preserve">temperature $T$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="boltzmann_factor_HeI_2p_3P2"
                c:identifier="ncm_c_boltzmann_factor_HeI_2p_3P2">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Calculates the Boltzmann factor $B_{2p\,{}^3\\!P_{2}}(T) = k_\mathrm{e}^3 T^{-3/2}\,\exp\left[-E_{2p\,{}^3\\!P_{2}} / (k_\mathrm{B}T)\right]$,
for the $2p\,{}^3\\!P_{2}$ helium energy level, see
ncm_c_HeI_ion_E_2p_3P2() and ncm_c_thermal_wn_e().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Boltzmann factor $B_{2p\,{}^3\\!P_{2}}(T) \,\left[\mathrm{m}^3\,\mathrm{K}^{-3/2}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="T" transfer-ownership="none">
            <doc xml:space="preserve">temperature $T$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="boltzmann_factor_HeI_2p_3Pmean"
                c:identifier="ncm_c_boltzmann_factor_HeI_2p_3Pmean">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Calculates the Boltzmann factor $B_{2p\,{}^3\\!P_\mathrm{mean}}(T) = k_\mathrm{e}^3 T^{-3/2}\,\exp\left[-E_{2p\,{}^3\\!P_\mathrm{mean}} / (k_\mathrm{B}T)\right]$,
for the $2p\,{}^3\\!P_\mathrm{mean}$ helium energy level, see
ncm_c_HeI_ion_E_2p_3Pmean() and ncm_c_thermal_wn_e().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Boltzmann factor $B_{2p\,{}^3\\!P_\mathrm{mean}}(T) \,\left[\mathrm{m}^3\,\mathrm{K}^{-3/2}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="T" transfer-ownership="none">
            <doc xml:space="preserve">temperature $T$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="boltzmann_factor_HeI_2s_1S0"
                c:identifier="ncm_c_boltzmann_factor_HeI_2s_1S0">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Calculates the Boltzmann factor $B_{2s\,{}^1\\!S_{0}}(T) = k_\mathrm{e}^3 T^{-3/2}\,\exp\left[-E_{2s\,{}^1\\!S_{0}} / (k_\mathrm{B}T)\right]$,
for the $2s\,{}^1\\!S_{0}$ helium energy level, see
ncm_c_HeI_ion_E_2s_1S0() and ncm_c_thermal_wn_e().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Boltzmann factor $B_{2s\,{}^1\\!S_{0}}(T) \,\left[\mathrm{m}^3\,\mathrm{K}^{-3/2}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="T" transfer-ownership="none">
            <doc xml:space="preserve">temperature $T$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="boltzmann_factor_HeI_2s_3S1"
                c:identifier="ncm_c_boltzmann_factor_HeI_2s_3S1">
        <doc xml:space="preserve">NIST compilation of atomic spectra see [description][NcmC.description].

Calculates the Boltzmann factor $B_{2s\,{}^3\\!S_{1}}(T) = k_\mathrm{e}^3 T^{-3/2}\,\exp\left[-E_{2s\,{}^3\\!S_{1}} / (k_\mathrm{B}T)\right]$,
for the $2s\,{}^3\\!S_{1}$ helium energy level, see
ncm_c_HeI_ion_E_2s_3S1() and ncm_c_thermal_wn_e().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Boltzmann factor $B_{2s\,{}^3\\!S_{1}}(T) \,\left[\mathrm{m}^3\,\mathrm{K}^{-3/2}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="T" transfer-ownership="none">
            <doc xml:space="preserve">temperature $T$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="c" c:identifier="ncm_c_c">
        <doc xml:space="preserve">Using CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Speed of light $c = 299792458 \,\left[\mathrm{m}\mathrm{s}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="c2" c:identifier="ncm_c_c2">
        <doc xml:space="preserve">Derived from CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Square of the speed of light $c^2 \,\left[\mathrm{m}^2\,\mathrm{s}^{-2}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="crit_density_h2" c:identifier="ncm_c_crit_density_h2">
        <doc xml:space="preserve">The critical density is defined as
\begin{equation}
\rho_{\mathrm{crit}0} = \frac{3 c^2 H_0^2}{8\pi G},
\end{equation}
where $G$ is the gravitational constant (#ncm_c_G()), $c$ is the speed of light
(#ncm_c_c()) and $H_0$ is the Hubble parameter,
$$H_0 = 100 \times \mathsf{h} \,\left[\text{km}\,\text{s}^{-1}\,\text{Mpc}^{-1}\right].$$</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Critical density over $\mathsf{h}^2$, $$\frac{\rho_{\mathrm{crit}0}}{\mathsf{h}^2} \left[\frac{\text{kg}}{\text{m}^3} \frac{\text{m}^2}{\text{s}^2}\right].$$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="crit_mass_density_h2"
                c:identifier="ncm_c_crit_mass_density_h2">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="crit_mass_density_h2_solar_mass_Mpc3"
                c:identifier="ncm_c_crit_mass_density_h2_solar_mass_Mpc3">
        <doc xml:space="preserve">This function computes the critical mass density in units of solar mass $M_\odot$ and Mpc.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Critical mass density in $M_\odot$ and Mpc units $\frac{\rho_{\mathrm{crit}0}}{\mathsf{h}^2 M_\odot} \left(1 \mathrm{Mpc}\right)^3$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="crit_number_density_n"
                c:identifier="ncm_c_crit_number_density_n">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Critical neutron number density in ... units.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="crit_number_density_p"
                c:identifier="ncm_c_crit_number_density_p">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Critical proton number density in ... units.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="decay_H_rate_2s_1s"
                c:identifier="ncm_c_decay_H_rate_2s_1s">
        <doc xml:space="preserve">Theoretical value for the two photons decay rate for Hydrogen
$2\mathrm{s} \to 1\mathrm{s}$ states [Goldman 1989][XGoldman1989].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Decay rate of Hydrogen from $\Lambda_{2\mathrm{s} \to 1\mathrm{s}} = 8.2245809 \,\left[\mathrm{s}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="decay_He_rate_2s_1s"
                c:identifier="ncm_c_decay_He_rate_2s_1s">
        <doc xml:space="preserve">Theoretical value for the two photons decay rate for Helium
$2\mathrm{s} \to 1\mathrm{s}$ states [Drake 1969][XDrake1969].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Decay rate of Helium from $\Lambda_{2\mathrm{s} \to 1\mathrm{s}} = 51.3 \,\left[\mathrm{s}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="deg2_steradian"
                c:identifier="ncm_c_deg2_steradian"
                introspectable="0">
        <doc xml:space="preserve">The convertion factor from degrees squared to steradian.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\pi^2/(180)^2$.</doc>
          <type name="long double" c:type="long double"/>
        </return-value>
      </function>
      <function name="degree_to_radian" c:identifier="ncm_c_degree_to_radian">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$d \times \pi / 180$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve">angle in degrees.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="eV" c:identifier="ncm_c_eV">
        <doc xml:space="preserve">Using CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of one electron volt $\mathrm{eV} = 1.6021766208 \times 10^{-19} \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="fine_struct" c:identifier="ncm_c_fine_struct">
        <doc xml:space="preserve">Using CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Fine structure constant $\alpha = 7.2973525664 \times 10^{-3} $.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="fine_struct_square"
                c:identifier="ncm_c_fine_struct_square">
        <doc xml:space="preserve">Derived from CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The square of the fine struct constant $\alpha^2$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="h" c:identifier="ncm_c_h">
        <doc xml:space="preserve">Using CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Planck constant $h = 6.626070040 \times 10^{-34} \,\left[\mathrm{J}\,\mathrm{s}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="hbar" c:identifier="ncm_c_hbar">
        <doc xml:space="preserve">Using CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Planck constant over $2\pi$, $\hbar \equiv h / (2\pi) = 1.054571800 \times 10^{-34} \,\left[\mathrm{J}\,\mathrm{s}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="hc" c:identifier="ncm_c_hc">
        <doc xml:space="preserve">Derived from CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Planck constant times the speed of light $hc \,\left[\mathrm{kg}\,\mathrm{m}^3\,\mathrm{s}^{-2}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="hubble_cte_hst" c:identifier="ncm_c_hubble_cte_hst">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="hubble_cte_msa" c:identifier="ncm_c_hubble_cte_msa">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="hubble_cte_wmap" c:identifier="ncm_c_hubble_cte_wmap">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="hubble_radius_hm1_Mpc"
                c:identifier="ncm_c_hubble_radius_hm1_Mpc">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="hubble_radius_hm1_planck"
                c:identifier="ncm_c_hubble_radius_hm1_planck">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="kb" c:identifier="ncm_c_kb">
        <doc xml:space="preserve">Using CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Boltzmann constant $k_\mathrm{B} = 1.38064852 \times 10^{-23} \,\left[\mathrm{J}\,\mathrm{K}^{-1}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="kpc" c:identifier="ncm_c_kpc">
        <doc xml:space="preserve">Using IAU 2015 recommendation see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">One kilo parsec $\mathrm{kpc} = 10^3 \mathrm{pc}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="lightyear" c:identifier="ncm_c_lightyear">
        <doc xml:space="preserve">One year times the speed of light ncm_c_c() in meters.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$1$ light-year $365.25 \times 24 \times 60 \times 60 \times c \,\left[\mathrm{m}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="lightyear_pc" c:identifier="ncm_c_lightyear_pc">
        <doc xml:space="preserve">One light-year in parsecs.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$1$ light-year $365.25 \times 24 \times 60 \times 60 \times c \,\left[\mathrm{pc}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="ln2" c:identifier="ncm_c_ln2" introspectable="0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\ln(2)$.</doc>
          <type name="long double" c:type="long double"/>
        </return-value>
      </function>
      <function name="ln2pi" c:identifier="ncm_c_ln2pi" introspectable="0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\ln(2\pi)$.</doc>
          <type name="long double" c:type="long double"/>
        </return-value>
      </function>
      <function name="ln3" c:identifier="ncm_c_ln3" introspectable="0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\ln(3)$.</doc>
          <type name="long double" c:type="long double"/>
        </return-value>
      </function>
      <function name="lnpi" c:identifier="ncm_c_lnpi" introspectable="0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\ln(\pi)$.</doc>
          <type name="long double" c:type="long double"/>
        </return-value>
      </function>
      <function name="lnpi_4" c:identifier="ncm_c_lnpi_4" introspectable="0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\ln(\pi) / 4$.</doc>
          <type name="long double" c:type="long double"/>
        </return-value>
      </function>
      <function name="mass_1H" c:identifier="ncm_c_mass_1H">
        <doc xml:space="preserve">Obtained from CIAAW commission of IUPAC, see [description][NcmC.description].
Calculated using ncm_c_mass_1H_u() $\times$ ncm_c_mass_atomic().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Hydrogen-1's mass $m_\mathrm{1H} \,\left[\mathrm{kg}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="mass_1H_u" c:identifier="ncm_c_mass_1H_u">
        <doc xml:space="preserve">Obtained from CIAAW commission of IUPAC, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Hydrogen-1's mass over one atomic mass $m_\mathrm{1H}/m_\mathrm{A} = 1.00782503223$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="mass_2H" c:identifier="ncm_c_mass_2H">
        <doc xml:space="preserve">Obtained from CIAAW commission of IUPAC, see [description][NcmC.description].
Calculated using ncm_c_mass_2H_u() $\times$ ncm_c_mass_atomic().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Hydrogen-2's mass $m_\mathrm{2H} \,\left[\mathrm{kg}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="mass_2H_u" c:identifier="ncm_c_mass_2H_u">
        <doc xml:space="preserve">Obtained from CIAAW commission of IUPAC, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Hydrogen-2's mass over one atomic mass $m_\mathrm{2H}/m_\mathrm{A} = 2.01410177812$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="mass_3H" c:identifier="ncm_c_mass_3H">
        <doc xml:space="preserve">Obtained from CIAAW commission of IUPAC, see [description][NcmC.description].
Calculated using ncm_c_mass_3H_u() $\times$ ncm_c_mass_atomic().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Hydrogen-3's mass $m_\mathrm{3H} \,\left[\mathrm{kg}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="mass_3H_u" c:identifier="ncm_c_mass_3H_u">
        <doc xml:space="preserve">Obtained from CIAAW commission of IUPAC, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Hydrogen-3's mass over one atomic mass $m_\mathrm{3H}/m_\mathrm{A} = 3.0160492779$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="mass_3He" c:identifier="ncm_c_mass_3He">
        <doc xml:space="preserve">Obtained from CIAAW commission of IUPAC, see [description][NcmC.description].
Calculated using ncm_c_mass_3He_u() $\times$ ncm_c_mass_atomic().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-3's mass $m_\mathrm{3He} \,\left[\mathrm{kg}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="mass_3He_u" c:identifier="ncm_c_mass_3He_u">
        <doc xml:space="preserve">Obtained from CIAAW commission of IUPAC, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-3's mass over one atomic mass $m_\mathrm{3He}/m_\mathrm{A} = 3.0160293201$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="mass_4He" c:identifier="ncm_c_mass_4He">
        <doc xml:space="preserve">Obtained from CIAAW commission of IUPAC, see [description][NcmC.description].
Calculated using ncm_c_mass_4He_u() $\times$ ncm_c_mass_atomic().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-4's mass $m_\mathrm{4He} \,\left[\mathrm{kg}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="mass_4He_u" c:identifier="ncm_c_mass_4He_u">
        <doc xml:space="preserve">Obtained from CIAAW commission of IUPAC, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-4's mass over one atomic mass $m_\mathrm{4He}/m_\mathrm{A} = 4.00260325413$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="mass_atomic" c:identifier="ncm_c_mass_atomic">
        <doc xml:space="preserve">Using CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Atomic mass constant $m_\mathrm{A} = 1.660539040 \times 10^{-27} \,\left[\mathrm{kg}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="mass_e" c:identifier="ncm_c_mass_e">
        <doc xml:space="preserve">Using CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Electron mass $m_\mathrm{e} = 9.10938356 \times 10^{-31} \,\left[\mathrm{kg}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="mass_n" c:identifier="ncm_c_mass_n">
        <doc xml:space="preserve">Using CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Neuton mass $m_\mathrm{n} = 1.674927471 \times 10^{-27} \,\left[\mathrm{kg}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="mass_p" c:identifier="ncm_c_mass_p">
        <doc xml:space="preserve">Using CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Proton mass $m_\mathrm{p} = 1.672621898 \times 10^{-27} \,\left[\mathrm{kg}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="mass_ratio_4He_1H"
                c:identifier="ncm_c_mass_ratio_4He_1H">
        <doc xml:space="preserve">Obtained from CIAAW commission of IUPAC, see [description][NcmC.description].
Calculated using ncm_c_mass_4He_u() / ncm_c_mass_1H_u().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-4 / Hydrogen-1 mass ratio $m_\mathrm{4He} / m_\mathrm{1H}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="mass_ratio_alpha_p"
                c:identifier="ncm_c_mass_ratio_alpha_p">
        <doc xml:space="preserve">Using CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The proton and alpha particle (Helium-4 III) mass ratio $m_\alpha / m_\mathrm{p} = 3.97259968907$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="mass_ratio_e_p" c:identifier="ncm_c_mass_ratio_e_p">
        <doc xml:space="preserve">Using CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The electron and proton mass ratio $m_\mathrm{e} / m_\mathrm{p} = 5.44617021352 \times 10^{-4}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="mass_solar" c:identifier="ncm_c_mass_solar">
        <doc xml:space="preserve">Using IAU 2015 recommendation see [description][NcmC.description].

As in the recomendation above $\mathrm{M}_\odot = (\mathcal{GM})_\odot / \mathrm{G}$.
Here we use the CODATA 2014 value for $G$, see ncm_c_G().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">One solar mass $\mathrm{M}_\odot = 1.9884754 \times 10^{30} \,\left[\mathrm{kg}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="pc" c:identifier="ncm_c_pc">
        <doc xml:space="preserve">Using IAU 2015 recommendation see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">One parsec in meters $\mathrm{pc} = 648000 \mathrm{au} / \pi = 3.0856775814913672789139379577965 \times 10^{16} \,\left[\mathrm{m}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="pi" c:identifier="ncm_c_pi" introspectable="0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\pi$.</doc>
          <type name="long double" c:type="long double"/>
        </return-value>
      </function>
      <function name="planck_length" c:identifier="ncm_c_planck_length">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Planck length $l_\mathrm{P} = 1.616229 \times 10^{-35} \,\left[\mathrm{m}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="planck_length2" c:identifier="ncm_c_planck_length2">
        <doc xml:space="preserve">Derived from CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Square of the Planck length $l_\mathrm{P}^2 \,\left[\mathrm{m}^2\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="radian_0_2pi" c:identifier="ncm_c_radian_0_2pi">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the angle in the interval $[0, 2\pi]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="r" transfer-ownership="none">
            <doc xml:space="preserve">angle in radians</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="radian_to_degree" c:identifier="ncm_c_radian_to_degree">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$r \times 180 / \pi$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="r" transfer-ownership="none">
            <doc xml:space="preserve">angle in radians</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="radiation_h2Omega_r0_to_temp"
                c:identifier="ncm_c_radiation_h2Omega_r0_to_temp">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="omr" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="radiation_temp_to_h2omega_r"
                c:identifier="ncm_c_radiation_temp_to_h2omega_r">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="T" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="rest_energy_1H" c:identifier="ncm_c_rest_energy_1H">
        <doc xml:space="preserve">Obtained from CIAAW commission of IUPAC, see [description][NcmC.description].
Calculated using ncm_c_mass_1H_u() $\times$ ncm_c_rest_energy_atomic().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Hydrogen-1's rest energy $m_\mathrm{1H}c^2 \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="rest_energy_2H" c:identifier="ncm_c_rest_energy_2H">
        <doc xml:space="preserve">Obtained from CIAAW commission of IUPAC, see [description][NcmC.description].
Calculated using ncm_c_mass_2H_u() $\times$ ncm_c_rest_energy_atomic().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Hydrogen-2's rest energy $m_\mathrm{2H}c^2 \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="rest_energy_3H" c:identifier="ncm_c_rest_energy_3H">
        <doc xml:space="preserve">Obtained from CIAAW commission of IUPAC, see [description][NcmC.description].
Calculated using ncm_c_mass_3H_u() $\times$ ncm_c_rest_energy_atomic().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Hydrogen-3's rest energy $m_\mathrm{3H}c^2 \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="rest_energy_3He" c:identifier="ncm_c_rest_energy_3He">
        <doc xml:space="preserve">Obtained from CIAAW commission of IUPAC, see [description][NcmC.description].
Calculated using ncm_c_mass_3He_u() $\times$ ncm_c_rest_energy_atomic().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-3's rest energy $m_\mathrm{3He}c^2 \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="rest_energy_4He" c:identifier="ncm_c_rest_energy_4He">
        <doc xml:space="preserve">Obtained from CIAAW commission of IUPAC, see [description][NcmC.description].
Calculated using ncm_c_mass_4He_u() $\times$ ncm_c_rest_energy_atomic().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Helium-4's rest energy $m_\mathrm{4He}c^2 \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="rest_energy_atomic"
                c:identifier="ncm_c_rest_energy_atomic">
        <doc xml:space="preserve">Derived from CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Rest energy of one atomic mass $m_\mathrm{A}c^2 \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="rest_energy_e" c:identifier="ncm_c_rest_energy_e">
        <doc xml:space="preserve">Derived from CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Electron's rest energy $m_\mathrm{e}c^2 \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="rest_energy_n" c:identifier="ncm_c_rest_energy_n">
        <doc xml:space="preserve">Derived from CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Neutron's rest energy $m_\mathrm{n}c^2 \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="rest_energy_p" c:identifier="ncm_c_rest_energy_p">
        <doc xml:space="preserve">Derived from CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Proton's rest energy $m_\mathrm{p}c^2 \,\left[\mathrm{J}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="sign_sin" c:identifier="ncm_c_sign_sin">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the sign of the value of $\sin(r)$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="r" transfer-ownership="none">
            <doc xml:space="preserve">angle in radias</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="sqrt_1_4pi"
                c:identifier="ncm_c_sqrt_1_4pi"
                introspectable="0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\sqrt{1 / (4 \pi)}$.</doc>
          <type name="long double" c:type="long double"/>
        </return-value>
      </function>
      <function name="sqrt_2pi"
                c:identifier="ncm_c_sqrt_2pi"
                introspectable="0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\sqrt{2 \pi}$.</doc>
          <type name="long double" c:type="long double"/>
        </return-value>
      </function>
      <function name="sqrt_3_4pi"
                c:identifier="ncm_c_sqrt_3_4pi"
                introspectable="0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\sqrt{3 / (4 \pi)}$.</doc>
          <type name="long double" c:type="long double"/>
        </return-value>
      </function>
      <function name="sqrt_pi_2"
                c:identifier="ncm_c_sqrt_pi_2"
                introspectable="0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\sqrt{\pi / 2}$.</doc>
          <type name="long double" c:type="long double"/>
        </return-value>
      </function>
      <function name="stats_1sigma"
                c:identifier="ncm_c_stats_1sigma"
                introspectable="0">
        <doc xml:space="preserve">The integral of a Gaussian distribution with mean $\mu$
and standard deviation $\sigma$ in $(\mu - 1 \sigma, \mu + 1 \sigma)$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$P (\mu - 1 \sigma, \mu + 1 \sigma)$</doc>
          <type name="long double" c:type="long double"/>
        </return-value>
      </function>
      <function name="stats_2sigma"
                c:identifier="ncm_c_stats_2sigma"
                introspectable="0">
        <doc xml:space="preserve">The integral of a Gaussian distribution with mean $\mu$
and standard deviation $\sigma$ in $(\mu - 2 \sigma, \mu + 2 \sigma)$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$P (\mu - 2 \sigma, \mu + 2 \sigma)$</doc>
          <type name="long double" c:type="long double"/>
        </return-value>
      </function>
      <function name="stats_3sigma"
                c:identifier="ncm_c_stats_3sigma"
                introspectable="0">
        <doc xml:space="preserve">The integral of a Gaussian distribution with mean $\mu$
and standard deviation sigma in $(\mu - 3 \sigma, \mu + 3 \sigma)$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$P (\mu - 3 \sigma, \mu + 3 \sigma)$</doc>
          <type name="long double" c:type="long double"/>
        </return-value>
      </function>
      <function name="stefan_boltzmann" c:identifier="ncm_c_stefan_boltzmann">
        <doc xml:space="preserve">Using CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Stefan Boltzmann constant $\sigma_\mathrm{SB} = 5.670367 \times 10^{-8} \,\left[\mathrm{W}\,\mathrm{m}^{-2}\,\mathrm{K}^{-4}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="tan_1arcsec"
                c:identifier="ncm_c_tan_1arcsec"
                introspectable="0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\tan(2 \pi/ (360 \times 60 \times 60))$.</doc>
          <type name="long double" c:type="long double"/>
        </return-value>
      </function>
      <function name="thermal_wl_e" c:identifier="ncm_c_thermal_wl_e">
        <doc xml:space="preserve">Derived from CODATA values, see [description][NcmC.description].

The electron termal wavelength is $\lambda_\mathrm{e} = \sqrt{2\pi\hbar^2/(m_\mathrm{e}k_\mathrm{B}T)} \,\left[\mathrm{m}\right]$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Thermal electron wavelength times the temperature $\lambda_\mathrm{e}\sqrt{T}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="thermal_wl_n" c:identifier="ncm_c_thermal_wl_n">
        <doc xml:space="preserve">Derived from CODATA values, see [description][NcmC.description].

The neutron termal wavelength is $\lambda_\mathrm{n} = \sqrt{2\pi\hbar^2/(m_\mathrm{n}k_\mathrm{B}T)} \,\left[\mathrm{m}\right]$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Thermal electron wavelength times the temperature $\lambda_\mathrm{n}\sqrt{T}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="thermal_wl_p" c:identifier="ncm_c_thermal_wl_p">
        <doc xml:space="preserve">Derived from CODATA values, see [description][NcmC.description].

The proton termal wavelength is $\lambda_\mathrm{p} = \sqrt{2\pi\hbar^2/(m_\mathrm{p}k_\mathrm{B}T)} \,\left[\mathrm{m}\right]$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Thermal electron wavelength times the temperature $\lambda_\mathrm{p}\sqrt{T}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="thermal_wn_e" c:identifier="ncm_c_thermal_wn_e">
        <doc xml:space="preserve">Derived from CODATA values, see [description][NcmC.description].

The electron termal wavenumber is $k_\mathrm{e} = 1/\lambda_\mathrm{e}$,
see ncm_c_thermal_wl_e().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Thermal eletron wavenumber $k_\mathrm{e}/\sqrt{T}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="thermal_wn_n" c:identifier="ncm_c_thermal_wn_n">
        <doc xml:space="preserve">Derived from CODATA values, see [description][NcmC.description].

The neutron termal wavenumber is $k_\mathrm{n} = 1/\lambda_\mathrm{n}$,
see ncm_c_thermal_wl_n().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Thermal neutron wavenumber $k_\mathrm{e}/\sqrt{T}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="thermal_wn_p" c:identifier="ncm_c_thermal_wn_p">
        <doc xml:space="preserve">Derived from CODATA values, see [description][NcmC.description].

The proton termal wavenumber is $k_\mathrm{p} = 1/\lambda_\mathrm{p}$,
see ncm_c_thermal_wl_p().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Thermal proton wavenumber $k_\mathrm{e}/\sqrt{T}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="thomson_cs" c:identifier="ncm_c_thomson_cs">
        <doc xml:space="preserve">Using CODATA values, see [description][NcmC.description].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Thomson cross section $\sigma_\mathrm{T} = 0.66524587158 \times 10^{-28} \,\left[\mathrm{m}^2\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="wmap5_coadded_I_K"
                c:identifier="ncm_c_wmap5_coadded_I_K">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="wmap5_coadded_I_Ka"
                c:identifier="ncm_c_wmap5_coadded_I_Ka">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="wmap5_coadded_I_Q"
                c:identifier="ncm_c_wmap5_coadded_I_Q">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="wmap5_coadded_I_V"
                c:identifier="ncm_c_wmap5_coadded_I_V">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="wmap5_coadded_I_W"
                c:identifier="ncm_c_wmap5_coadded_I_W">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <function name="year" c:identifier="ncm_c_year">
        <doc xml:space="preserve">One year ($365.25$ days) in seconds.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$1$ year $365.25 \times 24 \times 60 \times 60 \,\left[\mathrm{s}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <constant name="CALC_DEFAULT_ABSTOL"
              value="0.000000"
              c:type="NCM_CALC_DEFAULT_ABSTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CALC_DEFAULT_RELTOL"
              value="0.000000"
              c:type="NCM_CALC_DEFAULT_RELTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CALC_MAX_DEPS" value="6" c:type="NCM_CALC_MAX_DEPS">
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="CClass" c:type="NcmCClass" glib:is-gtype-struct-for="C">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <constant name="CFG_DATA_DIR_ENV"
              value="NUMCOSMO_DATA_DIR"
              c:type="NCM_CFG_DATA_DIR_ENV">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Calc"
           c:symbol-prefix="calc"
           c:type="NcmCalc"
           parent="GObject.Object"
           glib:type-name="NcmCalc"
           glib:get-type="ncm_calc_get_type"
           glib:type-struct="CalcClass">
      <virtual-method name="prepare">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="calc" transfer-ownership="none">
            <type name="Calc" c:type="NcmCalc*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_abstol" c:identifier="ncm_calc_get_abstol">
        <doc xml:space="preserve">Gets the absolute tolerance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the relative tolerance.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="calc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmCalc</doc>
            <type name="Calc" c:type="NcmCalc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reltol" c:identifier="ncm_calc_get_reltol">
        <doc xml:space="preserve">Gets the relative tolerance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the relative tolerance.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="calc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmCalc</doc>
            <type name="Calc" c:type="NcmCalc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare_array" c:identifier="ncm_calc_prepare_array">
        <doc xml:space="preserve">Prepares @calc using the models in @ma.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="calc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmCalc</doc>
            <type name="Calc" c:type="NcmCalc*"/>
          </instance-parameter>
          <parameter name="ma" transfer-ownership="none">
            <doc xml:space="preserve">array of #NcmModel</doc>
            <array c:type="NcmModel**">
              <type name="Model"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_if_needed_array"
              c:identifier="ncm_calc_prepare_if_needed_array">
        <doc xml:space="preserve">Prepares @calc using the models in @ma.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="calc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmCalc</doc>
            <type name="Calc" c:type="NcmCalc*"/>
          </instance-parameter>
          <parameter name="ma" transfer-ownership="none">
            <doc xml:space="preserve">array of #NcmModel</doc>
            <array c:type="NcmModel**">
              <type name="Model"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_if_needed_vargs"
              c:identifier="ncm_calc_prepare_if_needed_vargs"
              introspectable="0">
        <doc xml:space="preserve">Prepares @calc using the models in @... .</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="calc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmCalc</doc>
            <type name="Calc" c:type="NcmCalc*"/>
          </instance-parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">list of #NcmModel</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="set_abstol" c:identifier="ncm_calc_set_abstol">
        <doc xml:space="preserve">Sets the absolute tolerance to @abstol.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="calc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmCalc</doc>
            <type name="Calc" c:type="NcmCalc*"/>
          </instance-parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">the absolute tolerance</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reltol" c:identifier="ncm_calc_set_reltol">
        <doc xml:space="preserve">Sets the relative tolerance to @reltol.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="calc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmCalc</doc>
            <type name="Calc" c:type="NcmCalc*"/>
          </instance-parameter>
          <parameter name="reltol" transfer-ownership="none">
            <doc xml:space="preserve">the relative tolerance</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="abstol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="reltol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="reltol" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="abstol" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="ctrl" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="CalcClass"
            c:type="NcmCalcClass"
            glib:is-gtype-struct-for="Calc">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="ndep" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="dep_list" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="prepare" readable="0" private="1">
        <type name="CalcPrepare0" c:type="NcmCalcPrepare0"/>
      </field>
      <method name="check" c:identifier="ncm_calc_class_check">
        <doc xml:space="preserve">Checks if all dependencies were set consistently.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="calc_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmCalcClass</doc>
            <type name="CalcClass" c:type="NcmCalcClass*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_dep" c:identifier="ncm_calc_class_set_dep">
        <doc xml:space="preserve">Sets the @p-th #NcmModel to be of GType @dep_model.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="calc_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmCalcClass</doc>
            <type name="CalcClass" c:type="NcmCalcClass*"/>
          </instance-parameter>
          <parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">position of the #NcmModel</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="dep_model" transfer-ownership="none">
            <doc xml:space="preserve">a #GType</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_num_dep" c:identifier="ncm_calc_class_set_num_dep">
        <doc xml:space="preserve">Sets the number of dependencies #NcmModel</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="calc_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmCalcClass</doc>
            <type name="CalcClass" c:type="NcmCalcClass*"/>
          </instance-parameter>
          <parameter name="ndep" transfer-ownership="none">
            <doc xml:space="preserve">number of dependencies #NcmModel</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <callback name="CalcPrepare0" c:type="NcmCalcPrepare0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="calc" transfer-ownership="none">
          <type name="Calc" c:type="NcmCalc*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="CalcPrepare1" c:type="NcmCalcPrepare1">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="calc" transfer-ownership="none">
          <type name="Calc" c:type="NcmCalc*"/>
        </parameter>
        <parameter name="m1" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="CalcPrepare2" c:type="NcmCalcPrepare2">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="calc" transfer-ownership="none">
          <type name="Calc" c:type="NcmCalc*"/>
        </parameter>
        <parameter name="m1" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="m2" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="CalcPrepare3" c:type="NcmCalcPrepare3">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="calc" transfer-ownership="none">
          <type name="Calc" c:type="NcmCalc*"/>
        </parameter>
        <parameter name="m1" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="m2" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="m3" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="CalcPrepare4" c:type="NcmCalcPrepare4">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="calc" transfer-ownership="none">
          <type name="Calc" c:type="NcmCalc*"/>
        </parameter>
        <parameter name="m1" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="m2" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="m3" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="m4" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="CalcPrepare5" c:type="NcmCalcPrepare5">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="calc" transfer-ownership="none">
          <type name="Calc" c:type="NcmCalc*"/>
        </parameter>
        <parameter name="m1" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="m2" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="m3" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="m4" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="m5" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="CalcPrepare6" c:type="NcmCalcPrepare6">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="calc" transfer-ownership="none">
          <type name="Calc" c:type="NcmCalc*"/>
        </parameter>
        <parameter name="m1" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="m2" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="m3" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="m4" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="m5" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="m6" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Complex"
            c:type="NcmComplex"
            glib:type-name="NcmComplex"
            glib:get-type="ncm_complex_get_type"
            c:symbol-prefix="complex">
      <field name="Rez" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="Imz" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <constructor name="new" c:identifier="ncm_complex_new">
        <doc xml:space="preserve">Allocates a new complex number.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmComplex.</doc>
          <type name="Complex" c:type="NcmComplex*"/>
        </return-value>
      </constructor>
      <method name="Im" c:identifier="ncm_complex_Im">
        <doc xml:space="preserve">Returns the imaginary part of @c.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Im$(c)$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmComplex.</doc>
            <type name="Complex" c:type="NcmComplex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Re" c:identifier="ncm_complex_Re">
        <doc xml:space="preserve">Returns the real part of @c.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Re$(c)$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmComplex.</doc>
            <type name="Complex" c:type="NcmComplex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="ncm_complex_dup">
        <doc xml:space="preserve">Allocates a new complex number and copy the contents of @c to it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmComplex.</doc>
          <type name="Complex" c:type="NcmComplex*"/>
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmComplex.</doc>
            <type name="Complex" c:type="NcmComplex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_complex_free">
        <doc xml:space="preserve">Frees @c, it should not be used on a statically allocated NcmComplex.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmComplex.</doc>
            <type name="Complex" c:type="NcmComplex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_complex_ref">
        <return-value transfer-ownership="full">
          <type name="Complex" c:type="NcmComplex*"/>
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none">
            <type name="Complex" c:type="NcmComplex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="clear" c:identifier="ncm_complex_clear">
        <doc xml:space="preserve">Frees *@c and sets *@c to NULL, it should not be used on a statically allocated NcmComplex.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="c" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmComplex.</doc>
            <type name="Complex" c:type="NcmComplex**"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <constant name="DATA_RESAMPLE_RNG_NAME"
              value="data_resample"
              c:type="NCM_DATA_RESAMPLE_RNG_NAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEFAULT_PRECISION"
              value="0.000000"
              c:type="NCM_DEFAULT_PRECISION">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <class name="Data"
           c:symbol-prefix="data"
           c:type="NcmData"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NcmData"
           glib:get-type="ncm_data_get_type"
           glib:type-struct="DataClass">
      <constructor name="new_from_file" c:identifier="ncm_data_new_from_file">
        <doc xml:space="preserve">Creates a new #NcmData from @filename.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcmData.</doc>
          <type name="Data" c:type="NcmData*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">file containing a serialized #NcmData child.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_data_clear">
        <doc xml:space="preserve">Decrease the reference count of *@data and sets the pointer *@data to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="begin">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_dof" invoker="get_dof">
        <doc xml:space="preserve">Calculates the degrees of freedom associated with the data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">degrees of freedom of the data.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_length" invoker="get_length">
        <doc xml:space="preserve">Return a integer representing the number of data points.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number of data points.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="leastsquares_J" invoker="leastsquares_J">
        <doc xml:space="preserve">Calculates the least squares jacobian matrix $$J_{ij} = \frac{df_i}{dx_j},$$
where $f_i$ is the component of the least squares vector $\vec{f}$ and $x_j$
is the j-th parameter.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="J" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix.</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="leastsquares_f" invoker="leastsquares_f">
        <doc xml:space="preserve">Calculates the least squares vector $\vec{f}$ using the models contained in
@mset and set the results in @f.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="leastsquares_f_J" invoker="leastsquares_f_J">
        <doc xml:space="preserve">Calculates both least squares vector and matrix as in ncm_data_leastsquares_f()
and ncm_data_leastsquares_J().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="J" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="m2lnL_grad" invoker="m2lnL_grad">
        <doc xml:space="preserve">Calculates the gradient of $-2\ln(L)$, i.e., $$g_i = -2\frac{d\ln(L)}{dx_i}.$$
where $L$ represents the likelihood of the data given the models in @mset.
The result is stored in @grad.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="grad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="m2lnL_val" invoker="m2lnL_val">
        <doc xml:space="preserve">Calculates the value of $-2\ln(L)$, where $L$ represents the likelihood of
the data given the models in @mset. The result is stored in @m2lnL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="m2lnL"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">a #double</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="m2lnL_val_grad" invoker="m2lnL_val_grad">
        <doc xml:space="preserve">Calculates both the value and the gradient of $-2\ln(L)$ as in ncm_data_m2lnL_val() and
ncm_data_m2lnL_grad().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="m2lnL"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">a #double.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="grad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare" invoker="prepare">
        <doc xml:space="preserve">Prepare all models in @data necessary for the statistical calculations.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="resample" invoker="resample">
        <doc xml:space="preserve">Resample data in @data from the models contained in @mset.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="bootstrap_create" c:identifier="ncm_data_bootstrap_create">
        <doc xml:space="preserve">Creates a bootstrap object inside of @data. Uses the default bsize == fsize.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="bootstrap_enabled"
              c:identifier="ncm_data_bootstrap_enabled">
        <doc xml:space="preserve">Checks whether bootstrap is enabled in @data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">if bootstrap is enabled in @data.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="bootstrap_remove" c:identifier="ncm_data_bootstrap_remove">
        <doc xml:space="preserve">Removes a bootstrap object inside of @data if any.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="bootstrap_resample"
              c:identifier="ncm_data_bootstrap_resample">
        <doc xml:space="preserve">Perform one bootstrap, i.e., resample the data with replacement.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <method name="bootstrap_set" c:identifier="ncm_data_bootstrap_set">
        <doc xml:space="preserve">Sets the @bstrap object in @data checking if they are compatible.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="bstrap" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmBootstrap.</doc>
            <type name="Bootstrap" c:type="NcmBootstrap*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="ncm_data_dup">
        <doc xml:space="preserve">Duplicate the @data object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a duplicate of @data.</doc>
          <type name="Data" c:type="NcmData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="ser_obj" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_data_free">
        <doc xml:space="preserve">Decrease the reference count of @data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_desc" c:identifier="ncm_data_get_desc">
        <doc xml:space="preserve">Gets @data description.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">copy of the @data description.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dof" c:identifier="ncm_data_get_dof">
        <doc xml:space="preserve">Calculates the degrees of freedom associated with the data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">degrees of freedom of the data.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_length" c:identifier="ncm_data_get_length">
        <doc xml:space="preserve">Return a integer representing the number of data points.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number of data points.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="leastsquares_J" c:identifier="ncm_data_leastsquares_J">
        <doc xml:space="preserve">Calculates the least squares jacobian matrix $$J_{ij} = \frac{df_i}{dx_j},$$
where $f_i$ is the component of the least squares vector $\vec{f}$ and $x_j$
is the j-th parameter.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="J" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix.</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="leastsquares_f" c:identifier="ncm_data_leastsquares_f">
        <doc xml:space="preserve">Calculates the least squares vector $\vec{f}$ using the models contained in
@mset and set the results in @f.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="leastsquares_f_J" c:identifier="ncm_data_leastsquares_f_J">
        <doc xml:space="preserve">Calculates both least squares vector and matrix as in ncm_data_leastsquares_f()
and ncm_data_leastsquares_J().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="J" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_grad" c:identifier="ncm_data_m2lnL_grad">
        <doc xml:space="preserve">Calculates the gradient of $-2\ln(L)$, i.e., $$g_i = -2\frac{d\ln(L)}{dx_i}.$$
where $L$ represents the likelihood of the data given the models in @mset.
The result is stored in @grad.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="grad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_val" c:identifier="ncm_data_m2lnL_val">
        <doc xml:space="preserve">Calculates the value of $-2\ln(L)$, where $L$ represents the likelihood of
the data given the models in @mset. The result is stored in @m2lnL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="m2lnL"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">a #double</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_val_grad" c:identifier="ncm_data_m2lnL_val_grad">
        <doc xml:space="preserve">Calculates both the value and the gradient of $-2\ln(L)$ as in ncm_data_m2lnL_val() and
ncm_data_m2lnL_grad().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="m2lnL"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">a #double.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="grad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_desc" c:identifier="ncm_data_peek_desc">
        <doc xml:space="preserve">Gets @data description.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">internal @data description.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="ncm_data_prepare">
        <doc xml:space="preserve">Prepare all models in @data necessary for the statistical calculations.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_data_ref">
        <doc xml:space="preserve">Increase the reference count of @data.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@data.</doc>
          <type name="Data" c:type="NcmData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="resample" c:identifier="ncm_data_resample">
        <doc xml:space="preserve">Resample data in @data from the models contained in @mset.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_desc" c:identifier="ncm_data_set_desc">
        <doc xml:space="preserve">Sets the @data description. It gets a copy of desc.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve">description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_init" c:identifier="ncm_data_set_init">
        <doc xml:space="preserve">Sets the @data to initialized or not @state.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_desc" c:identifier="ncm_data_take_desc">
        <doc xml:space="preserve">Sets the @data description @desc without copying it, the @desc memory will
be freed (g_free()) when the object is freed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmData.</doc>
            <type name="Data" c:type="NcmData*"/>
          </instance-parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve">description.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="bootstrap" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The #NcmData bootstrap object if any.</doc>
        <type name="Bootstrap"/>
      </property>
      <property name="desc" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Description of the data object.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="init" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="long-desc" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Description of the data object.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name" transfer-ownership="none">
        <doc xml:space="preserve">Name of the data object.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="desc" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="long_desc" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="init" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="begin" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="bstrap" readable="0" private="1">
        <type name="Bootstrap" c:type="NcmBootstrap*"/>
      </field>
    </class>
    <record name="DataClass"
            c:type="NcmDataClass"
            glib:is-gtype-struct-for="Data">
      <doc xml:space="preserve">Virtual table for the #NcmData abstract class.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="name" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="bootstrap">
        <doc xml:space="preserve">sets whenever the #NcmData implementations supports bootstrap.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="get_length">
        <callback name="get_length">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">number of data points.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmData.</doc>
              <type name="Data" c:type="NcmData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_dof">
        <callback name="get_dof">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">degrees of freedom of the data.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmData.</doc>
              <type name="Data" c:type="NcmData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="begin">
        <callback name="begin">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <type name="Data" c:type="NcmData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare">
        <callback name="prepare">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmData.</doc>
              <type name="Data" c:type="NcmData*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSet.</doc>
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="resample">
        <callback name="resample">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmData</doc>
              <type name="Data" c:type="NcmData*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSet</doc>
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
            <parameter name="rng" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmRNG</doc>
              <type name="RNG" c:type="NcmRNG*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="leastsquares_f">
        <callback name="leastsquares_f">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmData.</doc>
              <type name="Data" c:type="NcmData*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSet.</doc>
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
            <parameter name="f" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmVector</doc>
              <type name="Vector" c:type="NcmVector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="leastsquares_J">
        <callback name="leastsquares_J">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmData.</doc>
              <type name="Data" c:type="NcmData*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSet.</doc>
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
            <parameter name="J" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMatrix.</doc>
              <type name="Matrix" c:type="NcmMatrix*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="leastsquares_f_J">
        <callback name="leastsquares_f_J">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmData.</doc>
              <type name="Data" c:type="NcmData*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSet.</doc>
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
            <parameter name="f" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmVector.</doc>
              <type name="Vector" c:type="NcmVector*"/>
            </parameter>
            <parameter name="J" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMatrix</doc>
              <type name="Matrix" c:type="NcmMatrix*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="m2lnL_val">
        <callback name="m2lnL_val">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmData.</doc>
              <type name="Data" c:type="NcmData*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSet.</doc>
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
            <parameter name="m2lnL"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">a #double</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="m2lnL_grad">
        <callback name="m2lnL_grad">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmData.</doc>
              <type name="Data" c:type="NcmData*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSet.</doc>
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
            <parameter name="grad" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmVector.</doc>
              <type name="Vector" c:type="NcmVector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="m2lnL_val_grad">
        <callback name="m2lnL_val_grad">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="data" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmData.</doc>
              <type name="Data" c:type="NcmData*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSet.</doc>
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
            <parameter name="m2lnL"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">a #double.</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="grad" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmVector.</doc>
              <type name="Vector" c:type="NcmVector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DataDist1d"
           c:symbol-prefix="data_dist1d"
           c:type="NcmDataDist1d"
           parent="Data"
           abstract="1"
           glib:type-name="NcmDataDist1d"
           glib:get-type="ncm_data_dist1d_get_type"
           glib:type-struct="DataDist1dClass">
      <virtual-method name="get_size" invoker="get_size">
        <doc xml:space="preserve">Gets the data size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Data size.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataDist1d</doc>
            <type name="DataDist1d" c:type="NcmDataDist1d*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="inv_pdf">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist1d" transfer-ownership="none">
            <type name="DataDist1d" c:type="NcmDataDist1d*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="u" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="m2lnL_val">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist1d" transfer-ownership="none">
            <type name="DataDist1d" c:type="NcmDataDist1d*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_size" invoker="set_size">
        <doc xml:space="preserve">Sets the data size to @np.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataDist1d</doc>
            <type name="DataDist1d" c:type="NcmDataDist1d*"/>
          </instance-parameter>
          <parameter name="np" transfer-ownership="none">
            <doc xml:space="preserve">data size.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_data" c:identifier="ncm_data_dist1d_get_data">
        <doc xml:space="preserve">Gets the data #NcmVector.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">Data vector.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataDist1d</doc>
            <type name="DataDist1d" c:type="NcmDataDist1d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="ncm_data_dist1d_get_size">
        <doc xml:space="preserve">Gets the data size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Data size.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataDist1d</doc>
            <type name="DataDist1d" c:type="NcmDataDist1d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="ncm_data_dist1d_set_size">
        <doc xml:space="preserve">Sets the data size to @np.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataDist1d</doc>
            <type name="DataDist1d" c:type="NcmDataDist1d*"/>
          </instance-parameter>
          <parameter name="np" transfer-ownership="none">
            <doc xml:space="preserve">data size.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="n-points"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="vector" writable="1" transfer-ownership="none">
        <type name="Vector"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Data" c:type="NcmData"/>
      </field>
      <field name="np" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="x" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
    </class>
    <record name="DataDist1dClass"
            c:type="NcmDataDist1dClass"
            glib:is-gtype-struct-for="DataDist1d">
      <field name="parent_class" readable="0" private="1">
        <type name="DataClass" c:type="NcmDataClass"/>
      </field>
      <field name="m2lnL_val">
        <callback name="m2lnL_val">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="dist1d" transfer-ownership="none">
              <type name="DataDist1d" c:type="NcmDataDist1d*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="inv_pdf">
        <callback name="inv_pdf">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="dist1d" transfer-ownership="none">
              <type name="DataDist1d" c:type="NcmDataDist1d*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
            <parameter name="u" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_size">
        <callback name="set_size">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dist1d" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmDataDist1d</doc>
              <type name="DataDist1d" c:type="NcmDataDist1d*"/>
            </parameter>
            <parameter name="np" transfer-ownership="none">
              <doc xml:space="preserve">data size.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">Data size.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="dist1d" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmDataDist1d</doc>
              <type name="DataDist1d" c:type="NcmDataDist1d*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DataGauss"
           c:symbol-prefix="data_gauss"
           c:type="NcmDataGauss"
           parent="Data"
           abstract="1"
           glib:type-name="NcmDataGauss"
           glib:get-type="ncm_data_gauss_get_type"
           glib:type-struct="DataGaussClass">
      <virtual-method name="get_size" invoker="get_size">
        <doc xml:space="preserve">Gets the data size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Data size.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="gauss" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataGauss</doc>
            <type name="DataGauss" c:type="NcmDataGauss*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="inv_cov_func">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gauss" transfer-ownership="none">
            <type name="DataGauss" c:type="NcmDataGauss*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="inv_cov" transfer-ownership="none">
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="mean_func">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gauss" transfer-ownership="none">
            <type name="DataGauss" c:type="NcmDataGauss*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="vp" transfer-ownership="none">
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_size" invoker="set_size">
        <doc xml:space="preserve">Sets the data size to @np.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gauss" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataGauss</doc>
            <type name="DataGauss" c:type="NcmDataGauss*"/>
          </instance-parameter>
          <parameter name="np" transfer-ownership="none">
            <doc xml:space="preserve">data size.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_size" c:identifier="ncm_data_gauss_get_size">
        <doc xml:space="preserve">Gets the data size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Data size.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="gauss" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataGauss</doc>
            <type name="DataGauss" c:type="NcmDataGauss*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="ncm_data_gauss_set_size">
        <doc xml:space="preserve">Sets the data size to @np.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gauss" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataGauss</doc>
            <type name="DataGauss" c:type="NcmDataGauss*"/>
          </instance-parameter>
          <parameter name="np" transfer-ownership="none">
            <doc xml:space="preserve">data size.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="inv-cov" writable="1" transfer-ownership="none">
        <type name="Matrix"/>
      </property>
      <property name="mean" writable="1" transfer-ownership="none">
        <type name="Vector"/>
      </property>
      <property name="n-points"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Data" c:type="NcmData"/>
      </field>
      <field name="np" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="y" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="v" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="inv_cov" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="LLT" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="prepared_LLT" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="DataGaussClass"
            c:type="NcmDataGaussClass"
            glib:is-gtype-struct-for="DataGauss">
      <field name="parent_class" readable="0" private="1">
        <type name="DataClass" c:type="NcmDataClass"/>
      </field>
      <field name="mean_func">
        <callback name="mean_func">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gauss" transfer-ownership="none">
              <type name="DataGauss" c:type="NcmDataGauss*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
            <parameter name="vp" transfer-ownership="none">
              <type name="Vector" c:type="NcmVector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="inv_cov_func">
        <callback name="inv_cov_func">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="gauss" transfer-ownership="none">
              <type name="DataGauss" c:type="NcmDataGauss*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
            <parameter name="inv_cov" transfer-ownership="none">
              <type name="Matrix" c:type="NcmMatrix*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_size">
        <callback name="set_size">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gauss" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmDataGauss</doc>
              <type name="DataGauss" c:type="NcmDataGauss*"/>
            </parameter>
            <parameter name="np" transfer-ownership="none">
              <doc xml:space="preserve">data size.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">Data size.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="gauss" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmDataGauss</doc>
              <type name="DataGauss" c:type="NcmDataGauss*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DataGaussCov"
           c:symbol-prefix="data_gauss_cov"
           c:type="NcmDataGaussCov"
           parent="Data"
           abstract="1"
           glib:type-name="NcmDataGaussCov"
           glib:get-type="ncm_data_gauss_cov_get_type"
           glib:type-struct="DataGaussCovClass">
      <virtual-method name="cov_func">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="gauss" transfer-ownership="none">
            <type name="DataGaussCov" c:type="NcmDataGaussCov*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="cov" transfer-ownership="none">
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size" invoker="get_size">
        <doc xml:space="preserve">Gets the data size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Data size.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="gauss" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataGaussCov</doc>
            <type name="DataGaussCov" c:type="NcmDataGaussCov*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="lnNorma2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gauss" transfer-ownership="none">
            <type name="DataGaussCov" c:type="NcmDataGaussCov*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="m2lnL" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="lnNorma2_bs">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gauss" transfer-ownership="none">
            <type name="DataGaussCov" c:type="NcmDataGaussCov*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="bstrap" transfer-ownership="none">
            <type name="Bootstrap" c:type="NcmBootstrap*"/>
          </parameter>
          <parameter name="m2lnL" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="mean_func">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gauss" transfer-ownership="none">
            <type name="DataGaussCov" c:type="NcmDataGaussCov*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="vp" transfer-ownership="none">
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_size" invoker="set_size">
        <doc xml:space="preserve">Sets the data size to @np.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gauss" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataGaussCov</doc>
            <type name="DataGaussCov" c:type="NcmDataGaussCov*"/>
          </instance-parameter>
          <parameter name="np" transfer-ownership="none">
            <doc xml:space="preserve">data size.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_size" c:identifier="ncm_data_gauss_cov_get_size">
        <doc xml:space="preserve">Gets the data size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Data size.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="gauss" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataGaussCov</doc>
            <type name="DataGaussCov" c:type="NcmDataGaussCov*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="ncm_data_gauss_cov_set_size">
        <doc xml:space="preserve">Sets the data size to @np.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gauss" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataGaussCov</doc>
            <type name="DataGaussCov" c:type="NcmDataGaussCov*"/>
          </instance-parameter>
          <parameter name="np" transfer-ownership="none">
            <doc xml:space="preserve">data size.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="cov" writable="1" transfer-ownership="none">
        <type name="Matrix"/>
      </property>
      <property name="mean" writable="1" transfer-ownership="none">
        <type name="Vector"/>
      </property>
      <property name="n-points"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="use-norma" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Data" c:type="NcmData"/>
      </field>
      <field name="np" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="y" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="v" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="cov" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="LLT" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="prepared_LLT" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="use_norma" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="DataGaussCovClass"
            c:type="NcmDataGaussCovClass"
            glib:is-gtype-struct-for="DataGaussCov">
      <field name="parent_class" readable="0" private="1">
        <type name="DataClass" c:type="NcmDataClass"/>
      </field>
      <field name="mean_func">
        <callback name="mean_func">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gauss" transfer-ownership="none">
              <type name="DataGaussCov" c:type="NcmDataGaussCov*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
            <parameter name="vp" transfer-ownership="none">
              <type name="Vector" c:type="NcmVector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cov_func">
        <callback name="cov_func">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="gauss" transfer-ownership="none">
              <type name="DataGaussCov" c:type="NcmDataGaussCov*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
            <parameter name="cov" transfer-ownership="none">
              <type name="Matrix" c:type="NcmMatrix*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="lnNorma2">
        <callback name="lnNorma2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gauss" transfer-ownership="none">
              <type name="DataGaussCov" c:type="NcmDataGaussCov*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
            <parameter name="m2lnL" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="lnNorma2_bs">
        <callback name="lnNorma2_bs">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gauss" transfer-ownership="none">
              <type name="DataGaussCov" c:type="NcmDataGaussCov*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
            <parameter name="bstrap" transfer-ownership="none">
              <type name="Bootstrap" c:type="NcmBootstrap*"/>
            </parameter>
            <parameter name="m2lnL" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_size">
        <callback name="set_size">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="gauss" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmDataGaussCov</doc>
              <type name="DataGaussCov" c:type="NcmDataGaussCov*"/>
            </parameter>
            <parameter name="np" transfer-ownership="none">
              <doc xml:space="preserve">data size.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">Data size.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="gauss" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmDataGaussCov</doc>
              <type name="DataGaussCov" c:type="NcmDataGaussCov*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DataGaussDiag"
           c:symbol-prefix="data_gauss_diag"
           c:type="NcmDataGaussDiag"
           parent="Data"
           abstract="1"
           glib:type-name="NcmDataGaussDiag"
           glib:get-type="ncm_data_gauss_diag_get_type"
           glib:type-struct="DataGaussDiagClass">
      <virtual-method name="get_size" invoker="get_size">
        <doc xml:space="preserve">Gets the data size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Data size.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="diag" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataGaussDiag</doc>
            <type name="DataGaussDiag" c:type="NcmDataGaussDiag*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="mean_func">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="diag" transfer-ownership="none">
            <type name="DataGaussDiag" c:type="NcmDataGaussDiag*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="vp" transfer-ownership="none">
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_size" invoker="set_size">
        <doc xml:space="preserve">Sets the data size to @np.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="diag" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataGaussDiag</doc>
            <type name="DataGaussDiag" c:type="NcmDataGaussDiag*"/>
          </instance-parameter>
          <parameter name="np" transfer-ownership="none">
            <doc xml:space="preserve">data size.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="sigma_func">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="diag" transfer-ownership="none">
            <type name="DataGaussDiag" c:type="NcmDataGaussDiag*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="var" transfer-ownership="none">
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_size" c:identifier="ncm_data_gauss_diag_get_size">
        <doc xml:space="preserve">Gets the data size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Data size.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="diag" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataGaussDiag</doc>
            <type name="DataGaussDiag" c:type="NcmDataGaussDiag*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="ncm_data_gauss_diag_set_size">
        <doc xml:space="preserve">Sets the data size to @np.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="diag" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataGaussDiag</doc>
            <type name="DataGaussDiag" c:type="NcmDataGaussDiag*"/>
          </instance-parameter>
          <parameter name="np" transfer-ownership="none">
            <doc xml:space="preserve">data size.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="mean" writable="1" transfer-ownership="none">
        <type name="Vector"/>
      </property>
      <property name="n-points"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="sigma" writable="1" transfer-ownership="none">
        <type name="Vector"/>
      </property>
      <property name="w-mean" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Data" c:type="NcmData"/>
      </field>
      <field name="np" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="y" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="v" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="sigma" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="weight" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="wt" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="prepared_w" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="wmean" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="DataGaussDiagClass"
            c:type="NcmDataGaussDiagClass"
            glib:is-gtype-struct-for="DataGaussDiag">
      <field name="parent_class" readable="0" private="1">
        <type name="DataClass" c:type="NcmDataClass"/>
      </field>
      <field name="mean_func">
        <callback name="mean_func">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="diag" transfer-ownership="none">
              <type name="DataGaussDiag" c:type="NcmDataGaussDiag*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
            <parameter name="vp" transfer-ownership="none">
              <type name="Vector" c:type="NcmVector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="sigma_func">
        <callback name="sigma_func">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="diag" transfer-ownership="none">
              <type name="DataGaussDiag" c:type="NcmDataGaussDiag*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
            <parameter name="var" transfer-ownership="none">
              <type name="Vector" c:type="NcmVector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_size">
        <callback name="set_size">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="diag" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmDataGaussDiag</doc>
              <type name="DataGaussDiag" c:type="NcmDataGaussDiag*"/>
            </parameter>
            <parameter name="np" transfer-ownership="none">
              <doc xml:space="preserve">data size.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">Data size.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="diag" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmDataGaussDiag</doc>
              <type name="DataGaussDiag" c:type="NcmDataGaussDiag*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DataPoisson"
           c:symbol-prefix="data_poisson"
           c:type="NcmDataPoisson"
           parent="Data"
           abstract="1"
           glib:type-name="NcmDataPoisson"
           glib:get-type="ncm_data_poisson_get_type"
           glib:type-struct="DataPoissonClass">
      <doc xml:space="preserve">FIXME</doc>
      <virtual-method name="get_size" invoker="get_size">
        <doc xml:space="preserve">Gets the data size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Data size.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="poisson" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataPoisson</doc>
            <type name="DataPoisson" c:type="NcmDataPoisson*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="mean_func">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="poisson" transfer-ownership="none">
            <type name="DataPoisson" c:type="NcmDataPoisson*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_size" invoker="set_size">
        <doc xml:space="preserve">Sets the number of bins to @nbins.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="poisson" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataPoisson</doc>
            <type name="DataPoisson" c:type="NcmDataPoisson*"/>
          </instance-parameter>
          <parameter name="nbins" transfer-ownership="none">
            <doc xml:space="preserve">number of bins.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_hist_means"
              c:identifier="ncm_data_poisson_get_hist_means">
        <doc xml:space="preserve">Gets the vector containing the bins values.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">vector containing the bins values.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="poisson" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataPoisson</doc>
            <type name="DataPoisson" c:type="NcmDataPoisson*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_hist_vals"
              c:identifier="ncm_data_poisson_get_hist_vals">
        <doc xml:space="preserve">Gets the vector containing the bins values.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">vector containing the bins values.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="poisson" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataPoisson</doc>
            <type name="DataPoisson" c:type="NcmDataPoisson*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="ncm_data_poisson_get_size">
        <doc xml:space="preserve">Gets the data size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Data size.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="poisson" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataPoisson</doc>
            <type name="DataPoisson" c:type="NcmDataPoisson*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sum" c:identifier="ncm_data_poisson_get_sum">
        <doc xml:space="preserve">Gets the sum of all bins.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Sum of all bins.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="poisson" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataPoisson</doc>
            <type name="DataPoisson" c:type="NcmDataPoisson*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init_from_binning"
              c:identifier="ncm_data_poisson_init_from_binning">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="poisson" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataPoisson</doc>
            <type name="DataPoisson" c:type="NcmDataPoisson*"/>
          </instance-parameter>
          <parameter name="nodes" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_from_histogram"
              c:identifier="ncm_data_poisson_init_from_histogram"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="poisson" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataPoisson</doc>
            <type name="DataPoisson" c:type="NcmDataPoisson*"/>
          </instance-parameter>
          <parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type c:type="gsl_histogram*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_from_vector"
              c:identifier="ncm_data_poisson_init_from_vector">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="poisson" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataPoisson</doc>
            <type name="DataPoisson" c:type="NcmDataPoisson*"/>
          </instance-parameter>
          <parameter name="nodes" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="N" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_zero"
              c:identifier="ncm_data_poisson_init_zero"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="poisson" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataPoisson</doc>
            <type name="DataPoisson" c:type="NcmDataPoisson*"/>
          </instance-parameter>
          <parameter name="nodes" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="ncm_data_poisson_set_size">
        <doc xml:space="preserve">Sets the number of bins to @nbins.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="poisson" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataPoisson</doc>
            <type name="DataPoisson" c:type="NcmDataPoisson*"/>
          </instance-parameter>
          <parameter name="nbins" transfer-ownership="none">
            <doc xml:space="preserve">number of bins.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="mean" writable="1" transfer-ownership="none">
        <type name="Vector"/>
      </property>
      <property name="n-bins"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Data" c:type="NcmData"/>
      </field>
      <field name="h" introspectable="0" readable="0" private="1">
        <type c:type="gsl_histogram*"/>
      </field>
      <field name="means" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="log_Nfac" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="nbins" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="DataPoissonClass"
            c:type="NcmDataPoissonClass"
            glib:is-gtype-struct-for="DataPoisson">
      <field name="parent_class" readable="0" private="1">
        <type name="DataClass" c:type="NcmDataClass"/>
      </field>
      <field name="mean_func">
        <callback name="mean_func">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="poisson" transfer-ownership="none">
              <type name="DataPoisson" c:type="NcmDataPoisson*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
            <parameter name="n" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_size">
        <callback name="set_size">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="poisson" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmDataPoisson</doc>
              <type name="DataPoisson" c:type="NcmDataPoisson*"/>
            </parameter>
            <parameter name="nbins" transfer-ownership="none">
              <doc xml:space="preserve">number of bins.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">Data size.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="poisson" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmDataPoisson</doc>
              <type name="DataPoisson" c:type="NcmDataPoisson*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="DataPoissonType"
                 glib:type-name="NcmDataPoissonType"
                 glib:get-type="ncm_data_poisson_type_get_type"
                 c:type="NcmDataPoissonType">
      <doc xml:space="preserve">FIXME</doc>
      <member name="int"
              value="0"
              c:identifier="NCM_DATA_POISSON_INT"
              glib:nick="int">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="Dataset"
           c:symbol-prefix="dataset"
           c:type="NcmDataset"
           parent="GObject.Object"
           glib:type-name="NcmDataset"
           glib:get-type="ncm_dataset_get_type"
           glib:type-struct="DatasetClass">
      <constructor name="new" c:identifier="ncm_dataset_new">
        <doc xml:space="preserve">Creates a new empty #NcmDataset object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmDataset.</doc>
          <type name="Dataset" c:type="NcmDataset*"/>
        </return-value>
      </constructor>
      <function name="clear" c:identifier="ncm_dataset_clear">
        <doc xml:space="preserve">Decreses the reference count of *@dset by one, and sets *@dset to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">pointer to type defined by #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset**"/>
          </parameter>
        </parameters>
      </function>
      <method name="all_init" c:identifier="ncm_dataset_all_init">
        <doc xml:space="preserve">Checks whenever all #NcmData in @dset are initiated.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whenever @dset is initiated.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">pointer to type defined by #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="append_data" c:identifier="ncm_dataset_append_data">
        <doc xml:space="preserve">Appends @data to @dset.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">pointer to type defined by #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">#NcmData object to be appended to #NcmDataset</doc>
            <type name="Data" c:type="NcmData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="bootstrap_resample"
              c:identifier="ncm_dataset_bootstrap_resample">
        <doc xml:space="preserve">Perform one bootstrap as in ncm_data_bootstrap_resample() in every #NcmData
in @dset.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset.</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <method name="bootstrap_set" c:identifier="ncm_dataset_bootstrap_set">
        <doc xml:space="preserve">Disable or sets bootstrap method for @dset.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset.</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
          <parameter name="bstype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDatasetBStrapType.</doc>
            <type name="DatasetBStrapType" c:type="NcmDatasetBStrapType"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="ncm_dataset_copy">
        <doc xml:space="preserve">Duplicates the object getting a reference of its content.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the duplicate of @dset, new container.</doc>
          <type name="Dataset" c:type="NcmDataset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">pointer to type defined by #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="ncm_dataset_dup">
        <doc xml:space="preserve">Duplicates the object and all of its content.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the duplicate of @dset.</doc>
          <type name="Dataset" c:type="NcmDataset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
          <parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_dataset_free">
        <doc xml:space="preserve">Decreses the reference count of @dset by one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">pointer to type defined by #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="ncm_dataset_get_data">
        <doc xml:space="preserve">Gets the @n-th #NcmData in @dset and increses its reference count by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the #NcmData associated with @n.</doc>
          <type name="Data" c:type="NcmData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">pointer to type defined by #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">the #NcmData index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data_array" c:identifier="ncm_dataset_get_data_array">
        <doc xml:space="preserve">Gets the #NcmObjArray from @dset.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the array of #NcmData.</doc>
          <type name="ObjArray" c:type="NcmObjArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dof" c:identifier="ncm_dataset_get_dof">
        <doc xml:space="preserve">Calculate the total degrees of freedom associated with all #NcmData
objects.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">summed degrees of freedom of all #NcmData in @dset.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">pointer to type defined by #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_info" c:identifier="ncm_dataset_get_info">
        <doc xml:space="preserve">Obtains the informations associated with every #NcmData in @dset.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@dset description</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_length" c:identifier="ncm_dataset_get_length">
        <doc xml:space="preserve">Number of diferent #NcmData in @dset.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number of #NcmData objects in the set</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">pointer to type defined by #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n" c:identifier="ncm_dataset_get_n">
        <doc xml:space="preserve">Calculates the total number of data set points.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">total number of data set points.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">pointer to type defined by #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ndata" c:identifier="ncm_dataset_get_ndata">
        <doc xml:space="preserve">Gets number of #NcmData in @dset.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number of #NcmData objects in @dset.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_leastsquares_J"
              c:identifier="ncm_dataset_has_leastsquares_J">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_leastsquares_f"
              c:identifier="ncm_dataset_has_leastsquares_f">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_leastsquares_f_J"
              c:identifier="ncm_dataset_has_leastsquares_f_J">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_m2lnL_grad" c:identifier="ncm_dataset_has_m2lnL_grad">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_m2lnL_val" c:identifier="ncm_dataset_has_m2lnL_val">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_m2lnL_val_grad"
              c:identifier="ncm_dataset_has_m2lnL_val_grad">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="leastsquares_J" c:identifier="ncm_dataset_leastsquares_J">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood.</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="J" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix.</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="leastsquares_f" c:identifier="ncm_dataset_leastsquares_f">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="leastsquares_f_J"
              c:identifier="ncm_dataset_leastsquares_f_J">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood.</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="J" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix.</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="log_info" c:identifier="ncm_dataset_log_info">
        <doc xml:space="preserve">Prints in the log the informations associated with every #NcmData in @dset.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="m2lnL_grad" c:identifier="ncm_dataset_m2lnL_grad">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood.</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="grad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_i_val" c:identifier="ncm_dataset_m2lnL_i_val">
        <doc xml:space="preserve">Get the value of the @i-th data in the dataset.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">an integer</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="m2lnL_i"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_val" c:identifier="ncm_dataset_m2lnL_val">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood.</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="m2lnL"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_val_grad" c:identifier="ncm_dataset_m2lnL_val_grad">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood.</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="m2lnL"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="grad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_vec" c:identifier="ncm_dataset_m2lnL_vec">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood.</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="m2lnL_v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_data" c:identifier="ncm_dataset_peek_data">
        <doc xml:space="preserve">Gets the @n-th #NcmData in @dset.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #NcmData associated with @n.</doc>
          <type name="Data" c:type="NcmData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">the #NcmData index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_data_array"
              c:identifier="ncm_dataset_peek_data_array">
        <doc xml:space="preserve">Gets the #NcmObjArray from @dset.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the array of #NcmData.</doc>
          <type name="ObjArray" c:type="NcmObjArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_dataset_ref">
        <doc xml:space="preserve">Increases the reference count of @dset by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@dset.</doc>
          <type name="Dataset" c:type="NcmDataset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">pointer to type defined by #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="resample" c:identifier="ncm_dataset_resample">
        <doc xml:space="preserve">Resamples every #NcmData in @dset with the models contained in @mset.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data_array" c:identifier="ncm_dataset_set_data_array">
        <doc xml:space="preserve">Sets the @dset with @oa.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </instance-parameter>
          <parameter name="oa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmObjArray containing #NcmData objects.</doc>
            <type name="ObjArray" c:type="NcmObjArray*"/>
          </parameter>
        </parameters>
      </method>
      <property name="bootstrap-type" writable="1" transfer-ownership="none">
        <type name="DatasetBStrapType"/>
      </property>
      <property name="data-array" writable="1" transfer-ownership="none">
        <type name="ObjArray"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="oa" readable="0" private="1">
        <type name="ObjArray" c:type="NcmObjArray*"/>
      </field>
      <field name="bstype" readable="0" private="1">
        <type name="DatasetBStrapType" c:type="NcmDatasetBStrapType"/>
      </field>
      <field name="data_prob" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="bstrap" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <enumeration name="DatasetBStrapType"
                 glib:type-name="NcmDatasetBStrapType"
                 glib:get-type="ncm_dataset_bstrap_type_get_type"
                 c:type="NcmDatasetBStrapType">
      <member name="disable"
              value="0"
              c:identifier="NCM_DATASET_BSTRAP_DISABLE"
              glib:nick="disable">
        <doc xml:space="preserve">Bootstrap disabled.</doc>
      </member>
      <member name="partial"
              value="1"
              c:identifier="NCM_DATASET_BSTRAP_PARTIAL"
              glib:nick="partial">
        <doc xml:space="preserve">Partial bootstrap, each #NcmData is bootstraped individually.</doc>
      </member>
      <member name="total"
              value="2"
              c:identifier="NCM_DATASET_BSTRAP_TOTAL"
              glib:nick="total">
        <doc xml:space="preserve">Total bootstrap, all data is bootstraped simultaneously.</doc>
      </member>
    </enumeration>
    <record name="DatasetClass"
            c:type="NcmDatasetClass"
            glib:is-gtype-struct-for="Dataset">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <union name="DoubleInt64" c:type="NcmDoubleInt64">
      <field name="i" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="x" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </union>
    <constant name="FIT_DEFAULT_M2LNL_ABSTOL"
              value="0.000000"
              c:type="NCM_FIT_DEFAULT_M2LNL_ABSTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="FIT_DEFAULT_M2LNL_RELTOL"
              value="0.000000"
              c:type="NCM_FIT_DEFAULT_M2LNL_RELTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="FIT_DEFAULT_MAXITER"
              value="10000"
              c:type="NCM_FIT_DEFAULT_MAXITER">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="FIT_DEFAULT_PARAMS_RELTOL"
              value="0.000010"
              c:type="NCM_FIT_DEFAULT_PARAMS_RELTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="FIT_ESMCMC_M2LNL_ID"
              value="0"
              c:type="NCM_FIT_ESMCMC_M2LNL_ID">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="FIT_ESMCMC_MIN_SYNC_INTERVAL"
              value="10.000000"
              c:type="NCM_FIT_ESMCMC_MIN_SYNC_INTERVAL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="FIT_MCMC_MIN_SYNC_INTERVAL"
              value="10.000000"
              c:type="NCM_FIT_MCMC_MIN_SYNC_INTERVAL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="FIT_MC_MIN_SYNC_INTERVAL"
              value="10.000000"
              c:type="NCM_FIT_MC_MIN_SYNC_INTERVAL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <class name="Fftlog"
           c:symbol-prefix="fftlog"
           c:type="NcmFftlog"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NcmFftlog"
           glib:get-type="ncm_fftlog_get_type"
           glib:type-struct="FftlogClass">
      <function name="clear" c:identifier="ncm_fftlog_clear">
        <doc xml:space="preserve">If @fftlog is different from NULL, decreases the reference count of
@fftlog by one and sets @fftlog to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_Ym">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
          <parameter name="Ym_0"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="calibrate_size"
              c:identifier="ncm_fftlog_calibrate_size"
              introspectable="0">
        <doc xml:space="preserve">Increases the original (input) number of knots until the $G(r)$ splines reach
the required precision @reltol.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
          <parameter name="Fk" transfer-ownership="none">
            <doc xml:space="preserve">Fk function pointer</doc>
            <type c:type="gsl_function*"/>
          </parameter>
          <parameter name="reltol" transfer-ownership="none">
            <doc xml:space="preserve">relative tolerance</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_by_function"
              c:identifier="ncm_fftlog_eval_by_function"
              introspectable="0">
        <doc xml:space="preserve">Evaluates the function @Fk at each knot $\ln k_m$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
          <parameter name="Fk" transfer-ownership="none">
            <doc xml:space="preserve">Fk function pointer</doc>
            <type c:type="gsl_function*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_by_vector" c:identifier="ncm_fftlog_eval_by_vector">
        <doc xml:space="preserve">@Fk is a vector which contains the values of the function at each knot $\ln k_m$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
          <parameter name="Fk" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_output" c:identifier="ncm_fftlog_eval_output">
        <doc xml:space="preserve">Evaluates the function $G(r)$, or the @nderiv-th derivative,
at the point @lnr.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\frac{\mathrm{d}^nG(r)}{\mathrm{d}\ln r}$ value computed at @lnr.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
          <parameter name="nderiv" transfer-ownership="none">
            <doc xml:space="preserve">derivative number</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="lnr" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of $r$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_fftlog_free">
        <doc xml:space="preserve">Decreases the reference count of @fftlog by one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_full_length" c:identifier="ncm_fftlog_get_full_length">
        <doc xml:space="preserve">Gets the value of the total period, i.e., period defined by the fundamental interval plus the padding size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the total period $L_T$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_full_size" c:identifier="ncm_fftlog_get_full_size">
        <doc xml:space="preserve">Gets the number of knots $N_f^\prime$ where the integrated function is evaluated
plus padding.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the total number of knots $N_f^\prime$.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_length" c:identifier="ncm_fftlog_get_length">
        <doc xml:space="preserve">Gets the value of the ``physical'' period, i.e., period of the fundamental interval.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the period $L$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lnk0" c:identifier="ncm_fftlog_get_lnk0">
        <doc xml:space="preserve">Gets the center of the transform input $\ln(k_0)$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the input center $\ln(k_0)$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lnr0" c:identifier="ncm_fftlog_get_lnr0">
        <doc xml:space="preserve">Gets the center of the transform output.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the output center $\ln(r_0)$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode_index" c:identifier="ncm_fftlog_get_mode_index">
        <doc xml:space="preserve">Gets the index of the mode @i of the Fourier decomposition. This index corresponds
to the lable $n$ in Eq. \eqref{eq:Gr_decomp}.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the index of the mode</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">index</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_nderivs" c:identifier="ncm_fftlog_get_nderivs">
        <doc xml:space="preserve">Gets the number of derivatives the object is currently
calculating.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of derivatives calculated.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_norma" c:identifier="ncm_fftlog_get_norma">
        <doc xml:space="preserve">Gets the number of knots $N_f^\prime$ where the integrated function is evaluated
plus padding.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the total number of knots $N_f^\prime$ (double).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_padding" c:identifier="ncm_fftlog_get_padding">
        <doc xml:space="preserve">Gets the padding percentage.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the padding percentage.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="ncm_fftlog_get_size">
        <doc xml:space="preserve">Gets the number of knots $N^\prime$ where the integrated function is evaluated.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of knots $N^\prime$.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vector_Gr" c:identifier="ncm_fftlog_get_vector_Gr">
        <doc xml:space="preserve">Gets the vector of the transformed function $G(r)$, @nderiv = 0, or
its @nderiv-th derivative with respect to $\ln r$.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a vector of $G(r)$ values or its @nderiv-th derivative.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
          <parameter name="nderiv" transfer-ownership="none">
            <doc xml:space="preserve">derivative number</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_vector_lnr" c:identifier="ncm_fftlog_get_vector_lnr">
        <doc xml:space="preserve">Gets the vector of the $\ln r$ knots.</doc>
        <return-value transfer-ownership="full">
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_name" c:identifier="ncm_fftlog_peek_name">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The internal string describing #NcmFftlog.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_output_vector"
              c:identifier="ncm_fftlog_peek_output_vector">
        <doc xml:space="preserve">Peeks the output vector respective to $G(r)$, @nderiv = 0, or
its @comp-th derivative with respect to $\ln r$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the output vector $G(r)$ or its @comp-th derivative.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
          <parameter name="nderiv" transfer-ownership="none">
            <doc xml:space="preserve">derivative number</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_spline_Gr" c:identifier="ncm_fftlog_peek_spline_Gr">
        <doc xml:space="preserve">Peeks the spline of $G(r)$, @nderiv = 0,
or the spline of the @nderiv-th derivative of $G(r)$ with
respect to $\ln r$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the @nderiv component of the spline.</doc>
          <type name="Spline" c:type="NcmSpline*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
          <parameter name="nderiv" transfer-ownership="none">
            <doc xml:space="preserve">derivative number</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_splines" c:identifier="ncm_fftlog_prepare_splines">
        <doc xml:space="preserve">Prepares the set of splines respective to the function $G(r)$
and, if required, its n-order derivatives.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_fftlog_ref">
        <doc xml:space="preserve">Increases the reference count of @fftlog by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@fftlog</doc>
          <type name="Fftlog" c:type="NcmFftlog*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_length" c:identifier="ncm_fftlog_set_length">
        <doc xml:space="preserve">Sets the length of the period @Lk, where the function is periodic in logarithmic space $\ln k$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
          <parameter name="Lk" transfer-ownership="none">
            <doc xml:space="preserve">period in the logarithmic space</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lnk0" c:identifier="ncm_fftlog_set_lnk0">
        <doc xml:space="preserve">Sets the center of the transform input $\ln(k_0)$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
          <parameter name="lnk0" transfer-ownership="none">
            <doc xml:space="preserve">input center $\ln(k_0)$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lnr0" c:identifier="ncm_fftlog_set_lnr0">
        <doc xml:space="preserve">Sets the center of the transform output $\ln(r_0)$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
          <parameter name="lnr0" transfer-ownership="none">
            <doc xml:space="preserve">output center $\ln(r_0)$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="ncm_fftlog_set_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nderivs" c:identifier="ncm_fftlog_set_nderivs">
        <doc xml:space="preserve">Sets @nderivs as the number of derivatives to calculate.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
          <parameter name="nderivs" transfer-ownership="none">
            <doc xml:space="preserve">the number of derivatives</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_padding" c:identifier="ncm_fftlog_set_padding">
        <doc xml:space="preserve">Sets the size of the padding in percetange of the interval.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
          <parameter name="pad_p" transfer-ownership="none">
            <doc xml:space="preserve">padding percentage</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="ncm_fftlog_set_size">
        <doc xml:space="preserve">Sets the number of knots $N_f^\prime$ where the integrated function is evaluated,
given the input number of knots @n, plus padding.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fftlog" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFftlog</doc>
            <type name="Fftlog" c:type="NcmFftlog*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">number of knots</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="Lk"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="N" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="lnk0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="lnr0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="name" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="nderivs"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="padding"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="Nr" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="N" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="N_2" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="Nf" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="Nf_2" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="nderivs" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="pad" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="lnk0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lnr0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="Lk" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="Lk_N" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="pad_p" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="prepared" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="evaluated" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="lnr_vec" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="Gr_vec" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="Gr_s" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="Fk" readable="0" private="1">
        <type name="gint" c:type="gint*"/>
      </field>
      <field name="Cm" readable="0" private="1">
        <type name="gint" c:type="gint*"/>
      </field>
      <field name="Gr" readable="0" private="1">
        <type name="gint" c:type="gint*"/>
      </field>
      <field name="CmYm" readable="0" private="1">
        <type name="gint" c:type="gint*"/>
      </field>
      <field name="Ym" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="p_Fk2Cm" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="p_CmYm2Gr" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
    </class>
    <record name="FftlogClass"
            c:type="NcmFftlogClass"
            glib:is-gtype-struct-for="Fftlog">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="name" readable="0" private="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="get_Ym">
        <callback name="get_Ym">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="fftlog" transfer-ownership="none">
              <type name="Fftlog" c:type="NcmFftlog*"/>
            </parameter>
            <parameter name="Ym_0"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="FftlogGausswin2"
           c:symbol-prefix="fftlog_gausswin2"
           c:type="NcmFftlogGausswin2"
           parent="Fftlog"
           glib:type-name="NcmFftlogGausswin2"
           glib:get-type="ncm_fftlog_gausswin2_get_type"
           glib:type-struct="FftlogGausswin2Class">
      <constructor name="new" c:identifier="ncm_fftlog_gausswin2_new">
        <doc xml:space="preserve">Creates a new fftlog Gaussian window squared object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmFftlogGausswin2</doc>
          <type name="FftlogGausswin2" c:type="NcmFftlogGausswin2*"/>
        </return-value>
        <parameters>
          <parameter name="lnr0" transfer-ownership="none">
            <doc xml:space="preserve">output center $\ln(r_0)$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="lnk0" transfer-ownership="none">
            <doc xml:space="preserve">input center $\ln(k_0)$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="Lk" transfer-ownership="none">
            <doc xml:space="preserve">input/output interval size</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="N" transfer-ownership="none">
            <doc xml:space="preserve">number of knots</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Fftlog" c:type="NcmFftlog"/>
      </field>
    </class>
    <record name="FftlogGausswin2Class"
            c:type="NcmFftlogGausswin2Class"
            glib:is-gtype-struct-for="FftlogGausswin2">
      <field name="parent_class" readable="0" private="1">
        <type name="FftlogClass" c:type="NcmFftlogClass"/>
      </field>
    </record>
    <class name="FftlogTophatwin2"
           c:symbol-prefix="fftlog_tophatwin2"
           c:type="NcmFftlogTophatwin2"
           parent="Fftlog"
           glib:type-name="NcmFftlogTophatwin2"
           glib:get-type="ncm_fftlog_tophatwin2_get_type"
           glib:type-struct="FftlogTophatwin2Class">
      <constructor name="new" c:identifier="ncm_fftlog_tophatwin2_new">
        <doc xml:space="preserve">Creates a new fftlog top hat window squared object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmFftlogTophatwin2</doc>
          <type name="FftlogTophatwin2" c:type="NcmFftlogTophatwin2*"/>
        </return-value>
        <parameters>
          <parameter name="lnr0" transfer-ownership="none">
            <doc xml:space="preserve">output center $\ln(r_0)$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="lnk0" transfer-ownership="none">
            <doc xml:space="preserve">input center $\ln(k_0)$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="Lk" transfer-ownership="none">
            <doc xml:space="preserve">input/output interval size</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="N" transfer-ownership="none">
            <doc xml:space="preserve">number of knots</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Fftlog" c:type="NcmFftlog"/>
      </field>
    </class>
    <record name="FftlogTophatwin2Class"
            c:type="NcmFftlogTophatwin2Class"
            glib:is-gtype-struct-for="FftlogTophatwin2">
      <field name="parent_class" readable="0" private="1">
        <type name="FftlogClass" c:type="NcmFftlogClass"/>
      </field>
    </record>
    <class name="Fit"
           c:symbol-prefix="fit"
           c:type="NcmFit"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NcmFit"
           glib:get-type="ncm_fit_get_type"
           glib:type-struct="FitClass">
      <constructor name="new" c:identifier="ncm_fit_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Fit" c:type="NcmFit*"/>
        </return-value>
        <parameters>
          <parameter name="ftype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitType</doc>
            <type name="FitType" c:type="NcmFitType"/>
          </parameter>
          <parameter name="algo_name" transfer-ownership="none">
            <doc xml:space="preserve">name of the algorithm to be used</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="gtype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitGradType</doc>
            <type name="FitGradType" c:type="NcmFitGradType"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_fit_clear">
        <doc xml:space="preserve">The reference count of @fit is decreased and the pointer is set to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="copy_new" invoker="copy_new">
        <doc xml:space="preserve">Duplicates the #NcmFit object with new references for its contents.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Fit" c:type="NcmFit*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="gtype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitGradType</doc>
            <type name="FitGradType" c:type="NcmFitGradType"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_desc" invoker="get_desc">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">fit object description.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reset" invoker="reset">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="run" invoker="run">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitRunMsgs</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_equality_constraint"
              c:identifier="ncm_fit_add_equality_constraint">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </parameter>
          <parameter name="tot" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_inequality_constraint"
              c:identifier="ncm_fit_add_inequality_constraint">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </parameter>
          <parameter name="tot" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="chisq_test" c:identifier="ncm_fit_chisq_test">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="bins" transfer-ownership="none">
            <type name="gsize" c:type="size_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy_new" c:identifier="ncm_fit_copy_new">
        <doc xml:space="preserve">Duplicates the #NcmFit object with new references for its contents.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Fit" c:type="NcmFit*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="gtype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitGradType</doc>
            <type name="FitGradType" c:type="NcmFitGradType"/>
          </parameter>
        </parameters>
      </method>
      <method name="covar_cor" c:identifier="ncm_fit_covar_cor">
        <doc xml:space="preserve">Computes the correlation between the parameters @pid1 and @pid2 of the models
@mid1 and @mid2, respectively.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the correlation between @pid1 and @pid2</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="mid1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelID</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid1" transfer-ownership="none">
            <doc xml:space="preserve">the parameter's index of the model @mid1 (integer)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="mid2" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelID</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid2" transfer-ownership="none">
            <doc xml:space="preserve">the parameter's index of the model @mid1 (integer)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="covar_cov" c:identifier="ncm_fit_covar_cov">
        <doc xml:space="preserve">Computes the covariance between the parameters @pid1 and @pid2 of the models
@mid1 and @mid2, respectively.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the covariance between @pid1 and @pid2</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="mid1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelID</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid1" transfer-ownership="none">
            <doc xml:space="preserve">the parameter's index of the model @mid1 (integer)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="mid2" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelID</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid2" transfer-ownership="none">
            <doc xml:space="preserve">the parameter's index of the model @mid1 (integer)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="covar_fparam_cor" c:identifier="ncm_fit_covar_fparam_cor">
        <doc xml:space="preserve">Computes the correlation between the fitted parameters @fpi1 and @fpi2.
These indices refers to the list of all FREE parameters set in the MSet.

See also the similar function ncm_fit_covar_cor() to which one has to provide
the respective models of the parameters.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the correlation between the fitted parameters @pdi1 and @fpdi2</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="fpi1" transfer-ownership="none">
            <doc xml:space="preserve">index of a free parameter</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="fpi2" transfer-ownership="none">
            <doc xml:space="preserve">index of a free parameter</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="covar_fparam_cov" c:identifier="ncm_fit_covar_fparam_cov">
        <doc xml:space="preserve">Computes the covariance between the fitted parameters @fpi1 and @fpi2.
These indices refers to the list of all FREE parameters set in the MSet.

See also the similar function ncm_fit_covar_cov() to which one has to provide
the respective models of the parameters.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the covariance between the fitted parameters @pdi1 and @fpdi2</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="fpi1" transfer-ownership="none">
            <doc xml:space="preserve">index of a free parameter</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="fpi2" transfer-ownership="none">
            <doc xml:space="preserve">index of a free parameter</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="covar_fparam_sd" c:identifier="ncm_fit_covar_fparam_sd">
        <doc xml:space="preserve">Computes the standard deviation of the fitted parameter @fpi.
This index refers to the list of all FREE parameters set in the MSet.

See also the similar function ncm_fit_covar_sd() to which one has to provide
the respective model of the parameter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the standard deviation of the fitted parameter @fpi</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="fpi" transfer-ownership="none">
            <doc xml:space="preserve">index of a free parameter</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="covar_fparam_var" c:identifier="ncm_fit_covar_fparam_var">
        <doc xml:space="preserve">Computes the variance of the fitted parameter @fpi.
This index refers to the list of all FREE parameters set in the MSet.

See also the similar function ncm_fit_covar_var() to which one has to provide
the respective model of the parameter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the variance of the fitted parameter @fpi</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="fpi" transfer-ownership="none">
            <doc xml:space="preserve">index of a free parameter</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="covar_sd" c:identifier="ncm_fit_covar_sd">
        <doc xml:space="preserve">Computes the standard deviation of the fitted parameter @pid of the model @mid.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the standard deviation of the fitted parameter @pid</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelID</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">the parameter's index of the model @mid (integer)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="covar_var" c:identifier="ncm_fit_covar_var">
        <doc xml:space="preserve">Computes the variance of the fitted parameter @pid of the model @mid.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the variance of the fitted parameter @pid</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelID</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">the parameter's index of the model @mid (integer)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="data_m2lnL_val" c:identifier="ncm_fit_data_m2lnL_val">
        <doc xml:space="preserve">This function computes minus two times the logarithm base e of the likelihood
using only the data set and not considering any prior. The result is set
on @data_m2lnL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="data_m2lnL"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">minus two times the logarithm base e of the likelihood.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dprob" c:identifier="ncm_fit_dprob">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit.</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelID.</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="step" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="norm" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="ncm_fit_dup">
        <doc xml:space="preserve">Duplicates the #NcmFit object duplicating all its contents.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Fit" c:type="NcmFit*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fishermatrix_print"
              c:identifier="ncm_fit_fishermatrix_print">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="out" transfer-ownership="none">
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="header" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_fit_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @fit by one. If the reference count drops to 0,
all memory allocated by @fit is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="function_cov" c:identifier="ncm_fit_function_cov">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="func1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </parameter>
          <parameter name="z1" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="func2" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </parameter>
          <parameter name="z2" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="pretty_print" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="function_error" c:identifier="ncm_fit_function_error">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="pretty_print" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="f"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="sigma_f"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_covar" c:identifier="ncm_fit_get_covar">
        <doc xml:space="preserve">Returns a copy of the covariance matrix (pre-calculated by, e.g, ncm_fit_numdiff_m2lnL_covar()).</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the covariance matrix</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_desc" c:identifier="ncm_fit_get_desc">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">fit object description.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_m2lnL_abstol" c:identifier="ncm_fit_get_m2lnL_abstol">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the absolute tolerance (double).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_m2lnL_reltol" c:identifier="ncm_fit_get_m2lnL_reltol">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the relative tolerance (double).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_maxiter" c:identifier="ncm_fit_get_maxiter">
        <doc xml:space="preserve">Gets the maximum number of iterations.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a integer (maxiter) that corresponds to the maximum number of iterations.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit.</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_params_reltol"
              c:identifier="ncm_fit_get_params_reltol">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sub_fit" c:identifier="ncm_fit_get_sub_fit">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Fit" c:type="NcmFit*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_equality_constraints"
              c:identifier="ncm_fit_has_equality_constraints">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_inequality_constraints"
              c:identifier="ncm_fit_has_inequality_constraints">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_least_squares" c:identifier="ncm_fit_is_least_squares">
        <doc xml:space="preserve">Indicates if the least squares fitting is being used (TRUE) or not (FALSE).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whenever the fit object use a least squares method.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="log_covar" c:identifier="ncm_fit_log_covar">
        <doc xml:space="preserve">Prints to the log file the names and indices of the fitted parameters, their best-fit
values, standard deviations and correlation matrix.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="log_end" c:identifier="ncm_fit_log_end">
        <doc xml:space="preserve">This function prints in the log the precision with which the best-fit was found.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="log_info" c:identifier="ncm_fit_log_info">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="log_start" c:identifier="ncm_fit_log_start">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="log_state" c:identifier="ncm_fit_log_state">
        <doc xml:space="preserve">This function prints in the log the current state.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="log_step" c:identifier="ncm_fit_log_step">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="log_step_error"
              c:identifier="ncm_fit_log_step_error"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="strerror" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="lr_test" c:identifier="ncm_fit_lr_test">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit.</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelID.</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="dof" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="lr_test_range" c:identifier="ncm_fit_lr_test_range">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelID.</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="stop" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="step" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="ls_J" c:identifier="ncm_fit_ls_J">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="J" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ls_J_an" c:identifier="ncm_fit_ls_J_an">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="J" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ls_J_nd_ce" c:identifier="ncm_fit_ls_J_nd_ce">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="J" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ls_J_nd_fo" c:identifier="ncm_fit_ls_J_nd_fo">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="J" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ls_covar" c:identifier="ncm_fit_ls_covar">
        <doc xml:space="preserve">Computes the covariance matrix using the least squares method,
and fills up the internal structure matrix.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ls_f" c:identifier="ncm_fit_ls_f">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ls_f_J" c:identifier="ncm_fit_ls_f_J">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="J" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ls_f_J_an" c:identifier="ncm_fit_ls_f_J_an">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="J" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ls_f_J_nd_ce" c:identifier="ncm_fit_ls_f_J_nd_ce">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="J" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ls_f_J_nd_fo" c:identifier="ncm_fit_ls_f_J_nd_fo">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="J" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_grad" c:identifier="ncm_fit_m2lnL_grad">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="df" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_grad_an" c:identifier="ncm_fit_m2lnL_grad_an">
        <doc xml:space="preserve">Analytical gradient.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="df" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_grad_nd_ac" c:identifier="ncm_fit_m2lnL_grad_nd_ac">
        <doc xml:space="preserve">Numerical differentiation (accurate).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="grad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_grad_nd_ce" c:identifier="ncm_fit_m2lnL_grad_nd_ce">
        <doc xml:space="preserve">Numerical differentiation (central).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="grad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_grad_nd_fo" c:identifier="ncm_fit_m2lnL_grad_nd_fo">
        <doc xml:space="preserve">Numerical differentiation (forward).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="grad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_hessian_nd_ce"
              c:identifier="ncm_fit_m2lnL_hessian_nd_ce">
        <doc xml:space="preserve">Numerical differentiation (central) Hessian matrix.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="hessian" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_val" c:identifier="ncm_fit_m2lnL_val">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="m2lnL"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">minus two times the logarithm base e of the likelihood.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_val_grad" c:identifier="ncm_fit_m2lnL_val_grad">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="df" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_val_grad_an"
              c:identifier="ncm_fit_m2lnL_val_grad_an">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="df" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_val_grad_nd_ac"
              c:identifier="ncm_fit_m2lnL_val_grad_nd_ac">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="m2lnL"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">minus two times the logarithm base e of the likelihood.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="grad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_val_grad_nd_ce"
              c:identifier="ncm_fit_m2lnL_val_grad_nd_ce">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="m2lnL" transfer-ownership="none">
            <doc xml:space="preserve">minus two times the logarithm base e of the likelihood.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="grad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_val_grad_nd_fo"
              c:identifier="ncm_fit_m2lnL_val_grad_nd_fo">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="m2lnL"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">minus two times the logarithm base e of the likelihood.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="grad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="numdiff_m2lnL_covar"
              c:identifier="ncm_fit_numdiff_m2lnL_covar">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="numdiff_m2lnL_hessian"
              c:identifier="ncm_fit_numdiff_m2lnL_hessian">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="H" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
          <parameter name="reltol" transfer-ownership="none">
            <doc xml:space="preserve">relative tolerance.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="numdiff_m2lnL_lndet_covar"
              c:identifier="ncm_fit_numdiff_m2lnL_lndet_covar">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the logarithm of the determinant of the covariance matrix.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="params_set" c:identifier="ncm_fit_params_set">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="params_set_array" c:identifier="ncm_fit_params_set_array">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">an array of gdoubles</doc>
            <type name="gdouble" c:type="const gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="params_set_gsl_vector"
              c:identifier="ncm_fit_params_set_gsl_vector"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">a gsl_vector</doc>
            <type c:type="const gsl_vector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="params_set_vector"
              c:identifier="ncm_fit_params_set_vector">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="params_set_vector_offset"
              c:identifier="ncm_fit_params_set_vector_offset">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="params_update" c:identifier="ncm_fit_params_update">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="priors_m2lnL_val" c:identifier="ncm_fit_priors_m2lnL_val">
        <doc xml:space="preserve">This function computes minus two times the logarithm base e of the likelihood
using the data set and taking into account the assumed priors. The result is
set on @priors_m2lnL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="priors_m2lnL"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">minus two times the logarithm base e of the likelihood.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prob" c:identifier="ncm_fit_prob">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit.</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelID.</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_fit_ref">
        <doc xml:space="preserve">Increases the reference count of @fit.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@fit.</doc>
          <type name="Fit" c:type="NcmFit*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_equality_constraints"
              c:identifier="ncm_fit_remove_equality_constraints">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_inequality_constraints"
              c:identifier="ncm_fit_remove_inequality_constraints">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="ncm_fit_reset">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="residual_ks_test" c:identifier="ncm_fit_residual_ks_test">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit.</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="o_mean"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="o_sd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="o_skew"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="o_kurtosis"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="o_max"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="run" c:identifier="ncm_fit_run">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitRunMsgs</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_grad_type" c:identifier="ncm_fit_set_grad_type">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="gtype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitGradType</doc>
            <type name="FitGradType" c:type="NcmFitGradType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_m2lnL_abstol" c:identifier="ncm_fit_set_m2lnL_abstol">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="tol" transfer-ownership="none">
            <doc xml:space="preserve">absolute tolerance</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_m2lnL_reltol" c:identifier="ncm_fit_set_m2lnL_reltol">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="tol" transfer-ownership="none">
            <doc xml:space="preserve">relative tolarance</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_maxiter" c:identifier="ncm_fit_set_maxiter">
        <doc xml:space="preserve">Sets the maximum number of iterations.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="maxiter" transfer-ownership="none">
            <doc xml:space="preserve">maximum number of interations</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_params_reltol"
              c:identifier="ncm_fit_set_params_reltol">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="tol" transfer-ownership="none">
            <doc xml:space="preserve">relative tolerance</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sub_fit" c:identifier="ncm_fit_set_sub_fit">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="sub_fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </parameter>
        </parameters>
      </method>
      <method name="type_constrain_error"
              c:identifier="ncm_fit_type_constrain_error">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit" transfer-ownership="none">
            <type name="Fit" c:type="NcmFit*"/>
          </instance-parameter>
          <parameter name="p" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="nu" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="dir" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="func" transfer-ownership="none">
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="walk" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="equality-constraints"
                writable="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="grad-type"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="FitGradType"/>
      </property>
      <property name="inequality-constraints"
                writable="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="likelihood"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Likelihood"/>
      </property>
      <property name="m2lnL-abstol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="m2lnL-reltol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="maxiter"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="mset"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="MSet"/>
      </property>
      <property name="params-reltol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="state"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="FitState"/>
      </property>
      <property name="sub-fit" writable="1" transfer-ownership="none">
        <type name="Fit"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="lh" readable="0" private="1">
        <type name="Likelihood" c:type="NcmLikelihood*"/>
      </field>
      <field name="mset" readable="0" private="1">
        <type name="MSet" c:type="NcmMSet*"/>
      </field>
      <field name="fstate" readable="0" private="1">
        <type name="FitState" c:type="NcmFitState*"/>
      </field>
      <field name="mtype" readable="0" private="1">
        <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
      </field>
      <field name="grad" readable="0" private="1">
        <type name="FitGrad" c:type="NcmFitGrad"/>
      </field>
      <field name="maxiter" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="m2lnL_reltol" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="m2lnL_abstol" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="params_reltol" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="timer" readable="0" private="1">
        <type name="GLib.Timer" c:type="GTimer*"/>
      </field>
      <field name="equality_constraints" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="inequality_constraints" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="sub_fit" readable="0" private="1">
        <type name="Fit" c:type="NcmFit*"/>
      </field>
    </class>
    <record name="FitClass"
            c:type="NcmFitClass"
            glib:is-gtype-struct-for="Fit">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="copy_new">
        <callback name="copy_new">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </return-value>
          <parameters>
            <parameter name="fit" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmFit</doc>
              <type name="Fit" c:type="NcmFit*"/>
            </parameter>
            <parameter name="lh" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmLikelihood</doc>
              <type name="Likelihood" c:type="NcmLikelihood*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSet</doc>
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
            <parameter name="gtype" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmFitGradType</doc>
              <type name="FitGradType" c:type="NcmFitGradType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reset">
        <callback name="reset">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="fit" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmFit</doc>
              <type name="Fit" c:type="NcmFit*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="run">
        <callback name="run">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="fit" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmFit</doc>
              <type name="Fit" c:type="NcmFit*"/>
            </parameter>
            <parameter name="mtype" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmFitRunMsgs</doc>
              <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_desc">
        <callback name="get_desc">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">fit object description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="fit" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmFit</doc>
              <type name="Fit" c:type="NcmFit*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_least_squares" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <record name="FitConstraint"
            c:type="NcmFitConstraint"
            glib:type-name="NcmFitConstraint"
            glib:get-type="ncm_fit_constraint_get_type"
            c:symbol-prefix="fit_constraint">
      <field name="fit" readable="0" private="1">
        <type name="Fit" c:type="NcmFit*"/>
      </field>
      <field name="func" readable="0" private="1">
        <type name="MSetFunc" c:type="NcmMSetFunc*"/>
      </field>
      <field name="tot" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <constructor name="new" c:identifier="ncm_fit_constraint_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="FitConstraint" c:type="NcmFitConstraint*"/>
        </return-value>
        <parameters>
          <parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </parameter>
          <parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </parameter>
          <parameter name="tot" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="dup" c:identifier="ncm_fit_constraint_dup">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="FitConstraint" c:type="NcmFitConstraint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fitc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitConstraint</doc>
            <type name="FitConstraint" c:type="NcmFitConstraint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_fit_constraint_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fitc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitConstraint</doc>
            <type name="FitConstraint" c:type="NcmFitConstraint*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="FitESMCMC"
           c:symbol-prefix="fit_esmcmc"
           c:type="NcmFitESMCMC"
           parent="GObject.Object"
           glib:type-name="NcmFitESMCMC"
           glib:get-type="ncm_fit_esmcmc_get_type"
           glib:type-struct="FitESMCMCClass">
      <constructor name="new" c:identifier="ncm_fit_esmcmc_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
        </return-value>
        <parameters>
          <parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </parameter>
          <parameter name="nwalkers" transfer-ownership="none">
            <doc xml:space="preserve">number of walkers</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="sampler" transfer-ownership="none">
            <doc xml:space="preserve">inital points sampler #NcmMSetTransKern</doc>
            <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
          </parameter>
          <parameter name="walker"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmFitESMCMCWalker</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_funcs_array"
                   c:identifier="ncm_fit_esmcmc_new_funcs_array">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
        </return-value>
        <parameters>
          <parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </parameter>
          <parameter name="nwalkers" transfer-ownership="none">
            <doc xml:space="preserve">number of walkers</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="sampler" transfer-ownership="none">
            <doc xml:space="preserve">inital points sampler #NcmMSetTransKern</doc>
            <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
          </parameter>
          <parameter name="walker"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmFitESMCMCWalker</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
          <parameter name="funcs_array" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmObjArray of scalar functions to include in the catalog.</doc>
            <type name="ObjArray" c:type="NcmObjArray*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_fit_esmcmc_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC**"/>
          </parameter>
        </parameters>
      </function>
      <method name="end_run" c:identifier="ncm_fit_esmcmc_end_run">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_fit_esmcmc_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_accept_ratio"
              c:identifier="ncm_fit_esmcmc_get_accept_ratio">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_catalog" c:identifier="ncm_fit_esmcmc_get_catalog">
        <doc xml:space="preserve">Gets the generated catalog of @esmcmc.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the generated catalog.</doc>
          <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_offboard_ratio"
              c:identifier="ncm_fit_esmcmc_get_offboard_ratio">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_rng" c:identifier="ncm_fit_esmcmc_has_rng">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether there is a #NcmRNG set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mean_covar" c:identifier="ncm_fit_esmcmc_mean_covar">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_ser" c:identifier="ncm_fit_esmcmc_peek_ser">
        <doc xml:space="preserve">Peeks the internal #NcmSerialize object from @esmcmc.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the internal #NcmSerialize object.</doc>
          <type name="Serialize" c:type="NcmSerialize*"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="ncm_fit_esmcmc_reset">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="run" c:identifier="ncm_fit_esmcmc_run">
        <doc xml:space="preserve">Runs the Monte Carlo until it reaches the @n-th realization. Note that
if the first_id is non-zero it will run @n - first_id realizations.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">total number of realizations to run</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_lre" c:identifier="ncm_fit_esmcmc_run_lre">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
          <parameter name="prerun" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="lre" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_auto_trim" c:identifier="ncm_fit_esmcmc_set_auto_trim">
        <doc xml:space="preserve">If @enable is TRUE turns on the auto-trimming when performing a
run_lre.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_auto_trim_div"
              c:identifier="ncm_fit_esmcmc_set_auto_trim_div">
        <doc xml:space="preserve">Sets the divisor for the auto trim tests.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
          <parameter name="div" transfer-ownership="none">
            <doc xml:space="preserve">a unsigned integer</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data_file" c:identifier="ncm_fit_esmcmc_set_data_file">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">a filename.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_runs_time"
              c:identifier="ncm_fit_esmcmc_set_max_runs_time">
        <doc xml:space="preserve">Sets the maximum time for the runs between tests.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
          <parameter name="max_runs_time" transfer-ownership="none">
            <doc xml:space="preserve">a unsigned integer</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_min_runs" c:identifier="ncm_fit_esmcmc_set_min_runs">
        <doc xml:space="preserve">Sets the minimum number of runs between tests.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
          <parameter name="min_runs" transfer-ownership="none">
            <doc xml:space="preserve">a unsigned integer</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mtype" c:identifier="ncm_fit_esmcmc_set_mtype">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nthreads" c:identifier="ncm_fit_esmcmc_set_nthreads">
        <doc xml:space="preserve">If @nthreads is larger than nwalkers / 2, it will be set to
nwalkers / 2.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
          <parameter name="nthreads" transfer-ownership="none">
            <doc xml:space="preserve">numbers of simultaneous walkers updates.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rng" c:identifier="ncm_fit_esmcmc_set_rng">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sampler" c:identifier="ncm_fit_esmcmc_set_sampler">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
          <parameter name="sampler" transfer-ownership="none">
            <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_run" c:identifier="ncm_fit_esmcmc_start_run">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="validate" c:identifier="ncm_fit_esmcmc_validate">
        <doc xml:space="preserve">Recalculates the value of $-2\ln(L)$ and compares
with the values found in the catalog. This function
is particularly useful to check if any problem occured
during a multithread evaluation of the likelihood.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Whether the validation was TRUE or FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="esmcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMC</doc>
            <type name="FitESMCMC" c:type="NcmFitESMCMC*"/>
          </instance-parameter>
          <parameter name="pi" transfer-ownership="none">
            <doc xml:space="preserve">initial position</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="pf" transfer-ownership="none">
            <doc xml:space="preserve">final position</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <property name="auto-trim"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="auto-trim-div"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="data-file" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="fit"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Fit"/>
      </property>
      <property name="functions-array"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="ObjArray"/>
      </property>
      <property name="max-runs-time"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="min-runs"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="mtype" writable="1" transfer-ownership="none">
        <type name="FitRunMsgs"/>
      </property>
      <property name="nthreads" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="nwalkers"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="sampler"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="MSetTransKern"/>
      </property>
      <property name="trim-type"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="MSetCatalogTrimType"/>
      </property>
      <property name="walker"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="FitESMCMCWalker"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="fit" readable="0" private="1">
        <type name="Fit" c:type="NcmFit*"/>
      </field>
      <field name="walker_pool" readable="0" private="1">
        <type name="MemoryPool" c:type="NcmMemoryPool*"/>
      </field>
      <field name="sampler" readable="0" private="1">
        <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
      </field>
      <field name="mcat" readable="0" private="1">
        <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
      </field>
      <field name="mtype" readable="0" private="1">
        <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
      </field>
      <field name="nt" readable="0" private="1">
        <type name="Timer" c:type="NcmTimer*"/>
      </field>
      <field name="ser" readable="0" private="1">
        <type name="Serialize" c:type="NcmSerialize*"/>
      </field>
      <field name="walker" readable="0" private="1">
        <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
      </field>
      <field name="auto_trim" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="auto_trim_div" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="trim_type" readable="0" private="1">
        <type name="MSetCatalogTrimType" c:type="NcmMSetCatalogTrimType"/>
      </field>
      <field name="min_runs" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="max_runs_time" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="full_theta" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="full_thetastar" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="theta" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="thetastar" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="jumps" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="accepted" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="offboard" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="funcs_oa" readable="0" private="1">
        <type name="ObjArray" c:type="NcmObjArray*"/>
      </field>
      <field name="funcs_oa_file" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="nadd_vals" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="fparam_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="nthreads" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="n" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="nwalkers" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="cur_sample_id" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="ntotal" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="naccepted" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="noffboard" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="started" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="dup_fit" readable="0" private="1">
        <type name="GLib.Mutex" c:type="GMutex"/>
      </field>
      <field name="resample_lock" readable="0" private="1">
        <type name="GLib.Mutex" c:type="GMutex"/>
      </field>
      <field name="update_lock" readable="0" private="1">
        <type name="GLib.Mutex" c:type="GMutex"/>
      </field>
      <field name="write_cond" readable="0" private="1">
        <type name="GLib.Cond" c:type="GCond"/>
      </field>
    </class>
    <record name="FitESMCMCClass"
            c:type="NcmFitESMCMCClass"
            glib:is-gtype-struct-for="FitESMCMC">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="FitESMCMCWalker"
           c:symbol-prefix="fit_esmcmc_walker"
           c:type="NcmFitESMCMCWalker"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NcmFitESMCMCWalker"
           glib:get-type="ncm_fit_esmcmc_walker_get_type"
           glib:type-struct="FitESMCMCWalkerClass">
      <constructor name="new_from_name"
                   c:identifier="ncm_fit_esmcmc_walker_new_from_name">
        <doc xml:space="preserve">This function returns a new #NcmFitESMCMCWalker whose type is defined by @walker_name.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmFitESMCMCWalker.</doc>
          <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
        </return-value>
        <parameters>
          <parameter name="walker_name" transfer-ownership="none">
            <doc xml:space="preserve">string which specifies the walker object to be used</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_fit_esmcmc_walker_clear">
        <doc xml:space="preserve">Decrese the reference count of *@walker atomically and sets the pointer *@walker to null.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="clean" invoker="clean">
        <doc xml:space="preserve">Cleanup after moving walkers from @ki to @kf (@kf not included).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </instance-parameter>
          <parameter name="ki" transfer-ownership="none">
            <doc xml:space="preserve">first walker index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="kf" transfer-ownership="none">
            <doc xml:space="preserve">last walker index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="desc" invoker="desc">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">walker description.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_nparams" invoker="get_nparams">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the nparams of the @walker.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size" invoker="get_size">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the size of the @walker.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prob" invoker="prob">
        <doc xml:space="preserve">Calculates the transition probability</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the transition probability.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </instance-parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">array of walkers positions</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Vector"/>
            </array>
          </parameter>
          <parameter name="thetastar" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">index of the walker to move</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="m2lnL_cur" transfer-ownership="none">
            <doc xml:space="preserve">current value of $-2\ln(L)$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="m2lnL_star" transfer-ownership="none">
            <doc xml:space="preserve">proposed value for $-2\ln(L^\star)$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_nparams" invoker="set_nparams">
        <doc xml:space="preserve">Sets the number parameters of the walker.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </instance-parameter>
          <parameter name="nparams" transfer-ownership="none">
            <doc xml:space="preserve">number of parameters</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_size" invoker="set_size">
        <doc xml:space="preserve">Sets the walker's size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">new walker's size</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="setup" invoker="setup">
        <doc xml:space="preserve">Setup the walkers @ki to @kf (@kf not included).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </instance-parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">array of walkers positions</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Vector"/>
            </array>
          </parameter>
          <parameter name="ki" transfer-ownership="none">
            <doc xml:space="preserve">first walker index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="kf" transfer-ownership="none">
            <doc xml:space="preserve">last walker index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="step" invoker="step">
        <doc xml:space="preserve">Move the @k-th walker and assign the new position in @thetastar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </instance-parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">array of walkers positions</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Vector"/>
            </array>
          </parameter>
          <parameter name="thetastar" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">index of the walker to move</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="clean" c:identifier="ncm_fit_esmcmc_walker_clean">
        <doc xml:space="preserve">Cleanup after moving walkers from @ki to @kf (@kf not included).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </instance-parameter>
          <parameter name="ki" transfer-ownership="none">
            <doc xml:space="preserve">first walker index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="kf" transfer-ownership="none">
            <doc xml:space="preserve">last walker index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="desc" c:identifier="ncm_fit_esmcmc_walker_desc">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">walker description.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_fit_esmcmc_walker_free">
        <doc xml:space="preserve">Decreases the reference count of @walker atomically.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nparams"
              c:identifier="ncm_fit_esmcmc_walker_get_nparams">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the nparams of the @walker.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="ncm_fit_esmcmc_walker_get_size">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the size of the @walker.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prob" c:identifier="ncm_fit_esmcmc_walker_prob">
        <doc xml:space="preserve">Calculates the transition probability</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the transition probability.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </instance-parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">array of walkers positions</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Vector"/>
            </array>
          </parameter>
          <parameter name="thetastar" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">index of the walker to move</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="m2lnL_cur" transfer-ownership="none">
            <doc xml:space="preserve">current value of $-2\ln(L)$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="m2lnL_star" transfer-ownership="none">
            <doc xml:space="preserve">proposed value for $-2\ln(L^\star)$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_fit_esmcmc_walker_ref">
        <doc xml:space="preserve">Increases the reference count of @walker atomically.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@walker.</doc>
          <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
        </return-value>
        <parameters>
          <instance-parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_nparams"
              c:identifier="ncm_fit_esmcmc_walker_set_nparams">
        <doc xml:space="preserve">Sets the number parameters of the walker.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </instance-parameter>
          <parameter name="nparams" transfer-ownership="none">
            <doc xml:space="preserve">number of parameters</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="ncm_fit_esmcmc_walker_set_size">
        <doc xml:space="preserve">Sets the walker's size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">new walker's size</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="setup" c:identifier="ncm_fit_esmcmc_walker_setup">
        <doc xml:space="preserve">Setup the walkers @ki to @kf (@kf not included).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </instance-parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">array of walkers positions</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Vector"/>
            </array>
          </parameter>
          <parameter name="ki" transfer-ownership="none">
            <doc xml:space="preserve">first walker index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="kf" transfer-ownership="none">
            <doc xml:space="preserve">last walker index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <method name="step" c:identifier="ncm_fit_esmcmc_walker_step">
        <doc xml:space="preserve">Move the @k-th walker and assign the new position in @thetastar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="walker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
          </instance-parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">array of walkers positions</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Vector"/>
            </array>
          </parameter>
          <parameter name="thetastar" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">index of the walker to move</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="nparams"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="size"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="FitESMCMCWalkerClass"
            c:type="NcmFitESMCMCWalkerClass"
            glib:is-gtype-struct-for="FitESMCMCWalker">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="set_size">
        <callback name="set_size">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="walker" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSetCatalog</doc>
              <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
            </parameter>
            <parameter name="size" transfer-ownership="none">
              <doc xml:space="preserve">new walker's size</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the size of the @walker.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="walker" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSetCatalog</doc>
              <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_nparams">
        <callback name="set_nparams">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="walker" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSetCatalog</doc>
              <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
            </parameter>
            <parameter name="nparams" transfer-ownership="none">
              <doc xml:space="preserve">number of parameters</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_nparams">
        <callback name="get_nparams">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the nparams of the @walker.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="walker" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSetCatalog</doc>
              <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="setup">
        <callback name="setup">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="walker" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSetCatalog</doc>
              <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
            </parameter>
            <parameter name="theta" transfer-ownership="none">
              <doc xml:space="preserve">array of walkers positions</doc>
              <array name="GLib.PtrArray" c:type="GPtrArray*">
                <type name="Vector"/>
              </array>
            </parameter>
            <parameter name="ki" transfer-ownership="none">
              <doc xml:space="preserve">first walker index</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="kf" transfer-ownership="none">
              <doc xml:space="preserve">last walker index</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="rng" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmRNG</doc>
              <type name="RNG" c:type="NcmRNG*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="step">
        <callback name="step">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="walker" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSetCatalog</doc>
              <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
            </parameter>
            <parameter name="theta" transfer-ownership="none">
              <doc xml:space="preserve">array of walkers positions</doc>
              <array name="GLib.PtrArray" c:type="GPtrArray*">
                <type name="Vector"/>
              </array>
            </parameter>
            <parameter name="thetastar" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmVector</doc>
              <type name="Vector" c:type="NcmVector*"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">index of the walker to move</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prob">
        <callback name="prob">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the transition probability.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="walker" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSetCatalog</doc>
              <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
            </parameter>
            <parameter name="theta" transfer-ownership="none">
              <doc xml:space="preserve">array of walkers positions</doc>
              <array name="GLib.PtrArray" c:type="GPtrArray*">
                <type name="Vector"/>
              </array>
            </parameter>
            <parameter name="thetastar" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmVector</doc>
              <type name="Vector" c:type="NcmVector*"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">index of the walker to move</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="m2lnL_cur" transfer-ownership="none">
              <doc xml:space="preserve">current value of $-2\ln(L)$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="m2lnL_star" transfer-ownership="none">
              <doc xml:space="preserve">proposed value for $-2\ln(L^\star)$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clean">
        <callback name="clean">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="walker" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSetCatalog</doc>
              <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
            </parameter>
            <parameter name="ki" transfer-ownership="none">
              <doc xml:space="preserve">first walker index</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="kf" transfer-ownership="none">
              <doc xml:space="preserve">last walker index</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="desc">
        <callback name="desc">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">walker description.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="walker" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSetCatalog</doc>
              <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="FitESMCMCWalkerStretch"
           c:symbol-prefix="fit_esmcmc_walker_stretch"
           c:type="NcmFitESMCMCWalkerStretch"
           parent="FitESMCMCWalker"
           glib:type-name="NcmFitESMCMCWalkerStretch"
           glib:get-type="ncm_fit_esmcmc_walker_stretch_get_type"
           glib:type-struct="FitESMCMCWalkerStretchClass">
      <constructor name="new" c:identifier="ncm_fit_esmcmc_walker_stretch_new">
        <doc xml:space="preserve">Creates a new #NcmFitESMCMCWalkerStretch to be used
with @nwalkers.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmFitESMCMCWalkerStretch.</doc>
          <type name="FitESMCMCWalkerStretch"
                c:type="NcmFitESMCMCWalkerStretch*"/>
        </return-value>
        <parameters>
          <parameter name="nwalkers" transfer-ownership="none">
            <doc xml:space="preserve">number of walkers</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="nparams" transfer-ownership="none">
            <doc xml:space="preserve">number of parameters</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_scale"
              c:identifier="ncm_fit_esmcmc_walker_stretch_get_scale">
        <doc xml:space="preserve">Gets the value of the scale $a &gt; 1$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">current value of $a$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="stretch" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMCWalkerStretch</doc>
            <type name="FitESMCMCWalkerStretch"
                  c:type="NcmFitESMCMCWalkerStretch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="multi" c:identifier="ncm_fit_esmcmc_walker_stretch_multi">
        <doc xml:space="preserve">Sets whether it should use multi-stretchs in a single step.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="stretch" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMCWalkerStretch</doc>
            <type name="FitESMCMCWalkerStretch"
                  c:type="NcmFitESMCMCWalkerStretch*"/>
          </instance-parameter>
          <parameter name="multi" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_box"
              c:identifier="ncm_fit_esmcmc_walker_stretch_set_box">
        <doc xml:space="preserve">Sets box sampling for the @n-th parameter using @lb as lower bound
and @ub as upper bound.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="stretch" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMCWalkerStretch</doc>
            <type name="FitESMCMCWalkerStretch"
                  c:type="NcmFitESMCMCWalkerStretch*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="lb" transfer-ownership="none">
            <doc xml:space="preserve">lower bound</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="ub" transfer-ownership="none">
            <doc xml:space="preserve">upper bound</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_box_mset"
              c:identifier="ncm_fit_esmcmc_walker_stretch_set_box_mset">
        <doc xml:space="preserve">Sets box sampling for the parameters using bounds from
@mset.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="stretch" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMCWalkerStretch</doc>
            <type name="FitESMCMCWalkerStretch"
                  c:type="NcmFitESMCMCWalkerStretch*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scale"
              c:identifier="ncm_fit_esmcmc_walker_stretch_set_scale">
        <doc xml:space="preserve">Sets the value of the scale $a &gt; 1$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="stretch" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMCWalkerStretch</doc>
            <type name="FitESMCMCWalkerStretch"
                  c:type="NcmFitESMCMCWalkerStretch*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">new scale $a &gt; 1$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="multi-stretch"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="scale"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker"/>
      </field>
      <field name="size" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="size_2" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="nparams" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="a" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="z" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="box" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="norm_box" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="use_box" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="indices" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="numbers" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="multi" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="desc" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
    </class>
    <record name="FitESMCMCWalkerStretchClass"
            c:type="NcmFitESMCMCWalkerStretchClass"
            glib:is-gtype-struct-for="FitESMCMCWalkerStretch">
      <field name="parent_class" readable="0" private="1">
        <type name="FitESMCMCWalkerClass" c:type="NcmFitESMCMCWalkerClass"/>
      </field>
    </record>
    <class name="FitESMCMCWalkerWalk"
           c:symbol-prefix="fit_esmcmc_walker_walk"
           c:type="NcmFitESMCMCWalkerWalk"
           parent="FitESMCMCWalker"
           glib:type-name="NcmFitESMCMCWalkerWalk"
           glib:get-type="ncm_fit_esmcmc_walker_walk_get_type"
           glib:type-struct="FitESMCMCWalkerWalkClass">
      <constructor name="new" c:identifier="ncm_fit_esmcmc_walker_walk_new">
        <doc xml:space="preserve">Creates a new #NcmFitESMCMCWalkerWalk to be used
with @nwalkers.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmFitESMCMCWalkerWalk.</doc>
          <type name="FitESMCMCWalkerWalk" c:type="NcmFitESMCMCWalkerWalk*"/>
        </return-value>
        <parameters>
          <parameter name="nwalkers" transfer-ownership="none">
            <doc xml:space="preserve">number of walkers</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_scale"
              c:identifier="ncm_fit_esmcmc_walker_walk_get_scale">
        <doc xml:space="preserve">Gets the value of the scale $a &gt; 1$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">current value of $a$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="walk" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMCWalkerWalk</doc>
            <type name="FitESMCMCWalkerWalk" c:type="NcmFitESMCMCWalkerWalk*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_scale"
              c:identifier="ncm_fit_esmcmc_walker_walk_set_scale">
        <doc xml:space="preserve">Sets the value of the scale $a &gt; 1$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="walk" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitESMCMCWalkerWalk</doc>
            <type name="FitESMCMCWalkerWalk" c:type="NcmFitESMCMCWalkerWalk*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">new scale $a &gt; 1$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="scale"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="FitESMCMCWalker" c:type="NcmFitESMCMCWalker"/>
      </field>
      <field name="size" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="size_2" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="nparams" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="a" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="sqrt_nparams" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="z" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="thetabar" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="indices" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="numbers" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="FitESMCMCWalkerWalkClass"
            c:type="NcmFitESMCMCWalkerWalkClass"
            glib:is-gtype-struct-for="FitESMCMCWalkerWalk">
      <field name="parent_class" readable="0" private="1">
        <type name="FitESMCMCWalkerClass" c:type="NcmFitESMCMCWalkerClass"/>
      </field>
    </record>
    <class name="FitGSLLS"
           c:symbol-prefix="fit_gsl_ls"
           c:type="NcmFitGSLLS"
           parent="Fit"
           glib:type-name="NcmFitGSLLS"
           glib:get-type="ncm_fit_gsl_ls_get_type"
           glib:type-struct="FitGSLLSClass">
      <constructor name="new" c:identifier="ncm_fit_gsl_ls_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Fit" c:type="NcmFit*"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="gtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitGradType" c:type="NcmFitGradType"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Fit" c:type="NcmFit"/>
      </field>
      <field name="ls" introspectable="0" readable="0" private="1">
        <type c:type="gsl_multifit_fdfsolver*"/>
      </field>
      <field name="f" introspectable="0" readable="0" private="1">
        <type c:type="gsl_multifit_function_fdf"/>
      </field>
      <field name="T" introspectable="0" readable="0" private="1">
        <type c:type="const gsl_multifit_fdfsolver_type*"/>
      </field>
    </class>
    <record name="FitGSLLSClass"
            c:type="NcmFitGSLLSClass"
            glib:is-gtype-struct-for="FitGSLLS">
      <field name="parent_class" readable="0" private="1">
        <type name="FitClass" c:type="NcmFitClass"/>
      </field>
    </record>
    <class name="FitGSLMM"
           c:symbol-prefix="fit_gsl_mm"
           c:type="NcmFitGSLMM"
           parent="Fit"
           glib:type-name="NcmFitGSLMM"
           glib:get-type="ncm_fit_gsl_mm_get_type"
           glib:type-struct="FitGSLMMClass">
      <constructor name="new" c:identifier="ncm_fit_gsl_mm_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Fit" c:type="NcmFit*"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="gtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitGradType" c:type="NcmFitGradType"/>
          </parameter>
          <parameter name="algo" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitGSLMMAlgos" c:type="NcmFitGSLMMAlgos"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_by_name"
                   c:identifier="ncm_fit_gsl_mm_new_by_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Fit" c:type="NcmFit*"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="gtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitGradType" c:type="NcmFitGradType"/>
          </parameter>
          <parameter name="algo_name" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_default"
                   c:identifier="ncm_fit_gsl_mm_new_default">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Fit" c:type="NcmFit*"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="gtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitGradType" c:type="NcmFitGradType"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_algo" c:identifier="ncm_fit_gsl_mm_set_algo">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit_gsl_mm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitGSLMM.</doc>
            <type name="FitGSLMM" c:type="NcmFitGSLMM*"/>
          </instance-parameter>
          <parameter name="algo" transfer-ownership="none">
            <doc xml:space="preserve">a #gsl_mm_algorithm.</doc>
            <type name="FitGSLMMAlgos" c:type="NcmFitGSLMMAlgos"/>
          </parameter>
        </parameters>
      </method>
      <property name="algorithm"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="FitGSLMMAlgos"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Fit" c:type="NcmFit"/>
      </field>
      <field name="mm" introspectable="0" readable="0" private="1">
        <type c:type="gsl_multimin_fdfminimizer*"/>
      </field>
      <field name="f" introspectable="0" readable="0" private="1">
        <type c:type="gsl_multimin_function_fdf"/>
      </field>
      <field name="algo" readable="0" private="1">
        <type name="FitGSLMMAlgos" c:type="NcmFitGSLMMAlgos"/>
      </field>
      <field name="desc" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="err_a" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="err_b" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <enumeration name="FitGSLMMAlgos"
                 glib:type-name="NcmFitGSLMMAlgos"
                 glib:get-type="ncm_fit_gslmm_algos_get_type"
                 c:type="NcmFitGSLMMAlgos">
      <doc xml:space="preserve">FIXME</doc>
      <member name="conjugate_fr"
              value="0"
              c:identifier="NCM_FIT_GSL_MM_CONJUGATE_FR"
              glib:nick="conjugate-fr">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="conjugate_pr"
              value="1"
              c:identifier="NCM_FIT_GSL_MM_CONJUGATE_PR"
              glib:nick="conjugate-pr">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="vector_bfgs"
              value="2"
              c:identifier="NCM_FIT_GSL_MM_VECTOR_BFGS"
              glib:nick="vector-bfgs">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="vector_bfgs2"
              value="3"
              c:identifier="NCM_FIT_GSL_MM_VECTOR_BFGS2"
              glib:nick="vector-bfgs2">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="steepest_descent"
              value="4"
              c:identifier="NCM_FIT_GSL_MM_STEEPEST_DESCENT"
              glib:nick="steepest-descent">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <record name="FitGSLMMClass"
            c:type="NcmFitGSLMMClass"
            glib:is-gtype-struct-for="FitGSLMM">
      <field name="parent_class" readable="0" private="1">
        <type name="FitClass" c:type="NcmFitClass"/>
      </field>
    </record>
    <class name="FitGSLMMS"
           c:symbol-prefix="fit_gsl_mms"
           c:type="NcmFitGSLMMS"
           parent="Fit"
           glib:type-name="NcmFitGSLMMS"
           glib:get-type="ncm_fit_gsl_mms_get_type"
           glib:type-struct="FitGSLMMSClass">
      <constructor name="new" c:identifier="ncm_fit_gsl_mms_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Fit" c:type="NcmFit*"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="gtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitGradType" c:type="NcmFitGradType"/>
          </parameter>
          <parameter name="algo" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitGSLMMSAlgos" c:type="NcmFitGSLMMSAlgos"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_by_name"
                   c:identifier="ncm_fit_gsl_mms_new_by_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Fit" c:type="NcmFit*"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="gtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitGradType" c:type="NcmFitGradType"/>
          </parameter>
          <parameter name="algo_name" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_default"
                   c:identifier="ncm_fit_gsl_mms_new_default">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Fit" c:type="NcmFit*"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="gtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitGradType" c:type="NcmFitGradType"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_algo" c:identifier="ncm_fit_gsl_mms_set_algo">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit_gsl_mms" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitGSLMMS.</doc>
            <type name="FitGSLMMS" c:type="NcmFitGSLMMS*"/>
          </instance-parameter>
          <parameter name="algo" transfer-ownership="none">
            <doc xml:space="preserve">a #gsl_mms_algorithm.</doc>
            <type name="FitGSLMMSAlgos" c:type="NcmFitGSLMMSAlgos"/>
          </parameter>
        </parameters>
      </method>
      <property name="algorithm"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="FitGSLMMSAlgos"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Fit" c:type="NcmFit"/>
      </field>
      <field name="mms" introspectable="0" readable="0" private="1">
        <type c:type="gsl_multimin_fminimizer*"/>
      </field>
      <field name="f" introspectable="0" readable="0" private="1">
        <type c:type="gsl_multimin_function"/>
      </field>
      <field name="algo" readable="0" private="1">
        <type name="FitGSLMMSAlgos" c:type="NcmFitGSLMMSAlgos"/>
      </field>
      <field name="desc" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="ss" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
    </class>
    <enumeration name="FitGSLMMSAlgos"
                 glib:type-name="NcmFitGSLMMSAlgos"
                 glib:get-type="ncm_fit_gslmms_algos_get_type"
                 c:type="NcmFitGSLMMSAlgos">
      <doc xml:space="preserve">FIXME</doc>
      <member name="nmsimplex2"
              value="0"
              c:identifier="NCM_FIT_GSL_MMS_NMSIMPLEX2"
              glib:nick="nmsimplex2">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="nmsimplex"
              value="1"
              c:identifier="NCM_FIT_GSL_MMS_NMSIMPLEX"
              glib:nick="nmsimplex">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="nmsimplex2rand"
              value="2"
              c:identifier="NCM_FIT_GSL_MMS_NMSIMPLEX2RAND"
              glib:nick="nmsimplex2rand">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <record name="FitGSLMMSClass"
            c:type="NcmFitGSLMMSClass"
            glib:is-gtype-struct-for="FitGSLMMS">
      <field name="parent_class" readable="0" private="1">
        <type name="FitClass" c:type="NcmFitClass"/>
      </field>
    </record>
    <record name="FitGrad" c:type="NcmFitGrad">
      <doc xml:space="preserve">FIXME</doc>
      <field name="gtype" readable="0" private="1">
        <type name="FitGradType" c:type="NcmFitGradType"/>
      </field>
      <field name="diff_name" readable="0" private="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="ls_J" introspectable="0" readable="0" private="1">
        <type c:type="_NcmFitLSJ"/>
      </field>
      <field name="ls_f_J" introspectable="0" readable="0" private="1">
        <type c:type="_NcmFitLSFJ"/>
      </field>
      <field name="m2lnL_grad" introspectable="0" readable="0" private="1">
        <type c:type="_NcmFitM2lnLGrad"/>
      </field>
      <field name="m2lnL_val_grad" introspectable="0" readable="0" private="1">
        <type c:type="_NcmFitM2lnLValGrad"/>
      </field>
    </record>
    <enumeration name="FitGradType"
                 glib:type-name="NcmFitGradType"
                 glib:get-type="ncm_fit_grad_type_get_type"
                 c:type="NcmFitGradType">
      <doc xml:space="preserve">FIXME</doc>
      <member name="analytical"
              value="0"
              c:identifier="NCM_FIT_GRAD_ANALYTICAL"
              glib:nick="analytical">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="numdiff_forward"
              value="1"
              c:identifier="NCM_FIT_GRAD_NUMDIFF_FORWARD"
              glib:nick="numdiff-forward">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="numdiff_central"
              value="2"
              c:identifier="NCM_FIT_GRAD_NUMDIFF_CENTRAL"
              glib:nick="numdiff-central">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="numdiff_accurate"
              value="3"
              c:identifier="NCM_FIT_GRAD_NUMDIFF_ACCURATE"
              glib:nick="numdiff-accurate">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="FitLevmar"
           c:symbol-prefix="fit_levmar"
           c:type="NcmFitLevmar"
           parent="Fit"
           glib:type-name="NcmFitLevmar"
           glib:get-type="ncm_fit_levmar_get_type"
           glib:type-struct="FitLevmarClass">
      <constructor name="new" c:identifier="ncm_fit_levmar_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Fit" c:type="NcmFit*"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="gtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitGradType" c:type="NcmFitGradType"/>
          </parameter>
          <parameter name="algo" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitLevmarAlgos" c:type="NcmFitLevmarAlgos"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_by_name"
                   c:identifier="ncm_fit_levmar_new_by_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Fit" c:type="NcmFit*"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="gtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitGradType" c:type="NcmFitGradType"/>
          </parameter>
          <parameter name="algo_name" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_default"
                   c:identifier="ncm_fit_levmar_new_default">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Fit" c:type="NcmFit*"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="gtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitGradType" c:type="NcmFitGradType"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_algo" c:identifier="ncm_fit_levmar_set_algo">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fit_levmar" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitLevmar.</doc>
            <type name="FitLevmar" c:type="NcmFitLevmar*"/>
          </instance-parameter>
          <parameter name="algo" transfer-ownership="none">
            <doc xml:space="preserve">a #levmar_algorithm.</doc>
            <type name="FitLevmarAlgos" c:type="NcmFitLevmarAlgos"/>
          </parameter>
        </parameters>
      </method>
      <property name="algorithm"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="FitLevmarAlgos"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Fit" c:type="NcmFit"/>
      </field>
      <field name="workz" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="fparam_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="data_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="lb" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="ub" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="algo" readable="0" private="1">
        <type name="FitLevmarAlgos" c:type="NcmFitLevmarAlgos"/>
      </field>
    </class>
    <enumeration name="FitLevmarAlgos"
                 glib:type-name="NcmFitLevmarAlgos"
                 glib:get-type="ncm_fit_levmar_algos_get_type"
                 c:type="NcmFitLevmarAlgos">
      <doc xml:space="preserve">Levmar algorithms.</doc>
      <member name="der"
              value="0"
              c:identifier="NCM_FIT_LEVMAR_DER"
              glib:nick="der">
        <doc xml:space="preserve">with external derivatives.</doc>
      </member>
      <member name="dif"
              value="1"
              c:identifier="NCM_FIT_LEVMAR_DIF"
              glib:nick="dif">
        <doc xml:space="preserve">with internal derivatives (inside levmar).</doc>
      </member>
      <member name="bc_der"
              value="2"
              c:identifier="NCM_FIT_LEVMAR_BC_DER"
              glib:nick="bc-der">
        <doc xml:space="preserve">with box constraints and external derivatives.</doc>
      </member>
      <member name="bc_dif"
              value="3"
              c:identifier="NCM_FIT_LEVMAR_BC_DIF"
              glib:nick="bc-dif">
        <doc xml:space="preserve">with box constraints and internal derivatives (inside levmar).</doc>
      </member>
    </enumeration>
    <record name="FitLevmarClass"
            c:type="NcmFitLevmarClass"
            glib:is-gtype-struct-for="FitLevmar">
      <field name="parent_class" readable="0" private="1">
        <type name="FitClass" c:type="NcmFitClass"/>
      </field>
    </record>
    <class name="FitMC"
           c:symbol-prefix="fit_mc"
           c:type="NcmFitMC"
           parent="GObject.Object"
           glib:type-name="NcmFitMC"
           glib:get-type="ncm_fit_mc_get_type"
           glib:type-struct="FitMCClass">
      <constructor name="new" c:identifier="ncm_fit_mc_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="FitMC" c:type="NcmFitMC*"/>
        </return-value>
        <parameters>
          <parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </parameter>
          <parameter name="rtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitMCResampleType" c:type="NcmFitMCResampleType"/>
          </parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_fit_mc_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMC</doc>
            <type name="FitMC" c:type="NcmFitMC**"/>
          </parameter>
        </parameters>
      </function>
      <method name="end_run" c:identifier="ncm_fit_mc_end_run">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMC</doc>
            <type name="FitMC" c:type="NcmFitMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_fit_mc_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMC</doc>
            <type name="FitMC" c:type="NcmFitMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_catalog" c:identifier="ncm_fit_mc_get_catalog">
        <doc xml:space="preserve">Gets the generated catalog of @mc.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the generated catalog.</doc>
          <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMC</doc>
            <type name="FitMC" c:type="NcmFitMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="keep_order" c:identifier="ncm_fit_mc_keep_order">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMC</doc>
            <type name="FitMC" c:type="NcmFitMC*"/>
          </instance-parameter>
          <parameter name="keep_order" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="mean_covar" c:identifier="ncm_fit_mc_mean_covar">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMC</doc>
            <type name="FitMC" c:type="NcmFitMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="ncm_fit_mc_reset">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMC</doc>
            <type name="FitMC" c:type="NcmFitMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="run" c:identifier="ncm_fit_mc_run">
        <doc xml:space="preserve">Runs the Monte Carlo until it reaches the @n-th realization. Note that
if the first_id is non-zero it will run @n - first_id realizations.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMC</doc>
            <type name="FitMC" c:type="NcmFitMC*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">total number of realizations to run</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_lre" c:identifier="ncm_fit_mc_run_lre">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMC</doc>
            <type name="FitMC" c:type="NcmFitMC*"/>
          </instance-parameter>
          <parameter name="prerun" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="lre" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data_file" c:identifier="ncm_fit_mc_set_data_file">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMC</doc>
            <type name="FitMC" c:type="NcmFitMC*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">a filename</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fiducial" c:identifier="ncm_fit_mc_set_fiducial">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMC</doc>
            <type name="FitMC" c:type="NcmFitMC*"/>
          </instance-parameter>
          <parameter name="fiduc" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_first_sample_id"
              c:identifier="ncm_fit_mc_set_first_sample_id">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMC</doc>
            <type name="FitMC" c:type="NcmFitMC*"/>
          </instance-parameter>
          <parameter name="first_sample_id" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mtype" c:identifier="ncm_fit_mc_set_mtype">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMC</doc>
            <type name="FitMC" c:type="NcmFitMC*"/>
          </instance-parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nthreads" c:identifier="ncm_fit_mc_set_nthreads">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMC</doc>
            <type name="FitMC" c:type="NcmFitMC*"/>
          </instance-parameter>
          <parameter name="nthreads" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rng" c:identifier="ncm_fit_mc_set_rng">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMC</doc>
            <type name="FitMC" c:type="NcmFitMC*"/>
          </instance-parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rtype" c:identifier="ncm_fit_mc_set_rtype">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMC</doc>
            <type name="FitMC" c:type="NcmFitMC*"/>
          </instance-parameter>
          <parameter name="rtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitMCResampleType" c:type="NcmFitMCResampleType"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_run" c:identifier="ncm_fit_mc_start_run">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMC</doc>
            <type name="FitMC" c:type="NcmFitMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="fiducial"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="MSet"/>
      </property>
      <property name="fit"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Fit"/>
      </property>
      <property name="keep-order"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mtype" writable="1" transfer-ownership="none">
        <type name="FitRunMsgs"/>
      </property>
      <property name="nthreads" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="rtype"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="FitMCResampleType"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="resample" readable="0" private="1">
        <type name="FitMCResample" c:type="NcmFitMCResample"/>
      </field>
      <field name="fit" readable="0" private="1">
        <type name="Fit" c:type="NcmFit*"/>
      </field>
      <field name="fiduc" readable="0" private="1">
        <type name="MSet" c:type="NcmMSet*"/>
      </field>
      <field name="mcat" readable="0" private="1">
        <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
      </field>
      <field name="mtype" readable="0" private="1">
        <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
      </field>
      <field name="rtype" readable="0" private="1">
        <type name="FitMCResampleType" c:type="NcmFitMCResampleType"/>
      </field>
      <field name="bf" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="nt" readable="0" private="1">
        <type name="Timer" c:type="NcmTimer*"/>
      </field>
      <field name="ser" readable="0" private="1">
        <type name="Serialize" c:type="NcmSerialize*"/>
      </field>
      <field name="nthreads" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="n" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="keep_order" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="mp" readable="0" private="1">
        <type name="MemoryPool" c:type="NcmMemoryPool*"/>
      </field>
      <field name="write_index" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="cur_sample_id" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="first_sample_id" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="started" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="dup_fit" readable="0" private="1">
        <type name="GLib.Mutex" c:type="GMutex"/>
      </field>
      <field name="resample_lock" readable="0" private="1">
        <type name="GLib.Mutex" c:type="GMutex"/>
      </field>
      <field name="update_lock" readable="0" private="1">
        <type name="GLib.Mutex" c:type="GMutex"/>
      </field>
      <field name="write_cond" readable="0" private="1">
        <type name="GLib.Cond" c:type="GCond"/>
      </field>
    </class>
    <class name="FitMCBS"
           c:symbol-prefix="fit_mcbs"
           c:type="NcmFitMCBS"
           parent="GObject.Object"
           glib:type-name="NcmFitMCBS"
           glib:get-type="ncm_fit_mcbs_get_type"
           glib:type-struct="FitMCBSClass">
      <constructor name="new" c:identifier="ncm_fit_mcbs_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="FitMCBS" c:type="NcmFitMCBS*"/>
        </return-value>
        <parameters>
          <parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_fit_mcbs_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mcbs" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCBS</doc>
            <type name="FitMCBS" c:type="NcmFitMCBS**"/>
          </parameter>
        </parameters>
      </function>
      <method name="free" c:identifier="ncm_fit_mcbs_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcbs" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCBS</doc>
            <type name="FitMCBS" c:type="NcmFitMCBS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_catalog" c:identifier="ncm_fit_mcbs_get_catalog">
        <doc xml:space="preserve">Gets the generated catalog of @mcbs.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the generated catalog.</doc>
          <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcbs" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCBS</doc>
            <type name="FitMCBS" c:type="NcmFitMCBS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="run" c:identifier="ncm_fit_mcbs_run">
        <doc xml:space="preserve">FIXME

WARNING not working correctly with bsmt &gt; 0 FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcbs" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCBS</doc>
            <type name="FitMCBS" c:type="NcmFitMCBS*"/>
          </instance-parameter>
          <parameter name="fiduc" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="ni" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="nf" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="nbstraps" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="rtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitMCResampleType" c:type="NcmFitMCResampleType"/>
          </parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
          <parameter name="bsmt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filename" c:identifier="ncm_fit_mcbs_set_filename">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcbs" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCBS</doc>
            <type name="FitMCBS" c:type="NcmFitMCBS*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rng" c:identifier="ncm_fit_mcbs_set_rng">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcbs" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCBS</doc>
            <type name="FitMCBS" c:type="NcmFitMCBS*"/>
          </instance-parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <property name="filename" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="fit"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Fit"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="fit" readable="0" private="1">
        <type name="Fit" c:type="NcmFit*"/>
      </field>
      <field name="mc_resample" readable="0" private="1">
        <type name="FitMC" c:type="NcmFitMC*"/>
      </field>
      <field name="mc_bstrap" readable="0" private="1">
        <type name="FitMC" c:type="NcmFitMC*"/>
      </field>
      <field name="mcat" readable="0" private="1">
        <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
      </field>
      <field name="base_name" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
    </class>
    <record name="FitMCBSClass"
            c:type="NcmFitMCBSClass"
            glib:is-gtype-struct-for="FitMCBS">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="FitMCClass"
            c:type="NcmFitMCClass"
            glib:is-gtype-struct-for="FitMC">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="FitMCMC"
           c:symbol-prefix="fit_mcmc"
           c:type="NcmFitMCMC"
           parent="GObject.Object"
           glib:type-name="NcmFitMCMC"
           glib:get-type="ncm_fit_mcmc_get_type"
           glib:type-struct="FitMCMCClass">
      <constructor name="new" c:identifier="ncm_fit_mcmc_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="FitMCMC" c:type="NcmFitMCMC*"/>
        </return-value>
        <parameters>
          <parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </parameter>
          <parameter name="tkern" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
            <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
          </parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_fit_mcmc_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCMC</doc>
            <type name="FitMCMC" c:type="NcmFitMCMC**"/>
          </parameter>
        </parameters>
      </function>
      <method name="end_run" c:identifier="ncm_fit_mcmc_end_run">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCMC</doc>
            <type name="FitMCMC" c:type="NcmFitMCMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_fit_mcmc_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCMC</doc>
            <type name="FitMCMC" c:type="NcmFitMCMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_accept_ratio"
              c:identifier="ncm_fit_mcmc_get_accept_ratio">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCMC</doc>
            <type name="FitMCMC" c:type="NcmFitMCMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_catalog" c:identifier="ncm_fit_mcmc_get_catalog">
        <doc xml:space="preserve">Gets the generated catalog of @mcmc.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the generated catalog.</doc>
          <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCMC</doc>
            <type name="FitMCMC" c:type="NcmFitMCMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mean_covar" c:identifier="ncm_fit_mcmc_mean_covar">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCMC</doc>
            <type name="FitMCMC" c:type="NcmFitMCMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="ncm_fit_mcmc_reset">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCMC</doc>
            <type name="FitMCMC" c:type="NcmFitMCMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="run" c:identifier="ncm_fit_mcmc_run">
        <doc xml:space="preserve">Runs the Markov Chain Monte Carlo until it reaches the @n-th realization. Note that
if the first_id is non-zero it will run @n - first_id realizations.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCMC</doc>
            <type name="FitMCMC" c:type="NcmFitMCMC*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">total number of realizations to run</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_lre" c:identifier="ncm_fit_mcmc_run_lre">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCMC</doc>
            <type name="FitMCMC" c:type="NcmFitMCMC*"/>
          </instance-parameter>
          <parameter name="prerun" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="lre" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data_file" c:identifier="ncm_fit_mcmc_set_data_file">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCMC</doc>
            <type name="FitMCMC" c:type="NcmFitMCMC*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">a filename.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fiducial" c:identifier="ncm_fit_mcmc_set_fiducial">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcmc" transfer-ownership="none">
            <type name="FitMCMC" c:type="NcmFitMCMC*"/>
          </instance-parameter>
          <parameter name="fiduc" transfer-ownership="none">
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_first_sample_id"
              c:identifier="ncm_fit_mcmc_set_first_sample_id">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCMC</doc>
            <type name="FitMCMC" c:type="NcmFitMCMC*"/>
          </instance-parameter>
          <parameter name="first_sample_id" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mtype" c:identifier="ncm_fit_mcmc_set_mtype">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCMC</doc>
            <type name="FitMCMC" c:type="NcmFitMCMC*"/>
          </instance-parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nthreads" c:identifier="ncm_fit_mcmc_set_nthreads">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCMC</doc>
            <type name="FitMCMC" c:type="NcmFitMCMC*"/>
          </instance-parameter>
          <parameter name="nthreads" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rng" c:identifier="ncm_fit_mcmc_set_rng">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCMC</doc>
            <type name="FitMCMC" c:type="NcmFitMCMC*"/>
          </instance-parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_trans_kern" c:identifier="ncm_fit_mcmc_set_trans_kern">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCMC</doc>
            <type name="FitMCMC" c:type="NcmFitMCMC*"/>
          </instance-parameter>
          <parameter name="tkern" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
            <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_run" c:identifier="ncm_fit_mcmc_start_run">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcmc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitMCMC</doc>
            <type name="FitMCMC" c:type="NcmFitMCMC*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="fit"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Fit"/>
      </property>
      <property name="mtype" writable="1" transfer-ownership="none">
        <type name="FitRunMsgs"/>
      </property>
      <property name="nthreads" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="sampler"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="MSetTransKern"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="fit" readable="0" private="1">
        <type name="Fit" c:type="NcmFit*"/>
      </field>
      <field name="mcat" readable="0" private="1">
        <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
      </field>
      <field name="mtype" readable="0" private="1">
        <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
      </field>
      <field name="nt" readable="0" private="1">
        <type name="Timer" c:type="NcmTimer*"/>
      </field>
      <field name="ser" readable="0" private="1">
        <type name="Serialize" c:type="NcmSerialize*"/>
      </field>
      <field name="tkern" readable="0" private="1">
        <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
      </field>
      <field name="theta" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="thetastar" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="nthreads" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="n" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="mp" readable="0" private="1">
        <type name="MemoryPool" c:type="NcmMemoryPool*"/>
      </field>
      <field name="write_index" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="cur_sample_id" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="naccepted" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="ntotal" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="started" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="dup_fit" readable="0" private="1">
        <type name="GLib.Mutex" c:type="GMutex"/>
      </field>
      <field name="resample_lock" readable="0" private="1">
        <type name="GLib.Mutex" c:type="GMutex"/>
      </field>
      <field name="update_lock" readable="0" private="1">
        <type name="GLib.Mutex" c:type="GMutex"/>
      </field>
      <field name="write_cond" readable="0" private="1">
        <type name="GLib.Cond" c:type="GCond"/>
      </field>
    </class>
    <record name="FitMCMCClass"
            c:type="NcmFitMCMCClass"
            glib:is-gtype-struct-for="FitMCMC">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <callback name="FitMCResample" c:type="NcmFitMCResample">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dset" transfer-ownership="none">
          <type name="Dataset" c:type="NcmDataset*"/>
        </parameter>
        <parameter name="mset" transfer-ownership="none">
          <type name="MSet" c:type="NcmMSet*"/>
        </parameter>
        <parameter name="rng" transfer-ownership="none">
          <type name="RNG" c:type="NcmRNG*"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="FitMCResampleType"
                 glib:type-name="NcmFitMCResampleType"
                 glib:get-type="ncm_fit_mc_resample_type_get_type"
                 c:type="NcmFitMCResampleType">
      <doc xml:space="preserve">Montecarlo resample options</doc>
      <member name="from_model"
              value="0"
              c:identifier="NCM_FIT_MC_RESAMPLE_FROM_MODEL"
              glib:nick="from-model">
        <doc xml:space="preserve">Montecarlo resampling from models</doc>
      </member>
      <member name="bootstrap_nomix"
              value="1"
              c:identifier="NCM_FIT_MC_RESAMPLE_BOOTSTRAP_NOMIX"
              glib:nick="bootstrap-nomix">
        <doc xml:space="preserve">Montecarlo bootstraping each #NcmData separately.</doc>
      </member>
      <member name="bootstrap_mix"
              value="2"
              c:identifier="NCM_FIT_MC_RESAMPLE_BOOTSTRAP_MIX"
              glib:nick="bootstrap-mix">
        <doc xml:space="preserve">Montecarlo bootstraping mixing all #NcmData in the bootstrap process.</doc>
      </member>
    </enumeration>
    <class name="FitNLOpt"
           c:symbol-prefix="fit_nlopt"
           c:type="NcmFitNLOpt"
           parent="Fit"
           glib:type-name="NcmFitNLOpt"
           glib:get-type="ncm_fit_nlopt_get_type"
           glib:type-struct="FitNLOptClass">
      <constructor name="new_by_name" c:identifier="ncm_fit_nlopt_new_by_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Fit" c:type="NcmFit*"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="gtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitGradType" c:type="NcmFitGradType"/>
          </parameter>
          <parameter name="algo_name" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_default" c:identifier="ncm_fit_nlopt_new_default">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Fit" c:type="NcmFit*"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="gtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitGradType" c:type="NcmFitGradType"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="algorithm"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="FitNloptAlgorithm"/>
      </property>
      <property name="local-algorithm" writable="1" transfer-ownership="none">
        <type name="FitNloptAlgorithm"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Fit" c:type="NcmFit"/>
      </field>
      <field name="nlopt_algo" introspectable="0" readable="0" private="1">
        <type c:type="nlopt_algorithm"/>
      </field>
      <field name="local_nlopt_algo"
             introspectable="0"
             readable="0"
             private="1">
        <type c:type="nlopt_algorithm"/>
      </field>
      <field name="lb" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="ub" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="pabs" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="pscale" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="desc" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="fparam_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="FitNLOptClass"
            c:type="NcmFitNLOptClass"
            glib:is-gtype-struct-for="FitNLOpt">
      <field name="parent_class" readable="0" private="1">
        <type name="FitClass" c:type="NcmFitClass"/>
      </field>
    </record>
    <enumeration name="FitNloptAlgorithm"
                 glib:type-name="NcmFitNloptAlgorithm"
                 glib:get-type="ncm_fit_nlopt_algorithm_get_type"
                 c:type="NcmFitNloptAlgorithm">
      <doc xml:space="preserve">NLOpt algorithms enumerator.</doc>
      <member name="gn_direct"
              value="0"
              c:identifier="NLOPT_GN_DIRECT"
              glib:nick="gn-direct">
      </member>
      <member name="gn_direct_l"
              value="1"
              c:identifier="NLOPT_GN_DIRECT_L"
              glib:nick="gn-direct-l">
      </member>
      <member name="gn_direct_l_rand"
              value="2"
              c:identifier="NLOPT_GN_DIRECT_L_RAND"
              glib:nick="gn-direct-l-rand">
      </member>
      <member name="gn_direct_noscal"
              value="3"
              c:identifier="NLOPT_GN_DIRECT_NOSCAL"
              glib:nick="gn-direct-noscal">
      </member>
      <member name="gn_direct_l_noscal"
              value="4"
              c:identifier="NLOPT_GN_DIRECT_L_NOSCAL"
              glib:nick="gn-direct-l-noscal">
      </member>
      <member name="gn_direct_l_rand_noscal"
              value="5"
              c:identifier="NLOPT_GN_DIRECT_L_RAND_NOSCAL"
              glib:nick="gn-direct-l-rand-noscal">
      </member>
      <member name="gn_orig_direct"
              value="6"
              c:identifier="NLOPT_GN_ORIG_DIRECT"
              glib:nick="gn-orig-direct">
      </member>
      <member name="gn_orig_direct_l"
              value="7"
              c:identifier="NLOPT_GN_ORIG_DIRECT_L"
              glib:nick="gn-orig-direct-l">
      </member>
      <member name="gd_stogo"
              value="8"
              c:identifier="NLOPT_GD_STOGO"
              glib:nick="gd-stogo">
      </member>
      <member name="gd_stogo_rand"
              value="9"
              c:identifier="NLOPT_GD_STOGO_RAND"
              glib:nick="gd-stogo-rand">
      </member>
      <member name="ld_lbfgs_nocedal"
              value="10"
              c:identifier="NLOPT_LD_LBFGS_NOCEDAL"
              glib:nick="ld-lbfgs-nocedal">
      </member>
      <member name="ld_lbfgs"
              value="11"
              c:identifier="NLOPT_LD_LBFGS"
              glib:nick="ld-lbfgs">
      </member>
      <member name="ln_praxis"
              value="12"
              c:identifier="NLOPT_LN_PRAXIS"
              glib:nick="ln-praxis">
      </member>
      <member name="ld_var1"
              value="13"
              c:identifier="NLOPT_LD_VAR1"
              glib:nick="ld-var1">
      </member>
      <member name="ld_var2"
              value="14"
              c:identifier="NLOPT_LD_VAR2"
              glib:nick="ld-var2">
      </member>
      <member name="ld_tnewton"
              value="15"
              c:identifier="NLOPT_LD_TNEWTON"
              glib:nick="ld-tnewton">
      </member>
      <member name="ld_tnewton_restart"
              value="16"
              c:identifier="NLOPT_LD_TNEWTON_RESTART"
              glib:nick="ld-tnewton-restart">
      </member>
      <member name="ld_tnewton_precond"
              value="17"
              c:identifier="NLOPT_LD_TNEWTON_PRECOND"
              glib:nick="ld-tnewton-precond">
      </member>
      <member name="ld_tnewton_precond_restart"
              value="18"
              c:identifier="NLOPT_LD_TNEWTON_PRECOND_RESTART"
              glib:nick="ld-tnewton-precond-restart">
      </member>
      <member name="gn_crs2_lm"
              value="19"
              c:identifier="NLOPT_GN_CRS2_LM"
              glib:nick="gn-crs2-lm">
      </member>
      <member name="gn_mlsl"
              value="20"
              c:identifier="NLOPT_GN_MLSL"
              glib:nick="gn-mlsl">
      </member>
      <member name="gd_mlsl"
              value="21"
              c:identifier="NLOPT_GD_MLSL"
              glib:nick="gd-mlsl">
      </member>
      <member name="gn_mlsl_lds"
              value="22"
              c:identifier="NLOPT_GN_MLSL_LDS"
              glib:nick="gn-mlsl-lds">
      </member>
      <member name="gd_mlsl_lds"
              value="23"
              c:identifier="NLOPT_GD_MLSL_LDS"
              glib:nick="gd-mlsl-lds">
      </member>
      <member name="ld_mma"
              value="24"
              c:identifier="NLOPT_LD_MMA"
              glib:nick="ld-mma">
      </member>
      <member name="ln_cobyla"
              value="25"
              c:identifier="NLOPT_LN_COBYLA"
              glib:nick="ln-cobyla">
      </member>
      <member name="ln_newuoa"
              value="26"
              c:identifier="NLOPT_LN_NEWUOA"
              glib:nick="ln-newuoa">
      </member>
      <member name="ln_newuoa_bound"
              value="27"
              c:identifier="NLOPT_LN_NEWUOA_BOUND"
              glib:nick="ln-newuoa-bound">
      </member>
      <member name="ln_neldermead"
              value="28"
              c:identifier="NLOPT_LN_NELDERMEAD"
              glib:nick="ln-neldermead">
      </member>
      <member name="ln_sbplx"
              value="29"
              c:identifier="NLOPT_LN_SBPLX"
              glib:nick="ln-sbplx">
      </member>
      <member name="ln_auglag"
              value="30"
              c:identifier="NLOPT_LN_AUGLAG"
              glib:nick="ln-auglag">
      </member>
      <member name="ld_auglag"
              value="31"
              c:identifier="NLOPT_LD_AUGLAG"
              glib:nick="ld-auglag">
      </member>
      <member name="ln_auglag_eq"
              value="32"
              c:identifier="NLOPT_LN_AUGLAG_EQ"
              glib:nick="ln-auglag-eq">
      </member>
      <member name="ld_auglag_eq"
              value="33"
              c:identifier="NLOPT_LD_AUGLAG_EQ"
              glib:nick="ld-auglag-eq">
      </member>
      <member name="ln_bobyqa"
              value="34"
              c:identifier="NLOPT_LN_BOBYQA"
              glib:nick="ln-bobyqa">
      </member>
      <member name="gn_isres"
              value="35"
              c:identifier="NLOPT_GN_ISRES"
              glib:nick="gn-isres">
      </member>
      <member name="auglag"
              value="36"
              c:identifier="NLOPT_AUGLAG"
              glib:nick="auglag">
      </member>
      <member name="auglag_eq"
              value="37"
              c:identifier="NLOPT_AUGLAG_EQ"
              glib:nick="auglag-eq">
      </member>
      <member name="g_mlsl"
              value="38"
              c:identifier="NLOPT_G_MLSL"
              glib:nick="g-mlsl">
      </member>
      <member name="g_mlsl_lds"
              value="39"
              c:identifier="NLOPT_G_MLSL_LDS"
              glib:nick="g-mlsl-lds">
      </member>
      <member name="ld_slsqp"
              value="40"
              c:identifier="NLOPT_LD_SLSQP"
              glib:nick="ld-slsqp">
      </member>
      <member name="ld_ccsaq"
              value="41"
              c:identifier="NLOPT_LD_CCSAQ"
              glib:nick="ld-ccsaq">
      </member>
      <member name="gn_esch"
              value="42"
              c:identifier="NLOPT_GN_ESCH"
              glib:nick="gn-esch">
      </member>
      <member name="num_algorithms"
              value="43"
              c:identifier="NLOPT_NUM_ALGORITHMS"
              glib:nick="num-algorithms">
      </member>
    </enumeration>
    <enumeration name="FitNloptResult"
                 glib:type-name="NcmFitNloptResult"
                 glib:get-type="ncm_fit_nlopt_result_get_type"
                 c:type="NcmFitNloptResult">
      <doc xml:space="preserve">NLOpt results enumerator.</doc>
      <member name="failure"
              value="-1"
              c:identifier="NLOPT_FAILURE"
              glib:nick="failure">
      </member>
      <member name="invalid_args"
              value="-2"
              c:identifier="NLOPT_INVALID_ARGS"
              glib:nick="invalid-args">
      </member>
      <member name="out_of_memory"
              value="-3"
              c:identifier="NLOPT_OUT_OF_MEMORY"
              glib:nick="out-of-memory">
      </member>
      <member name="roundoff_limited"
              value="-4"
              c:identifier="NLOPT_ROUNDOFF_LIMITED"
              glib:nick="roundoff-limited">
      </member>
      <member name="forced_stop"
              value="-5"
              c:identifier="NLOPT_FORCED_STOP"
              glib:nick="forced-stop">
      </member>
      <member name="success"
              value="1"
              c:identifier="NLOPT_SUCCESS"
              glib:nick="success">
      </member>
      <member name="stopval_reached"
              value="2"
              c:identifier="NLOPT_STOPVAL_REACHED"
              glib:nick="stopval-reached">
      </member>
      <member name="ftol_reached"
              value="3"
              c:identifier="NLOPT_FTOL_REACHED"
              glib:nick="ftol-reached">
      </member>
      <member name="xtol_reached"
              value="4"
              c:identifier="NLOPT_XTOL_REACHED"
              glib:nick="xtol-reached">
      </member>
      <member name="maxeval_reached"
              value="5"
              c:identifier="NLOPT_MAXEVAL_REACHED"
              glib:nick="maxeval-reached">
      </member>
      <member name="maxtime_reached"
              value="6"
              c:identifier="NLOPT_MAXTIME_REACHED"
              glib:nick="maxtime-reached">
      </member>
    </enumeration>
    <enumeration name="FitRunMsgs"
                 glib:type-name="NcmFitRunMsgs"
                 glib:get-type="ncm_fit_run_msgs_get_type"
                 c:type="NcmFitRunMsgs">
      <doc xml:space="preserve">FIXME</doc>
      <member name="none"
              value="0"
              c:identifier="NCM_FIT_RUN_MSGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="simple"
              value="1"
              c:identifier="NCM_FIT_RUN_MSGS_SIMPLE"
              glib:nick="simple">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="full"
              value="2"
              c:identifier="NCM_FIT_RUN_MSGS_FULL"
              glib:nick="full">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="FitState"
           c:symbol-prefix="fit_state"
           c:type="NcmFitState"
           parent="GObject.Object"
           glib:type-name="NcmFitState"
           glib:get-type="ncm_fit_state_get_type"
           glib:type-struct="FitStateClass">
      <constructor name="new" c:identifier="ncm_fit_state_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="FitState" c:type="NcmFitState*"/>
        </return-value>
        <parameters>
          <parameter name="data_len" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="fparam_len" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="dof" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="is_least_squares" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_fit_state_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="fstate" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitState" c:type="NcmFitState**"/>
          </parameter>
        </parameters>
      </function>
      <method name="free" c:identifier="ncm_fit_state_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fstate" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitState" c:type="NcmFitState*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_m2lnL_prec"
              c:identifier="ncm_fit_state_get_m2lnL_prec">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fstate" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitState" c:type="NcmFitState*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_niter" c:identifier="ncm_fit_state_get_niter">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="fstate" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitState" c:type="NcmFitState*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_params_prec"
              c:identifier="ncm_fit_state_get_params_prec">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fstate" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitState" c:type="NcmFitState*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="realloc" c:identifier="ncm_fit_state_realloc">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fstate" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitState" c:type="NcmFitState*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_fit_state_ref">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="FitState" c:type="NcmFitState*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fstate" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitState" c:type="NcmFitState*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="ncm_fit_state_reset">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fstate" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitState" c:type="NcmFitState*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_all" c:identifier="ncm_fit_state_set_all">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fstate" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitState" c:type="NcmFitState*"/>
          </instance-parameter>
          <parameter name="data_len" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="fparam_len" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="dof" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="is_least_squares" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ls" c:identifier="ncm_fit_state_set_ls">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fstate" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitState" c:type="NcmFitState*"/>
          </instance-parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="J" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_m2lnL_prec"
              c:identifier="ncm_fit_state_set_m2lnL_prec">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fstate" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitState" c:type="NcmFitState*"/>
          </instance-parameter>
          <parameter name="prec" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_niter" c:identifier="ncm_fit_state_set_niter">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fstate" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitState" c:type="NcmFitState*"/>
          </instance-parameter>
          <parameter name="niter" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_params_prec"
              c:identifier="ncm_fit_state_set_params_prec">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fstate" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitState" c:type="NcmFitState*"/>
          </instance-parameter>
          <parameter name="prec" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="data-len"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="dof"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="fparam-len"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="func-eval" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="grad-eval" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="is-best-fit" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-least-squares"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="niters" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="data_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="fparam_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="alloc_data_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="alloc_fparam_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="dof" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="niter" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="func_eval" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="grad_eval" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="m2lnL_prec" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="params_prec" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="elapsed_time" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="m2lnL_curval" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="dm2lnL" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="fparams" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="ls_f" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="ls_J" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="covar" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="hessian" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="is_best_fit" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="is_least_squares" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="has_covar" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="FitStateClass"
            c:type="NcmFitStateClass"
            glib:is-gtype-struct-for="FitState">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="FitType"
                 glib:type-name="NcmFitType"
                 glib:get-type="ncm_fit_type_get_type"
                 c:type="NcmFitType">
      <doc xml:space="preserve">FIXME</doc>
      <member name="gsl_ls"
              value="0"
              c:identifier="NCM_FIT_TYPE_GSL_LS"
              glib:nick="gsl-ls">
        <doc xml:space="preserve">GSL Least Squares</doc>
      </member>
      <member name="gsl_mm"
              value="1"
              c:identifier="NCM_FIT_TYPE_GSL_MM"
              glib:nick="gsl-mm">
        <doc xml:space="preserve">GSL Multidimensional Minimization</doc>
      </member>
      <member name="gsl_mms"
              value="2"
              c:identifier="NCM_FIT_TYPE_GSL_MMS"
              glib:nick="gsl-mms">
        <doc xml:space="preserve">GSL Multidimensional Minimization (simplex)</doc>
      </member>
      <member name="levmar"
              value="3"
              c:identifier="NCM_FIT_TYPE_LEVMAR"
              glib:nick="levmar">
        <doc xml:space="preserve">Levmar Least Squares Library</doc>
      </member>
      <member name="nlopt"
              value="4"
              c:identifier="NCM_FIT_TYPE_NLOPT"
              glib:nick="nlopt">
        <doc xml:space="preserve">Non Linear Optimization (NLOpt)</doc>
      </member>
    </enumeration>
    <callback name="FuncEvalLoop" c:type="NcmFuncEvalLoop">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="i" transfer-ownership="none">
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="f" transfer-ownership="none">
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="FunctionCache" c:type="NcmFunctionCache">
      <field name="tree" readable="0" private="1">
        <type name="GLib.Tree" c:type="GTree*"/>
      </field>
      <field name="lock" readable="0" private="1">
        <type name="GLib.Mutex" c:type="GMutex"/>
      </field>
      <field name="clear" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="n" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="abstol" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="reltol" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <method name="free" c:identifier="ncm_function_cache_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFunctionCache</doc>
            <type name="FunctionCache" c:type="NcmFunctionCache*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get"
              c:identifier="ncm_function_cache_get"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFunctionCache</doc>
            <type name="FunctionCache" c:type="NcmFunctionCache*"/>
          </instance-parameter>
          <parameter name="x_ptr" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type c:type="gsl_vector**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_near"
              c:identifier="ncm_function_cache_get_near"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFunctionCache</doc>
            <type name="FunctionCache" c:type="NcmFunctionCache*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x_found_ptr" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type c:type="gsl_vector**"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFunctionCacheSearchType</doc>
            <type name="FunctionCacheSearchType"
                  c:type="NcmFunctionCacheSearchType"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert"
              c:identifier="ncm_function_cache_insert"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <type name="FunctionCache" c:type="NcmFunctionCache*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_vector"
              c:identifier="ncm_function_cache_insert_vector"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFunctionCache</doc>
            <type name="FunctionCache" c:type="NcmFunctionCache*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type c:type="gsl_vector*"/>
          </parameter>
        </parameters>
      </method>
      <function name="clear" c:identifier="ncm_function_cache_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFunctionCache</doc>
            <type name="FunctionCache" c:type="NcmFunctionCache**"/>
          </parameter>
        </parameters>
      </function>
      <function name="new"
                c:identifier="ncm_function_cache_new"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value>
          <doc xml:space="preserve">FIXME</doc>
          <type name="FunctionCache" c:type="NcmFunctionCache*"/>
        </return-value>
        <parameters>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="reltol" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="FunctionCacheSearchType"
                 glib:type-name="NcmFunctionCacheSearchType"
                 glib:get-type="ncm_function_cache_search_type_get_type"
                 c:type="NcmFunctionCacheSearchType">
      <doc xml:space="preserve">FIXME</doc>
      <member name="both"
              value="0"
              c:identifier="NC_FUNCTION_CACHE_SEARCH_BOTH"
              glib:nick="both">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="gt"
              value="1"
              c:identifier="NC_FUNCTION_CACHE_SEARCH_GT"
              glib:nick="gt">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="lt"
              value="2"
              c:identifier="NC_FUNCTION_CACHE_SEARCH_LT"
              glib:nick="lt">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <record name="Grid" c:type="NcmGrid">
      <doc xml:space="preserve">FIXME</doc>
      <field name="sections" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="nnodes" readable="0" private="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="nodes" readable="0" private="1">
        <type name="gint" c:type="gint*"/>
      </field>
      <field name="data" readable="0" private="1">
        <type name="gdouble" c:type="gdouble*"/>
      </field>
      <method name="free" c:identifier="ncm_grid_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="grid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmGrid</doc>
            <type name="Grid" c:type="NcmGrid*"/>
          </instance-parameter>
          <parameter name="free_data" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_double_array" c:identifier="ncm_grid_get_double_array">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </return-value>
        <parameters>
          <instance-parameter name="grid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmGrid</doc>
            <type name="Grid" c:type="NcmGrid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_node_d" c:identifier="ncm_grid_get_node_d">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="grid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmGrid</doc>
            <type name="Grid" c:type="NcmGrid*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nodes_d" c:identifier="ncm_grid_set_nodes_d">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="grid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmGrid</doc>
            <type name="Grid" c:type="NcmGrid*"/>
          </instance-parameter>
          <parameter name="incl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmGridNodesEndPoints</doc>
            <type name="GridNodesEndPoints" c:type="NcmGridNodesEndPoints"/>
          </parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="start_val" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="end_val" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nodes_si" c:identifier="ncm_grid_set_nodes_si">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="grid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmGrid</doc>
            <type name="Grid" c:type="NcmGrid*"/>
          </instance-parameter>
          <parameter name="incl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmGridNodesEndPoints</doc>
            <type name="GridNodesEndPoints" c:type="NcmGridNodesEndPoints"/>
          </parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="start_val_num" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="glong" c:type="glong"/>
          </parameter>
          <parameter name="start_val_den" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="glong" c:type="glong"/>
          </parameter>
          <parameter name="end_val_num" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="glong" c:type="glong"/>
          </parameter>
          <parameter name="end_val_den" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="glong" c:type="glong"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sections" c:identifier="ncm_grid_set_sections">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="grid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmGrid</doc>
            <type name="Grid" c:type="NcmGrid*"/>
          </instance-parameter>
          <parameter name="secs" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmGridSection</doc>
            <type name="GridSection" c:type="NcmGridSection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write" c:identifier="ncm_grid_write">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="grid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmGrid</doc>
            <type name="Grid" c:type="NcmGrid*"/>
          </instance-parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <function name="get_name" c:identifier="ncm_grid_get_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="secs" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmGridSection</doc>
            <type name="GridSection" c:type="NcmGridSection*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new" c:identifier="ncm_grid_new" introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value>
          <doc xml:space="preserve">FIXME</doc>
          <type name="Grid" c:type="NcmGrid*"/>
        </return-value>
        <parameters>
          <parameter name="nnodes" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_from_sections"
                c:identifier="ncm_grid_new_from_sections"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value>
          <doc xml:space="preserve">FIXME</doc>
          <type name="Grid" c:type="NcmGrid*"/>
        </return-value>
        <parameters>
          <parameter name="secs" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmGridSection</doc>
            <type name="GridSection" c:type="NcmGridSection*"/>
          </parameter>
        </parameters>
      </function>
      <function name="read" c:identifier="ncm_grid_read" introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value>
          <doc xml:space="preserve">FIXME</doc>
          <type name="Grid" c:type="NcmGrid*"/>
        </return-value>
        <parameters>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="GridNodesEndPoints"
                 glib:type-name="NcmGridNodesEndPoints"
                 glib:get-type="ncm_grid_nodes_end_points_get_type"
                 c:type="NcmGridNodesEndPoints">
      <doc xml:space="preserve">FIXME</doc>
      <member name="start"
              value="1"
              c:identifier="NCM_GRID_NODES_START"
              glib:nick="start">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="end"
              value="2"
              c:identifier="NCM_GRID_NODES_END"
              glib:nick="end">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="both"
              value="3"
              c:identifier="NCM_GRID_NODES_BOTH"
              glib:nick="both">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="none"
              value="4"
              c:identifier="NCM_GRID_NODES_NONE"
              glib:nick="none">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <record name="GridSection" c:type="NcmGridSection">
      <doc xml:space="preserve">FIXME</doc>
      <field name="incl" readable="0" private="1">
        <type name="GridNodesEndPoints" c:type="NcmGridNodesEndPoints"/>
      </field>
      <field name="start" readable="0" private="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="end" readable="0" private="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="start_val" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="end_val" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </record>
    <constant name="HEALPIX_NULLVAL"
              value="1637499999999999923489519697920.000000"
              c:type="NCM_HEALPIX_NULLVAL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <class name="HOAA"
           c:symbol-prefix="hoaa"
           c:type="NcmHOAA"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NcmHOAA"
           glib:get-type="ncm_hoaa_get_type"
           glib:type-struct="HOAAClass">
      <function name="clear" c:identifier="ncm_hoaa_clear">
        <doc xml:space="preserve">Decreases the reference count of *@hoaa and sets the pointer *@hoaa to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="eval_V" invoker="eval_V">
        <doc xml:space="preserve">Evaluates the potential term at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the potential $V$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time $t$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_dlnmnu" invoker="eval_dlnmnu">
        <doc xml:space="preserve">Evaluates the derivative $\mathrm{d}(m\nu)/\mathrm{d}t$ term at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the potential $\mathrm{d}(m\nu)/\mathrm{d}t$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time $t$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_mnu" invoker="eval_mnu">
        <doc xml:space="preserve">Evaluates the mass term at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the mass $m$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time $t$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_nu" invoker="eval_nu">
        <doc xml:space="preserve">Evaluates the frequency term at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the frequency $\nu$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time $t$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_powspec_factor" invoker="eval_powspec_factor">
        <doc xml:space="preserve">Evaluates the power spectrum constant factor.
Default is: $1/(2\pi^2)$.</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_sing_V" invoker="eval_sing_V">
        <doc xml:space="preserve">Evaluates the potential term at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the potential $V$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t_m_ts" transfer-ownership="none">
            <doc xml:space="preserve">time $t - t_s$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_sing_dlnmnu" invoker="eval_sing_dlnmnu">
        <doc xml:space="preserve">Evaluates the derivative $\mathrm{d}(m\nu)/\mathrm{d}t$ term at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the potential $\mathrm{d}(m\nu)/\mathrm{d}t$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t_m_ts" transfer-ownership="none">
            <doc xml:space="preserve">time $t - t_s$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_sing_mnu" invoker="eval_sing_mnu">
        <doc xml:space="preserve">Evaluates the mass term at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the mass $m$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t_m_ts" transfer-ownership="none">
            <doc xml:space="preserve">time $t - t_s$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_sing_system" invoker="eval_sing_system">
        <doc xml:space="preserve">Evaluates the system functions at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t_m_ts" transfer-ownership="none">
            <doc xml:space="preserve">time $t - t_s$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="nu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the frequency $\nu$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dlnmnu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the derivative $\mathrm{d}(m\nu)/\mathrm{d}t$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="Vnu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the potential over frequency term $V/\nu$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_system" invoker="eval_system">
        <doc xml:space="preserve">Evaluates the system functions at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time $t$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="nu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the frequency $\nu$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dlnmnu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the derivative $\mathrm{d}(m\nu)/\mathrm{d}t$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="Vnu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the potential over frequency term $V/\nu$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sing_info" invoker="get_sing_info">
        <doc xml:space="preserve">Gets the time $t_s$ where the @sing-th singularity occour.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="ts"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">singularity time $t_s$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dts_i"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dts_f"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="st"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HOAASingType" c:type="NcmHOAASingType*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="nsing" invoker="nsing">
        <doc xml:space="preserve">Gets the number of singular points $m(t_s) = 0$ for the problem in hand.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of singular points.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare" invoker="prepare">
        <doc xml:space="preserve">Prepares the object using @model.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="eval_AA" c:identifier="ncm_hoaa_eval_AA">
        <doc xml:space="preserve">Calculates the AA variables at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time $t$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="epsilon"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\theta$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="gamma"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\psi$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="Ts"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\ln(I)$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="Tc"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\ln(J)$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_AA2QV" c:identifier="ncm_hoaa_eval_AA2QV">
        <doc xml:space="preserve">Change the variables from AA to QV.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time $t$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="epsilon" transfer-ownership="none">
            <doc xml:space="preserve">$\epsilon$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="gamma" transfer-ownership="none">
            <doc xml:space="preserve">$\gamma$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="Ts" transfer-ownership="none">
            <doc xml:space="preserve">$\sin (\theta_b)$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="Tc" transfer-ownership="none">
            <doc xml:space="preserve">$\cos (\theta_b)$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="q"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$u$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="v"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$v$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="Pq"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$P_q$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="Pv"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$P_v$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_Delta" c:identifier="ncm_hoaa_eval_Delta">
        <doc xml:space="preserve">Calculates the power spectra.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time $t$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="Delta_phi"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\Delta_\phi$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="Delta_Pphi"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\Delta_{P_\phi}$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_QV" c:identifier="ncm_hoaa_eval_QV">
        <doc xml:space="preserve">Calculates the complex variables at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time $t$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="q"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$q$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="v"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$v$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="Pq"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$P_q$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="Pv"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$P_v$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_QV2AA" c:identifier="ncm_hoaa_eval_QV2AA">
        <doc xml:space="preserve">Change the variables from complex to AA.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time $t$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">$q$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">$v$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="Pq" transfer-ownership="none">
            <doc xml:space="preserve">$P_q$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="Pv" transfer-ownership="none">
            <doc xml:space="preserve">$P_v$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="epsilon"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\epsilon$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="gamma"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\gamma$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="Ts"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\sin (\theta_b)$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="Tc"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\cos (\theta_b)$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_V" c:identifier="ncm_hoaa_eval_V">
        <doc xml:space="preserve">Evaluates the potential term at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the potential $V$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time $t$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_adiabatic_LnI_approx"
              c:identifier="ncm_hoaa_eval_adiabatic_LnI_approx">
        <doc xml:space="preserve">Calculates the adiabatic approximation at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time $t$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">$\theta$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="psi" transfer-ownership="none">
            <doc xml:space="preserve">$\psi$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="LnI"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\ln(I)$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="LnJ"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\ln(J)$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_adiabatic_approx"
              c:identifier="ncm_hoaa_eval_adiabatic_approx">
        <doc xml:space="preserve">Calculates the adiabatic approximation at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time $t$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="thetab"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\theta$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="epsilon"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\psi$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="gamma"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\ln(I)$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_dlnmnu" c:identifier="ncm_hoaa_eval_dlnmnu">
        <doc xml:space="preserve">Evaluates the derivative $\mathrm{d}(m\nu)/\mathrm{d}t$ term at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the potential $\mathrm{d}(m\nu)/\mathrm{d}t$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time $t$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_mnu" c:identifier="ncm_hoaa_eval_mnu">
        <doc xml:space="preserve">Evaluates the mass term at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the mass $m$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time $t$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_nu" c:identifier="ncm_hoaa_eval_nu">
        <doc xml:space="preserve">Evaluates the frequency term at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the frequency $\nu$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time $t$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_powspec_factor"
              c:identifier="ncm_hoaa_eval_powspec_factor">
        <doc xml:space="preserve">Evaluates the power spectrum constant factor.
Default is: $1/(2\pi^2)$.</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_sing_V" c:identifier="ncm_hoaa_eval_sing_V">
        <doc xml:space="preserve">Evaluates the potential term at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the potential $V$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t_m_ts" transfer-ownership="none">
            <doc xml:space="preserve">time $t - t_s$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_sing_dlnmnu" c:identifier="ncm_hoaa_eval_sing_dlnmnu">
        <doc xml:space="preserve">Evaluates the derivative $\mathrm{d}(m\nu)/\mathrm{d}t$ term at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the potential $\mathrm{d}(m\nu)/\mathrm{d}t$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t_m_ts" transfer-ownership="none">
            <doc xml:space="preserve">time $t - t_s$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_sing_mnu" c:identifier="ncm_hoaa_eval_sing_mnu">
        <doc xml:space="preserve">Evaluates the mass term at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the mass $m$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t_m_ts" transfer-ownership="none">
            <doc xml:space="preserve">time $t - t_s$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_sing_system" c:identifier="ncm_hoaa_eval_sing_system">
        <doc xml:space="preserve">Evaluates the system functions at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t_m_ts" transfer-ownership="none">
            <doc xml:space="preserve">time $t - t_s$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="nu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the frequency $\nu$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dlnmnu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the derivative $\mathrm{d}(m\nu)/\mathrm{d}t$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="Vnu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the potential over frequency term $V/\nu$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_solution" c:identifier="ncm_hoaa_eval_solution">
        <doc xml:space="preserve">Calculates the coefficients $A_q$ and $A_v$ of the solution with
initial conditions $S,\;P_S$ at $t$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time $t$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="S" transfer-ownership="none">
            <doc xml:space="preserve">$S$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="PS" transfer-ownership="none">
            <doc xml:space="preserve">$P_S$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="Aq"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$A_q$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="Av"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$A_v$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_system" c:identifier="ncm_hoaa_eval_system">
        <doc xml:space="preserve">Evaluates the system functions at $t$ and $k$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time $t$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="nu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the frequency $\nu$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dlnmnu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the derivative $\mathrm{d}(m\nu)/\mathrm{d}t$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="Vnu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the potential over frequency term $V/\nu$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_hoaa_free">
        <doc xml:space="preserve">Decreases the reference count of @hoaa.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sing_info" c:identifier="ncm_hoaa_get_sing_info">
        <doc xml:space="preserve">Gets the time $t_s$ where the @sing-th singularity occour.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="ts"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">singularity time $t_s$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dts_i"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dts_f"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="st"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HOAASingType" c:type="NcmHOAASingType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_t0_t1" c:identifier="ncm_hoaa_get_t0_t1">
        <doc xml:space="preserve">Gets the time interval where the numerical evolution was calculated;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="t0"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$t_0$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="t1"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$t_1$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="nsing" c:identifier="ncm_hoaa_nsing">
        <doc xml:space="preserve">Gets the number of singular points $m(t_s) = 0$ for the problem in hand.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of singular points.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="ncm_hoaa_prepare">
        <doc xml:space="preserve">Prepares the object using @model.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_hoaa_ref">
        <doc xml:space="preserve">Increases the reference count of @hoaa.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@hoaa.</doc>
          <type name="HOAA" c:type="NcmHOAA*"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_evol" c:identifier="ncm_hoaa_save_evol">
        <doc xml:space="preserve">If true saves all evolution to be evaluted later through FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="save_evol" transfer-ownership="none">
            <doc xml:space="preserve">whether to save all evolution</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_abstol" c:identifier="ncm_hoaa_set_abstol">
        <doc xml:space="preserve">Sets the absolute tolerance to @abstol.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">absolute tolerance</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_k" c:identifier="ncm_hoaa_set_k">
        <doc xml:space="preserve">Sets the mode $k$ to @k.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reltol" c:identifier="ncm_hoaa_set_reltol">
        <doc xml:space="preserve">Sets the relative tolerance to @reltol.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="reltol" transfer-ownership="none">
            <doc xml:space="preserve">relative tolerance</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tf" c:identifier="ncm_hoaa_set_tf">
        <doc xml:space="preserve">Sets the initial time $t_f$ to @tf.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="tf" transfer-ownership="none">
            <doc xml:space="preserve">mode $t_f$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ti" c:identifier="ncm_hoaa_set_ti">
        <doc xml:space="preserve">Sets the initial time $t_i$ to @ti.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hoaa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmHOAA</doc>
            <type name="HOAA" c:type="NcmHOAA*"/>
          </instance-parameter>
          <parameter name="ti" transfer-ownership="none">
            <doc xml:space="preserve">mode $t_i$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="abstol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="k" writable="1" construct="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="opt"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="HOAAOpt"/>
      </property>
      <property name="reltol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="save-evol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="tf" writable="1" construct="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="ti" writable="1" construct="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="HOAAPrivate" c:type="NcmHOAAPrivate*"/>
      </field>
      <field name="k" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="HOAAClass"
            c:type="NcmHOAAClass"
            glib:is-gtype-struct-for="HOAA">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="eval_mnu">
        <callback name="eval_mnu">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the mass $m$.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="hoaa" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmHOAA</doc>
              <type name="HOAA" c:type="NcmHOAA*"/>
            </parameter>
            <parameter name="model" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmModel</doc>
              <type name="Model" c:type="NcmModel*"/>
            </parameter>
            <parameter name="t" transfer-ownership="none">
              <doc xml:space="preserve">time $t$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">mode $k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_nu">
        <callback name="eval_nu">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the frequency $\nu$.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="hoaa" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmHOAA</doc>
              <type name="HOAA" c:type="NcmHOAA*"/>
            </parameter>
            <parameter name="model" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmModel</doc>
              <type name="Model" c:type="NcmModel*"/>
            </parameter>
            <parameter name="t" transfer-ownership="none">
              <doc xml:space="preserve">time $t$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">mode $k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_dlnmnu">
        <callback name="eval_dlnmnu">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the potential $\mathrm{d}(m\nu)/\mathrm{d}t$.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="hoaa" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmHOAA</doc>
              <type name="HOAA" c:type="NcmHOAA*"/>
            </parameter>
            <parameter name="model" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmModel</doc>
              <type name="Model" c:type="NcmModel*"/>
            </parameter>
            <parameter name="t" transfer-ownership="none">
              <doc xml:space="preserve">time $t$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">mode $k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_V">
        <callback name="eval_V">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the potential $V$.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="hoaa" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmHOAA</doc>
              <type name="HOAA" c:type="NcmHOAA*"/>
            </parameter>
            <parameter name="model" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmModel</doc>
              <type name="Model" c:type="NcmModel*"/>
            </parameter>
            <parameter name="t" transfer-ownership="none">
              <doc xml:space="preserve">time $t$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">mode $k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_system">
        <callback name="eval_system">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="hoaa" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmHOAA</doc>
              <type name="HOAA" c:type="NcmHOAA*"/>
            </parameter>
            <parameter name="model"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">a #NcmModel</doc>
              <type name="Model" c:type="NcmModel*"/>
            </parameter>
            <parameter name="t" transfer-ownership="none">
              <doc xml:space="preserve">time $t$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">mode $k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="nu"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">the frequency $\nu$</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="dlnmnu"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">the derivative $\mathrm{d}(m\nu)/\mathrm{d}t$</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="Vnu"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">the potential over frequency term $V/\nu$</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="nsing">
        <callback name="nsing">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the number of singular points.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="hoaa" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmHOAA</doc>
              <type name="HOAA" c:type="NcmHOAA*"/>
            </parameter>
            <parameter name="model" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmModel</doc>
              <type name="Model" c:type="NcmModel*"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">mode $k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sing_info">
        <callback name="get_sing_info">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="hoaa" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmHOAA</doc>
              <type name="HOAA" c:type="NcmHOAA*"/>
            </parameter>
            <parameter name="model" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmModel</doc>
              <type name="Model" c:type="NcmModel*"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">mode $k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="sing" transfer-ownership="none">
              <doc xml:space="preserve">singularity index</doc>
              <type name="guint" c:type="const guint"/>
            </parameter>
            <parameter name="ts"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">singularity time $t_s$</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="dts_i"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">FIXME</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="dts_f"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">FIXME</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="st"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">FIXME</doc>
              <type name="HOAASingType" c:type="NcmHOAASingType*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_sing_mnu">
        <callback name="eval_sing_mnu">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the mass $m$.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="hoaa" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmHOAA</doc>
              <type name="HOAA" c:type="NcmHOAA*"/>
            </parameter>
            <parameter name="model" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmModel</doc>
              <type name="Model" c:type="NcmModel*"/>
            </parameter>
            <parameter name="t_m_ts" transfer-ownership="none">
              <doc xml:space="preserve">time $t - t_s$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">mode $k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="sing" transfer-ownership="none">
              <doc xml:space="preserve">singularity index</doc>
              <type name="guint" c:type="const guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_sing_dlnmnu">
        <callback name="eval_sing_dlnmnu">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the potential $\mathrm{d}(m\nu)/\mathrm{d}t$.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="hoaa" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmHOAA</doc>
              <type name="HOAA" c:type="NcmHOAA*"/>
            </parameter>
            <parameter name="model" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmModel</doc>
              <type name="Model" c:type="NcmModel*"/>
            </parameter>
            <parameter name="t_m_ts" transfer-ownership="none">
              <doc xml:space="preserve">time $t - t_s$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">mode $k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="sing" transfer-ownership="none">
              <doc xml:space="preserve">singularity index</doc>
              <type name="guint" c:type="const guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_sing_V">
        <callback name="eval_sing_V">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the potential $V$.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="hoaa" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmHOAA</doc>
              <type name="HOAA" c:type="NcmHOAA*"/>
            </parameter>
            <parameter name="model" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmModel</doc>
              <type name="Model" c:type="NcmModel*"/>
            </parameter>
            <parameter name="t_m_ts" transfer-ownership="none">
              <doc xml:space="preserve">time $t - t_s$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">mode $k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="sing" transfer-ownership="none">
              <doc xml:space="preserve">singularity index</doc>
              <type name="guint" c:type="const guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_sing_system">
        <callback name="eval_sing_system">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="hoaa" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmHOAA</doc>
              <type name="HOAA" c:type="NcmHOAA*"/>
            </parameter>
            <parameter name="model"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">a #NcmModel</doc>
              <type name="Model" c:type="NcmModel*"/>
            </parameter>
            <parameter name="t_m_ts" transfer-ownership="none">
              <doc xml:space="preserve">time $t - t_s$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">mode $k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="sing" transfer-ownership="none">
              <doc xml:space="preserve">singularity index</doc>
              <type name="guint" c:type="const guint"/>
            </parameter>
            <parameter name="nu"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">the frequency $\nu$</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="dlnmnu"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">the derivative $\mathrm{d}(m\nu)/\mathrm{d}t$</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="Vnu"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">the potential over frequency term $V/\nu$</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_powspec_factor">
        <callback name="eval_powspec_factor">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="hoaa" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmHOAA</doc>
              <type name="HOAA" c:type="NcmHOAA*"/>
            </parameter>
            <parameter name="model"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">a #NcmModel</doc>
              <type name="Model" c:type="NcmModel*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare">
        <callback name="prepare">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="hoaa" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmHOAA</doc>
              <type name="HOAA" c:type="NcmHOAA*"/>
            </parameter>
            <parameter name="model"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">a #NcmModel</doc>
              <type name="Model" c:type="NcmModel*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="HOAAOpt"
                 glib:type-name="NcmHOAAOpt"
                 glib:get-type="ncm_hoaa_opt_get_type"
                 c:type="NcmHOAAOpt">
      <doc xml:space="preserve">FIXME</doc>
      <member name="full"
              value="0"
              c:identifier="NCM_HOAA_OPT_FULL"
              glib:nick="full">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="v_only"
              value="1"
              c:identifier="NCM_HOAA_OPT_V_ONLY"
              glib:nick="v-only">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="dlnmnu_only"
              value="2"
              c:identifier="NCM_HOAA_OPT_DLNMNU_ONLY"
              glib:nick="dlnmnu-only">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="invalid"
              value="3"
              c:identifier="NCM_HOAA_OPT_INVALID"
              glib:nick="invalid">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <record name="HOAAPrivate" c:type="NcmHOAAPrivate" disguised="1">
    </record>
    <enumeration name="HOAASingType"
                 glib:type-name="NcmHOAASingType"
                 glib:get-type="ncm_hoaa_sing_type_get_type"
                 c:type="NcmHOAASingType">
      <doc xml:space="preserve">FIXME</doc>
      <member name="zero"
              value="0"
              c:identifier="NCM_HOAA_SING_TYPE_ZERO"
              glib:nick="zero">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="inf"
              value="1"
              c:identifier="NCM_HOAA_SING_TYPE_INF"
              glib:nick="inf">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="invalid"
              value="2"
              c:identifier="NCM_HOAA_SING_TYPE_INVALID"
              glib:nick="invalid">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <enumeration name="HOAAVar"
                 glib:type-name="NcmHOAAVar"
                 glib:get-type="ncm_hoaa_var_get_type"
                 c:type="NcmHOAAVar">
      <doc xml:space="preserve">FIXME</doc>
      <member name="ts"
              value="0"
              c:identifier="NCM_HOAA_VAR_TS"
              glib:nick="ts">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="tc"
              value="1"
              c:identifier="NCM_HOAA_VAR_TC"
              glib:nick="tc">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="epsilon"
              value="2"
              c:identifier="NCM_HOAA_VAR_EPSILON"
              glib:nick="epsilon">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="gamma"
              value="3"
              c:identifier="NCM_HOAA_VAR_GAMMA"
              glib:nick="gamma">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="sys_size"
              value="4"
              c:identifier="NCM_HOAA_VAR_SYS_SIZE"
              glib:nick="sys-size">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <constant name="HOAA_TIME_FRAC"
              value="0.000000"
              c:type="NCM_HOAA_TIME_FRAC">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="INTEGRAL1D_DEFAULT_ABSTOL"
              value="0.000000"
              c:type="NCM_INTEGRAL1D_DEFAULT_ABSTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="INTEGRAL1D_DEFAULT_ALG"
              value="6"
              c:type="NCM_INTEGRAL1D_DEFAULT_ALG">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="INTEGRAL1D_DEFAULT_PARTITION"
              value="100000"
              c:type="NCM_INTEGRAL1D_DEFAULT_PARTITION">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="INTEGRAL1D_DEFAULT_RELTOL"
              value="0.000000"
              c:type="NCM_INTEGRAL1D_DEFAULT_RELTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="INTEGRAL_ABS_ERROR"
              value="0.000000"
              c:type="NCM_INTEGRAL_ABS_ERROR">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="INTEGRAL_ALG" value="6" c:type="NCM_INTEGRAL_ALG">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="INTEGRAL_ERROR"
              value="0.000000"
              c:type="NCM_INTEGRAL_ERROR">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="INTEGRAL_PARTITION"
              value="100000"
              c:type="NCM_INTEGRAL_PARTITION">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Integral1d"
           c:symbol-prefix="integral1d"
           c:type="NcmIntegral1d"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NcmIntegral1d"
           glib:get-type="ncm_integral1d_get_type"
           glib:type-struct="Integral1dClass">
      <function name="clear" c:identifier="ncm_integral1d_clear">
        <doc xml:space="preserve">If *@int1d is different from NULL, decreases the reference
count of *@int1d by one and sets *@int1d to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="int1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1d</doc>
            <type name="Integral1d" c:type="NcmIntegral1d**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="integrand" invoker="integrand">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d" transfer-ownership="none">
            <type name="Integral1d" c:type="NcmIntegral1d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="w" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="eval" c:identifier="ncm_integral1d_eval">
        <doc xml:space="preserve">Evaluated the integral $I_F(x_i, x_f) = \int_{x_i}^{x_f}F(x)\mathrm{d}x$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the integral $I_F(x_i, x_f)$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1d</doc>
            <type name="Integral1d" c:type="NcmIntegral1d*"/>
          </instance-parameter>
          <parameter name="xi" transfer-ownership="none">
            <doc xml:space="preserve">inferior integration limit $x_i$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="xf" transfer-ownership="none">
            <doc xml:space="preserve">superior integration limit $x_f$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="err"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the error in the integration</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_gauss_hermite"
              c:identifier="ncm_integral1d_eval_gauss_hermite">
        <doc xml:space="preserve">Evaluated the integral $H_F = \int_{-\infty}^{\infty}e^{-x^2/2}F(x)\mathrm{d}x$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the integral $H_F$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1d</doc>
            <type name="Integral1d" c:type="NcmIntegral1d*"/>
          </instance-parameter>
          <parameter name="err"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the error in the integration</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_gauss_hermite_mur"
              c:identifier="ncm_integral1d_eval_gauss_hermite_mur">
        <doc xml:space="preserve">Evaluated the integral $H_F = \int_{-\infty}^{\infty}e^{-(x-\mu)^2r^2/2}F(x)\mathrm{d}x$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the integral $H_F$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1d</doc>
            <type name="Integral1d" c:type="NcmIntegral1d*"/>
          </instance-parameter>
          <parameter name="r" transfer-ownership="none">
            <doc xml:space="preserve">Gaussian scale $r$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="mu" transfer-ownership="none">
            <doc xml:space="preserve">Gaussian mean $\mu$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="err"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the error in the integration</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_gauss_hermite_p"
              c:identifier="ncm_integral1d_eval_gauss_hermite_p">
        <doc xml:space="preserve">Evaluated the integral $H^p_F = \int_{0}^{\infty}e^{-x^2/2}F(x)\mathrm{d}x$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the integral $H^p_F$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1d</doc>
            <type name="Integral1d" c:type="NcmIntegral1d*"/>
          </instance-parameter>
          <parameter name="err"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the error in the integration</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_gauss_hermite_r_p"
              c:identifier="ncm_integral1d_eval_gauss_hermite_r_p">
        <doc xml:space="preserve">Evaluated the integral $H^p_F = \int_{0}^{\infty}e^{-x^2r^2/2}F(x)\mathrm{d}x$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the integral $H^p_F$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1d</doc>
            <type name="Integral1d" c:type="NcmIntegral1d*"/>
          </instance-parameter>
          <parameter name="r" transfer-ownership="none">
            <doc xml:space="preserve">Gaussian scale $r$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="err"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the error in the integration</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_gauss_laguerre"
              c:identifier="ncm_integral1d_eval_gauss_laguerre">
        <doc xml:space="preserve">Evaluated the integral $L_F = \int_{0}^{\infty}e^{-x}F(x)\mathrm{d}x$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the integral $L_F$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1d</doc>
            <type name="Integral1d" c:type="NcmIntegral1d*"/>
          </instance-parameter>
          <parameter name="err"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the error in the integration</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_gauss_laguerre_r"
              c:identifier="ncm_integral1d_eval_gauss_laguerre_r">
        <doc xml:space="preserve">Evaluated the integral $L_F = \int_{0}^{\infty}e^{-xr}F(x)\mathrm{d}x$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the integral $L_F$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1d</doc>
            <type name="Integral1d" c:type="NcmIntegral1d*"/>
          </instance-parameter>
          <parameter name="r" transfer-ownership="none">
            <doc xml:space="preserve">exponential scale $r$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="err"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the error in the integration</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_integral1d_free">
        <doc xml:space="preserve">Decreases the reference count of @int1d by one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1d</doc>
            <type name="Integral1d" c:type="NcmIntegral1d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_abstol" c:identifier="ncm_integral1d_get_abstol">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the absolute tolerance used.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1d</doc>
            <type name="Integral1d" c:type="NcmIntegral1d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_partition" c:identifier="ncm_integral1d_get_partition">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the maximum number of subdivisions used.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1d</doc>
            <type name="Integral1d" c:type="NcmIntegral1d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reltol" c:identifier="ncm_integral1d_get_reltol">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the relative tolerance used.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1d</doc>
            <type name="Integral1d" c:type="NcmIntegral1d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rule" c:identifier="ncm_integral1d_get_rule">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the Gauss-Kronrod rule used.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1d</doc>
            <type name="Integral1d" c:type="NcmIntegral1d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="integrand" c:identifier="ncm_integral1d_integrand">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d" transfer-ownership="none">
            <type name="Integral1d" c:type="NcmIntegral1d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="w" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_integral1d_ref">
        <doc xml:space="preserve">Increases the reference count of @int1d by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@int1d.</doc>
          <type name="Integral1d" c:type="NcmIntegral1d*"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1d</doc>
            <type name="Integral1d" c:type="NcmIntegral1d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_abstol" c:identifier="ncm_integral1d_set_abstol">
        <doc xml:space="preserve">Sets the absolute tolerance @reltol to use.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1d</doc>
            <type name="Integral1d" c:type="NcmIntegral1d*"/>
          </instance-parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">absolute tolerance</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_partition" c:identifier="ncm_integral1d_set_partition">
        <doc xml:space="preserve">Sets the max number of subintervals to @partition.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1d</doc>
            <type name="Integral1d" c:type="NcmIntegral1d*"/>
          </instance-parameter>
          <parameter name="partition" transfer-ownership="none">
            <doc xml:space="preserve">max number of subintervals</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reltol" c:identifier="ncm_integral1d_set_reltol">
        <doc xml:space="preserve">Sets the relative tolerance @reltol to use.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1d</doc>
            <type name="Integral1d" c:type="NcmIntegral1d*"/>
          </instance-parameter>
          <parameter name="reltol" transfer-ownership="none">
            <doc xml:space="preserve">relative tolerance</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rule" c:identifier="ncm_integral1d_set_rule">
        <doc xml:space="preserve">Sets the Gauss-Kronrod @rule to use.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1d</doc>
            <type name="Integral1d" c:type="NcmIntegral1d*"/>
          </instance-parameter>
          <parameter name="rule" transfer-ownership="none">
            <doc xml:space="preserve">Gauss-Kronrod rule</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="abstol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="partition"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="reltol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="rule"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="Integral1dPrivate" c:type="NcmIntegral1dPrivate*"/>
      </field>
    </class>
    <record name="Integral1dClass"
            c:type="NcmIntegral1dClass"
            glib:is-gtype-struct-for="Integral1d">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="integrand" readable="0" private="1">
        <type name="Integral1dF" c:type="NcmIntegral1dF"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="9">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <callback name="Integral1dF" c:type="NcmIntegral1dF">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="int1d" transfer-ownership="none">
          <type name="Integral1d" c:type="NcmIntegral1d*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="w" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Integral1dPrivate"
            c:type="NcmIntegral1dPrivate"
            disguised="1">
    </record>
    <class name="Integral1dPtr"
           c:symbol-prefix="integral1d_ptr"
           c:type="NcmIntegral1dPtr"
           parent="Integral1d"
           glib:type-name="NcmIntegral1dPtr"
           glib:get-type="ncm_integral1d_ptr_get_type"
           glib:type-struct="Integral1dPtrClass">
      <constructor name="new" c:identifier="ncm_integral1d_ptr_new">
        <doc xml:space="preserve">Creates a new #NcmIntegral1dPtr object for the integrand @F.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the new #NcmIntegral1dPtr object.</doc>
          <type name="Integral1dPtr" c:type="NcmIntegral1dPtr*"/>
        </return-value>
        <parameters>
          <parameter name="F"
                     transfer-ownership="none"
                     scope="notified"
                     destroy="1">
            <doc xml:space="preserve">a #NcmIntegral1dPtrF</doc>
            <type name="Integral1dPtrF" c:type="NcmIntegral1dPtrF"/>
          </parameter>
          <parameter name="userfree" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">#GDestroyNotify</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full" c:identifier="ncm_integral1d_ptr_new_full">
        <doc xml:space="preserve">Creates a new #NcmIntegral1dPtr object for the integrand @F.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the new #NcmIntegral1dPtr object.</doc>
          <type name="Integral1dPtr" c:type="NcmIntegral1dPtr*"/>
        </return-value>
        <parameters>
          <parameter name="F"
                     transfer-ownership="none"
                     scope="notified"
                     destroy="1">
            <doc xml:space="preserve">a #NcmIntegral1dPtrF</doc>
            <type name="Integral1dPtrF" c:type="NcmIntegral1dPtrF"/>
          </parameter>
          <parameter name="userfree" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">#GDestroyNotify</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="reltol" transfer-ownership="none">
            <doc xml:space="preserve">the relative tolerance</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">the absolute tolerance</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="partition" transfer-ownership="none">
            <doc xml:space="preserve">the maximum subdivisions</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="rule" transfer-ownership="none">
            <doc xml:space="preserve">integration rule to use in each subinterval</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_integral1d_ptr_clear">
        <doc xml:space="preserve">If *@int1d is different from NULL, decreases the reference
count of *@int1d by one and sets *@int1d to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="int1d_ptr" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1dPtr</doc>
            <type name="Integral1dPtr" c:type="NcmIntegral1dPtr**"/>
          </parameter>
        </parameters>
      </function>
      <method name="free" c:identifier="ncm_integral1d_ptr_free">
        <doc xml:space="preserve">Decreases the reference count of @int1d by one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d_ptr" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1dPtr</doc>
            <type name="Integral1dPtr" c:type="NcmIntegral1dPtr*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_integral1d_ptr_ref">
        <doc xml:space="preserve">Increases the reference count of @int1d by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@int1d.</doc>
          <type name="Integral1dPtr" c:type="NcmIntegral1dPtr*"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d_ptr" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1dPtr</doc>
            <type name="Integral1dPtr" c:type="NcmIntegral1dPtr*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_userdata"
              c:identifier="ncm_integral1d_ptr_set_userdata">
        <doc xml:space="preserve">Sets user data to @userdata.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="int1d_ptr" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmIntegral1dPtr</doc>
            <type name="Integral1dPtr" c:type="NcmIntegral1dPtr*"/>
          </instance-parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a gpointer to user data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="integrand"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="userdata" writable="1" transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="userfree"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Integral1d" c:type="NcmIntegral1d"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="Integral1dPtrPrivate" c:type="NcmIntegral1dPtrPrivate*"/>
      </field>
    </class>
    <record name="Integral1dPtrClass"
            c:type="NcmIntegral1dPtrClass"
            glib:is-gtype-struct-for="Integral1dPtr">
      <field name="parent_class" readable="0" private="1">
        <type name="Integral1dClass" c:type="NcmIntegral1dClass"/>
      </field>
    </record>
    <callback name="Integral1dPtrF" c:type="NcmIntegral1dPtrF">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="userdata"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="w" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Integral1dPtrPrivate"
            c:type="NcmIntegral1dPtrPrivate"
            disguised="1">
    </record>
    <record name="IntegralFixed" c:type="NcmIntegralFixed">
      <doc xml:space="preserve">FIXME</doc>
      <field name="xl" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="xu" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="int_nodes" readable="0" private="1">
        <type name="gdouble" c:type="gdouble*"/>
      </field>
      <field name="n_nodes" readable="0" private="1">
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="rule_n" readable="0" private="1">
        <type name="gulong" c:type="gulong"/>
      </field>
      <method name="calc_nodes"
              c:identifier="ncm_integral_fixed_calc_nodes"
              introspectable="0">
        <doc xml:space="preserve">This function FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="intf" transfer-ownership="none">
            <doc xml:space="preserve">a pointer to #NcmIntegralFixed.</doc>
            <type name="IntegralFixed" c:type="NcmIntegralFixed*"/>
          </instance-parameter>
          <parameter name="F" transfer-ownership="none">
            <doc xml:space="preserve">a pointer to a gsl_function.</doc>
            <type c:type="gsl_function*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_integral_fixed_free">
        <doc xml:space="preserve">This function frees the memory associated to #NcmIntegralFixed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="intf" transfer-ownership="none">
            <doc xml:space="preserve">a pointer to #NcmIntegralFixed.</doc>
            <type name="IntegralFixed" c:type="NcmIntegralFixed*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="integ_mult"
              c:identifier="ncm_integral_fixed_integ_mult"
              introspectable="0">
        <doc xml:space="preserve">This function</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="intf" transfer-ownership="none">
            <doc xml:space="preserve">a pointer to #NcmIntegralFixed.</doc>
            <type name="IntegralFixed" c:type="NcmIntegralFixed*"/>
          </instance-parameter>
          <parameter name="F" transfer-ownership="none">
            <doc xml:space="preserve">a pointer to gsl_function.</doc>
            <type c:type="gsl_function*"/>
          </parameter>
        </parameters>
      </method>
      <method name="integ_posdef_mult"
              c:identifier="ncm_integral_fixed_integ_posdef_mult"
              introspectable="0">
        <doc xml:space="preserve">This function</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="intf" transfer-ownership="none">
            <doc xml:space="preserve">a pointer to #NcmIntegralFixed.</doc>
            <type name="IntegralFixed" c:type="NcmIntegralFixed*"/>
          </instance-parameter>
          <parameter name="F" transfer-ownership="none">
            <doc xml:space="preserve">a pointer to gsl_function.</doc>
            <type c:type="gsl_function*"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="reltol" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="nodes_eval" c:identifier="ncm_integral_fixed_nodes_eval">
        <doc xml:space="preserve">This function</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="intf" transfer-ownership="none">
            <doc xml:space="preserve">a pointer to #NcmIntegralFixed.</doc>
            <type name="IntegralFixed" c:type="NcmIntegralFixed*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="ncm_integral_fixed_new"
                introspectable="0">
        <doc xml:space="preserve">This function prepares the #NcmIntegralFixed with a grid
with n_nodes - 1 intervals beteween xl and xu. In each interval it uses
a fixed order (rule_n) Gauss-Legendre integration rule to determine the
interval inner points. This results in a grid with (n_nodes - 1) * rule_n points.</doc>
        <return-value>
          <doc xml:space="preserve">a pointer to the newly created #NcmIntegralFixed structure.</doc>
          <type name="IntegralFixed" c:type="NcmIntegralFixed*"/>
        </return-value>
        <parameters>
          <parameter name="n_nodes" transfer-ownership="none">
            <doc xml:space="preserve">number of nodes in the full interval.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="rule_n" transfer-ownership="none">
            <doc xml:space="preserve">order of the Gauss-Legendre integration rule to be applied in each interval.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="xl" transfer-ownership="none">
            <doc xml:space="preserve">the interval lower limit.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="xu" transfer-ownership="none">
            <doc xml:space="preserve">the interval upper limit.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="IntegralPeakfinder" c:type="NcmIntegralPeakfinder">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ndim" transfer-ownership="none">
          <type name="gint" c:type="const gint*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="userdata"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Integrand2dim" c:type="NcmIntegrand2dim">
      <doc xml:space="preserve">FIXME</doc>
      <field name="userdata" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="f" introspectable="0" readable="0" private="1">
        <type c:type="_NcmIntegrand2dimFunc"/>
      </field>
    </record>
    <record name="Integrand3dim" c:type="NcmIntegrand3dim">
      <doc xml:space="preserve">FIXME</doc>
      <field name="userdata" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="f" introspectable="0" readable="0" private="1">
        <type c:type="_NcmIntegrand3dimFunc"/>
      </field>
    </record>
    <class name="LHRatio1d"
           c:symbol-prefix="lh_ratio1d"
           c:type="NcmLHRatio1d"
           parent="GObject.Object"
           glib:type-name="NcmLHRatio1d"
           glib:get-type="ncm_lh_ratio1d_get_type"
           glib:type-struct="LHRatio1dClass">
      <constructor name="new" c:identifier="ncm_lh_ratio1d_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="LHRatio1d" c:type="NcmLHRatio1d*"/>
        </return-value>
        <parameters>
          <parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </parameter>
          <parameter name="pi" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetPIndex</doc>
            <type name="MSetPIndex" c:type="const NcmMSetPIndex*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_lh_ratio1d_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lhr1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLHRatio1d</doc>
            <type name="LHRatio1d" c:type="NcmLHRatio1d**"/>
          </parameter>
        </parameters>
      </function>
      <method name="find_bounds" c:identifier="ncm_lh_ratio1d_find_bounds">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lhr1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLHRatio1d</doc>
            <type name="LHRatio1d" c:type="NcmLHRatio1d*"/>
          </instance-parameter>
          <parameter name="clevel" transfer-ownership="none">
            <doc xml:space="preserve">the confidence level (0,1)</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFitRunMsgs</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
          <parameter name="lb"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">lower bound</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="ub"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">upper bound</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_lh_ratio1d_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lhr1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLHRatio1d</doc>
            <type name="LHRatio1d" c:type="NcmLHRatio1d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_pindex" c:identifier="ncm_lh_ratio1d_set_pindex">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lhr1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLHRatio1d</doc>
            <type name="LHRatio1d" c:type="NcmLHRatio1d*"/>
          </instance-parameter>
          <parameter name="pi" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetPIndex</doc>
            <type name="MSetPIndex" c:type="NcmMSetPIndex*"/>
          </parameter>
        </parameters>
      </method>
      <property name="constraint" writable="1" transfer-ownership="none">
        <type name="MSetFunc"/>
      </property>
      <property name="fit"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Fit"/>
      </property>
      <property name="pi" writable="1" construct="1" transfer-ownership="none">
        <type name="MSetPIndex"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="fit" readable="0" private="1">
        <type name="Fit" c:type="NcmFit*"/>
      </field>
      <field name="constrained" readable="0" private="1">
        <type name="Fit" c:type="NcmFit*"/>
      </field>
      <field name="mtype" readable="0" private="1">
        <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
      </field>
      <field name="rtype" readable="0" private="1">
        <type name="LHRatio1dRoot" c:type="NcmLHRatio1dRoot"/>
      </field>
      <field name="pi" readable="0" private="1">
        <type name="MSetPIndex" c:type="NcmMSetPIndex"/>
      </field>
      <field name="constraint" readable="0" private="1">
        <type name="MSetFunc" c:type="NcmMSetFunc*"/>
      </field>
      <field name="chisquare" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lb" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="ub" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="bf" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="niter" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="func_eval" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="grad_eval" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="LHRatio1dClass"
            c:type="NcmLHRatio1dClass"
            glib:is-gtype-struct-for="LHRatio1d">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="LHRatio1dRoot"
                 glib:type-name="NcmLHRatio1dRoot"
                 glib:get-type="ncm_lh_ratio1d_root_get_type"
                 c:type="NcmLHRatio1dRoot">
      <member name="bracket"
              value="0"
              c:identifier="NCM_LH_RATIO1D_ROOT_BRACKET"
              glib:nick="bracket">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="numdiff"
              value="1"
              c:identifier="NCM_LH_RATIO1D_ROOT_NUMDIFF"
              glib:nick="numdiff">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="LHRatio2d"
           c:symbol-prefix="lh_ratio2d"
           c:type="NcmLHRatio2d"
           parent="GObject.Object"
           glib:type-name="NcmLHRatio2d"
           glib:get-type="ncm_lh_ratio2d_get_type"
           glib:type-struct="LHRatio2dClass">
      <constructor name="new" c:identifier="ncm_lh_ratio2d_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="LHRatio2d" c:type="NcmLHRatio2d*"/>
        </return-value>
        <parameters>
          <parameter name="fit" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Fit" c:type="NcmFit*"/>
          </parameter>
          <parameter name="pi1" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetPIndex" c:type="const NcmMSetPIndex*"/>
          </parameter>
          <parameter name="pi2" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetPIndex" c:type="const NcmMSetPIndex*"/>
          </parameter>
          <parameter name="border_prec" transfer-ownership="none">
            <doc xml:space="preserve">precision on the border finder.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_lh_ratio2d_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lhr2d" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="LHRatio2d" c:type="NcmLHRatio2d**"/>
          </parameter>
        </parameters>
      </function>
      <method name="conf_region" c:identifier="ncm_lh_ratio2d_conf_region">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="LHRatio2dRegion" c:type="NcmLHRatio2dRegion*"/>
        </return-value>
        <parameters>
          <instance-parameter name="lhr2d" transfer-ownership="none">
            <doc xml:space="preserve">a @NcmFit</doc>
            <type name="LHRatio2d" c:type="NcmLHRatio2d*"/>
          </instance-parameter>
          <parameter name="clevel" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="expected_np" transfer-ownership="none">
            <doc xml:space="preserve">Expected number of points, if lesser than 1 it uses the default value of 100.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </method>
      <method name="fisher_border" c:identifier="ncm_lh_ratio2d_fisher_border">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="LHRatio2dRegion" c:type="NcmLHRatio2dRegion*"/>
        </return-value>
        <parameters>
          <instance-parameter name="lhr2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmFit.</doc>
            <type name="LHRatio2d" c:type="NcmLHRatio2d*"/>
          </instance-parameter>
          <parameter name="clevel" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="expected_np" transfer-ownership="none">
            <doc xml:space="preserve">Expected number of points, if lesser than 1 it uses the default value of 600.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_lh_ratio2d_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lhr2d" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="LHRatio2d" c:type="NcmLHRatio2d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_pindex" c:identifier="ncm_lh_ratio2d_set_pindex">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lhr2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLHRatio2d.</doc>
            <type name="LHRatio2d" c:type="NcmLHRatio2d*"/>
          </instance-parameter>
          <parameter name="pi1" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetPIndex" c:type="NcmMSetPIndex*"/>
          </parameter>
          <parameter name="pi2" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetPIndex" c:type="NcmMSetPIndex*"/>
          </parameter>
        </parameters>
      </method>
      <property name="border-prec"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="fit"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Fit"/>
      </property>
      <property name="pi1"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="MSetPIndex"/>
      </property>
      <property name="pi2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="MSetPIndex"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="fit" readable="0" private="1">
        <type name="Fit" c:type="NcmFit*"/>
      </field>
      <field name="constrained" readable="0" private="1">
        <type name="Fit" c:type="NcmFit*"/>
      </field>
      <field name="mtype" readable="0" private="1">
        <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
      </field>
      <field name="rtype" readable="0" private="1">
        <type name="LHRatio2dRoot" c:type="NcmLHRatio2dRoot"/>
      </field>
      <field name="pi" readable="0" private="1">
        <array zero-terminated="0" c:type="NcmMSetPIndex" fixed-size="2">
          <type name="MSetPIndex" c:type="NcmMSetPIndex"/>
        </array>
      </field>
      <field name="rng" readable="0" private="1">
        <type name="RNG" c:type="NcmRNG*"/>
      </field>
      <field name="chisquare" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lb" readable="0" private="1">
        <array zero-terminated="0" c:type="gdouble" fixed-size="2">
          <type name="gdouble" c:type="gdouble"/>
        </array>
      </field>
      <field name="ub" readable="0" private="1">
        <array zero-terminated="0" c:type="gdouble" fixed-size="2">
          <type name="gdouble" c:type="gdouble"/>
        </array>
      </field>
      <field name="bf" readable="0" private="1">
        <array zero-terminated="0" c:type="gdouble" fixed-size="2">
          <type name="gdouble" c:type="gdouble"/>
        </array>
      </field>
      <field name="border_prec" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="e_vec" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="e_val" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="r" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="theta" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="shift" readable="0" private="1">
        <array zero-terminated="0" c:type="gdouble" fixed-size="2">
          <type name="gdouble" c:type="gdouble"/>
        </array>
      </field>
      <field name="angular" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="niter" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="func_eval" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="grad_eval" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="LHRatio2dClass"
            c:type="NcmLHRatio2dClass"
            glib:is-gtype-struct-for="LHRatio2d">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="LHRatio2dPoint" c:type="NcmLHRatio2dPoint">
      <doc xml:space="preserve">FIXME</doc>
      <field name="x" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="theta" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="p1" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="p2" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </record>
    <record name="LHRatio2dRegion"
            c:type="NcmLHRatio2dRegion"
            glib:type-name="NcmLHRatio2dRegion"
            glib:get-type="ncm_lh_ratio2d_region_get_type"
            c:symbol-prefix="lh_ratio2d_region">
      <doc xml:space="preserve">Object describing a confidence region.</doc>
      <field name="np" writable="1">
        <doc xml:space="preserve">Number of points.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="p1" writable="1">
        <doc xml:space="preserve">a #NcmVector containing points of parameter one.</doc>
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="p2" writable="1">
        <doc xml:space="preserve">a #NcmVector containing points of parameter two.</doc>
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="clevel" writable="1">
        <doc xml:space="preserve">the confidence level represented by the border.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <method name="dup" c:identifier="ncm_lh_ratio2d_region_dup">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="LHRatio2dRegion" c:type="NcmLHRatio2dRegion*"/>
        </return-value>
        <parameters>
          <instance-parameter name="rg" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLHRatio2dRegion.</doc>
            <type name="LHRatio2dRegion" c:type="NcmLHRatio2dRegion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_lh_ratio2d_region_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rg" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLHRatio2dRegion.</doc>
            <type name="LHRatio2dRegion" c:type="NcmLHRatio2dRegion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="print" c:identifier="ncm_lh_ratio2d_region_print">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rg" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="LHRatio2dRegion" c:type="NcmLHRatio2dRegion*"/>
          </instance-parameter>
          <parameter name="out" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <function name="clear" c:identifier="ncm_lh_ratio2d_region_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="rg" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLHRatio2dRegion.</doc>
            <type name="LHRatio2dRegion" c:type="NcmLHRatio2dRegion**"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="LHRatio2dRoot"
                 glib:type-name="NcmLHRatio2dRoot"
                 glib:get-type="ncm_lh_ratio2d_root_get_type"
                 c:type="NcmLHRatio2dRoot">
      <member name="bracket"
              value="0"
              c:identifier="NCM_LH_RATIO2D_ROOT_BRACKET"
              glib:nick="bracket">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="numdiff"
              value="1"
              c:identifier="NCM_LH_RATIO2D_ROOT_NUMDIFF"
              glib:nick="numdiff">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="Likelihood"
           c:symbol-prefix="likelihood"
           c:type="NcmLikelihood"
           parent="GObject.Object"
           glib:type-name="NcmLikelihood"
           glib:get-type="ncm_likelihood_get_type"
           glib:type-struct="LikelihoodClass">
      <constructor name="new" c:identifier="ncm_likelihood_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Likelihood" c:type="NcmLikelihood*"/>
        </return-value>
        <parameters>
          <parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset.</doc>
            <type name="Dataset" c:type="NcmDataset*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_likelihood_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood**"/>
          </parameter>
        </parameters>
      </function>
      <method name="dup" c:identifier="ncm_likelihood_dup">
        <doc xml:space="preserve">Duplicates the object and all of its content.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A duplicate of @lh.</doc>
          <type name="Likelihood" c:type="NcmLikelihood*"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood.</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_likelihood_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_leastsquares_J"
              c:identifier="ncm_likelihood_has_leastsquares_J">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_m2lnL_grad"
              c:identifier="ncm_likelihood_has_m2lnL_grad">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="leastsquares_J"
              c:identifier="ncm_likelihood_leastsquares_J">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood.</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="J" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix.</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="leastsquares_f"
              c:identifier="ncm_likelihood_leastsquares_f">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood.</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="leastsquares_f_J"
              c:identifier="ncm_likelihood_leastsquares_f_J">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood.</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="J" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix.</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_grad" c:identifier="ncm_likelihood_m2lnL_grad">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood.</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="grad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_val" c:identifier="ncm_likelihood_m2lnL_val">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood.</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="m2lnL"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="m2lnL_val_grad"
              c:identifier="ncm_likelihood_m2lnL_val_grad">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood.</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="m2lnL"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="grad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="priors_add" c:identifier="ncm_likelihood_priors_add">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="prior" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPrior</doc>
            <type name="Prior" c:type="NcmPrior*"/>
          </parameter>
        </parameters>
      </method>
      <method name="priors_add_flat_func"
              c:identifier="ncm_likelihood_priors_add_flat_func">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="mean_func" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </parameter>
          <parameter name="x_low" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x_upp" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="variable" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="priors_add_flat_param"
              c:identifier="ncm_likelihood_priors_add_flat_param">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="x_low" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x_upp" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="priors_add_flat_param_name"
              c:identifier="ncm_likelihood_priors_add_flat_param_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="x_low" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x_upp" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="priors_add_flat_param_pindex"
              c:identifier="ncm_likelihood_priors_add_flat_param_pindex">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="pi" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetPIndex" c:type="const NcmMSetPIndex*"/>
          </parameter>
          <parameter name="x_low" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x_upp" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="priors_add_gauss_func"
              c:identifier="ncm_likelihood_priors_add_gauss_func">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="mean_func" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </parameter>
          <parameter name="mu" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="sigma" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="var" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="priors_add_gauss_param"
              c:identifier="ncm_likelihood_priors_add_gauss_param">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="mu" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="sigma" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="priors_add_gauss_param_name"
              c:identifier="ncm_likelihood_priors_add_gauss_param_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="mu" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="sigma" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="priors_add_gauss_param_pindex"
              c:identifier="ncm_likelihood_priors_add_gauss_param_pindex">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="pi" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetPIndex" c:type="const NcmMSetPIndex*"/>
          </parameter>
          <parameter name="mu" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="sigma" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="priors_leastsquares_f"
              c:identifier="ncm_likelihood_priors_leastsquares_f">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood.</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="priors_f" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="priors_length_f"
              c:identifier="ncm_likelihood_priors_length_f">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="priors_length_m2lnL"
              c:identifier="ncm_likelihood_priors_length_m2lnL">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="priors_m2lnL_val"
              c:identifier="ncm_likelihood_priors_m2lnL_val">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood.</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="priors_m2lnL"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="priors_m2lnL_vec"
              c:identifier="ncm_likelihood_priors_m2lnL_vec">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood.</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="priors_m2lnL_v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="priors_peek_f" c:identifier="ncm_likelihood_priors_peek_f">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Prior" c:type="NcmPrior*"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="priors_peek_m2lnL"
              c:identifier="ncm_likelihood_priors_peek_m2lnL">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Prior" c:type="NcmPrior*"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_likelihood_ref">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Likelihood" c:type="NcmLikelihood*"/>
        </return-value>
        <parameters>
          <instance-parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="Likelihood" c:type="NcmLikelihood*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="dataset"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="Dataset"/>
      </property>
      <property name="m2lnL-v" writable="1" transfer-ownership="none">
        <type name="Vector"/>
      </property>
      <property name="priors-f" writable="1" transfer-ownership="none">
        <type name="ObjArray"/>
      </property>
      <property name="priors-m2lnL" writable="1" transfer-ownership="none">
        <type name="ObjArray"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="dset" readable="0" private="1">
        <type name="Dataset" c:type="NcmDataset*"/>
      </field>
      <field name="priors_f" readable="0" private="1">
        <type name="ObjArray" c:type="NcmObjArray*"/>
      </field>
      <field name="priors_m2lnL" readable="0" private="1">
        <type name="ObjArray" c:type="NcmObjArray*"/>
      </field>
      <field name="m2lnL_v" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
    </class>
    <record name="LikelihoodClass"
            c:type="NcmLikelihoodClass"
            glib:is-gtype-struct-for="Likelihood">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="MIOde" c:type="NcmMIOde">
      <doc xml:space="preserve">FIXME</doc>
      <field name="x0" readable="0" private="1">
        <type name="glong" c:type="long"/>
      </field>
      <field name="xi" readable="0" private="1">
        <type name="glong" c:type="long"/>
      </field>
      <field name="h" readable="0" private="1">
        <type name="glong" c:type="long"/>
      </field>
      <field name="g_x0" readable="0" private="1">
        <type name="glong" c:type="long"/>
      </field>
      <field name="psi" readable="0" private="1">
        <type name="glong" c:type="long"/>
      </field>
      <field name="A" introspectable="0" readable="0" private="1">
        <type c:type="gsl_matrix_long_double*"/>
      </field>
      <field name="exp_A" introspectable="0" readable="0" private="1">
        <type c:type="gsl_matrix_long_double*"/>
      </field>
      <field name="Omega" introspectable="0" readable="0" private="1">
        <type c:type="gsl_matrix_long_double*"/>
      </field>
      <field name="exp_Omega" introspectable="0" readable="0" private="1">
        <type c:type="gsl_matrix_long_double*"/>
      </field>
      <field name="U" introspectable="0" readable="0" private="1">
        <type c:type="gsl_matrix_long_double*"/>
      </field>
      <field name="g" readable="0" private="1">
        <type name="MIOdeFunction" c:type="NcmMIOdeFunction*"/>
      </field>
    </record>
    <record name="MIOdeFunction" c:type="NcmMIOdeFunction">
      <doc xml:space="preserve">FIXME</doc>
      <field name="func" introspectable="0">
        <callback name="func" introspectable="0">
          <return-value transfer-ownership="none">
            <type name="glong" c:type="long"/>
          </return-value>
          <parameters>
            <parameter name="x" transfer-ownership="none">
              <type name="long double" c:type="long double"/>
            </parameter>
            <parameter name="params" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="params" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <constant name="MODEL_CLASS_IMPL_ALL"
              value="18446744073709551615"
              c:type="NCM_MODEL_CLASS_IMPL_ALL">
      <type name="guint64" c:type="guint64"/>
    </constant>
    <constant name="MSET_CATALOG_ASYMB_LABEL"
              value="ASYMB"
              c:type="NCM_MSET_CATALOG_ASYMB_LABEL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MSET_CATALOG_DIST_EST_SD_SCALE"
              value="0.001000"
              c:type="NCM_MSET_CATALOG_DIST_EST_SD_SCALE">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="MSET_CATALOG_EXTNAME"
              value="NcmMSetCatalog:DATA"
              c:type="NCM_MSET_CATALOG_EXTNAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MSET_CATALOG_FIRST_ID_LABEL"
              value="FIRST_ID"
              c:type="NCM_MSET_CATALOG_FIRST_ID_LABEL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MSET_CATALOG_FSYMB_LABEL"
              value="FSYMB"
              c:type="NCM_MSET_CATALOG_FSYMB_LABEL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MSET_CATALOG_M2LNL_COLNAME"
              value="NcmFit:m2lnL"
              c:type="NCM_MSET_CATALOG_M2LNL_COLNAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MSET_CATALOG_M2LNL_SYMBOL"
              value="-2\ln(L)"
              c:type="NCM_MSET_CATALOG_M2LNL_SYMBOL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MSET_CATALOG_NADDVAL_LABEL"
              value="NADDVAL"
              c:type="NCM_MSET_CATALOG_NADDVAL_LABEL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MSET_CATALOG_NCHAINS_LABEL"
              value="NCHAINS"
              c:type="NCM_MSET_CATALOG_NCHAINS_LABEL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MSET_CATALOG_NROWS_LABEL"
              value="NAXIS2"
              c:type="NCM_MSET_CATALOG_NROWS_LABEL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MSET_CATALOG_RNG_ALGO_LABEL"
              value="RNG_ALGO"
              c:type="NCM_MSET_CATALOG_RNG_ALGO_LABEL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MSET_CATALOG_RNG_INIS_LABEL"
              value="RNG_INIS"
              c:type="NCM_MSET_CATALOG_RNG_INIS_LABEL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MSET_CATALOG_RNG_SEED_LABEL"
              value="RNG_SEED"
              c:type="NCM_MSET_CATALOG_RNG_SEED_LABEL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MSET_CATALOG_RNG_STAT_LABEL"
              value="RNG_STAT"
              c:type="NCM_MSET_CATALOG_RNG_STAT_LABEL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MSET_CATALOG_RTYPE_BSTRAP_MEAN"
              value="bootstrap-mean"
              c:type="NCM_MSET_CATALOG_RTYPE_BSTRAP_MEAN">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MSET_CATALOG_RTYPE_LABEL"
              value="RTYPE"
              c:type="NCM_MSET_CATALOG_RTYPE_LABEL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MSET_CATALOG_RTYPE_UNDEFINED"
              value="undefined-run"
              c:type="NCM_MSET_CATALOG_RTYPE_UNDEFINED">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MSET_CATALOG_WEIGHTED_LABEL"
              value="WEIGHTED"
              c:type="NCM_MSET_CATALOG_WEIGHTED_LABEL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MSET_INIT_MARRAY" value="32" c:type="NCM_MSET_INIT_MARRAY">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MSET_MAX_STACKSIZE"
              value="1000"
              c:type="NCM_MSET_MAX_STACKSIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MSET_MODEL_MAIN"
              value="-1"
              c:type="NCM_MSET_MODEL_MAIN"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="MSet"
           c:symbol-prefix="mset"
           c:type="NcmMSet"
           parent="GObject.Object"
           glib:type-name="NcmMSet"
           glib:get-type="ncm_mset_get_type"
           glib:type-struct="MSetClass">
      <constructor name="empty_new" c:identifier="ncm_mset_empty_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="MSet" c:type="NcmMSet*"/>
        </return-value>
      </constructor>
      <constructor name="new" c:identifier="ncm_mset_new" introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="MSet" c:type="NcmMSet*"/>
        </return-value>
        <parameters>
          <parameter name="model0"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_array" c:identifier="ncm_mset_new_array">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="MSet" c:type="NcmMSet*"/>
        </return-value>
        <parameters>
          <parameter name="model_array" transfer-ownership="none">
            <doc xml:space="preserve">a #GPtrArray of #NcmModel.</doc>
            <array zero-terminated="0"
                   name="GLib.PtrArray"
                   c:type="GPtrArray*">
              <type name="Model"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="newv" c:identifier="ncm_mset_newv" introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="MSet" c:type="NcmMSet*"/>
        </return-value>
        <parameters>
          <parameter name="model0"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_mset_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet**"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_id_by_ns" c:identifier="ncm_mset_get_id_by_ns">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="ns" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_id_by_type" c:identifier="ncm_mset_get_id_by_type">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="model_type" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_ns_by_id" c:identifier="ncm_mset_get_ns_by_id">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">namespace for @id</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">namespace id</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_type_by_id" c:identifier="ncm_mset_get_type_by_id">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">GType of model @id</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">namespace id</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="load" c:identifier="ncm_mset_load">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="MSet" c:type="NcmMSet*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">mset filename</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </parameter>
        </parameters>
      </function>
      <function name="model_register_id"
                c:identifier="ncm_mset_model_register_id"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="ModelClass" c:type="NcmModelClass*"/>
          </parameter>
          <parameter name="ns" transfer-ownership="none">
            <doc xml:space="preserve">model namespace</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve">short description</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="long_desc" transfer-ownership="none">
            <doc xml:space="preserve">long description</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="can_stack" transfer-ownership="none">
            <doc xml:space="preserve">whether the models can stack in a #NcmMSet</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="main_model_id" transfer-ownership="none">
            <doc xml:space="preserve">main model id, use -1 if this is a main model</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
        </parameters>
      </function>
      <method name="cmp" c:identifier="ncm_mset_cmp">
        <doc xml:space="preserve">Compares @mset0 and @mset1 and returns TRUE if both coitains the same models types.
If @cmp_model is TRUE compare also if the models correspond to the same objects.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if @mset0 == @mset1.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset0" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="mset1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="cmp_model" transfer-ownership="none">
            <doc xml:space="preserve">whether to compare if the models correspond to the same objects</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="cmp_all" c:identifier="ncm_mset_cmp_all">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset0" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="mset1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="ncm_mset_dup">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmMSet</doc>
          <type name="MSet" c:type="NcmMSet*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="exists" c:identifier="ncm_mset_exists">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="exists_pos" c:identifier="ncm_mset_exists_pos">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="stackpos_id" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparam_full_name" c:identifier="ncm_mset_fparam_full_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">free parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparam_get" c:identifier="ncm_mset_fparam_get">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">free parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparam_get_abstol"
              c:identifier="ncm_mset_fparam_get_abstol">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">free parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparam_get_fpi" c:identifier="ncm_mset_fparam_get_fpi">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelID</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparam_get_lower_bound"
              c:identifier="ncm_mset_fparam_get_lower_bound">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">free parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparam_get_pi" c:identifier="ncm_mset_fparam_get_pi">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="MSetPIndex" c:type="const NcmMSetPIndex*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">free parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparam_get_pi_by_name"
              c:identifier="ncm_mset_fparam_get_pi_by_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="MSetPIndex" c:type="const NcmMSetPIndex*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparam_get_scale" c:identifier="ncm_mset_fparam_get_scale">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">free parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparam_get_upper_bound"
              c:identifier="ncm_mset_fparam_get_upper_bound">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">free parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparam_len" c:identifier="ncm_mset_fparam_len">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fparam_name" c:identifier="ncm_mset_fparam_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">free parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparam_set" c:identifier="ncm_mset_fparam_set">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">free parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparam_set_scale" c:identifier="ncm_mset_fparam_set_scale">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">free parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">new scale</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparam_symbol" c:identifier="ncm_mset_fparam_symbol">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">free parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparam_valid_bounds"
              c:identifier="ncm_mset_fparam_valid_bounds">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether @theta contain values respecting the parameter bounds.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">free parameters vector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparam_valid_bounds_offset"
              c:identifier="ncm_mset_fparam_valid_bounds_offset">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether @theta contain values respecting the parameter bounds.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">free parameters vector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve">starting index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparams_get_vector"
              c:identifier="ncm_mset_fparams_get_vector">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparams_get_vector_offset"
              c:identifier="ncm_mset_fparams_get_vector_offset">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve">starting index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparams_len" c:identifier="ncm_mset_fparams_len">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fparams_log_covar"
              c:identifier="ncm_mset_fparams_log_covar">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="covar" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparams_set_array"
              c:identifier="ncm_mset_fparams_set_array">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="fparams_set_gsl_vector"
              c:identifier="ncm_mset_fparams_set_gsl_vector"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type c:type="const gsl_vector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparams_set_vector"
              c:identifier="ncm_mset_fparams_set_vector">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fparams_set_vector_offset"
              c:identifier="ncm_mset_fparams_set_vector_offset">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve">starting index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_mset_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="ncm_mset_get">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Model" c:type="NcmModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelID</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_fmap" c:identifier="ncm_mset_get_fmap">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of strings</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mid_array_pos"
              c:identifier="ncm_mset_get_mid_array_pos">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="ModelID" c:type="NcmModelID"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">array position</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_subset" c:identifier="ncm_mset_is_subset">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="sub_mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
        </parameters>
      </method>
      <method name="max_fparam_name" c:identifier="ncm_mset_max_fparam_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="max_model_nick" c:identifier="ncm_mset_max_model_nick">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="max_param_name" c:identifier="ncm_mset_max_param_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="nmodels" c:identifier="ncm_mset_nmodels">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="orig_param_get" c:identifier="ncm_mset_orig_param_get">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">model id</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_get" c:identifier="ncm_mset_param_get">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">model id</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_get_abstol" c:identifier="ncm_mset_param_get_abstol">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">model id</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_get_by_full_name"
              c:identifier="ncm_mset_param_get_by_full_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="MSetPIndex" c:type="NcmMSetPIndex*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="fullname" transfer-ownership="none">
            <doc xml:space="preserve">param's full name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_get_ftype" c:identifier="ncm_mset_param_get_ftype">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="ParamType" c:type="NcmParamType"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelID</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_get_lower_bound"
              c:identifier="ncm_mset_param_get_lower_bound">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">model id</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_get_pi" c:identifier="ncm_mset_param_get_pi">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="pi" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetPIndex</doc>
            <type name="MSetPIndex" c:type="NcmMSetPIndex*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_get_scale" c:identifier="ncm_mset_param_get_scale">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">model id</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_get_upper_bound"
              c:identifier="ncm_mset_param_get_upper_bound">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">model id</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_get_vector" c:identifier="ncm_mset_param_get_vector">
        <doc xml:space="preserve">Sets the compontents of @params using the models parameters.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_name" c:identifier="ncm_mset_param_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">model id</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_set" c:identifier="ncm_mset_param_set">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">model id</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_set_all_but_mid_ftype"
              c:identifier="ncm_mset_param_set_all_but_mid_ftype">
        <doc xml:space="preserve">Set all parameters of all models but @mid to @ftype.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">model id</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="ftype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmParamType</doc>
            <type name="ParamType" c:type="NcmParamType"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_set_all_ftype"
              c:identifier="ncm_mset_param_set_all_ftype">
        <doc xml:space="preserve">Set all parameters of all models to @ftype.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="ftype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmParamType</doc>
            <type name="ParamType" c:type="NcmParamType"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_set_ftype" c:identifier="ncm_mset_param_set_ftype">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">model id</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="ftype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmParamType</doc>
            <type name="ParamType" c:type="NcmParamType"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_set_ftype_from_fmap"
              c:identifier="ncm_mset_param_set_ftype_from_fmap">
        <doc xml:space="preserve">Set all parameters of all models inside @mset in order
to reflect the current fmap.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="param_set_mid_ftype"
              c:identifier="ncm_mset_param_set_mid_ftype">
        <doc xml:space="preserve">Set all parameters of @mid model to @ftype.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">model id</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="ftype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmParamType</doc>
            <type name="ParamType" c:type="NcmParamType"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_set_pi" c:identifier="ncm_mset_param_set_pi">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="pi" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetPIndex</doc>
            <type name="MSetPIndex" c:type="NcmMSetPIndex*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_set_scale" c:identifier="ncm_mset_param_set_scale">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">model id</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">new scale</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_set_vector" c:identifier="ncm_mset_param_set_vector">
        <doc xml:space="preserve">Sets the models parameters using values from @params.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_symbol" c:identifier="ncm_mset_param_symbol">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">model id</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="params_log_vals" c:identifier="ncm_mset_params_log_vals">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="params_pretty_print"
              c:identifier="ncm_mset_params_pretty_print">
        <doc xml:space="preserve">This function print the command line (first line, commented), the model nick and parameters' names (second line, commented)
and their values indicating if they are fixed or free.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="out" transfer-ownership="none">
            <doc xml:space="preserve">name of the file</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="header" transfer-ownership="none">
            <doc xml:space="preserve">pointer to the command line</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="params_print_vals"
              c:identifier="ncm_mset_params_print_vals">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="out" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="params_valid" c:identifier="ncm_mset_params_valid">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="params_valid_bounds"
              c:identifier="ncm_mset_params_valid_bounds">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek" c:identifier="ncm_mset_peek">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Model" c:type="NcmModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelID</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_array_pos" c:identifier="ncm_mset_peek_array_pos">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Model" c:type="NcmModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">array position</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_pos" c:identifier="ncm_mset_peek_pos">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Model" c:type="NcmModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="base_mid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelID</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="stackpos_id" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_fparam_map"
              c:identifier="ncm_mset_prepare_fparam_map">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pretty_log" c:identifier="ncm_mset_pretty_log">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="push" c:identifier="ncm_mset_push">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_mset_ref">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmMSet</doc>
          <type name="MSet" c:type="NcmMSet*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="ncm_mset_remove">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelID</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
        </parameters>
      </method>
      <method name="save" c:identifier="ncm_mset_save">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="save_comment" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="ncm_mset_set">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fmap" c:identifier="ncm_mset_set_fmap">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="fmap" transfer-ownership="none">
            <doc xml:space="preserve">an array of strings</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="update_models" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pos" c:identifier="ncm_mset_set_pos">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="stackpos_id" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="shallow_copy" c:identifier="ncm_mset_shallow_copy">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmMSet</doc>
          <type name="MSet" c:type="NcmMSet*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="total_len" c:identifier="ncm_mset_total_len">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="fmap" writable="1" transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="model-array"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="ObjArray"/>
      </property>
      <property name="valid-map" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="model_array" readable="0" private="1">
        <type name="ObjArray" c:type="NcmObjArray*"/>
      </field>
      <field name="mid_item_hash" readable="0" private="1">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="model_item_hash" readable="0" private="1">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="fpi_hash" readable="0" private="1">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="fullname_parray" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="pi_array" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="fullname_regex" readable="0" private="1">
        <type name="GLib.Regex" c:type="GRegex*"/>
      </field>
      <field name="valid_map" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="total_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="fparam_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <class name="MSetCatalog"
           c:symbol-prefix="mset_catalog"
           c:type="NcmMSetCatalog"
           parent="GObject.Object"
           glib:type-name="NcmMSetCatalog"
           glib:get-type="ncm_mset_catalog_get_type"
           glib:type-struct="MSetCatalogClass">
      <constructor name="new"
                   c:identifier="ncm_mset_catalog_new"
                   introspectable="0">
        <doc xml:space="preserve">Creates a new #NcmMSetCatalog based on the #NcmFit object @fit. The catalog assumes that
the @fit object will remain with the same set of free parameters during its whole lifetime.

If @nchains is larger than one, the catalog will keep track of the statistics of each chain
separately.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmMSetCatalog</doc>
          <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
        </return-value>
        <parameters>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="nadd_vals" transfer-ownership="none">
            <doc xml:space="preserve">number of additional values</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="nchains" transfer-ownership="none">
            <doc xml:space="preserve">number of different chains in the catalog (&gt;=1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="weighted" transfer-ownership="none">
            <doc xml:space="preserve">set to TRUE whenever the catalog is weighted</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">additional values name/symbol pairs</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_array" c:identifier="ncm_mset_catalog_new_array">
        <doc xml:space="preserve">Creates a new #NcmMSetCatalog based on the #NcmFit object @fit. The catalog assumes that
the @fit object will remain with the same set of free parameters during its whole lifetime.

If @nchains is larger than one, the catalog will keep track of the statistics of each chain
separately.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmMSetCatalog</doc>
          <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
        </return-value>
        <parameters>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="nadd_vals" transfer-ownership="none">
            <doc xml:space="preserve">number of additional values</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="nchains" transfer-ownership="none">
            <doc xml:space="preserve">number of different chains in the catalog (&gt;=1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="weighted" transfer-ownership="none">
            <doc xml:space="preserve">set to TRUE whenever the catalog is weighted</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="names" transfer-ownership="none">
            <doc xml:space="preserve">additional values name NULL-terminated array</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="symbols" transfer-ownership="none">
            <doc xml:space="preserve">additional values symbol NULL-terminated array</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="ncm_mset_catalog_new_from_file">
        <doc xml:space="preserve">Creates a new #NcmMSetCatalog from the catalog in the file @file.
It will use also the mset file (same name but with .mset extension).</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmMSetCatalog</doc>
          <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">filename of the catalog fits</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="burnin" transfer-ownership="none">
            <doc xml:space="preserve">Burn-in size</doc>
            <type name="glong" c:type="glong"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file_ro"
                   c:identifier="ncm_mset_catalog_new_from_file_ro">
        <doc xml:space="preserve">Creates a new #NcmMSetCatalog from the catalog in the file @file.
The @file is opened in a read-only fashion.
It will use also the mset file (same name but with .mset extension).</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmMSetCatalog</doc>
          <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">filename of the catalog fits</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="burnin" transfer-ownership="none">
            <doc xml:space="preserve">Burn-in size</doc>
            <type name="glong" c:type="glong"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_mset_catalog_clear">
        <doc xml:space="preserve">Decrese the reference count of *@mcat atomically and sets the pointer *@mcat to null.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog**"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_from_mset"
              c:identifier="ncm_mset_catalog_add_from_mset"
              introspectable="0">
        <doc xml:space="preserve">This function adds a new element to the catalog using the parameters from @mset.
It assumes that @mset is compatible with the catalog and expect the
right number of additional values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">additional values</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="add_from_mset_array"
              c:identifier="ncm_mset_catalog_add_from_mset_array">
        <doc xml:space="preserve">This funtion adds a new element to the catalog using the parameters from @mset.
It assumes that @mset is compatible with the catalog and expect the
right number of additional values in the array @ax.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="ax" transfer-ownership="none">
            <doc xml:space="preserve">additional values array</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="add_from_vector"
              c:identifier="ncm_mset_catalog_add_from_vector">
        <doc xml:space="preserve">Adds a new element to the catalog using the values from the vector
@vals.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="vals" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="calc_add_param_distrib"
              c:identifier="ncm_mset_catalog_calc_add_param_distrib">
        <doc xml:space="preserve">Calculates the distribution of parameter @pi.

This function creates an approximation of the distribution for each value of
the parameter @pi in @mcat.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmStatsDist1d describing the distribution.</doc>
          <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="add_param" transfer-ownership="none">
            <doc xml:space="preserve">additional parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">#NcmFitRunMsgs log level</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </method>
      <method name="calc_add_param_ensemble_evol"
              c:identifier="ncm_mset_catalog_calc_add_param_ensemble_evol">
        <doc xml:space="preserve">Calculates the time evolution of the  parameter @pi distribution.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="add_param" transfer-ownership="none">
            <doc xml:space="preserve">additional parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="nsteps" transfer-ownership="none">
            <doc xml:space="preserve">number of steps to calculate the distribution</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">#NcmFitRunMsgs log level</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
          <parameter name="pval"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">output #NcmVector containing parameter values</doc>
            <type name="Vector" c:type="NcmVector**"/>
          </parameter>
          <parameter name="t_evol"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">output #NcmMatrix containing probability distribution evolution</doc>
            <type name="Matrix" c:type="NcmMatrix**"/>
          </parameter>
        </parameters>
      </method>
      <method name="calc_ci_direct"
              c:identifier="ncm_mset_catalog_calc_ci_direct">
        <doc xml:space="preserve">Calculates the mean and the confidence interval (CI) for the value of @func
for each p-value in @p_val. It stores the results in a #NcmVector, where the
first element contains the mean and the following contain the lower and
upper bounds for each p-value in @p_val.

This function calculates the quantiles directly using:
gsl_stats_quantile_from_sorted_data for this reason it must allocates the
catalog size times the number of elements in @x, for a less memory intensive
version use ncm_mset_catalog_calc_ci_interp().

The #NcmMSetFunc @func must be of dimension one.

# Example: #

If @p_val contains two values ($1\sigma$) 0.6827 and ($\sigma$) 0.9545,
the first element will contain the mean, the second and third, the lower
and upper bounds, respectively. Then, the fourth and fifth elements the
lower and upper bounds of $2\sigma$ CI.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmVector containing the mean and lower/upper bound of the confidence interval for @func.</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc of type n-n</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </parameter>
          <parameter name="x_v" transfer-ownership="none">
            <doc xml:space="preserve">#NcmVector of arguments of @func</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="p_val" transfer-ownership="none">
            <doc xml:space="preserve">p-values for the confidence intervals</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="calc_ci_interp"
              c:identifier="ncm_mset_catalog_calc_ci_interp">
        <doc xml:space="preserve">Calculates the mean and the confidence interval (CI) for the value of @func
for each p-value in @p_val. It stores the results in a #NcmMatrix, where the
first element contains the mean and the following contain the lower and
upper bounds for each p-value in @p_val.

This function creates an approximation of the distribution for each value of
the function @func and calculates the quantiles from this approximation.

The #NcmMSetFunc @func must be of dimension one.

# Example: #

If @p_val contains two values ($1\sigma$) 0.6827 and ($\sigma$) 0.9545,
the first element will contain the mean, the second and third, the lower
and upper bounds, respectively. Then, the fourth and fifth elements the
lower and upper bounds of $2\sigma$ CI.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmMatrix containing the mean and lower/upper bound of the confidence interval for @func.</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc of type n-n</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </parameter>
          <parameter name="x_v" transfer-ownership="none">
            <doc xml:space="preserve">#NcmVector of arguments of @func</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="p_val" transfer-ownership="none">
            <doc xml:space="preserve">p-values for the confidence intervals</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="nodes" transfer-ownership="none">
            <doc xml:space="preserve">number of nodes in the distribution approximations</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">#NcmFitRunMsgs log level</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </method>
      <method name="calc_distrib" c:identifier="ncm_mset_catalog_calc_distrib">
        <doc xml:space="preserve">Calculates the distribution of @func.

This function creates an approximation of the distribution for each value of
the function @func calculated in each model in @mcat.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmStatsDist1d describing the distribution.</doc>
          <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc of type 0-1</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">#NcmFitRunMsgs log level</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </method>
      <method name="calc_heidel_diag"
              c:identifier="ncm_mset_catalog_calc_heidel_diag">
        <doc xml:space="preserve">Applies the Heidelberger and Welch's convergence diagnostic to the catalog,
see ncm_stats_vec_heidel_diag() for mode details. If the number of chains in
the catalog is larger than one, it considers the whole catalog otherwise it
considers the ensemble means. The variable @ntests control the number of
divisions where the test will be applied, if it is zero the default 10 tests
will be used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The lowest time $t_m$ where all parameters pass the test with @pvalue or zero
if all tests fail.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="ntests" transfer-ownership="none">
            <doc xml:space="preserve">number of tests</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="pvalue" transfer-ownership="none">
            <doc xml:space="preserve">the required Schruben test p-value</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">#NcmFitRunMsgs log level</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </method>
      <method name="calc_max_ess_time"
              c:identifier="ncm_mset_catalog_calc_max_ess_time">
        <doc xml:space="preserve">Calculates the time $t_m$ that maximizes the ESS for all
elements of the catalog. If the number of chains in the catalog is larger
than one, it considers the whole catalog otherwise it considers the ensemble
means. The variable @ntests control the number of divisions where the ESS
will be calculated, if it is zero the default 10 tests will be used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The lowest time $t_m$.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="ntests" transfer-ownership="none">
            <doc xml:space="preserve">number of tests</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="max_ess"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the maximum effective sample size (ESS)</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">#NcmFitRunMsgs log level</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </method>
      <method name="calc_param_distrib"
              c:identifier="ncm_mset_catalog_calc_param_distrib">
        <doc xml:space="preserve">Calculates the distribution of parameter @pi.

This function creates an approximation of the distribution for each value of
the parameter @pi in @mcat.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmStatsDist1d describing the distribution.</doc>
          <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="pi" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetPIndex</doc>
            <type name="MSetPIndex" c:type="const NcmMSetPIndex*"/>
          </parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">#NcmFitRunMsgs log level</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </method>
      <method name="calc_param_ensemble_evol"
              c:identifier="ncm_mset_catalog_calc_param_ensemble_evol">
        <doc xml:space="preserve">Calculates the time evolution of the  parameter @pi distribution.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="pi" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetPIndex</doc>
            <type name="MSetPIndex" c:type="const NcmMSetPIndex*"/>
          </parameter>
          <parameter name="nsteps" transfer-ownership="none">
            <doc xml:space="preserve">number of steps to calculate the distribution</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">#NcmFitRunMsgs log level</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
          <parameter name="pval"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">output #NcmVector containing parameter values</doc>
            <type name="Vector" c:type="NcmVector**"/>
          </parameter>
          <parameter name="t_evol"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">output #NcmMatrix containing probability distribution evolution</doc>
            <type name="Matrix" c:type="NcmMatrix**"/>
          </parameter>
        </parameters>
      </method>
      <method name="calc_pvalue" c:identifier="ncm_mset_catalog_calc_pvalue">
        <doc xml:space="preserve">Calculates the p-values for the value of @func
for each limit in @lim, integrating the probability distribution function from
the left tail to @lim. It stores the results in a #NcmMatrix, where the
first element contains the p-value with respect to the first @lim, and so on.

The #NcmMSetFunc @func must be of dimension one.

# Example: #</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmMatrix containing the p-values for @func.</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc of type n-n</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </parameter>
          <parameter name="x_v" transfer-ownership="none">
            <doc xml:space="preserve">#NcmVector of arguments of @func</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="lim" transfer-ownership="none">
            <doc xml:space="preserve">integration limits to compute the p-value</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="nodes" transfer-ownership="none">
            <doc xml:space="preserve">number of nodes in the distribution approximations</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">#NcmFitRunMsgs log level</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </method>
      <method name="erase_data" c:identifier="ncm_mset_catalog_erase_data">
        <doc xml:space="preserve">Erases all data from the fits file associated with the
catalog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="estimate_autocorrelation_tau"
              c:identifier="ncm_mset_catalog_estimate_autocorrelation_tau">
        <doc xml:space="preserve">Updates the internal estimates of the integrate autocorrelation time.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="force_single_chain" transfer-ownership="none">
            <doc xml:space="preserve">whether to force the catalog to be treated as a single chain</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_mset_catalog_free">
        <doc xml:space="preserve">Decreases the reference count of @mcat atomically.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_burnin" c:identifier="ncm_mset_catalog_get_burnin">
        <doc xml:space="preserve">Gets the burn-in size, see ncm_mset_catalog_set_burnin().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the burn-in.</doc>
          <type name="glong" c:type="glong"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_covar" c:identifier="ncm_mset_catalog_get_covar">
        <doc xml:space="preserve">Gets the current covariance matrix.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="cov"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cur_id" c:identifier="ncm_mset_catalog_get_cur_id">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the id of the last row added (-1 if empty).</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_first_id" c:identifier="ncm_mset_catalog_get_first_id">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the id of the first row in this catalog.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_full_covar"
              c:identifier="ncm_mset_catalog_get_full_covar">
        <doc xml:space="preserve">Gets the current full (including additional values) covariance matrix.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="cov"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mean" c:identifier="ncm_mset_catalog_get_mean">
        <doc xml:space="preserve">Gets the current mean vector.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="mean"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mset" c:identifier="ncm_mset_catalog_get_mset">
        <doc xml:space="preserve">Gets the #NcmMSet catalog from @mcat.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a reference to the used #NcmMSet object.</doc>
          <type name="MSet" c:type="NcmMSet*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_param_shrink_factor"
              c:identifier="ncm_mset_catalog_get_param_shrink_factor">
        <doc xml:space="preserve">Gets the current shrink factor of parameter @p.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the shrink factor of @p.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">parameter id.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_rng" c:identifier="ncm_mset_catalog_get_rng">
        <doc xml:space="preserve">This function checks if any pseudo random number generator (RNG) is registred in the catalog.
If so, it returns it or NULL.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">the registered #NcmRNG in the catalog or NULL.</doc>
          <type name="RNG" c:type="NcmRNG*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_row_from_time"
              c:identifier="ncm_mset_catalog_get_row_from_time">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">row number of time $t$ step.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time $t$</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_run_type" c:identifier="ncm_mset_catalog_get_run_type">
        <doc xml:space="preserve">Gets the run type string from @mcat.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the run type string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_shrink_factor"
              c:identifier="ncm_mset_catalog_get_shrink_factor">
        <doc xml:space="preserve">Gets the current shrink factor which is  the multivatiate potential scale reduction factor (MPSRF), namely,
$$\hat{R}^p = \sqrt{\frac{n - 1}{n} + \left( \frac{m + 1}{m} \right) \lambda_1},$$
where $n$ is the number of points of one chain, $m$ is the number of chains and $\lambda_1$ is the largest
eigenvalue of the positive definite matrix $W^{-1}B/n$.

$W$ is the within-chain variance: $$W = $$ FIXME

$B$ is the between-chain variance: $$B = $$ FIXME

Refined version:
$$\hat{R}^p = \sqrt{\frac{\hat{d} + 3}{\hat{d} + 1} \left(\frac{n - 1}{n} + \left( \frac{m + 1}{m} \right) \lambda_1\right)},$$
where $\hat{d} = 2 \hat{V}^2 / \widehat{Var}(\hat{V})$, $$\hat{V} = \frac{n -1}{n}W + \frac{m + 1}{m} \frac{B}{n}.$$

Some references for this MCMC convergence diagnostic: [Brooks and Gelman (1998)][XBrooks1998],
[Gelman and Rubin (1992)][XGelman1992], [SAS/STAT](http://support.sas.com/documentation/cdl/en/statug/63033/HTML/default/viewer.htm#statug_introbayes_sect008.htm).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the shrink factor $\hat{R}^p$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tau_method"
              c:identifier="ncm_mset_catalog_get_tau_method">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the autocorrelation time method used by @mcat.</doc>
          <type name="MSetCatalogTauMethod" c:type="NcmMSetCatalogTauMethod"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="heidel_diag_by_chain"
              c:identifier="ncm_mset_catalog_heidel_diag_by_chain">
        <doc xml:space="preserve">Calculates the lowest time $t_m$ where all chains satisfy the Heidelberger
and Welch's convergence diagnostic. The variable @ntests control the number
of divisions where the test will be calculated, if it is zero the default
10 tests will be used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The lowest time $t_m$.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="ntests" transfer-ownership="none">
            <doc xml:space="preserve">number of tests</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="pvalue" transfer-ownership="none">
            <doc xml:space="preserve">required p-value</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="wp_pvalue"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">worst parameter p-value</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">#NcmFitRunMsgs log level</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_empty" c:identifier="ncm_mset_catalog_is_empty">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE when the catalog is empty.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="largest_error"
              c:identifier="ncm_mset_catalog_largest_error">
        <doc xml:space="preserve">This function calculates the largest proportional error of the parameters included, i.e., $\text{lre} = \sigma_{\hat{p}}/(|\hat{p}|\sqrt{n})$
where $n$ represents the number of samples in the catalog, $\hat{p}$ is the estimated mean of the parameter $p$
and $\sigma_{\hat{p}}$ its standard deviation.

It tries to guess when $p = 0$. In this case $\sigma_{\hat{p}} \approx |\hat{p}|\sqrt{n}$. Therefore, for $n &gt; 10$, it tests
if $\text{lre} \approx 1$ and, if it is the case, it returns $\text{lre} = \sigma_{\hat{p}}/\sqrt{n}$ instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the largest proportional error $\text{lre}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="len" c:identifier="ncm_mset_catalog_len">
        <doc xml:space="preserve">Number of itens in the catalog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number of itens in the catalog.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="log_current_chain_stats"
              c:identifier="ncm_mset_catalog_log_current_chain_stats">
        <doc xml:space="preserve">Logs the current means and standard deviations of the catalog's parameters
for each chain.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="log_current_stats"
              c:identifier="ncm_mset_catalog_log_current_stats">
        <doc xml:space="preserve">Logs the current means and standard deviations of the catalog's parameters.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="log_full_covar"
              c:identifier="ncm_mset_catalog_log_full_covar">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="max_ess_time_by_chain"
              c:identifier="ncm_mset_catalog_max_ess_time_by_chain">
        <doc xml:space="preserve">Calculates the time $t_m$ that maximizes the ESS for each chain of the catalog.
The variable @ntests control the number of divisions where the ESS
will be calculated, if it is zero the default 10 tests will be used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The lowest time $t_m$.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="ntests" transfer-ownership="none">
            <doc xml:space="preserve">number of tests</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="max_ess"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the maximum effective sample size (ESS)</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">#NcmFitRunMsgs log level</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </method>
      <method name="max_time" c:identifier="ncm_mset_catalog_max_time">
        <doc xml:space="preserve">Number of itens in the catalog divided by the number
of chains.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number of ensembles in the catalog.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="nchains" c:identifier="ncm_mset_catalog_nchains">
        <doc xml:space="preserve">Number of chains in the catalog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number of chains in the catalog.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="param_pdf" c:identifier="ncm_mset_catalog_param_pdf">
        <doc xml:space="preserve">Bins and calculates the pdf associated with the parameter @i.
(not ready yet FIXME)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">parameter index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_pdf_pvalue"
              c:identifier="ncm_mset_catalog_param_pdf_pvalue">
        <doc xml:space="preserve">Calculates the p-value associated with the parameter value @pvalue.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the p-value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="pvalue" transfer-ownership="none">
            <doc xml:space="preserve">parameter value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="both" transfer-ownership="none">
            <doc xml:space="preserve">one or both sides p-value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_autocorrelation_tau"
              c:identifier="ncm_mset_catalog_peek_autocorrelation_tau">
        <doc xml:space="preserve">Gets the last estimate of the autocorrelation tau calculated
in the last call of ncm_mset_catalog_estimate_autocorrelation_tau().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the last estimate of the autocorrelation tau.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_current_e_mean"
              c:identifier="ncm_mset_catalog_peek_current_e_mean">
        <doc xml:space="preserve">Gets the last ensemble mean.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">last added ensemble mean or NULL if empty.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_current_e_var"
              c:identifier="ncm_mset_catalog_peek_current_e_var">
        <doc xml:space="preserve">Gets the last ensemble variance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">last added ensemble variance or NULL if empty.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_current_row"
              c:identifier="ncm_mset_catalog_peek_current_row">
        <doc xml:space="preserve">Gets the last added row.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">last added row or NULL if empty.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_e_mean_t"
              c:identifier="ncm_mset_catalog_peek_e_mean_t">
        <doc xml:space="preserve">Gets the mean of the @t-th ensemble.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@t-th ensemble mean.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_e_var_t" c:identifier="ncm_mset_catalog_peek_e_var_t">
        <doc xml:space="preserve">Gets the variance of the @t-th ensemble.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@t-th ensemble variance.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">time</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_filename"
              c:identifier="ncm_mset_catalog_peek_filename">
        <doc xml:space="preserve">Gets the filename associated with @mcat.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">filename or NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_rng" c:identifier="ncm_mset_catalog_peek_rng">
        <doc xml:space="preserve">This function checks if any pseudo random number generator (RNG) is registred in the catalog.
If so, it returns it or NULL.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the registered #NcmRNG in the catalog or NULL.</doc>
          <type name="RNG" c:type="NcmRNG*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_row" c:identifier="ncm_mset_catalog_peek_row">
        <doc xml:space="preserve">Gets the @i-th row.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the row with index @i or NULL if not available.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">the row index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_mset_catalog_ref">
        <doc xml:space="preserve">Increases the reference count of @mcat atomically.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@mcat.</doc>
          <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="ncm_mset_catalog_reset">
        <doc xml:space="preserve">Clean all catalog data from memory and file. Otherwise it does
not change any object's parameter.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset_stats" c:identifier="ncm_mset_catalog_reset_stats">
        <doc xml:space="preserve">Reset catalog statistical quantities.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_burnin" c:identifier="ncm_mset_catalog_set_burnin">
        <doc xml:space="preserve">Sets the number of elements to ignore when reading from
a catalogue, it must be set before loading data from
a file.

It will not affect a catalogue in any other context,
only when reading data from a file. It is recommended
to be used only when analysing a catalogue.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="burnin" transfer-ownership="none">
            <doc xml:space="preserve">number of elements to ignore</doc>
            <type name="glong" c:type="glong"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_file" c:identifier="ncm_mset_catalog_set_file">
        <doc xml:space="preserve">Sets the data filename to be used to sync/save data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">a filename</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_first_id" c:identifier="ncm_mset_catalog_set_first_id">
        <doc xml:space="preserve">Sets the first id of the catalog, mainly used to inform in which realization the catalog starts.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="first_id" transfer-ownership="none">
            <doc xml:space="preserve">the id of the first item in the sample</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rng" c:identifier="ncm_mset_catalog_set_rng">
        <doc xml:space="preserve">Sets the random number generator.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_run_type" c:identifier="ncm_mset_catalog_set_run_type">
        <doc xml:space="preserve">Sets the run type string.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="rtype_str" transfer-ownership="none">
            <doc xml:space="preserve">the run type string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sync_interval"
              c:identifier="ncm_mset_catalog_set_sync_interval">
        <doc xml:space="preserve">Sets the minimum time interval between syncs.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="interval" transfer-ownership="none">
            <doc xml:space="preserve">Minimum time interval between syncs</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sync_mode"
              c:identifier="ncm_mset_catalog_set_sync_mode">
        <doc xml:space="preserve">Sets the sync mode to @smode.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="smode" transfer-ownership="none">
            <doc xml:space="preserve">sync mode</doc>
            <type name="MSetCatalogSync" c:type="NcmMSetCatalogSync"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tau_method"
              c:identifier="ncm_mset_catalog_set_tau_method">
        <doc xml:space="preserve">Sets the autocorrelation time method to @tau_method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="tau_method" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalogTauMethod</doc>
            <type name="MSetCatalogTauMethod"
                  c:type="NcmMSetCatalogTauMethod"/>
          </parameter>
        </parameters>
      </method>
      <method name="sync" c:identifier="ncm_mset_catalog_sync">
        <doc xml:space="preserve">Synchronize memory and data file. If no file was defined, it simply returns.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="check" transfer-ownership="none">
            <doc xml:space="preserve">whether to check consistence between file and memory data</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="timed_sync" c:identifier="ncm_mset_catalog_timed_sync">
        <doc xml:space="preserve">Synchronize memory and data file if enough time was passed after
the last sync, see ncm_mset_catalog_set_sync_interval(). If no
file was defined, it simply returns.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="check" transfer-ownership="none">
            <doc xml:space="preserve">whether to check consistence between file and memory data</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="trim" c:identifier="ncm_mset_catalog_trim">
        <doc xml:space="preserve">Drops all points in the catalog such that $t &lt; t_c$. This function
does nothing if $t_c = 0$. This function trims the first $t_c \times n_\mathrm{chains}$
points from the catalog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="tc" transfer-ownership="none">
            <doc xml:space="preserve">time divisor $t_c$</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="trim_by_type" c:identifier="ncm_mset_catalog_trim_by_type">
        <doc xml:space="preserve">Calculates the time $t_m$ that satisfies all trimming options
in @trim_type. Then drops all elements of the catalog and drops
all points $t &lt; t_m$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </instance-parameter>
          <parameter name="ntests" transfer-ownership="none">
            <doc xml:space="preserve">number of tests</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="trim_type" transfer-ownership="none">
            <doc xml:space="preserve">the trimming type to apply #NcmMSetCatalogTrimType</doc>
            <type name="MSetCatalogTrimType" c:type="NcmMSetCatalogTrimType"/>
          </parameter>
          <parameter name="mtype" transfer-ownership="none">
            <doc xml:space="preserve">#NcmFitRunMsgs log level</doc>
            <type name="FitRunMsgs" c:type="NcmFitRunMsgs"/>
          </parameter>
        </parameters>
      </method>
      <property name="burnin"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="glong" c:type="glong"/>
      </property>
      <property name="filename"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mset"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="MSet"/>
      </property>
      <property name="nadd-val-names"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="nadd-val-symbols"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="nadd-vals"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="nchains"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="read-only"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="rng" writable="1" transfer-ownership="none">
        <type name="RNG"/>
      </property>
      <property name="run-type-string"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="smode"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="MSetCatalogSync"/>
      </property>
      <property name="sync-interval"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="tau-method"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="MSetCatalogTauMethod"/>
      </property>
      <property name="weighted"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="mset" readable="0" private="1">
        <type name="MSet" c:type="NcmMSet*"/>
      </field>
      <field name="nadd_vals" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="add_vals_names" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="add_vals_symbs" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="pstats" readable="0" private="1">
        <type name="StatsVec" c:type="NcmStatsVec*"/>
      </field>
      <field name="smode" readable="0" private="1">
        <type name="MSetCatalogSync" c:type="NcmMSetCatalogSync"/>
      </field>
      <field name="readonly" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="rng" readable="0" private="1">
        <type name="RNG" c:type="NcmRNG*"/>
      </field>
      <field name="weighted" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="first_flush" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="nchains" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="chain_pstats" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="mean_pstats" readable="0" private="1">
        <type name="StatsVec" c:type="NcmStatsVec*"/>
      </field>
      <field name="e_stats" readable="0" private="1">
        <type name="StatsVec" c:type="NcmStatsVec*"/>
      </field>
      <field name="e_mean_stats" readable="0" private="1">
        <type name="StatsVec" c:type="NcmStatsVec*"/>
      </field>
      <field name="e_var_array" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="chain_means" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="chain_vars" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="chain_cov" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="chain_sM" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="chain_sM_ws" introspectable="0" readable="0" private="1">
        <type c:type="gsl_eigen_nonsymm_workspace*"/>
      </field>
      <field name="chain_sM_ev" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector_complex*"/>
      </field>
      <field name="tau_method" readable="0" private="1">
        <type name="MSetCatalogTauMethod" c:type="NcmMSetCatalogTauMethod"/>
      </field>
      <field name="tau" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="rng_inis" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="rng_stat" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="sync_timer" readable="0" private="1">
        <type name="GLib.Timer" c:type="GTimer*"/>
      </field>
      <field name="sync_interval" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="file" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="mset_file" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="rtype_str" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="porder" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="quantile_ws" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="first_id" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="cur_id" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="file_first_id" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="file_cur_id" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="burnin" readable="0" private="1">
        <type name="glong" c:type="glong"/>
      </field>
      <field name="fptr" introspectable="0" readable="0" private="1">
        <type c:type="fitsfile*"/>
      </field>
      <field name="params_max" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="params_min" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="pdf_i" readable="0" private="1">
        <type name="glong" c:type="glong"/>
      </field>
      <field name="h" introspectable="0" readable="0" private="1">
        <type c:type="gsl_histogram*"/>
      </field>
      <field name="h_pdf" introspectable="0" readable="0" private="1">
        <type c:type="gsl_histogram_pdf*"/>
      </field>
      <field name="constructed" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="MSetCatalogClass"
            c:type="NcmMSetCatalogClass"
            glib:is-gtype-struct-for="MSetCatalog">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="MSetCatalogSync"
                 glib:type-name="NcmMSetCatalogSync"
                 glib:get-type="ncm_mset_catalog_sync_get_type"
                 c:type="NcmMSetCatalogSync">
      <doc xml:space="preserve">Catalog sync modes.</doc>
      <member name="disable"
              value="0"
              c:identifier="NCM_MSET_CATALOG_SYNC_DISABLE"
              glib:nick="disable">
        <doc xml:space="preserve">Catalog will be synchronized only when closing the file or with an explicit call of ncm_mset_catalog_sync().</doc>
      </member>
      <member name="auto"
              value="1"
              c:identifier="NCM_MSET_CATALOG_SYNC_AUTO"
              glib:nick="auto">
        <doc xml:space="preserve">Catalog will be synchronized in every catalog addition.</doc>
      </member>
      <member name="timed"
              value="2"
              c:identifier="NCM_MSET_CATALOG_SYNC_TIMED"
              glib:nick="timed">
        <doc xml:space="preserve">Catalog will be synchronized with a minimum time interval between syncs.</doc>
      </member>
    </enumeration>
    <enumeration name="MSetCatalogTauMethod"
                 glib:type-name="NcmMSetCatalogTauMethod"
                 glib:get-type="ncm_mset_catalog_tau_method_get_type"
                 c:type="NcmMSetCatalogTauMethod">
      <doc xml:space="preserve">Method used to estimate the autocorrelation time $\tau$.</doc>
      <member name="acor"
              value="0"
              c:identifier="NCM_MSET_CATALOG_TAU_METHOD_ACOR"
              glib:nick="acor">
        <doc xml:space="preserve">uses the autocorrelation to estimate $\tau$.</doc>
      </member>
      <member name="ar_model"
              value="1"
              c:identifier="NCM_MSET_CATALOG_TAU_METHOD_AR_MODEL"
              glib:nick="ar-model">
        <doc xml:space="preserve">uses an autoregressive model fitting to estimate $\tau$.</doc>
      </member>
    </enumeration>
    <bitfield name="MSetCatalogTrimType"
              glib:type-name="NcmMSetCatalogTrimType"
              glib:get-type="ncm_mset_catalog_trim_type_get_type"
              c:type="NcmMSetCatalogTrimType">
      <doc xml:space="preserve">See ncm_mset_catalog_calc_max_ess_time() and ncm_mset_catalog_calc_heidel_diag().</doc>
      <member name="ess"
              value="1"
              c:identifier="NCM_MSET_CATALOG_TRIM_TYPE_ESS"
              glib:nick="ess">
        <doc xml:space="preserve">trim the catalog using the maximum ess criterium.</doc>
      </member>
      <member name="heidel"
              value="2"
              c:identifier="NCM_MSET_CATALOG_TRIM_TYPE_HEIDEL"
              glib:nick="heidel">
        <doc xml:space="preserve">trim the catalog using the Heidelberger and Welch’s convergence diagnostic.</doc>
      </member>
      <member name="all"
              value="3"
              c:identifier="NCM_MSET_CATALOG_TRIM_TYPE_ALL"
              glib:nick="all">
        <doc xml:space="preserve">trim the catalog using all tests above.</doc>
      </member>
    </bitfield>
    <record name="MSetClass"
            c:type="NcmMSetClass"
            glib:is-gtype-struct-for="MSet">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="ns_table" readable="0" private="1">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="model_desc_array" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="MSetFunc"
           c:symbol-prefix="mset_func"
           c:type="NcmMSetFunc"
           parent="GObject.Object"
           glib:type-name="NcmMSetFunc"
           glib:get-type="ncm_mset_func_get_type"
           glib:type-struct="MSetFuncClass">
      <constructor name="new" c:identifier="ncm_mset_func_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="MSetFunc" c:type="NcmMSetFunc*"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     destroy="4">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetFuncN" c:type="NcmMSetFuncN"/>
          </parameter>
          <parameter name="nvar" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="dim" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="obj"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="free" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">FIXME</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="array_new" c:identifier="ncm_mset_func_array_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="MSetFunc"/>
          </array>
        </return-value>
      </function>
      <function name="clear" c:identifier="ncm_mset_func_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc.</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="eval" invoker="eval">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="eval" c:identifier="ncm_mset_func_eval">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="res"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="eval0" c:identifier="ncm_mset_func_eval0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval1" c:identifier="ncm_mset_func_eval1">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_nvar" c:identifier="ncm_mset_func_eval_nvar">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_vector" c:identifier="ncm_mset_func_eval_vector">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="x_v" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="res_v" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_mset_func_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc.</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dim" c:identifier="ncm_mset_func_get_dim">
        <doc xml:space="preserve">Gets the dimension of @func.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number values returned by @func.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nvar" c:identifier="ncm_mset_func_get_nvar">
        <doc xml:space="preserve">Gets the number of variables of @func.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number of variables expected by @func.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_nvar" c:identifier="ncm_mset_func_has_nvar">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
          <parameter name="nvar" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_const" c:identifier="ncm_mset_func_is_const">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_scalar" c:identifier="ncm_mset_func_is_scalar">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_vector" c:identifier="ncm_mset_func_is_vector">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
          <parameter name="dim" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="numdiff_fparams"
              c:identifier="ncm_mset_func_numdiff_fparams">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble*"/>
          </parameter>
          <parameter name="out"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_desc" c:identifier="ncm_mset_func_peek_desc">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@func desc.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_name" c:identifier="ncm_mset_func_peek_name">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@func name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_ns" c:identifier="ncm_mset_func_peek_ns">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@func ns.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_symbol" c:identifier="ncm_mset_func_peek_symbol">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@func symbol.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_uname" c:identifier="ncm_mset_func_peek_uname">
        <doc xml:space="preserve">Peeks unique name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@func unique name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_usymbol" c:identifier="ncm_mset_func_peek_usymbol">
        <doc xml:space="preserve">Peeks unique symbol.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@func unique name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_mset_func_ref">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="MSetFunc" c:type="NcmMSetFunc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc.</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_eval_x" c:identifier="ncm_mset_func_set_eval_x">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <array length="1" zero-terminated="0" c:type="gdouble*">
              <type name="gdouble" c:type="gdouble"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="dimension"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="eval-x" writable="1" transfer-ownership="none">
        <type name="Vector"/>
      </property>
      <property name="nvariables" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="nvar" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="dim" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="eval_x" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="name" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="symbol" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="ns" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="desc" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="uname" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="usymbol" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
    </class>
    <record name="MSetFuncClass"
            c:type="NcmMSetFuncClass"
            glib:is-gtype-struct-for="MSetFunc">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="eval" readable="0" private="1">
        <type name="MSetFuncN" c:type="NcmMSetFuncN"/>
      </field>
    </record>
    <class name="MSetFuncList"
           c:symbol-prefix="mset_func_list"
           c:type="NcmMSetFuncList"
           parent="MSetFunc"
           glib:type-name="NcmMSetFuncList"
           glib:get-type="ncm_mset_func_list_get_type"
           glib:type-struct="MSetFuncListClass">
      <constructor name="new" c:identifier="ncm_mset_func_list_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">newly created #NcmMSetFuncList.</doc>
          <type name="MSetFuncList" c:type="NcmMSetFuncList*"/>
        </return-value>
        <parameters>
          <parameter name="full_name" transfer-ownership="none">
            <doc xml:space="preserve">function full name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="obj"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">FIXME</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_ns_name"
                   c:identifier="ncm_mset_func_list_new_ns_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">newly created #NcmMSetFuncList.</doc>
          <type name="MSetFuncList" c:type="NcmMSetFuncList*"/>
        </return-value>
        <parameters>
          <parameter name="ns" transfer-ownership="none">
            <doc xml:space="preserve">function namespace</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">function name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="obj"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">FIXME</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="has_full_name"
                c:identifier="ncm_mset_func_list_has_full_name">
        <doc xml:space="preserve">Check if function @full_name exists.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the function @full_name.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="full_name" transfer-ownership="none">
            <doc xml:space="preserve">function full name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="has_ns_name"
                c:identifier="ncm_mset_func_list_has_ns_name">
        <doc xml:space="preserve">Check if function @name exists in @ns.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the function @name exists in @ns.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="ns" transfer-ownership="none">
            <doc xml:space="preserve">function namespace</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">function name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="register" c:identifier="ncm_mset_func_list_register">
        <doc xml:space="preserve">Register a new function in the NcmMSetFuncList class.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">function name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="symbol" transfer-ownership="none">
            <doc xml:space="preserve">function symbol</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="ns" transfer-ownership="none">
            <doc xml:space="preserve">namespace</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve">function description</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="obj_type" transfer-ownership="none">
            <doc xml:space="preserve">object type</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="func" transfer-ownership="none" scope="notified">
            <doc xml:space="preserve">function pointer</doc>
            <type name="MSetFuncListN" c:type="NcmMSetFuncListN"/>
          </parameter>
          <parameter name="nvar" transfer-ownership="none">
            <doc xml:space="preserve">number of variables</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="dim" transfer-ownership="none">
            <doc xml:space="preserve">function dimension</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="select" c:identifier="ncm_mset_func_list_select">
        <doc xml:space="preserve">Selects the NcmMSetFuncListStruct array containing the function
in the namespace @ns with @nvar and @dim. If @ns is NULL then
gets from all namespaces, @nvar and/or @dim equals to -1 selects
any value. The contained strings must not be freed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">NcmMSetFuncListStruct array.</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="MSetFuncListStruct"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="ns"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">namespace</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nvar" transfer-ownership="none">
            <doc xml:space="preserve">number of variables</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="dim" transfer-ownership="none">
            <doc xml:space="preserve">function dimension</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <property name="full-name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="object" writable="1" transfer-ownership="none">
        <type name="GObject.Object"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="MSetFunc" c:type="NcmMSetFunc"/>
      </field>
      <field name="obj_type" readable="0" private="1">
        <type name="GType" c:type="GType"/>
      </field>
      <field name="func" readable="0" private="1">
        <type name="MSetFuncListN" c:type="NcmMSetFuncListN"/>
      </field>
      <field name="obj" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject*"/>
      </field>
    </class>
    <record name="MSetFuncListClass"
            c:type="NcmMSetFuncListClass"
            glib:is-gtype-struct-for="MSetFuncList">
      <field name="parent_class" readable="0" private="1">
        <type name="MSetFuncClass" c:type="NcmMSetFuncClass"/>
      </field>
      <field name="func_array" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="ns_hash" readable="0" private="1">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
    </record>
    <callback name="MSetFuncListN" c:type="NcmMSetFuncListN">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="flist" transfer-ownership="none">
          <type name="MSetFuncList" c:type="NcmMSetFuncList*"/>
        </parameter>
        <parameter name="mset" transfer-ownership="none">
          <type name="MSet" c:type="NcmMSet*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble*"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="MSetFuncListStruct" c:type="NcmMSetFuncListStruct">
      <doc xml:space="preserve">FIXME</doc>
      <field name="name" writable="1">
        <doc xml:space="preserve">FIXME</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="symbol" writable="1">
        <doc xml:space="preserve">FIXME</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="ns" writable="1">
        <doc xml:space="preserve">FIXME</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="desc" writable="1">
        <doc xml:space="preserve">FIXME</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="obj_type" readable="0" private="1">
        <type name="GType" c:type="GType"/>
      </field>
      <field name="func" readable="0" private="1">
        <type name="MSetFuncListN" c:type="NcmMSetFuncListN"/>
      </field>
      <field name="nvar" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="dim" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="pos" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <callback name="MSetFuncN" c:type="NcmMSetFuncN">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="func" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="MSetFunc" c:type="NcmMSetFunc*"/>
        </parameter>
        <parameter name="mset" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="MSet" c:type="NcmMSet*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <array zero-terminated="0" c:type="gdouble*">
            <type name="gdouble"/>
          </array>
        </parameter>
        <parameter name="res"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <array zero-terminated="0" c:type="gdouble*">
            <type name="gdouble"/>
          </array>
        </parameter>
      </parameters>
    </callback>
    <record name="MSetModelDesc" c:type="NcmMSetModelDesc">
      <field name="init" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="ns" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="desc" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="long_desc" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <record name="MSetPIndex"
            c:type="NcmMSetPIndex"
            glib:type-name="NcmMSetPIndex"
            glib:get-type="ncm_mset_pindex_get_type"
            c:symbol-prefix="mset_pindex">
      <field name="mid" readable="0" private="1">
        <type name="ModelID" c:type="NcmModelID"/>
      </field>
      <field name="pid" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <constructor name="new" c:identifier="ncm_mset_pindex_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="MSetPIndex" c:type="NcmMSetPIndex*"/>
        </return-value>
        <parameters>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">Model id</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">Parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="dup" c:identifier="ncm_mset_pindex_dup">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="MSetPIndex" c:type="NcmMSetPIndex*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pi" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetPIndex</doc>
            <type name="MSetPIndex" c:type="NcmMSetPIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_mset_pindex_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pi" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetPIndex</doc>
            <type name="MSetPIndex" c:type="NcmMSetPIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="MSetTransKern"
           c:symbol-prefix="mset_trans_kern"
           c:type="NcmMSetTransKern"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NcmMSetTransKern"
           glib:get-type="ncm_mset_trans_kern_get_type"
           glib:type-struct="MSetTransKernClass">
      <function name="clear" c:identifier="ncm_mset_trans_kern_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tkern" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
            <type name="MSetTransKern" c:type="NcmMSetTransKern**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="generate" invoker="generate">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkern" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
            <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
          </instance-parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">current point.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="thetastar" transfer-ownership="none">
            <doc xml:space="preserve">try point.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name" invoker="get_name">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the name of the sampler.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkern" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
            <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="pdf" invoker="pdf">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the kernel at (@theta, @thetastar).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkern" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
            <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
          </instance-parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">current point.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="thetastar" transfer-ownership="none">
            <doc xml:space="preserve">try point.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_mset" invoker="set_mset">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkern" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
            <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="free" c:identifier="ncm_mset_trans_kern_free">
        <doc xml:space="preserve">Increases the reference count of @tkern.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkern" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
            <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="generate" c:identifier="ncm_mset_trans_kern_generate">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkern" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
            <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
          </instance-parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">current point.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="thetastar" transfer-ownership="none">
            <doc xml:space="preserve">try point.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="ncm_mset_trans_kern_get_name">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the name of the sampler.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkern" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
            <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pdf" c:identifier="ncm_mset_trans_kern_pdf">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the kernel at (@theta, @thetastar).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkern" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
            <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
          </instance-parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">current point.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="thetastar" transfer-ownership="none">
            <doc xml:space="preserve">try point.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prior_pdf" c:identifier="ncm_mset_trans_kern_prior_pdf">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the kernel at (@ktern-&gt;theta, @thetastar).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkern" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
            <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
          </instance-parameter>
          <parameter name="thetastar" transfer-ownership="none">
            <doc xml:space="preserve">try point.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prior_sample"
              c:identifier="ncm_mset_trans_kern_prior_sample">
        <doc xml:space="preserve">Sample from the transition kernel using it as a prior. To use as a prior one must
call one of the functions ncm_mset_trans_kern_set_prior_* first.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkern" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
            <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
          </instance-parameter>
          <parameter name="thetastar" transfer-ownership="none">
            <doc xml:space="preserve">try point.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_mset_trans_kern_ref">
        <doc xml:space="preserve">Increases the reference count of @tkern.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@tkern.</doc>
          <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkern" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
            <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_mset" c:identifier="ncm_mset_trans_kern_set_mset">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkern" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
            <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_prior" c:identifier="ncm_mset_trans_kern_set_prior">
        <doc xml:space="preserve">Sets the @theta as the prior mean. This allows the transition kernel to
be used as a prior sampler.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkern" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
            <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
          </instance-parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_prior_from_mset"
              c:identifier="ncm_mset_trans_kern_set_prior_from_mset">
        <doc xml:space="preserve">As ncm_mset_trans_kern_set_prior() but uses the values present in the
internal set #NcmMSet.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkern" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
            <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="mset"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="MSet"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="mset" readable="0" private="1">
        <type name="MSet" c:type="NcmMSet*"/>
      </field>
      <field name="theta" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
    </class>
    <class name="MSetTransKernCat"
           c:symbol-prefix="mset_trans_kern_cat"
           c:type="NcmMSetTransKernCat"
           parent="MSetTransKern"
           glib:type-name="NcmMSetTransKernCat"
           glib:get-type="ncm_mset_trans_kern_cat_get_type"
           glib:type-struct="MSetTransKernCatClass">
      <constructor name="new" c:identifier="ncm_mset_trans_kern_cat_new">
        <doc xml:space="preserve">New NcmMSetTransKernCat from @mcat catalog .</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmMSetTransKernCat.</doc>
          <type name="MSetTransKernCat" c:type="NcmMSetTransKernCat*"/>
        </return-value>
        <parameters>
          <parameter name="mcat" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="catalog"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="MSetCatalog"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="MSetTransKern" c:type="NcmMSetTransKern"/>
      </field>
      <field name="mcat" readable="0" private="1">
        <type name="MSetCatalog" c:type="NcmMSetCatalog*"/>
      </field>
    </class>
    <record name="MSetTransKernCatClass"
            c:type="NcmMSetTransKernCatClass"
            glib:is-gtype-struct-for="MSetTransKernCat">
      <field name="parent_class" readable="0" private="1">
        <type name="MSetTransKernClass" c:type="NcmMSetTransKernClass"/>
      </field>
    </record>
    <record name="MSetTransKernClass"
            c:type="NcmMSetTransKernClass"
            glib:is-gtype-struct-for="MSetTransKern">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="bernoulli_scheme" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="set_mset">
        <callback name="set_mset">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tkern" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
              <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
            </parameter>
            <parameter name="mset" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSet.</doc>
              <type name="MSet" c:type="NcmMSet*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="generate">
        <callback name="generate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tkern" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
              <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
            </parameter>
            <parameter name="theta" transfer-ownership="none">
              <doc xml:space="preserve">current point.</doc>
              <type name="Vector" c:type="NcmVector*"/>
            </parameter>
            <parameter name="thetastar" transfer-ownership="none">
              <doc xml:space="preserve">try point.</doc>
              <type name="Vector" c:type="NcmVector*"/>
            </parameter>
            <parameter name="rng" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmRNG.</doc>
              <type name="RNG" c:type="NcmRNG*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pdf">
        <callback name="pdf">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the value of the kernel at (@theta, @thetastar).</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="tkern" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
              <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
            </parameter>
            <parameter name="theta" transfer-ownership="none">
              <doc xml:space="preserve">current point.</doc>
              <type name="Vector" c:type="NcmVector*"/>
            </parameter>
            <parameter name="thetastar" transfer-ownership="none">
              <doc xml:space="preserve">try point.</doc>
              <type name="Vector" c:type="NcmVector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the name of the sampler.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="tkern" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
              <type name="MSetTransKern" c:type="NcmMSetTransKern*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="MSetTransKernFlat"
           c:symbol-prefix="mset_trans_kern_flat"
           c:type="NcmMSetTransKernFlat"
           parent="MSetTransKern"
           glib:type-name="NcmMSetTransKernFlat"
           glib:get-type="ncm_mset_trans_kern_flat_get_type"
           glib:type-struct="MSetTransKernFlatClass">
      <constructor name="new" c:identifier="ncm_mset_trans_kern_flat_new">
        <doc xml:space="preserve">New NcmMSetTransKern flat.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmMSetTransKernFlat.</doc>
          <type name="MSetTransKernFlat" c:type="NcmMSetTransKernFlat*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="MSetTransKern" c:type="NcmMSetTransKern"/>
      </field>
      <field name="parea" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="MSetTransKernFlatClass"
            c:type="NcmMSetTransKernFlatClass"
            glib:is-gtype-struct-for="MSetTransKernFlat">
      <field name="parent_class" readable="0" private="1">
        <type name="MSetTransKernClass" c:type="NcmMSetTransKernClass"/>
      </field>
    </record>
    <class name="MSetTransKernGauss"
           c:symbol-prefix="mset_trans_kern_gauss"
           c:type="NcmMSetTransKernGauss"
           parent="MSetTransKern"
           glib:type-name="NcmMSetTransKernGauss"
           glib:get-type="ncm_mset_trans_kern_gauss_get_type"
           glib:type-struct="MSetTransKernGaussClass">
      <constructor name="new" c:identifier="ncm_mset_trans_kern_gauss_new">
        <doc xml:space="preserve">New NcmMSetTransKern gauss for @len multivariate gaussian.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmMSetTransKernGauss.</doc>
          <type name="MSetTransKernGauss" c:type="NcmMSetTransKernGauss*"/>
        </return-value>
        <parameters>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">Number of variables</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_cov" c:identifier="ncm_mset_trans_kern_gauss_get_cov">
        <doc xml:space="preserve">Gets the covariance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the covariance.</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkerng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKernGauss.</doc>
            <type name="MSetTransKernGauss" c:type="NcmMSetTransKernGauss*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="ncm_mset_trans_kern_gauss_get_size">
        <doc xml:space="preserve">Gets size of #NcmMSetTransKernGauss.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">size of the gaussian multivariate.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkerng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKernGauss.</doc>
            <type name="MSetTransKernGauss" c:type="NcmMSetTransKernGauss*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_cov" c:identifier="ncm_mset_trans_kern_gauss_set_cov">
        <doc xml:space="preserve">Sets the covariance given by the #NcmMatrix @cov.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkerng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKernGauss.</doc>
            <type name="MSetTransKernGauss" c:type="NcmMSetTransKernGauss*"/>
          </instance-parameter>
          <parameter name="cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix.</doc>
            <type name="Matrix" c:type="const NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cov_from_rescale"
              c:identifier="ncm_mset_trans_kern_gauss_set_cov_from_rescale">
        <doc xml:space="preserve">Sets the covariance using the scale property of the parameters times
@epsilon as standard deviation and zero correlation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkerng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKernGauss</doc>
            <type name="MSetTransKernGauss" c:type="NcmMSetTransKernGauss*"/>
          </instance-parameter>
          <parameter name="epsilon" transfer-ownership="none">
            <doc xml:space="preserve">the overall rescale</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cov_from_scale"
              c:identifier="ncm_mset_trans_kern_gauss_set_cov_from_scale">
        <doc xml:space="preserve">Sets the covariance using the scale property of the parameters as
standard deviation and zero correlation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkerng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKernGauss</doc>
            <type name="MSetTransKernGauss" c:type="NcmMSetTransKernGauss*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_cov_variant"
              c:identifier="ncm_mset_trans_kern_gauss_set_cov_variant">
        <doc xml:space="preserve">Sets the covariance given by the #GVariant @cov.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkerng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKernGauss.</doc>
            <type name="MSetTransKernGauss" c:type="NcmMSetTransKernGauss*"/>
          </instance-parameter>
          <parameter name="cov" transfer-ownership="none">
            <doc xml:space="preserve">a #GVariant.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="ncm_mset_trans_kern_gauss_set_size">
        <doc xml:space="preserve">Sets size of #NcmMSetTransKernGauss.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tkerng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKernGauss.</doc>
            <type name="MSetTransKernGauss" c:type="NcmMSetTransKernGauss*"/>
          </instance-parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">Number of variables.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="cov" writable="1" transfer-ownership="none">
        <type name="Matrix"/>
      </property>
      <property name="length"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="MSetTransKern" c:type="NcmMSetTransKern"/>
      </field>
      <field name="len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="cov" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="LLT" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="v" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="init" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="MSetTransKernGaussClass"
            c:type="NcmMSetTransKernGaussClass"
            glib:is-gtype-struct-for="MSetTransKernGauss">
      <field name="parent_class" readable="0" private="1">
        <type name="MSetTransKernClass" c:type="NcmMSetTransKernClass"/>
      </field>
    </record>
    <class name="Matrix"
           c:symbol-prefix="matrix"
           c:type="NcmMatrix"
           parent="GObject.Object"
           glib:type-name="NcmMatrix"
           glib:get-type="ncm_matrix_get_type"
           glib:type-struct="MatrixClass">
      <doc xml:space="preserve">FIXME</doc>
      <constructor name="const_new_data"
                   c:identifier="ncm_matrix_const_new_data">
        <doc xml:space="preserve">This function returns a constant #NcmMatrix of the array @d.
The memory allocated is kept during all time life of the object and
must not be freed during this period.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A new constant #NcmMatrix.</doc>
          <type name="Matrix" c:type="const NcmMatrix*"/>
        </return-value>
        <parameters>
          <parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve">pointer to the first double allocated</doc>
            <type name="gdouble" c:type="const gdouble*"/>
          </parameter>
          <parameter name="nrows" transfer-ownership="none">
            <doc xml:space="preserve">number of rows</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="ncols" transfer-ownership="none">
            <doc xml:space="preserve">number of cols</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="const_new_variant"
                   c:identifier="ncm_matrix_const_new_variant">
        <doc xml:space="preserve">Creates a new constant matrix using the same memory of @var.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmMatrix with the values from @var.</doc>
          <type name="Matrix" c:type="const NcmMatrix*"/>
        </return-value>
        <parameters>
          <parameter name="var" transfer-ownership="none">
            <doc xml:space="preserve">a variant of type "aad"</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new" c:identifier="ncm_matrix_new">
        <doc xml:space="preserve">This function allocates memory for a new #NcmMatrix of doubles
with @nrows rows and @ncols columns.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmMatrix.</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <parameter name="nrows" transfer-ownership="none">
            <doc xml:space="preserve">number of rows</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="ncols" transfer-ownership="none">
            <doc xml:space="preserve">number of columns</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_array" c:identifier="ncm_matrix_new_array">
        <doc xml:space="preserve">The number of rows is defined dividing the lenght of @a by @ncols.
This function saves @a internally and frees it when it is no longer necessary.
The GArray @a must not be freed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmMatrix.</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">GArray of doubles to be converted into a #NcmMatrix</doc>
            <array zero-terminated="0" name="GLib.Array" c:type="GArray*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="ncols" transfer-ownership="none">
            <doc xml:space="preserve">number of columns</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_data_malloc"
                   c:identifier="ncm_matrix_new_data_malloc"
                   introspectable="0">
        <doc xml:space="preserve">This function returns a #NcmMatrix of the array @d allocated using malloc.
It saves @d internally and frees it when it is no longer necessary.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmMatrix.</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve">pointer to the first double allocated</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="nrows" transfer-ownership="none">
            <doc xml:space="preserve">number of rows</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="ncols" transfer-ownership="none">
            <doc xml:space="preserve">number of columns</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_data_slice"
                   c:identifier="ncm_matrix_new_data_slice"
                   introspectable="0">
        <doc xml:space="preserve">This function returns a #NcmMatrix of the array @d allocated using g_slice function.
It saves @d internally and frees it when it is no longer necessary.
The matrix has @nrows rows and @ncols columns.
The physical number of columns in memory is also given by @ncols.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmMatrix.</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve">pointer to the first double allocated</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="nrows" transfer-ownership="none">
            <doc xml:space="preserve">number of rows</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="ncols" transfer-ownership="none">
            <doc xml:space="preserve">number of columns</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_data_static"
                   c:identifier="ncm_matrix_new_data_static"
                   introspectable="0">
        <doc xml:space="preserve">This function returns a #NcmMatrix of the array @d.
The memory allocated is kept during all time life of the object and
must not be freed during this period.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmMatrix.</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve">pointer to the first double allocated</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="nrows" transfer-ownership="none">
            <doc xml:space="preserve">number of rows</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="ncols" transfer-ownership="none">
            <doc xml:space="preserve">number of columns</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_data_static_tda"
                   c:identifier="ncm_matrix_new_data_static_tda"
                   introspectable="0">
        <doc xml:space="preserve">This function returns a #NcmMatrix of the array @d with a physical number of columns tda which may differ
from the corresponding dimension of the matrix. The matrix has @nrows rows and @ncols columns, and the physical
number of columns in memory is given by tda.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmMatrix.</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve">pointer to the first double allocated</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="nrows" transfer-ownership="none">
            <doc xml:space="preserve">number of rows</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="ncols" transfer-ownership="none">
            <doc xml:space="preserve">number of columns</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="tda" transfer-ownership="none">
            <doc xml:space="preserve">physical number of columns which may differ from the corresponding dimension of the matrix</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full" c:identifier="ncm_matrix_new_full">
        <doc xml:space="preserve">This function allocates memory for a new #NcmMatrix of doubles
with @nrows rows and @ncols columns.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmMatrix.</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve">pointer to the data</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="nrows" transfer-ownership="none">
            <doc xml:space="preserve">number of rows</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="ncols" transfer-ownership="none">
            <doc xml:space="preserve">number of columns</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="tda" transfer-ownership="none">
            <doc xml:space="preserve">row trailing dimension</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="pdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">descending data pointer</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="pfree"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve">free function to be called when destroying the matrix</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_gsl"
                   c:identifier="ncm_matrix_new_gsl"
                   introspectable="0">
        <doc xml:space="preserve">This function saves @gm internally and frees it when it is no longer necessary.
The @gm matrix must not be freed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmMatrix.</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <parameter name="gm" transfer-ownership="none">
            <doc xml:space="preserve">matrix from GNU Scientific Library (GSL) to be converted into a #NcmMatrix</doc>
            <type c:type="gsl_matrix*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_gsl_const"
                   c:identifier="ncm_matrix_new_gsl_const"
                   introspectable="0">
        <doc xml:space="preserve">This function converts @m into a constant #NcmMatrix.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A new constant #NcmMatrix.</doc>
          <type name="Matrix" c:type="const NcmMatrix*"/>
        </return-value>
        <parameters>
          <parameter name="m" transfer-ownership="none">
            <doc xml:space="preserve">matrix from GNU Scientific Library (GSL)</doc>
            <type c:type="gsl_matrix*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_gsl_static"
                   c:identifier="ncm_matrix_new_gsl_static"
                   introspectable="0">
        <doc xml:space="preserve">This function saves @gm internally and does not frees it.
The @gm matrix must be valid during the life of the created #NcmMatrix.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmMatrix.</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <parameter name="gm" transfer-ownership="none">
            <doc xml:space="preserve">matrix from GNU Scientific Library (GSL) to be converted into a #NcmMatrix</doc>
            <type c:type="gsl_matrix*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_variant" c:identifier="ncm_matrix_new_variant">
        <doc xml:space="preserve">Creates a new matrix using the values from @var.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmMatrix with the values from @var.</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <parameter name="var" transfer-ownership="none">
            <doc xml:space="preserve">a variant of type "aad"</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_matrix_clear">
        <doc xml:space="preserve">Atomically decrements the reference count of @cm by one. If the reference count drops to 0,
all memory allocated by @cm is released. The pointer is set to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix**"/>
          </parameter>
        </parameters>
      </function>
      <function name="exp_2x2"
                c:identifier="ncm_matrix_exp_2x2"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="B" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type c:type="gsl_matrix*"/>
          </parameter>
          <parameter name="exp_B" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type c:type="gsl_matrix*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new0" c:identifier="ncm_matrix_new0">
        <doc xml:space="preserve">This function allocates memory for a new #NcmMatrix of doubles
with @nrows rows and @ncols columns and sets all elements to zero.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmMatrix.</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <parameter name="nrows" transfer-ownership="none">
            <doc xml:space="preserve">number of rows</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="ncols" transfer-ownership="none">
            <doc xml:space="preserve">number of columns</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="substitute" c:identifier="ncm_matrix_substitute">
        <doc xml:space="preserve">Substitute the matrix *@cm by @nm, first it unref *@cm if it is not NULL.
If @check_size is TRUE then check if the two matrix have the same size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix**"/>
          </parameter>
          <parameter name="nm"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
          <parameter name="check_size" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_mul" c:identifier="ncm_matrix_add_mul">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="addto" c:identifier="ncm_matrix_addto">
        <doc xml:space="preserve">This function adds the value @val to the (@i,@j)-th element of the matrix @cm.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">row index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="j" transfer-ownership="none">
            <doc xml:space="preserve">column index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">a double</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="cholesky_decomp" c:identifier="ncm_matrix_cholesky_decomp">
        <doc xml:space="preserve">Calculates inplace the Cholesky decomposition for a symmetric positive
definite matrix.</doc>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="UL" transfer-ownership="none">
            <doc xml:space="preserve">char indicating 'U'pper or 'L'ower matrix</doc>
            <type name="gchar" c:type="gchar"/>
          </parameter>
        </parameters>
      </method>
      <method name="cholesky_inverse"
              c:identifier="ncm_matrix_cholesky_inverse">
        <doc xml:space="preserve">Calculates inplace the inverse of @cm that has been previously decomposed by
the Cholesky decomposition ncm_matrix_cholesky_decomp().</doc>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="UL" transfer-ownership="none">
            <doc xml:space="preserve">char indicating 'U'pper or 'L'ower matrix</doc>
            <type name="gchar" c:type="gchar"/>
          </parameter>
        </parameters>
      </method>
      <method name="col_len" c:identifier="ncm_matrix_col_len">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="const NcmMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="const_data" c:identifier="ncm_matrix_const_data">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="const gdouble*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="const NcmMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="const_free" c:identifier="ncm_matrix_const_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @cv by one. If the reference count drops to 0,
all memory allocated by @cv is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmMatrix</doc>
            <type name="Matrix" c:type="const NcmMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="const_gsl"
              c:identifier="ncm_matrix_const_gsl"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type c:type="const gsl_matrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="const NcmMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="const_ptr" c:identifier="ncm_matrix_const_ptr">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A constant pointer to the (@i,@j)-th element of the matrix @cm.</doc>
          <type name="gdouble" c:type="const gdouble*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="const NcmMatrix*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">row index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="j" transfer-ownership="none">
            <doc xml:space="preserve">column index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy_triangle" c:identifier="ncm_matrix_copy_triangle">
        <doc xml:space="preserve">If @UL == 'U' copy the upper triangle over the lower.
If @UL == 'L' copy the lower triangle over the lower.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="UL" transfer-ownership="none">
            <doc xml:space="preserve">char indicating 'U'pper or 'L'ower matrix</doc>
            <type name="gchar" c:type="gchar"/>
          </parameter>
        </parameters>
      </method>
      <method name="data" c:identifier="ncm_matrix_data">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dsymm" c:identifier="ncm_matrix_dsymm">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="UL" transfer-ownership="none">
            <doc xml:space="preserve">char indicating 'U'pper or 'L'ower matrix</doc>
            <type name="gchar" c:type="gchar"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
          <parameter name="beta" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="c" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="ncm_matrix_dup">
        <doc xml:space="preserve">Duplicates @cm setting the same values of the original propertities.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #NcmMatrix.</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmMatrix</doc>
            <type name="Matrix" c:type="const NcmMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fast_get" c:identifier="ncm_matrix_fast_get">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="ij" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="fast_set" c:identifier="ncm_matrix_fast_set">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="ij" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_matrix_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @cm by one. If the reference count drops to 0,
all memory allocated by @cm is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="ncm_matrix_get">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The (@i,@j)-th element of the matrix @cm.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmMatrix</doc>
            <type name="Matrix" c:type="const NcmMatrix*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">row index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="j" transfer-ownership="none">
            <doc xml:space="preserve">column index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_array" c:identifier="ncm_matrix_get_array">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">FIXME</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gdouble"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_col" c:identifier="ncm_matrix_get_col">
        <doc xml:space="preserve">This function returns the elements of the @col column of the matrix @cm
into a #NcmVector.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #NcmVector.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="col" transfer-ownership="none">
            <doc xml:space="preserve">column index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_row" c:identifier="ncm_matrix_get_row">
        <doc xml:space="preserve">This function returns the elements of the @row row of the matrix @cm
into a #NcmVector.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #NcmVector.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="row" transfer-ownership="none">
            <doc xml:space="preserve">row index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_submatrix" c:identifier="ncm_matrix_get_submatrix">
        <doc xml:space="preserve">This function returns a submatrix #NcmMatrix of the matrix @cm.
The upper-left element of the submatrix is the element (@k1,@k2) of the original matrix.
The submatrix has @nrows rows and @ncols columns.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #NcmMatrix.</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="k1" transfer-ownership="none">
            <doc xml:space="preserve">row index of the original matrix @cm</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="k2" transfer-ownership="none">
            <doc xml:space="preserve">column index of the original matrix @cm</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="nrows" transfer-ownership="none">
            <doc xml:space="preserve">number of rows of the submatrix</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="ncols" transfer-ownership="none">
            <doc xml:space="preserve">number of columns of the submatrix</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_variant" c:identifier="ncm_matrix_get_variant">
        <doc xml:space="preserve">This function gets a variant of values taken from @cm.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #GVariant.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="gsl" c:identifier="ncm_matrix_gsl" introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value>
          <doc xml:space="preserve">FIXME</doc>
          <type c:type="gsl_matrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="log_vals" c:identifier="ncm_matrix_log_vals">
        <doc xml:space="preserve">Prints to the log the values of @cm.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc xml:space="preserve">the prefixed text</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">double format</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="memcpy" c:identifier="ncm_matrix_memcpy">
        <doc xml:space="preserve">This function copies the elements of the matrix @cm1 into the matrix @cm2.
The two matrices must have the same size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="cm2" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="const NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ncols" c:identifier="ncm_matrix_ncols">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="const NcmMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="nrows" c:identifier="ncm_matrix_nrows">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="const NcmMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_variant" c:identifier="ncm_matrix_peek_variant">
        <doc xml:space="preserve">This function gets a variant of values taken from @cm using the same memory.
The matrix @cm should not be modified during the variant existance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #GVariant.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ptr" c:identifier="ncm_matrix_ptr">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A pointer to the (@i,@j)-th element of the matrix @cm.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">row index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="j" transfer-ownership="none">
            <doc xml:space="preserve">column index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_matrix_ref">
        <doc xml:space="preserve">Increase the reference count of @cm by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@cm</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="row_len" c:identifier="ncm_matrix_row_len">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="const NcmMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="scale" c:identifier="ncm_matrix_scale">
        <doc xml:space="preserve">This function multiplies the elements of the matrix @cm by the constant factor @val.
The result is stored in @cm.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">a double</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="ncm_matrix_set">
        <doc xml:space="preserve">This function sets the value of the (@i,@j)-th element of the matrix @cm to @val.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">row index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="j" transfer-ownership="none">
            <doc xml:space="preserve">column index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">a double</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_all" c:identifier="ncm_matrix_set_all">
        <doc xml:space="preserve">This function sets all the elements of the matrix @cm to @val.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">a double</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_col" c:identifier="ncm_matrix_set_col">
        <doc xml:space="preserve">This function copies the elements of the vector @cv into the @n-th column of the matrix @cm.
The length of the vector must be the same as the length of the column.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">column index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmVector</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_colmajor" c:identifier="ncm_matrix_set_colmajor">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="j" transfer-ownership="none">
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_array" c:identifier="ncm_matrix_set_from_array">
        <doc xml:space="preserve">This function sets the valuus of @cm using @data. Data
must have the same size as #NcmMatrix.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">Array of doubles</doc>
            <array zero-terminated="0" name="GLib.Array" c:type="GArray*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_data" c:identifier="ncm_matrix_set_from_data">
        <doc xml:space="preserve">This function sets the valuus of @cm using @data. Data
must have the same size as #NcmMatrix.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">Array of doubles</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_variant"
              c:identifier="ncm_matrix_set_from_variant">
        <doc xml:space="preserve">This function sets the values of @cm using the variant @var.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
          <parameter name="var" transfer-ownership="none">
            <doc xml:space="preserve">a #GVariant of type "aad"</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_identity" c:identifier="ncm_matrix_set_identity">
        <doc xml:space="preserve">This function sets the elements of the matrix @cm to the corresponding elements of the identity matrix,
i.e. a unit diagonal with all off-diagonal elements zero. This applies to both square and rectangular matrices.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_zero" c:identifier="ncm_matrix_set_zero">
        <doc xml:space="preserve">This function sets all the elements of the matrix @cm to zero.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="size" c:identifier="ncm_matrix_size">
        <doc xml:space="preserve">Calculates the total size of the matrix, ncols * nrows.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Total size of the matrix.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="const NcmMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="tda" c:identifier="ncm_matrix_tda">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The matrix tda.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="const NcmMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="transpose" c:identifier="ncm_matrix_transpose">
        <doc xml:space="preserve">This function replaces the matrix @cm by its transpose by copying the elements of the matrix in-place.
The matrix must be square for this operation to be possible.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="values" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="mv" introspectable="0" readable="0" private="1">
        <type c:type="gsl_matrix_view"/>
      </field>
      <field name="pdata" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="pfree" readable="0" private="1">
        <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
      </field>
      <field name="type" readable="0" private="1">
        <type name="MatrixInternal" c:type="NcmMatrixInternal"/>
      </field>
    </class>
    <record name="MatrixClass"
            c:type="NcmMatrixClass"
            glib:is-gtype-struct-for="Matrix">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="MatrixInternal"
                 glib:type-name="NcmMatrixInternal"
                 glib:get-type="ncm_matrix_internal_get_type"
                 c:type="NcmMatrixInternal">
      <doc xml:space="preserve">FIXME</doc>
      <member name="slice"
              value="0"
              c:identifier="NCM_MATRIX_SLICE"
              glib:nick="slice">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="gsl_matrix"
              value="1"
              c:identifier="NCM_MATRIX_GSL_MATRIX"
              glib:nick="gsl-matrix">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="malloc"
              value="2"
              c:identifier="NCM_MATRIX_MALLOC"
              glib:nick="malloc">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="garray"
              value="3"
              c:identifier="NCM_MATRIX_GARRAY"
              glib:nick="garray">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="derived"
              value="4"
              c:identifier="NCM_MATRIX_DERIVED"
              glib:nick="derived">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <record name="MemoryPool" c:type="NcmMemoryPool">
      <doc xml:space="preserve">FIXME</doc>
      <field name="update" readable="0" private="1">
        <type name="GLib.Mutex" c:type="GMutex"/>
      </field>
      <field name="finish" readable="0" private="1">
        <type name="GLib.Cond" c:type="GCond"/>
      </field>
      <field name="slices_in_use" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="slices" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="alloc" readable="0" private="1">
        <type name="MemoryPoolAlloc" c:type="NcmMemoryPoolAlloc"/>
      </field>
      <field name="free" readable="0" private="1">
        <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
      </field>
      <field name="userdata" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <method name="add" c:identifier="ncm_memory_pool_add">
        <doc xml:space="preserve">Adds an already allocated pointer @p to the pool. It will be freed with
#NcmMemoryPool-&gt;free during the pool destruction.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMemoryPool.</doc>
            <type name="MemoryPool" c:type="NcmMemoryPool*"/>
          </instance-parameter>
          <parameter name="p"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a pointer to an object compatible with the pool.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_memory_pool_free">
        <doc xml:space="preserve">This function free the memory pool and also
the slices if free_slices == TRUE and the
pool was built with a free function</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMemoryPool, memory pool to be freed</doc>
            <type name="MemoryPool" c:type="NcmMemoryPool*"/>
          </instance-parameter>
          <parameter name="free_slices" transfer-ownership="none">
            <doc xml:space="preserve">if true and the pool was built with a free function, free the slices</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="ncm_memory_pool_get">
        <doc xml:space="preserve">Search in the pool for a non used slice
and return the first finded. If none
allocate a new one add to the pool and
return it.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a pointer to an unused #NcmMemoryPoolSlice</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="mp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMemoryPool</doc>
            <type name="MemoryPool" c:type="NcmMemoryPool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_min_size" c:identifier="ncm_memory_pool_set_min_size">
        <doc xml:space="preserve">if n grater than number of slices then allocate new slices until
n == slices.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMemoryPool</doc>
            <type name="MemoryPool" c:type="NcmMemoryPool*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">minimun number of slices contained in mp</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="ncm_memory_pool_new"
                introspectable="0">
        <doc xml:space="preserve">This function prepare a memory pool which allocate memory
using mp_alloc and save it for future use, the memory must
be returned to the pool using #ncm_memory_pool_return.
These functions are thread safe.</doc>
        <return-value>
          <doc xml:space="preserve">the memory pool #NcmMemoryPool</doc>
          <type name="MemoryPool" c:type="NcmMemoryPool*"/>
        </return-value>
        <parameters>
          <parameter name="mp_alloc"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve">a #NcmMemoryPoolAlloc, function used to alloc memory.</doc>
            <type name="MemoryPoolAlloc" c:type="NcmMemoryPoolAlloc"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">userdata pointer for @mp_alloc function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="mp_free" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">function used to free memory alloced by mp_alloc.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </function>
      <function name="return" c:identifier="ncm_memory_pool_return">
        <doc xml:space="preserve">Put the slice pointed by slice back to the pool.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="p"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">slice to be returned to the pool</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="MemoryPoolAlloc" c:type="NcmMemoryPoolAlloc">
      <return-value transfer-ownership="none" nullable="1">
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="userdata"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="MemoryPoolSlice" c:type="NcmMemoryPoolSlice">
      <field name="p" writable="1">
        <doc xml:space="preserve">Pointer to the actual slice.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="in_use" writable="1">
        <doc xml:space="preserve">Boolean determining if the slice is in use.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="mp" writable="1">
        <doc xml:space="preserve">A back pointer to the pool.</doc>
        <type name="MemoryPool" c:type="NcmMemoryPool*"/>
      </field>
    </record>
    <class name="Model"
           c:symbol-prefix="model"
           c:type="NcmModel"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NcmModel"
           glib:get-type="ncm_model_get_type"
           glib:type-struct="ModelClass">
      <doc xml:space="preserve">Base class for models.</doc>
      <function name="clear" c:identifier="ncm_model_clear">
        <doc xml:space="preserve">Atomically decrements the reference count of @model by one. If the reference count drops to 0,
all memory allocated by @model is released. Set pointer to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel**"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_by_type" c:identifier="ncm_model_id_by_type">
        <return-value transfer-ownership="none">
          <type name="ModelID" c:type="NcmModelID"/>
        </return-value>
        <parameters>
          <parameter name="model_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
      <function name="type_is_submodel"
                c:identifier="ncm_model_type_is_submodel">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if @model_type is a submodel of other model class.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="model_type" transfer-ownership="none">
            <doc xml:space="preserve">a #GType</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
      <function name="type_main_model"
                c:identifier="ncm_model_type_main_model">
        <doc xml:space="preserve">If @model_type is a submodel returns the #NcmModelID of its
main model, otherwise returns -1.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">main model #NcmModelID or -1.</doc>
          <type name="ModelID" c:type="NcmModelID"/>
        </return-value>
        <parameters>
          <parameter name="model_type" transfer-ownership="none">
            <doc xml:space="preserve">a #GType</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="add_submodel" invoker="add_submodel">
        <doc xml:space="preserve">Adds the @submodel to the @model submodels.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="submodel" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="valid">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add_submodel" c:identifier="ncm_model_add_submodel">
        <doc xml:space="preserve">Adds the @submodel to the @model submodels.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="submodel" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_impl_flag" c:identifier="ncm_model_check_impl_flag">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="impl" transfer-ownership="none">
            <doc xml:space="preserve">implementation flag</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_impl_opt" c:identifier="ncm_model_check_impl_opt">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="opt" transfer-ownership="none">
            <doc xml:space="preserve">implementation option</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_impl_opts"
              c:identifier="ncm_model_check_impl_opts"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="opt1" transfer-ownership="none">
            <doc xml:space="preserve">first implementation option</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">implementation options, must end with -1</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="ncm_model_dup">
        <doc xml:space="preserve">Duplicates @model by serializing and deserializing it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a duplicate of @model.</doc>
          <type name="Model" c:type="NcmModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_model_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @model by one. If the reference count drops to 0,
all memory allocated by @model is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_submodel_len"
              c:identifier="ncm_model_get_submodel_len">
        <doc xml:space="preserve">Gets the number of submodels set in @model.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of submodels set in @model.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="id" c:identifier="ncm_model_id">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="ModelID" c:type="NcmModelID"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_equal" c:identifier="ncm_model_is_equal">
        <doc xml:space="preserve">Compares if model1 and model2 are the same,
with same dimension and reparametrization.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="model1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="model2" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_submodel" c:identifier="ncm_model_is_submodel">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if @model is a submodel of other model class.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="len" c:identifier="ncm_model_len">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="main_model" c:identifier="ncm_model_main_model">
        <doc xml:space="preserve">If @model is a submodel returns the #NcmModelID of its
main model, otherwise returns -1.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">main model #NcmModelID or -1.</doc>
          <type name="ModelID" c:type="NcmModelID"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="name" c:identifier="ncm_model_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="nick" c:identifier="ncm_model_nick">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="orig_param_get" c:identifier="ncm_model_orig_param_get">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="orig_param_get_abstol"
              c:identifier="ncm_model_orig_param_get_abstol">
        <doc xml:space="preserve">Gets the absolute tolerance of the original @n-th parameter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the absolute tolerance of the original @n-th parameter.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">parameter index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="orig_param_get_by_name"
              c:identifier="ncm_model_orig_param_get_by_name">
        <doc xml:space="preserve">Gets the original parameter value by @param_name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">parameter value</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="param_name" transfer-ownership="none">
            <doc xml:space="preserve">parameter name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="orig_param_get_lower_bound"
              c:identifier="ncm_model_orig_param_get_lower_bound">
        <doc xml:space="preserve">Gets the lower bound of the original @n-th parameter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the lower bound of the original @n-th parameter.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="orig_param_get_scale"
              c:identifier="ncm_model_orig_param_get_scale">
        <doc xml:space="preserve">Gets the scale of the original @n-th parameter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the scale of the original @n-th parameter.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">parameter index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="orig_param_get_upper_bound"
              c:identifier="ncm_model_orig_param_get_upper_bound">
        <doc xml:space="preserve">Gets the upper bound of the original @n-th parameter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the upper bound of the original @n-th parameter.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="orig_param_index_from_name"
              c:identifier="ncm_model_orig_param_index_from_name">
        <doc xml:space="preserve">Looks for parameter named @param_name in the original parameters of @model
and puts its index in @i and returns TRUE if found.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the parameter @param_name is found in the @model.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="param_name" transfer-ownership="none">
            <doc xml:space="preserve">parameter name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="i"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">parameter index</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="orig_param_name" c:identifier="ncm_model_orig_param_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="orig_param_set" c:identifier="ncm_model_orig_param_set">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="orig_param_set_by_name"
              c:identifier="ncm_model_orig_param_set_by_name">
        <doc xml:space="preserve">Sets the parameter value @val by @param_name.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="param_name" transfer-ownership="none">
            <doc xml:space="preserve">parameter name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">parameter value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="orig_param_symbol"
              c:identifier="ncm_model_orig_param_symbol">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="orig_params_log_all"
              c:identifier="ncm_model_orig_params_log_all">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="orig_params_peek_vector"
              c:identifier="ncm_model_orig_params_peek_vector">
        <doc xml:space="preserve">Peeks the original parameters vector. This functions is provided for
reparametrization implementations, do not use it in other contexts.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the original parameters #NcmVector</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="orig_params_update"
              c:identifier="ncm_model_orig_params_update">
        <doc xml:space="preserve">Update the new parameters. It causes an error to call this
function with a model without reparametrization.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="orig_vparam_get" c:identifier="ncm_model_orig_vparam_get">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="orig_vparam_get_vector"
              c:identifier="ncm_model_orig_vparam_get_vector">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="orig_vparam_set" c:identifier="ncm_model_orig_vparam_set">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="orig_vparam_set_vector"
              c:identifier="ncm_model_orig_vparam_set_vector">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_finite" c:identifier="ncm_model_param_finite">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_get" c:identifier="ncm_model_param_get">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_get_abstol"
              c:identifier="ncm_model_param_get_abstol">
        <doc xml:space="preserve">Gets the absolute tolerance of the @n-th parameter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the absolute tolerance of the @n-th parameter.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">parameter index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_get_by_name"
              c:identifier="ncm_model_param_get_by_name">
        <doc xml:space="preserve">Gets the parameter value by @param_name</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">parameter value</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="param_name" transfer-ownership="none">
            <doc xml:space="preserve">parameter name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_get_ftype" c:identifier="ncm_model_param_get_ftype">
        <doc xml:space="preserve">Gets the fitting type of the @n-th parameter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the fitting type of the @n-th parameter.</doc>
          <type name="ParamType" c:type="NcmParamType"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_get_lower_bound"
              c:identifier="ncm_model_param_get_lower_bound">
        <doc xml:space="preserve">Gets the lower bound of the @n-th parameter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the lower bound of the @n-th parameter.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_get_scale" c:identifier="ncm_model_param_get_scale">
        <doc xml:space="preserve">Gets the scale of the @n-th parameter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the scale of the @n-th parameter.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">parameter index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_get_upper_bound"
              c:identifier="ncm_model_param_get_upper_bound">
        <doc xml:space="preserve">Gets the upper bound of the @n-th parameter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the upper bound of the @n-th parameter.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_index_from_name"
              c:identifier="ncm_model_param_index_from_name">
        <doc xml:space="preserve">Looks for parameter named @param_name in @model and puts its index in @i
and returns TRUE if found.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the parameter @param_name is found in the @model.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="param_name" transfer-ownership="none">
            <doc xml:space="preserve">parameter name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="i"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">parameter index</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_name" c:identifier="ncm_model_param_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_peek_desc" c:identifier="ncm_model_param_peek_desc">
        <doc xml:space="preserve">Peeks the @n-th parameter description.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The @n-th #NcmSParam.</doc>
          <type name="SParam" c:type="NcmSParam*"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel.</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">parameter index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_set" c:identifier="ncm_model_param_set">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_set_abstol"
              c:identifier="ncm_model_param_set_abstol">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_set_by_name"
              c:identifier="ncm_model_param_set_by_name">
        <doc xml:space="preserve">Sets the parameter value @val by @param_name.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="param_name" transfer-ownership="none">
            <doc xml:space="preserve">parameter name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">parameter value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_set_default"
              c:identifier="ncm_model_param_set_default">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_set_ftype" c:identifier="ncm_model_param_set_ftype">
        <doc xml:space="preserve">Sets @ptype as #NcmParamType of the @n-th parameter.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="ptype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmParamType</doc>
            <type name="ParamType" c:type="const NcmParamType"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_set_lower_bound"
              c:identifier="ncm_model_param_set_lower_bound">
        <doc xml:space="preserve">Sets @lb as the lower-bound value of the @n-th parameter.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="lb" transfer-ownership="none">
            <doc xml:space="preserve">lower-bound value</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_set_scale" c:identifier="ncm_model_param_set_scale">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_set_upper_bound"
              c:identifier="ncm_model_param_set_upper_bound">
        <doc xml:space="preserve">Sets @ub as the lower-bound value of the @n-th parameter.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="ub" transfer-ownership="none">
            <doc xml:space="preserve">upper-bound value</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="param_symbol" c:identifier="ncm_model_param_symbol">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="params_copyto" c:identifier="ncm_model_params_copyto">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="model_dest" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="params_finite" c:identifier="ncm_model_params_finite">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="params_get_all" c:identifier="ncm_model_params_get_all">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="params_log_all" c:identifier="ncm_model_params_log_all">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="params_print_all"
              c:identifier="ncm_model_params_print_all"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="out" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="params_save_as_default"
              c:identifier="ncm_model_params_save_as_default">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="params_set_all"
              c:identifier="ncm_model_params_set_all"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="params_set_all_data"
              c:identifier="ncm_model_params_set_all_data">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="params_set_default"
              c:identifier="ncm_model_params_set_default">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="params_set_model"
              c:identifier="ncm_model_params_set_model">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="model_src" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="params_set_vector"
              c:identifier="ncm_model_params_set_vector">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="params_update" c:identifier="ncm_model_params_update">
        <doc xml:space="preserve">Force the parameters to the update its internal flags and
update the original parameters if necessary.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="params_valid" c:identifier="ncm_model_params_valid">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="params_valid_bounds"
              c:identifier="ncm_model_params_valid_bounds">
        <doc xml:space="preserve">Check whenever the paremeters respect the bounds.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">if the parameter respect the bounds.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_reparam" c:identifier="ncm_model_peek_reparam">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Reparam" c:type="NcmReparam*"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_submodel" c:identifier="ncm_model_peek_submodel">
        <doc xml:space="preserve">Gets the @i-th submodel.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #NcmModel.</doc>
          <type name="Model" c:type="NcmModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">submodel position</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_submodel_by_mid"
              c:identifier="ncm_model_peek_submodel_by_mid">
        <doc xml:space="preserve">Gets the submodel if type #NcmModelID @mid.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #NcmModel.</doc>
          <type name="Model" c:type="NcmModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelID</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_submodel_pos_by_mid"
              c:identifier="ncm_model_peek_submodel_pos_by_mid">
        <doc xml:space="preserve">Gets the submodel type #NcmModelID @mid position.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the @mid position or -1 if not found.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelID</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_model_ref">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Model" c:type="NcmModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reparam_J" c:identifier="ncm_model_reparam_J">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="fJ" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
          <parameter name="J" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reparam_df" c:identifier="ncm_model_reparam_df">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="fv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reparam" c:identifier="ncm_model_set_reparam">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="reparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparam</doc>
            <type name="Reparam" c:type="NcmReparam*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sparam_len" c:identifier="ncm_model_sparam_len">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="state_is_update" c:identifier="ncm_model_state_is_update">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="state_set_update"
              c:identifier="ncm_model_state_set_update">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="vparam_array_len"
              c:identifier="ncm_model_vparam_array_len">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="vparam_index" c:identifier="ncm_model_vparam_index">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">index of the i-th component of the n-th vector</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">vector index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">vector component index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="vparam_len" c:identifier="ncm_model_vparam_len">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">length of the n-th vector</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">vector index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="implementation" transfer-ownership="none">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="name" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="nick" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="params-types" transfer-ownership="none">
        <array name="GLib.Array">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="reparam" writable="1" transfer-ownership="none">
        <type name="Reparam"/>
      </property>
      <property name="scalar-params-len" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="submodel-array" writable="1" transfer-ownership="none">
        <type name="ObjArray"/>
      </property>
      <property name="vector-params-len" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="reparam" readable="0" private="1">
        <type name="Reparam" c:type="NcmReparam*"/>
      </field>
      <field name="sparams" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="params" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="p" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="vparam_pos" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="vparam_len" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="ptypes" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="sparams_name_id" readable="0" private="1">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="submodel_mid_pos" readable="0" private="1">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="submodel_array" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="total_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="pkey" readable="0" private="1">
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="skey" readable="0" private="1">
        <type name="guint64" c:type="guint64"/>
      </field>
    </class>
    <callback name="ModelAddSubmodel" c:type="NcmModelAddSubmodel">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="model" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmModel</doc>
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="submodel" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmModel</doc>
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="ModelBuilder"
           c:symbol-prefix="model_builder"
           c:type="NcmModelBuilder"
           parent="GObject.Object"
           glib:type-name="NcmModelBuilder"
           glib:get-type="ncm_model_builder_get_type"
           glib:type-struct="ModelBuilderClass">
      <constructor name="new" c:identifier="ncm_model_builder_new">
        <doc xml:space="preserve">Creates a new NcmModelBuilder object. This does not create the new class
after defining all parameters one should call ncm_model_builder_create()
to effectively define a new class.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmModelBuilder.</doc>
          <type name="ModelBuilder" c:type="NcmModelBuilder*"/>
        </return-value>
        <parameters>
          <parameter name="ptype" transfer-ownership="none">
            <doc xml:space="preserve">Parent's type</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">model's name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve">model's description</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_sparam" c:identifier="ncm_model_builder_add_sparam">
        <doc xml:space="preserve">Creates a new #NcmSParam from arguments and add it to @mb.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelBuilder</doc>
            <type name="ModelBuilder" c:type="NcmModelBuilder*"/>
          </instance-parameter>
          <parameter name="symbol" transfer-ownership="none">
            <doc xml:space="preserve">symbol of the scalar parameter</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of the sacalar parameter</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="lower_bound" transfer-ownership="none">
            <doc xml:space="preserve">lower-bound value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="upper_bound" transfer-ownership="none">
            <doc xml:space="preserve">upper-bound value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="default_value" transfer-ownership="none">
            <doc xml:space="preserve">default value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="ppt" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmParamType</doc>
            <type name="ParamType" c:type="NcmParamType"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_sparam_obj"
              c:identifier="ncm_model_builder_add_sparam_obj">
        <doc xml:space="preserve">Adds the parameters described by @sparam to @mb.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelBuilder</doc>
            <type name="ModelBuilder" c:type="NcmModelBuilder*"/>
          </instance-parameter>
          <parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="NcmSParam*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_vparam" c:identifier="ncm_model_builder_add_vparam">
        <doc xml:space="preserve">Creates a new #NcmVParam from arguments and add it to @mb.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelBuilder</doc>
            <type name="ModelBuilder" c:type="NcmModelBuilder*"/>
          </instance-parameter>
          <parameter name="default_length" transfer-ownership="none">
            <doc xml:space="preserve">default length of the vector parameter</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="symbol" transfer-ownership="none">
            <doc xml:space="preserve">symbol of the vector parameter</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of the vector parameter</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="lower_bound" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="upper_bound" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="default_value" transfer-ownership="none">
            <doc xml:space="preserve">default value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="ppt" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmParamType</doc>
            <type name="ParamType" c:type="NcmParamType"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_vparam_obj"
              c:identifier="ncm_model_builder_add_vparam_obj">
        <doc xml:space="preserve">Adds the parameters described by @sparam to @mb.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelBuilder</doc>
            <type name="ModelBuilder" c:type="NcmModelBuilder*"/>
          </instance-parameter>
          <parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam</doc>
            <type name="VParam" c:type="NcmVParam*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create" c:identifier="ncm_model_builder_create">
        <doc xml:space="preserve">Creates a new object type using the scalar and vector parameters defined
in @mb.</doc>
        <return-value transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="mb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelBuilder</doc>
            <type name="ModelBuilder" c:type="NcmModelBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_model_builder_ref">
        <doc xml:space="preserve">Increase reference count of @mb by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@mb.</doc>
          <type name="ModelBuilder" c:type="NcmModelBuilder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelBuilder</doc>
            <type name="ModelBuilder" c:type="NcmModelBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="description"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="parent-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GType" c:type="GType"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="name" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="desc" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="ptype" readable="0" private="1">
        <type name="GType" c:type="GType"/>
      </field>
      <field name="type" readable="0" private="1">
        <type name="GType" c:type="GType"/>
      </field>
      <field name="sparams" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="vparams" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="created" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="ModelBuilderClass"
            c:type="NcmModelBuilderClass"
            glib:is-gtype-struct-for="ModelBuilder">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ModelClass"
            c:type="NcmModelClass"
            glib:is-gtype-struct-for="Model">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_property">
        <callback name="get_property">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
            <parameter name="prop_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
            <parameter name="pspec" transfer-ownership="none">
              <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_property">
        <callback name="set_property">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
            <parameter name="prop_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="const GValue*"/>
            </parameter>
            <parameter name="pspec" transfer-ownership="none">
              <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_submodel" readable="0" private="1">
        <type name="ModelAddSubmodel" c:type="NcmModelAddSubmodel"/>
      </field>
      <field name="valid">
        <callback name="valid">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="model" transfer-ownership="none">
              <type name="Model" c:type="NcmModel*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="model_id" readable="0" private="1">
        <type name="ModelID" c:type="NcmModelID"/>
      </field>
      <field name="can_stack" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="main_model_id" readable="0" private="1">
        <type name="ModelID" c:type="NcmModelID"/>
      </field>
      <field name="is_submodel" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="name" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="nick" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="impl_flag" readable="0" private="1">
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="nonparam_prop_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="sparam_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="vparam_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="parent_sparam_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="parent_vparam_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="sparam" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="vparam" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <method name="add_impl_flag"
              c:identifier="ncm_model_class_add_impl_flag"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="ModelClass" c:type="NcmModelClass*"/>
          </instance-parameter>
          <parameter name="flag" transfer-ownership="none">
            <doc xml:space="preserve">implementation flag</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_impl_opts"
              c:identifier="ncm_model_class_add_impl_opts"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="ModelClass" c:type="NcmModelClass*"/>
          </instance-parameter>
          <parameter name="opt1" transfer-ownership="none">
            <doc xml:space="preserve">first option</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">other options, must end with -1</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="add_params" c:identifier="ncm_model_class_add_params">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="ModelClass" c:type="NcmModelClass*"/>
          </instance-parameter>
          <parameter name="sparam_len" transfer-ownership="none">
            <doc xml:space="preserve">number of scalar paramters</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="vparam_len" transfer-ownership="none">
            <doc xml:space="preserve">number of vector parameters</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="nonparam_prop_len" transfer-ownership="none">
            <doc xml:space="preserve">number of properties</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_params_info"
              c:identifier="ncm_model_class_check_params_info">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="ModelClass" c:type="NcmModelClass*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_name_nick"
              c:identifier="ncm_model_class_set_name_nick">
        <doc xml:space="preserve">Attributes @name and @nick, respectively, as the name and nickname of the model.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="ModelClass" c:type="NcmModelClass*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name and/or very short description of the model</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="nick" transfer-ownership="none">
            <doc xml:space="preserve">model nickname</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sparam" c:identifier="ncm_model_class_set_sparam">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="ModelClass" c:type="NcmModelClass*"/>
          </instance-parameter>
          <parameter name="sparam_id" transfer-ownership="none">
            <doc xml:space="preserve">id of the scalar parameter</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="symbol" transfer-ownership="none">
            <doc xml:space="preserve">symbol of the scalar parameter</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of the sacalar parameter</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="lower_bound" transfer-ownership="none">
            <doc xml:space="preserve">lower-bound value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="upper_bound" transfer-ownership="none">
            <doc xml:space="preserve">upper-bound value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="default_value" transfer-ownership="none">
            <doc xml:space="preserve">default value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="ppt" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmParamType</doc>
            <type name="ParamType" c:type="NcmParamType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sparam_obj"
              c:identifier="ncm_model_class_set_sparam_obj">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="ModelClass" c:type="NcmModelClass*"/>
          </instance-parameter>
          <parameter name="sparam_id" transfer-ownership="none">
            <doc xml:space="preserve">id of the scalar parameter</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="NcmSParam*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vparam" c:identifier="ncm_model_class_set_vparam">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="ModelClass" c:type="NcmModelClass*"/>
          </instance-parameter>
          <parameter name="vparam_id" transfer-ownership="none">
            <doc xml:space="preserve">id of the vector parameter</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="default_length" transfer-ownership="none">
            <doc xml:space="preserve">default length of the vector parameter</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="symbol" transfer-ownership="none">
            <doc xml:space="preserve">symbol of the vector parameter</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of the vector parameter</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="lower_bound" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="upper_bound" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="default_value" transfer-ownership="none">
            <doc xml:space="preserve">default value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="ppt" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmParamType</doc>
            <type name="ParamType" c:type="NcmParamType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vparam_obj"
              c:identifier="ncm_model_class_set_vparam_obj">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="ModelClass" c:type="NcmModelClass*"/>
          </instance-parameter>
          <parameter name="vparam_id" transfer-ownership="none">
            <doc xml:space="preserve">id of the vector parameter</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam</doc>
            <type name="VParam" c:type="NcmVParam*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="ModelCtrl"
           c:symbol-prefix="model_ctrl"
           c:type="NcmModelCtrl"
           parent="GObject.Object"
           glib:type-name="NcmModelCtrl"
           glib:get-type="ncm_model_ctrl_get_type"
           glib:type-struct="ModelCtrlClass">
      <constructor name="new" c:identifier="ncm_model_ctrl_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="ModelCtrl" c:type="NcmModelCtrl*"/>
        </return-value>
        <parameters>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_model_ctrl_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ctrl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelCtrl</doc>
            <type name="ModelCtrl" c:type="NcmModelCtrl**"/>
          </parameter>
        </parameters>
      </function>
      <method name="force_update" c:identifier="ncm_model_ctrl_force_update">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctrl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelCtrl</doc>
            <type name="ModelCtrl" c:type="NcmModelCtrl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_model_ctrl_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctrl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelCtrl</doc>
            <type name="ModelCtrl" c:type="NcmModelCtrl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model" c:identifier="ncm_model_ctrl_get_model">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Model" c:type="NcmModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctrl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelCtrl</doc>
            <type name="ModelCtrl" c:type="NcmModelCtrl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="model_has_submodel"
              c:identifier="ncm_model_ctrl_model_has_submodel">
        <doc xml:space="preserve">Checks if there is a submode inside ctrl model, it is an
error to call this function in an empty @ctrl.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if there is a submodel with @mid inside the ctrl model.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctrl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelCtrl</doc>
            <type name="ModelCtrl" c:type="NcmModelCtrl*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">a @NcmModelID</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
        </parameters>
      </method>
      <method name="model_last_update"
              c:identifier="ncm_model_ctrl_model_last_update">
        <doc xml:space="preserve">Checks if the main model was updated during the last call to
ncm_model_ctrl_update().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the main model was updated.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctrl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelCtrl</doc>
            <type name="ModelCtrl" c:type="NcmModelCtrl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="model_update" c:identifier="ncm_model_ctrl_model_update">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctrl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelCtrl</doc>
            <type name="ModelCtrl" c:type="NcmModelCtrl*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_model" c:identifier="ncm_model_ctrl_set_model">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctrl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelCtrl</doc>
            <type name="ModelCtrl" c:type="NcmModelCtrl*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="submodel_last_update"
              c:identifier="ncm_model_ctrl_submodel_last_update">
        <doc xml:space="preserve">Checks if the submodel @mid was updated during the last call to
ncm_model_ctrl_update().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the submodel with @mid inside the ctrl model was updated.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctrl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelCtrl</doc>
            <type name="ModelCtrl" c:type="NcmModelCtrl*"/>
          </instance-parameter>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">a @NcmModelID</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="ncm_model_ctrl_update">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctrl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelCtrl</doc>
            <type name="ModelCtrl" c:type="NcmModelCtrl*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </method>
      <property name="model" writable="1" transfer-ownership="none">
        <type name="Model"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="model_wr" readable="0" private="1">
        <type name="GObject.WeakRef" c:type="GWeakRef"/>
      </field>
      <field name="pkey" readable="0" private="1">
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="last_update" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="submodel_ctrl" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="submodel_last_update" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="ModelCtrlClass"
            c:type="NcmModelCtrlClass"
            glib:is-gtype-struct-for="ModelCtrl">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <callback name="ModelFunc0" c:type="NcmModelFunc0">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="model" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ModelFunc1" c:type="NcmModelFunc1">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="model" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ModelFunc2" c:type="NcmModelFunc2">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="model" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ModelVFunc0" c:type="NcmModelVFunc0">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="model" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="guint" c:type="const guint"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ModelVFunc1" c:type="NcmModelVFunc1">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="model" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="guint" c:type="const guint"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ModelVFunc2" c:type="NcmModelVFunc2">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="model" transfer-ownership="none">
          <type name="Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="guint" c:type="const guint"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <record name="MpsfSBesselIntSpline" c:type="NcmMpsfSBesselIntSpline">
      <doc xml:space="preserve">FIXME</doc>
      <field name="s" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline*"/>
      </field>
      <field name="xnjlrec" readable="0" private="1">
        <type name="MpsfSBesselIntegRecur"
              c:type="NcmMpsfSBesselIntegRecur**"/>
      </field>
      <field name="map_ij2r" readable="0" private="1">
        <type name="guint32" c:type="guint32*"/>
      </field>
      <field name="row" readable="0" private="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="rules_count" readable="0" private="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="prec" readable="0" private="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="x" readable="0" private="1">
        <type name="Grid" c:type="NcmGrid*"/>
      </field>
      <field name="k" readable="0" private="1">
        <type name="Grid" c:type="NcmGrid*"/>
      </field>
      <field name="l" readable="0" private="1">
        <type name="glong" c:type="glong"/>
      </field>
      <field name="int_hash" readable="0" private="1">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="rules" readable="0" private="1">
        <array zero-terminated="0" c:type="gint" fixed-size="4">
          <type name="gint" c:type="gint"/>
        </array>
      </field>
      <field name="crules" readable="0" private="1">
        <array zero-terminated="0" c:type="gint" fixed-size="4">
          <type name="gint" c:type="gint"/>
        </array>
      </field>
      <field name="prepared" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <record name="MpsfSBesselIntegRecur" c:type="NcmMpsfSBesselIntegRecur">
      <doc xml:space="preserve">FIXME</doc>
      <field name="jlrec" readable="0" private="1">
        <type name="MpsfSBesselRecur" c:type="NcmMpsfSBesselRecur*"/>
      </field>
      <field name="prec" readable="0" private="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="q" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="x" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="int_jl_xn" readable="0" private="1">
        <array zero-terminated="0" c:type="gint" fixed-size="4">
          <type name="gint" c:type="gint"/>
        </array>
      </field>
      <field name="int_jlp1_xn" readable="0" private="1">
        <array zero-terminated="0" c:type="gint" fixed-size="4">
          <type name="gint" c:type="gint"/>
        </array>
      </field>
      <field name="x_pow_n" readable="0" private="1">
        <array zero-terminated="0" c:type="gint" fixed-size="4">
          <type name="gint" c:type="gint"/>
        </array>
      </field>
      <field name="temp1" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="temp2" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <record name="MpsfSBesselRecur" c:type="NcmMpsfSBesselRecur">
      <doc xml:space="preserve">FIXME</doc>
      <field name="prec" readable="0" private="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="l" readable="0" private="1">
        <type name="gint32" c:type="gint32"/>
      </field>
      <field name="q" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="x" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="jl" readable="0" private="1">
        <array zero-terminated="0" c:type="gint" fixed-size="2">
          <type name="gint" c:type="gint"/>
        </array>
      </field>
      <field name="temp" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <method name="free" c:identifier="ncm_mpsf_sbessel_recur_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="jlrec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMpsfSBesselRecur</doc>
            <type name="MpsfSBesselRecur" c:type="NcmMpsfSBesselRecur*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="goto"
              c:identifier="ncm_mpsf_sbessel_recur_goto"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="jlrec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMpsfSBesselRecur</doc>
            <type name="MpsfSBesselRecur" c:type="NcmMpsfSBesselRecur*"/>
          </instance-parameter>
          <parameter name="l" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="glong" c:type="glong"/>
          </parameter>
          <parameter name="rnd" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="next"
              c:identifier="ncm_mpsf_sbessel_recur_next"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="jlrec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMpsfSBesselRecur</doc>
            <type name="MpsfSBesselRecur" c:type="NcmMpsfSBesselRecur*"/>
          </instance-parameter>
          <parameter name="rnd" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="previous"
              c:identifier="ncm_mpsf_sbessel_recur_previous"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="jlrec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMpsfSBesselRecur</doc>
            <type name="MpsfSBesselRecur" c:type="NcmMpsfSBesselRecur*"/>
          </instance-parameter>
          <parameter name="rnd" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_d"
              c:identifier="ncm_mpsf_sbessel_recur_set_d"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="jlrec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMpsfSBesselRecur</doc>
            <type name="MpsfSBesselRecur" c:type="NcmMpsfSBesselRecur*"/>
          </instance-parameter>
          <parameter name="l" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="glong" c:type="glong"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="rnd" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_q"
              c:identifier="ncm_mpsf_sbessel_recur_set_q"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="jlrec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMpsfSBesselRecur</doc>
            <type name="MpsfSBesselRecur" c:type="NcmMpsfSBesselRecur*"/>
          </instance-parameter>
          <parameter name="l" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="glong" c:type="glong"/>
          </parameter>
          <parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="rnd" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="write" c:identifier="ncm_mpsf_sbessel_recur_write">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="jlrec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMpsfSBesselRecur</doc>
            <type name="MpsfSBesselRecur" c:type="NcmMpsfSBesselRecur*"/>
          </instance-parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="ncm_mpsf_sbessel_recur_new"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value>
          <doc xml:space="preserve">FIXME</doc>
          <type name="MpsfSBesselRecur" c:type="NcmMpsfSBesselRecur*"/>
        </return-value>
        <parameters>
          <parameter name="prec" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </function>
      <function name="read"
                c:identifier="ncm_mpsf_sbessel_recur_read"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value>
          <doc xml:space="preserve">FIXME</doc>
          <type name="MpsfSBesselRecur" c:type="NcmMpsfSBesselRecur*"/>
        </return-value>
        <parameters>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <constant name="OBJ_ARRAY_OBJ_NAME_STR"
              value="OBJECT:NAME"
              c:type="NCM_OBJ_ARRAY_OBJ_NAME_STR">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJ_ARRAY_POS_STR"
              value="ARRAY:ELEMENT"
              c:type="NCM_OBJ_ARRAY_POS_STR">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJ_ARRAY_TYPE" value="a" c:type="NCM_OBJ_ARRAY_TYPE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ODE_SPLINE_DEFAULT_ABSTOL"
              value="0.000000"
              c:type="NCM_ODE_SPLINE_DEFAULT_ABSTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="ODE_SPLINE_DEFAULT_RELTOL"
              value="0.000000"
              c:type="NCM_ODE_SPLINE_DEFAULT_RELTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="ODE_SPLINE_MIN_STEP"
              value="0.000000"
              c:type="NCM_ODE_SPLINE_MIN_STEP">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <record name="ObjArray"
            c:type="NcmObjArray"
            glib:type-name="NcmObjArray"
            glib:get-type="ncm_obj_array_get_type"
            c:symbol-prefix="obj_array">
      <constructor name="new" c:identifier="ncm_obj_array_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="ObjArray" c:type="NcmObjArray*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_variant"
                   c:identifier="ncm_obj_array_new_from_variant">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="ObjArray" c:type="NcmObjArray*"/>
        </return-value>
        <parameters>
          <parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </parameter>
          <parameter name="var" transfer-ownership="none">
            <doc xml:space="preserve">a #GVariant containing an array of objects.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="sized_new" c:identifier="ncm_obj_array_sized_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="ObjArray" c:type="NcmObjArray*"/>
        </return-value>
        <parameters>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">initial allocation size.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add" c:identifier="ncm_obj_array_add">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="oa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmObjArray.</doc>
            <type name="ObjArray" c:type="NcmObjArray*"/>
          </instance-parameter>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="ncm_obj_array_dup">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="ObjArray" c:type="NcmObjArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="oa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmObjArray.</doc>
            <type name="ObjArray" c:type="NcmObjArray*"/>
          </instance-parameter>
          <parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="ncm_obj_array_get">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="oa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmObjArray.</doc>
            <type name="ObjArray" c:type="NcmObjArray*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">object index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek" c:identifier="ncm_obj_array_peek">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="oa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmObjArray.</doc>
            <type name="ObjArray" c:type="NcmObjArray*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">object index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_obj_array_ref">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="ObjArray" c:type="NcmObjArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="oa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmObjArray.</doc>
            <type name="ObjArray" c:type="NcmObjArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save" c:identifier="ncm_obj_array_save">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="oa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmObjArray</doc>
            <type name="ObjArray" c:type="NcmObjArray*"/>
          </instance-parameter>
          <parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="save_comment" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="ser" c:identifier="ncm_obj_array_ser">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="oa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmObjArray.</doc>
            <type name="ObjArray" c:type="NcmObjArray*"/>
          </instance-parameter>
          <parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="ncm_obj_array_set">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="oa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmObjArray.</doc>
            <type name="ObjArray" c:type="NcmObjArray*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">object index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ncm_obj_array_unref">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="oa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmObjArray.</doc>
            <type name="ObjArray" c:type="NcmObjArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="clear" c:identifier="ncm_obj_array_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="oa" transfer-ownership="none">
            <doc xml:space="preserve">a pointer to a #NcmObjArray.</doc>
            <type name="ObjArray" c:type="NcmObjArray**"/>
          </parameter>
        </parameters>
      </function>
      <function name="load" c:identifier="ncm_obj_array_load">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="ObjArray" c:type="NcmObjArray*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">oa filename</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <class name="OdeSpline"
           c:symbol-prefix="ode_spline"
           c:type="NcmOdeSpline"
           parent="GObject.Object"
           glib:type-name="NcmOdeSpline"
           glib:get-type="ncm_ode_spline_get_type"
           glib:type-struct="OdeSplineClass">
      <constructor name="new" c:identifier="ncm_ode_spline_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="OdeSpline" c:type="NcmOdeSpline*"/>
        </return-value>
        <parameters>
          <parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </parameter>
          <parameter name="dydx" transfer-ownership="none" scope="notified">
            <doc xml:space="preserve">a #NcmOdeSplineDydx</doc>
            <type name="OdeSplineDydx" c:type="NcmOdeSplineDydx"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full" c:identifier="ncm_ode_spline_new_full">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="OdeSpline" c:type="NcmOdeSpline*"/>
        </return-value>
        <parameters>
          <parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </parameter>
          <parameter name="dydx" transfer-ownership="none" scope="notified">
            <doc xml:space="preserve">a #NcmOdeSplineDydx</doc>
            <type name="OdeSplineDydx" c:type="NcmOdeSplineDydx"/>
          </parameter>
          <parameter name="yi" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="xi" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="xf" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_ode_spline_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="os" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmOdeSpline</doc>
            <type name="OdeSpline" c:type="NcmOdeSpline**"/>
          </parameter>
        </parameters>
      </function>
      <method name="free" c:identifier="ncm_ode_spline_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="os" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmOdeSpline</doc>
            <type name="OdeSpline" c:type="NcmOdeSpline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="ncm_ode_spline_prepare">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="os" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmOdeSpline</doc>
            <type name="OdeSpline" c:type="NcmOdeSpline*"/>
          </instance-parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_abstol" c:identifier="ncm_ode_spline_set_abstol">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="os" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmOdeSpline</doc>
            <type name="OdeSpline" c:type="NcmOdeSpline*"/>
          </instance-parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_interval" c:identifier="ncm_ode_spline_set_interval">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="os" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmOdeSpline</doc>
            <type name="OdeSpline" c:type="NcmOdeSpline*"/>
          </instance-parameter>
          <parameter name="yi" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="xi" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="xf" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reltol" c:identifier="ncm_ode_spline_set_reltol">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="os" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmOdeSpline</doc>
            <type name="OdeSpline" c:type="NcmOdeSpline*"/>
          </instance-parameter>
          <parameter name="reltol" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_xf" c:identifier="ncm_ode_spline_set_xf">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="os" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmOdeSpline</doc>
            <type name="OdeSpline" c:type="NcmOdeSpline*"/>
          </instance-parameter>
          <parameter name="xf" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_xi" c:identifier="ncm_ode_spline_set_xi">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="os" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmOdeSpline</doc>
            <type name="OdeSpline" c:type="NcmOdeSpline*"/>
          </instance-parameter>
          <parameter name="xi" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_yi" c:identifier="ncm_ode_spline_set_yi">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="os" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmOdeSpline</doc>
            <type name="OdeSpline" c:type="NcmOdeSpline*"/>
          </instance-parameter>
          <parameter name="yi" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="abs"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="dydx"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="reltol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="spline" writable="1" transfer-ownership="none">
        <type name="Spline"/>
      </property>
      <property name="stop-hnil"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="xf" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="xi" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="yi" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="cvode" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="y" introspectable="0" readable="0" private="1">
        <type c:type="N_Vector"/>
      </field>
      <field name="y_array" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="x_array" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="xi" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="xf" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="yi" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="reltol" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="abstol" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="dydx" readable="0" private="1">
        <type name="OdeSplineDydx" c:type="NcmOdeSplineDydx"/>
      </field>
      <field name="s" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline*"/>
      </field>
      <field name="s_init" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="cvode_init" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="hnil" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="stop_hnil" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="ctrl" readable="0" private="1">
        <type name="ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
    </class>
    <record name="OdeSplineClass"
            c:type="NcmOdeSplineClass"
            glib:is-gtype-struct-for="OdeSpline">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <callback name="OdeSplineDydx" c:type="NcmOdeSplineDydx">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="y" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="userdata"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="POWSPEC_FILTER_DEFAULT_SIZE"
              value="200"
              c:type="NCM_POWSPEC_FILTER_DEFAULT_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="ParamType"
                 glib:type-name="NcmParamType"
                 glib:get-type="ncm_param_type_get_type"
                 c:type="NcmParamType">
      <doc xml:space="preserve">NcmParamType indicates if the parameter must be fitted, @NCM_PARAM_TYPE_FREE,
or if it remains fixed, @NCM_PARAM_TYPE_FIXED, when a statistical analysis is
carried out.</doc>
      <member name="free"
              value="0"
              c:identifier="NCM_PARAM_TYPE_FREE"
              glib:nick="free">
        <doc xml:space="preserve">parameter to be fitted</doc>
      </member>
      <member name="fixed"
              value="1"
              c:identifier="NCM_PARAM_TYPE_FIXED"
              glib:nick="fixed">
        <doc xml:space="preserve">fixed parameter</doc>
      </member>
    </enumeration>
    <class name="Powspec"
           c:symbol-prefix="powspec"
           c:type="NcmPowspec"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NcmPowspec"
           glib:get-type="ncm_powspec_get_type"
           glib:type-struct="PowspecClass">
      <function name="clear" c:identifier="ncm_powspec_clear">
        <doc xml:space="preserve">If @powspec is different from NULL, decreases the reference count of
@powspec by one and sets @powspec to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="eval" invoker="eval">
        <doc xml:space="preserve">Evaluates the power spectrum @powspec at $(z, k)$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$P(z, k)$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_vec" invoker="eval_vec">
        <doc xml:space="preserve">Evaluates the power spectrum @powspec at $z$ and in the knots
contained in @k and puts the result in @Pk.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="Pk"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_nknots" invoker="get_nknots">
        <doc xml:space="preserve">Gets the number of knots used to calculate the power spectrum.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
          <parameter name="Nz"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">number of knots in $z$</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="Nk"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">number of knots in $k$</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare" invoker="prepare">
        <doc xml:space="preserve">Prepares the power spectrum @powspec using the model @model.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="eval" c:identifier="ncm_powspec_eval">
        <doc xml:space="preserve">Evaluates the power spectrum @powspec at $(z, k)$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$P(z, k)$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_vec" c:identifier="ncm_powspec_eval_vec">
        <doc xml:space="preserve">Evaluates the power spectrum @powspec at $z$ and in the knots
contained in @k and puts the result in @Pk.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="Pk"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_powspec_free">
        <doc xml:space="preserve">Decreases the reference count of @powspec by one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kmax" c:identifier="ncm_powspec_get_kmax">
        <doc xml:space="preserve">Gets the maximum mode value $k_\mathrm{max}$.</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kmin" c:identifier="ncm_powspec_get_kmin">
        <doc xml:space="preserve">Gets the minimum mode value $k_\mathrm{min}$.</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nknots" c:identifier="ncm_powspec_get_nknots">
        <doc xml:space="preserve">Gets the number of knots used to calculate the power spectrum.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
          <parameter name="Nz"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">number of knots in $z$</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="Nk"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">number of knots in $k$</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_zf" c:identifier="ncm_powspec_get_zf">
        <doc xml:space="preserve">Gets the final value $z_f$.</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_zi" c:identifier="ncm_powspec_get_zi">
        <doc xml:space="preserve">Gets the initial value $z_i$.</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="ncm_powspec_prepare">
        <doc xml:space="preserve">Prepares the power spectrum @powspec using the model @model.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_if_needed"
              c:identifier="ncm_powspec_prepare_if_needed">
        <doc xml:space="preserve">Prepares the object @powspec using the model @model if it was changed
since last preparation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_powspec_ref">
        <doc xml:space="preserve">Increases the reference count of @powspec by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@powspec.</doc>
          <type name="Powspec" c:type="NcmPowspec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="require_kmax" c:identifier="ncm_powspec_require_kmax">
        <doc xml:space="preserve">Sets the maximum mode value $k_\mathrm{max}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
          <parameter name="kmax" transfer-ownership="none">
            <doc xml:space="preserve">maxmimum mode $k_\mathrm{max}$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="require_kmin" c:identifier="ncm_powspec_require_kmin">
        <doc xml:space="preserve">Requires the minimum mode value to be less or equal to $k_\mathrm{min}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
          <parameter name="kmin" transfer-ownership="none">
            <doc xml:space="preserve">minimum mode $k_\mathrm{min}$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="require_zf" c:identifier="ncm_powspec_require_zf">
        <doc xml:space="preserve">Requires the final redshift to be greater or equal to $z_f$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
          <parameter name="zf" transfer-ownership="none">
            <doc xml:space="preserve">final redshift $z_f$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="require_zi" c:identifier="ncm_powspec_require_zi">
        <doc xml:space="preserve">Requires the initial redshift to be less or equal to $z_i$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
          <parameter name="zi" transfer-ownership="none">
            <doc xml:space="preserve">initial redshift $z_i$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_kmax" c:identifier="ncm_powspec_set_kmax">
        <doc xml:space="preserve">Sets the maximum mode value $k_\mathrm{max}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
          <parameter name="kmax" transfer-ownership="none">
            <doc xml:space="preserve">maxmimum mode $k_\mathrm{max}$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_kmin" c:identifier="ncm_powspec_set_kmin">
        <doc xml:space="preserve">Sets the minimum mode value $k_\mathrm{min}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
          <parameter name="kmin" transfer-ownership="none">
            <doc xml:space="preserve">minimum mode $k_\mathrm{min}$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_zf" c:identifier="ncm_powspec_set_zf">
        <doc xml:space="preserve">Sets the final redshift $z_f$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
          <parameter name="zf" transfer-ownership="none">
            <doc xml:space="preserve">final redshift $z_f$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_zi" c:identifier="ncm_powspec_set_zi">
        <doc xml:space="preserve">Sets the initial redshift $z_i$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="powspec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </instance-parameter>
          <parameter name="zi" transfer-ownership="none">
            <doc xml:space="preserve">initial redshift $z_i$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="kmax"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="kmin"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="zf" writable="1" construct="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="zi" writable="1" construct="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="zi" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="zf" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="kmin" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="kmax" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="ctrl" readable="0" private="1">
        <type name="ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
    </class>
    <record name="PowspecClass"
            c:type="NcmPowspecClass"
            glib:is-gtype-struct-for="Powspec">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="prepare">
        <callback name="prepare">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="powspec" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmPowspec</doc>
              <type name="Powspec" c:type="NcmPowspec*"/>
            </parameter>
            <parameter name="model" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmModel</doc>
              <type name="Model" c:type="NcmModel*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval">
        <callback name="eval">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">$P(z, k)$.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="powspec" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmPowspec</doc>
              <type name="Powspec" c:type="NcmPowspec*"/>
            </parameter>
            <parameter name="model" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmModel</doc>
              <type name="Model" c:type="NcmModel*"/>
            </parameter>
            <parameter name="z" transfer-ownership="none">
              <doc xml:space="preserve">redshift $z$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">mode $k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_vec">
        <callback name="eval_vec">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="powspec" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmPowspec</doc>
              <type name="Powspec" c:type="NcmPowspec*"/>
            </parameter>
            <parameter name="model" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmModel</doc>
              <type name="Model" c:type="NcmModel*"/>
            </parameter>
            <parameter name="z" transfer-ownership="none">
              <doc xml:space="preserve">redshift $z$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmVector</doc>
              <type name="Vector" c:type="NcmVector*"/>
            </parameter>
            <parameter name="Pk"
                       direction="out"
                       caller-allocates="1"
                       transfer-ownership="none">
              <doc xml:space="preserve">a #NcmVector</doc>
              <type name="Vector" c:type="NcmVector*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_nknots">
        <callback name="get_nknots">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="powspec" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmPowspec</doc>
              <type name="Powspec" c:type="NcmPowspec*"/>
            </parameter>
            <parameter name="Nz"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">number of knots in $z$</doc>
              <type name="guint" c:type="guint*"/>
            </parameter>
            <parameter name="Nk"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">number of knots in $k$</doc>
              <type name="guint" c:type="guint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PowspecFilter"
           c:symbol-prefix="powspec_filter"
           c:type="NcmPowspecFilter"
           parent="GObject.Object"
           glib:type-name="NcmPowspecFilter"
           glib:get-type="ncm_powspec_filter_get_type"
           glib:type-struct="PowspecFilterClass">
      <constructor name="new" c:identifier="ncm_powspec_filter_new">
        <doc xml:space="preserve">Creates a new #NcmPowspecFilter from the power spectrum @ps.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcmPowspecFilter.</doc>
          <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
        </return-value>
        <parameters>
          <parameter name="ps" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspec</doc>
            <type name="Powspec" c:type="NcmPowspec*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">a type from #NcmPowspecFilterType</doc>
            <type name="PowspecFilterType" c:type="NcmPowspecFilterType"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_powspec_filter_clear">
        <doc xml:space="preserve">If @psf is different from NULL, decreases the reference count of
@psf by one and sets @fftlog to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter**"/>
          </parameter>
        </parameters>
      </function>
      <method name="eval_dlnvar_dlnr"
              c:identifier="ncm_powspec_filter_eval_dlnvar_dlnr">
        <doc xml:space="preserve">Evaluate the filtered variance at @lnr.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="lnr" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of $r$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_dlnvar_dr"
              c:identifier="ncm_powspec_filter_eval_dlnvar_dr">
        <doc xml:space="preserve">Evaluates the filtered variance at @lnr.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="lnr" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of $r$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_dnlnvar_dlnrn"
              c:identifier="ncm_powspec_filter_eval_dnlnvar_dlnrn">
        <doc xml:space="preserve">Evaluates the filtered variance at @lnr.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="lnr" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of $r$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">number of derivatives</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_dnvar_dlnrn"
              c:identifier="ncm_powspec_filter_eval_dnvar_dlnrn">
        <doc xml:space="preserve">Evaluates the derivative of the filtered variance at @lnr and @z, namely:
- @n = 0: $\sigma(r, z)^2$,
- @n = 1: $\frac{d\sigma^2}{d\ln r}$,
- @n = 2: $\frac{d^2\sigma^2}{d(\ln r)^2}$,
- @n = 3: $\frac{d^3\sigma^2}{d(\ln r)^3}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="lnr" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of $r$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">number of derivatives</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_dvar_dlnr"
              c:identifier="ncm_powspec_filter_eval_dvar_dlnr">
        <doc xml:space="preserve">Evaluates the filtered variance at @lnr.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="lnr" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of $r$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_lnvar_lnr"
              c:identifier="ncm_powspec_filter_eval_lnvar_lnr">
        <doc xml:space="preserve">Evaluates the logarithm base e of the filtered power spectrum at @lnr and @z.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="lnr" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of $r$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_sigma" c:identifier="ncm_powspec_filter_eval_sigma">
        <doc xml:space="preserve">Evaluates the filtered variance at @r.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="r" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_sigma_lnr"
              c:identifier="ncm_powspec_filter_eval_sigma_lnr">
        <doc xml:space="preserve">Evaluate the suare root of the filtered power spectrum at @lnr and @z.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="lnr" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of $r$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_var" c:identifier="ncm_powspec_filter_eval_var">
        <doc xml:space="preserve">Evaluate the filtered variance at @r.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="r" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_var_lnr"
              c:identifier="ncm_powspec_filter_eval_var_lnr">
        <doc xml:space="preserve">Evaluates the filtered power spectrum at @lnr and @z.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="lnr" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of $r$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_powspec_filter_free">
        <doc xml:space="preserve">Decreases the reference count of @psf by one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_r_max" c:identifier="ncm_powspec_filter_get_r_max">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_r_min" c:identifier="ncm_powspec_filter_get_r_min">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="ncm_powspec_filter_prepare">
        <doc xml:space="preserve">Prepares the object applying the filter to the power spectrum.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_if_needed"
              c:identifier="ncm_powspec_filter_prepare_if_needed">
        <doc xml:space="preserve">Prepares (if necessary) the object applying the filter to the power spectrum.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_powspec_filter_ref">
        <doc xml:space="preserve">Increases the reference count of @psf by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@psf</doc>
          <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_best_lnr0"
              c:identifier="ncm_powspec_filter_set_best_lnr0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_lnr0" c:identifier="ncm_powspec_filter_set_lnr0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
          <parameter name="lnr0" transfer-ownership="none">
            <doc xml:space="preserve">the output center value $\ln(r_0)$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_type" c:identifier="ncm_powspec_filter_set_type">
        <doc xml:space="preserve">Sets the @type of the #NcmPowspecFilter to be used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">a type from #NcmPowspecFilterType</doc>
            <type name="PowspecFilterType" c:type="NcmPowspecFilterType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_zf" c:identifier="ncm_powspec_filter_set_zf">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
          <parameter name="zf" transfer-ownership="none">
            <doc xml:space="preserve">the output final time $z_f$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_zi" c:identifier="ncm_powspec_filter_set_zi">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
          <parameter name="zi" transfer-ownership="none">
            <doc xml:space="preserve">the output initial time $z_i$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="volume_rm3" c:identifier="ncm_powspec_filter_volume_rm3">
        <doc xml:space="preserve">Calculates the volume of the filter over $r^3$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Filter's volume over the radius squared $V r^{-3}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter</doc>
            <type name="PowspecFilter" c:type="NcmPowspecFilter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="lnr0" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="powerspectrum"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Powspec"/>
      </property>
      <property name="reltol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="type"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="PowspecFilterType"/>
      </property>
      <property name="zf" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="zi" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="ps" readable="0" private="1">
        <type name="Powspec" c:type="NcmPowspec*"/>
      </field>
      <field name="type" readable="0" private="1">
        <type name="PowspecFilterType" c:type="NcmPowspecFilterType"/>
      </field>
      <field name="fftlog" readable="0" private="1">
        <type name="Fftlog" c:type="NcmFftlog*"/>
      </field>
      <field name="lnr0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lnk0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="Lk" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="zi" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="zf" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="calibrated" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="reltol" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="var" readable="0" private="1">
        <type name="Spline2d" c:type="NcmSpline2d*"/>
      </field>
      <field name="dvar" readable="0" private="1">
        <type name="Spline2d" c:type="NcmSpline2d*"/>
      </field>
      <field name="ctrl" readable="0" private="1">
        <type name="ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
      <field name="constructed" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="PowspecFilterClass"
            c:type="NcmPowspecFilterClass"
            glib:is-gtype-struct-for="PowspecFilter">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="PowspecFilterType"
                 glib:type-name="NcmPowspecFilterType"
                 glib:get-type="ncm_powspec_filter_type_get_type"
                 c:type="NcmPowspecFilterType">
      <doc xml:space="preserve">Filter type to apply to the power spectrum.
See also #NcmFftlogTophatwin2 and #NcmFftlogGausswin2, for the top-hat and Gaussian filters, respectively.</doc>
      <member name="tophat"
              value="0"
              c:identifier="NCM_POWSPEC_FILTER_TYPE_TOPHAT"
              glib:nick="tophat">
        <doc xml:space="preserve">Apply the top-hat filter</doc>
      </member>
      <member name="gauss"
              value="1"
              c:identifier="NCM_POWSPEC_FILTER_TYPE_GAUSS"
              glib:nick="gauss">
        <doc xml:space="preserve">Apply the Gaussian filter</doc>
      </member>
    </enumeration>
    <class name="Prior"
           c:symbol-prefix="prior"
           c:type="NcmPrior"
           parent="MSetFunc"
           glib:type-name="NcmPrior"
           glib:get-type="ncm_prior_get_type"
           glib:type-struct="PriorClass">
      <function name="clear" c:identifier="ncm_prior_clear">
        <doc xml:space="preserve">Decreases the reference count of *@prior and sets *@prior to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="prior" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPrior</doc>
            <type name="Prior" c:type="NcmPrior**"/>
          </parameter>
        </parameters>
      </function>
      <method name="free" c:identifier="ncm_prior_free">
        <doc xml:space="preserve">Decreases the reference count of @prior atomically.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="prior" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPrior</doc>
            <type name="Prior" c:type="NcmPrior*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_m2lnL" c:identifier="ncm_prior_is_m2lnL">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the prior calculates $-2\ln(L_\mathrm{prior})$ and FALSE
if it returns $f$ such that $-2\ln(L_\mathrm{prior}) = f^2$.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="prior" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPrior</doc>
            <type name="Prior" c:type="NcmPrior*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_prior_ref">
        <doc xml:space="preserve">Increases the reference count of @prior atomically.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@prior.</doc>
          <type name="Prior" c:type="NcmPrior*"/>
        </return-value>
        <parameters>
          <instance-parameter name="prior" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPrior</doc>
            <type name="Prior" c:type="NcmPrior*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="MSetFunc" c:type="NcmMSetFunc"/>
      </field>
    </class>
    <record name="PriorClass"
            c:type="NcmPriorClass"
            glib:is-gtype-struct-for="Prior">
      <field name="parent_class" readable="0" private="1">
        <type name="MSetFuncClass" c:type="NcmMSetFuncClass"/>
      </field>
      <field name="is_m2lnL" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <class name="PriorFlat"
           c:symbol-prefix="prior_flat"
           c:type="NcmPriorFlat"
           parent="Prior"
           glib:type-name="NcmPriorFlat"
           glib:get-type="ncm_prior_flat_get_type"
           glib:type-struct="PriorFlatClass">
      <function name="clear" c:identifier="ncm_prior_flat_clear">
        <doc xml:space="preserve">Decreases the reference count of *@pf and sets *@pf to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPriorFlat</doc>
            <type name="PriorFlat" c:type="NcmPriorFlat**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="mean">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="pf" transfer-ownership="none">
            <type name="PriorFlat" c:type="NcmPriorFlat*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="free" c:identifier="ncm_prior_flat_free">
        <doc xml:space="preserve">Decreases the reference count of @pf atomically.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPriorFlat</doc>
            <type name="PriorFlat" c:type="NcmPriorFlat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_prior_flat_ref">
        <doc xml:space="preserve">Increases the reference count of @pf atomically.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@pf.</doc>
          <type name="PriorFlat" c:type="NcmPriorFlat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPriorFlat</doc>
            <type name="PriorFlat" c:type="NcmPriorFlat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="scale"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="variable"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="x-low"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="x-upp"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Prior" c:type="NcmPrior"/>
      </field>
      <field name="x_low" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="x_upp" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="s" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="var" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="PriorFlatClass"
            c:type="NcmPriorFlatClass"
            glib:is-gtype-struct-for="PriorFlat">
      <field name="parent_class" readable="0" private="1">
        <type name="PriorClass" c:type="NcmPriorClass"/>
      </field>
      <field name="mean" readable="0" private="1">
        <type name="PriorFlatMean" c:type="NcmPriorFlatMean"/>
      </field>
    </record>
    <class name="PriorFlatFunc"
           c:symbol-prefix="prior_flat_func"
           c:type="NcmPriorFlatFunc"
           parent="PriorFlat"
           glib:type-name="NcmPriorFlatFunc"
           glib:get-type="ncm_prior_flat_func_get_type"
           glib:type-struct="PriorFlatFuncClass">
      <constructor name="new" c:identifier="ncm_prior_flat_func_new">
        <doc xml:space="preserve">Creates a new Flat prior for parameter @pid of model @mid.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@pff.</doc>
          <type name="PriorFlatFunc" c:type="NcmPriorFlatFunc*"/>
        </return-value>
        <parameters>
          <parameter name="mean_func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </parameter>
          <parameter name="x_low" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x_upp" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="variable" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_prior_flat_func_clear">
        <doc xml:space="preserve">Decreases the reference count of *@pff and sets *@pff to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pff" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPriorFlatFunc</doc>
            <type name="PriorFlatFunc" c:type="NcmPriorFlatFunc**"/>
          </parameter>
        </parameters>
      </function>
      <method name="free" c:identifier="ncm_prior_flat_func_free">
        <doc xml:space="preserve">Decreases the reference count of @pff atomically.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pff" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPriorFlatFunc</doc>
            <type name="PriorFlatFunc" c:type="NcmPriorFlatFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_prior_flat_func_ref">
        <doc xml:space="preserve">Increases the reference count of @pff atomically.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@pff.</doc>
          <type name="PriorFlatFunc" c:type="NcmPriorFlatFunc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pff" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPriorFlatFunc</doc>
            <type name="PriorFlatFunc" c:type="NcmPriorFlatFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="mean-func"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="MSetFunc"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="PriorFlat" c:type="NcmPriorFlat"/>
      </field>
      <field name="mean_func" readable="0" private="1">
        <type name="MSetFunc" c:type="NcmMSetFunc*"/>
      </field>
    </class>
    <record name="PriorFlatFuncClass"
            c:type="NcmPriorFlatFuncClass"
            glib:is-gtype-struct-for="PriorFlatFunc">
      <field name="parent_class" readable="0" private="1">
        <type name="PriorFlatClass" c:type="NcmPriorFlatClass"/>
      </field>
    </record>
    <callback name="PriorFlatMean" c:type="NcmPriorFlatMean">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="pf" transfer-ownership="none">
          <type name="PriorFlat" c:type="NcmPriorFlat*"/>
        </parameter>
        <parameter name="mset" transfer-ownership="none">
          <type name="MSet" c:type="NcmMSet*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="PriorFlatParam"
           c:symbol-prefix="prior_flat_param"
           c:type="NcmPriorFlatParam"
           parent="PriorFlat"
           glib:type-name="NcmPriorFlatParam"
           glib:get-type="ncm_prior_flat_param_get_type"
           glib:type-struct="PriorFlatParamClass">
      <constructor name="new" c:identifier="ncm_prior_flat_param_new">
        <doc xml:space="preserve">Creates a new Flat prior for parameter @pid of model @mid.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@pfp.</doc>
          <type name="PriorFlatParam" c:type="NcmPriorFlatParam*"/>
        </return-value>
        <parameters>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">model id</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="x_low" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x_upp" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_name"
                   c:identifier="ncm_prior_flat_param_new_name">
        <doc xml:space="preserve">Creates a new Flat prior for parameter named @name in @mset.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@pfp.</doc>
          <type name="PriorFlatParam" c:type="NcmPriorFlatParam*"/>
        </return-value>
        <parameters>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">parameter name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="x_low" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x_upp" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_pindex"
                   c:identifier="ncm_prior_flat_param_new_pindex">
        <doc xml:space="preserve">Creates a new Flat prior for parameter @pid of model @mid.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@pfp.</doc>
          <type name="PriorFlatParam" c:type="NcmPriorFlatParam*"/>
        </return-value>
        <parameters>
          <parameter name="pi" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetPIndex</doc>
            <type name="MSetPIndex" c:type="const NcmMSetPIndex*"/>
          </parameter>
          <parameter name="x_low" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x_upp" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_prior_flat_param_clear">
        <doc xml:space="preserve">Decreases the reference count of *@pfp and sets *@pfp to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPriorFlatParam</doc>
            <type name="PriorFlatParam" c:type="NcmPriorFlatParam**"/>
          </parameter>
        </parameters>
      </function>
      <method name="free" c:identifier="ncm_prior_flat_param_free">
        <doc xml:space="preserve">Decreases the reference count of @pfp atomically.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPriorFlatParam</doc>
            <type name="PriorFlatParam" c:type="NcmPriorFlatParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_prior_flat_param_ref">
        <doc xml:space="preserve">Increases the reference count of @pfp atomically.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@pfp.</doc>
          <type name="PriorFlatParam" c:type="NcmPriorFlatParam*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPriorFlatParam</doc>
            <type name="PriorFlatParam" c:type="NcmPriorFlatParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="mid"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="pid"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="PriorFlat" c:type="NcmPriorFlat"/>
      </field>
      <field name="mid" readable="0" private="1">
        <type name="ModelID" c:type="NcmModelID"/>
      </field>
      <field name="pid" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="PriorFlatParamClass"
            c:type="NcmPriorFlatParamClass"
            glib:is-gtype-struct-for="PriorFlatParam">
      <field name="parent_class" readable="0" private="1">
        <type name="PriorFlatClass" c:type="NcmPriorFlatClass"/>
      </field>
    </record>
    <class name="PriorGauss"
           c:symbol-prefix="prior_gauss"
           c:type="NcmPriorGauss"
           parent="Prior"
           glib:type-name="NcmPriorGauss"
           glib:get-type="ncm_prior_gauss_get_type"
           glib:type-struct="PriorGaussClass">
      <function name="clear" c:identifier="ncm_prior_gauss_clear">
        <doc xml:space="preserve">Decreases the reference count of *@pg and sets *@pg to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pg" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPriorGauss</doc>
            <type name="PriorGauss" c:type="NcmPriorGauss**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="mean">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="pg" transfer-ownership="none">
            <type name="PriorGauss" c:type="NcmPriorGauss*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="free" c:identifier="ncm_prior_gauss_free">
        <doc xml:space="preserve">Decreases the reference count of @pg atomically.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pg" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPriorGauss</doc>
            <type name="PriorGauss" c:type="NcmPriorGauss*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_prior_gauss_ref">
        <doc xml:space="preserve">Increases the reference count of @pg atomically.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@pg.</doc>
          <type name="PriorGauss" c:type="NcmPriorGauss*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pg" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPriorGauss</doc>
            <type name="PriorGauss" c:type="NcmPriorGauss*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="mu" writable="1" construct="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="sigma"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="variable"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Prior" c:type="NcmPrior"/>
      </field>
      <field name="mu" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="sigma" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="var" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="PriorGaussClass"
            c:type="NcmPriorGaussClass"
            glib:is-gtype-struct-for="PriorGauss">
      <field name="parent_class" readable="0" private="1">
        <type name="PriorClass" c:type="NcmPriorClass"/>
      </field>
      <field name="mean" readable="0" private="1">
        <type name="PriorGaussMean" c:type="NcmPriorGaussMean"/>
      </field>
    </record>
    <class name="PriorGaussFunc"
           c:symbol-prefix="prior_gauss_func"
           c:type="NcmPriorGaussFunc"
           parent="PriorGauss"
           glib:type-name="NcmPriorGaussFunc"
           glib:get-type="ncm_prior_gauss_func_get_type"
           glib:type-struct="PriorGaussFuncClass">
      <constructor name="new" c:identifier="ncm_prior_gauss_func_new">
        <doc xml:space="preserve">Creates a new Gaussiam prior for parameter @pid of model @mid.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@pgf.</doc>
          <type name="PriorGaussFunc" c:type="NcmPriorGaussFunc*"/>
        </return-value>
        <parameters>
          <parameter name="mean_func" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetFunc</doc>
            <type name="MSetFunc" c:type="NcmMSetFunc*"/>
          </parameter>
          <parameter name="mu" transfer-ownership="none">
            <doc xml:space="preserve">mean</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="sigma" transfer-ownership="none">
            <doc xml:space="preserve">standard deviation</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="var" transfer-ownership="none">
            <doc xml:space="preserve">variable</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_prior_gauss_func_clear">
        <doc xml:space="preserve">Decreases the reference count of *@pgf and sets *@pgf to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pgf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPriorGaussFunc</doc>
            <type name="PriorGaussFunc" c:type="NcmPriorGaussFunc**"/>
          </parameter>
        </parameters>
      </function>
      <method name="free" c:identifier="ncm_prior_gauss_func_free">
        <doc xml:space="preserve">Decreases the reference count of @pgf atomically.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pgf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPriorGaussFunc</doc>
            <type name="PriorGaussFunc" c:type="NcmPriorGaussFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_prior_gauss_func_ref">
        <doc xml:space="preserve">Increases the reference count of @pgf atomically.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@pgf.</doc>
          <type name="PriorGaussFunc" c:type="NcmPriorGaussFunc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pgf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPriorGaussFunc</doc>
            <type name="PriorGaussFunc" c:type="NcmPriorGaussFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="mean-func"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="MSetFunc"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="PriorGauss" c:type="NcmPriorGauss"/>
      </field>
      <field name="mean_func" readable="0" private="1">
        <type name="MSetFunc" c:type="NcmMSetFunc*"/>
      </field>
    </class>
    <record name="PriorGaussFuncClass"
            c:type="NcmPriorGaussFuncClass"
            glib:is-gtype-struct-for="PriorGaussFunc">
      <field name="parent_class" readable="0" private="1">
        <type name="PriorGaussClass" c:type="NcmPriorGaussClass"/>
      </field>
    </record>
    <callback name="PriorGaussMean" c:type="NcmPriorGaussMean">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="pg" transfer-ownership="none">
          <type name="PriorGauss" c:type="NcmPriorGauss*"/>
        </parameter>
        <parameter name="mset" transfer-ownership="none">
          <type name="MSet" c:type="NcmMSet*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="PriorGaussParam"
           c:symbol-prefix="prior_gauss_param"
           c:type="NcmPriorGaussParam"
           parent="PriorGauss"
           glib:type-name="NcmPriorGaussParam"
           glib:get-type="ncm_prior_gauss_param_get_type"
           glib:type-struct="PriorGaussParamClass">
      <constructor name="new" c:identifier="ncm_prior_gauss_param_new">
        <doc xml:space="preserve">Creates a new Gaussian prior for parameter @pid of model @mid.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@pgp.</doc>
          <type name="PriorGaussParam" c:type="NcmPriorGaussParam*"/>
        </return-value>
        <parameters>
          <parameter name="mid" transfer-ownership="none">
            <doc xml:space="preserve">model id</doc>
            <type name="ModelID" c:type="NcmModelID"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="mu" transfer-ownership="none">
            <doc xml:space="preserve">mean</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="sigma" transfer-ownership="none">
            <doc xml:space="preserve">standard deviation</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_name"
                   c:identifier="ncm_prior_gauss_param_new_name">
        <doc xml:space="preserve">Creates a new Gaussian prior for parameter named @name in @mset.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@pgp.</doc>
          <type name="PriorGaussParam" c:type="NcmPriorGaussParam*"/>
        </return-value>
        <parameters>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">parameter name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="mu" transfer-ownership="none">
            <doc xml:space="preserve">mean</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="sigma" transfer-ownership="none">
            <doc xml:space="preserve">standard deviation</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_pindex"
                   c:identifier="ncm_prior_gauss_param_new_pindex">
        <doc xml:space="preserve">Creates a new Gaussian prior for parameter @pid of model @mid.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@pgp.</doc>
          <type name="PriorGaussParam" c:type="NcmPriorGaussParam*"/>
        </return-value>
        <parameters>
          <parameter name="pi" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetPIndex</doc>
            <type name="MSetPIndex" c:type="const NcmMSetPIndex*"/>
          </parameter>
          <parameter name="mu" transfer-ownership="none">
            <doc xml:space="preserve">mean</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="sigma" transfer-ownership="none">
            <doc xml:space="preserve">standard deviation</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_prior_gauss_param_clear">
        <doc xml:space="preserve">Decreases the reference count of *@pgp and sets *@pgp to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pgp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPriorGaussParam</doc>
            <type name="PriorGaussParam" c:type="NcmPriorGaussParam**"/>
          </parameter>
        </parameters>
      </function>
      <method name="free" c:identifier="ncm_prior_gauss_param_free">
        <doc xml:space="preserve">Decreases the reference count of @pgp atomically.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pgp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPriorGaussParam</doc>
            <type name="PriorGaussParam" c:type="NcmPriorGaussParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_prior_gauss_param_ref">
        <doc xml:space="preserve">Increases the reference count of @pgp atomically.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@pgp.</doc>
          <type name="PriorGaussParam" c:type="NcmPriorGaussParam*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pgp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPriorGaussParam</doc>
            <type name="PriorGaussParam" c:type="NcmPriorGaussParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="mid"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="pid"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="PriorGauss" c:type="NcmPriorGauss"/>
      </field>
      <field name="mid" readable="0" private="1">
        <type name="ModelID" c:type="NcmModelID"/>
      </field>
      <field name="pid" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="PriorGaussParamClass"
            c:type="NcmPriorGaussParamClass"
            glib:is-gtype-struct-for="PriorGaussParam">
      <field name="parent_class" readable="0" private="1">
        <type name="PriorGaussClass" c:type="NcmPriorGaussClass"/>
      </field>
    </record>
    <record name="QuadFilon" c:type="NcmQuadFilon">
      <doc xml:space="preserve">FIXME</doc>
      <field name="omega" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="psi" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="range" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="order" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="inter_n" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="n" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="vandermonde" introspectable="0" readable="0" private="1">
        <type c:type="gsl_matrix*"/>
      </field>
      <field name="vandermonde_lu" introspectable="0" readable="0" private="1">
        <type c:type="gsl_matrix*"/>
      </field>
      <field name="lu_p" introspectable="0" readable="0" private="1">
        <type c:type="gsl_permutation*"/>
      </field>
      <field name="lu_s" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="inter_point" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector*"/>
      </field>
      <field name="dxnm_1" introspectable="0" readable="0" private="1">
        <type c:type="gsl_matrix*"/>
      </field>
      <field name="dxnm_m1" introspectable="0" readable="0" private="1">
        <type c:type="gsl_matrix*"/>
      </field>
      <field name="dPn_1" introspectable="0" readable="0" private="1">
        <type c:type="gsl_matrix*"/>
      </field>
      <field name="dPn_m1" introspectable="0" readable="0" private="1">
        <type c:type="gsl_matrix*"/>
      </field>
      <field name="Re_mu" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector*"/>
      </field>
      <field name="Im_mu" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector*"/>
      </field>
      <field name="Re_b" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector*"/>
      </field>
      <field name="Im_b" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector*"/>
      </field>
      <field name="residual" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector*"/>
      </field>
      <field name="err" readable="0" private="1">
        <type name="QuadFilonError" c:type="NcmQuadFilonError"/>
      </field>
    </record>
    <record name="QuadFilonError" c:type="NcmQuadFilonError">
      <doc xml:space="preserve">FIXME</doc>
      <field name="vandermonde" introspectable="0" readable="0" private="1">
        <type c:type="gsl_matrix*"/>
      </field>
      <field name="lu_p" introspectable="0" readable="0" private="1">
        <type c:type="gsl_permutation*"/>
      </field>
      <field name="lu_s" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="inter_point" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector*"/>
      </field>
      <field name="dPn_1" introspectable="0" readable="0" private="1">
        <type c:type="gsl_matrix*"/>
      </field>
      <field name="dPn_m1" introspectable="0" readable="0" private="1">
        <type c:type="gsl_matrix*"/>
      </field>
    </record>
    <record name="Quaternion"
            c:type="NcmQuaternion"
            glib:type-name="NcmQuaternion"
            glib:get-type="ncm_quaternion_get_type"
            c:symbol-prefix="quaternion">
      <field name="s" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="v" readable="0" private="1">
        <type name="TriVec" c:type="NcmTriVec"/>
      </field>
      <constructor name="new" c:identifier="ncm_quaternion_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Quaternion" c:type="NcmQuaternion*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_data"
                   c:identifier="ncm_quaternion_new_from_data">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Quaternion" c:type="NcmQuaternion*"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_vector"
                   c:identifier="ncm_quaternion_new_from_vector">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Quaternion" c:type="NcmQuaternion*"/>
        </return-value>
        <parameters>
          <parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmTriVec</doc>
            <type name="TriVec" c:type="NcmTriVec*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="conjugate" c:identifier="ncm_quaternion_conjugate">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="conjugate_q_mul"
              c:identifier="ncm_quaternion_conjugate_q_mul">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </instance-parameter>
          <parameter name="u" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </parameter>
        </parameters>
      </method>
      <method name="conjugate_u_mul"
              c:identifier="ncm_quaternion_conjugate_u_mul">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </instance-parameter>
          <parameter name="u" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="ncm_quaternion_dup">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Quaternion" c:type="NcmQuaternion*"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmQuaternion</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_quaternion_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmQuaternion</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="inv_rotate" c:identifier="ncm_quaternion_inv_rotate">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </instance-parameter>
          <parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="TriVec" c:type="NcmTriVec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lmul" c:identifier="ncm_quaternion_lmul">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </instance-parameter>
          <parameter name="u" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </parameter>
        </parameters>
      </method>
      <method name="memcpy" c:identifier="ncm_quaternion_memcpy">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmQuaternion</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </instance-parameter>
          <parameter name="orig" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmQuaternion</doc>
            <type name="Quaternion" c:type="const NcmQuaternion*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mul" c:identifier="ncm_quaternion_mul">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </instance-parameter>
          <parameter name="u" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </parameter>
        </parameters>
      </method>
      <method name="norm" c:identifier="ncm_quaternion_norm">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="normalize" c:identifier="ncm_quaternion_normalize">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rmul" c:identifier="ncm_quaternion_rmul">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </instance-parameter>
          <parameter name="u" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rotate" c:identifier="ncm_quaternion_rotate">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </instance-parameter>
          <parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="TriVec" c:type="NcmTriVec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_0" c:identifier="ncm_quaternion_set_0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_I" c:identifier="ncm_quaternion_set_I">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_from_data" c:identifier="ncm_quaternion_set_from_data">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_random" c:identifier="ncm_quaternion_set_random">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Quaternion" c:type="NcmQuaternion*"/>
          </instance-parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <constant name="REPARAM_PARAMS_DESC_DICT_TYPE"
              value="a{u"
              c:type="NCM_REPARAM_PARAMS_DESC_DICT_TYPE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="RNG"
           c:symbol-prefix="rng"
           c:type="NcmRNG"
           parent="GObject.Object"
           glib:type-name="NcmRNG"
           glib:get-type="ncm_rng_get_type"
           glib:type-struct="RNGClass">
      <constructor name="new" c:identifier="ncm_rng_new">
        <doc xml:space="preserve">Creates a new #NcmRNG using the algorithm @algo see the list of algorithms
here ( http://www.gnu.org/software/gsl/manual/html_node/Random-number-generator-algorithms.html ).
If @algo is NULL the default algorithm and seed are used, see
( http://www.gnu.org/software/gsl/manual/html_node/Random-number-environment-variables.html\#Random-number-environment-variables )
for more details.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmRNG.</doc>
          <type name="RNG" c:type="NcmRNG*"/>
        </return-value>
        <parameters>
          <parameter name="algo"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">algorithm name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="seeded_new" c:identifier="ncm_rng_seeded_new">
        <doc xml:space="preserve">Creates a new #NcmRNG using the algorithm @algo see the list of algorithms
here ( http://www.gnu.org/software/gsl/manual/html_node/Random-number-generator-algorithms.html ).
If @algo is NULL the default algorithm is used, see
( http://www.gnu.org/software/gsl/manual/html_node/Random-number-environment-variables.html\#Random-number-environment-variables )
for more details.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmRNG.</doc>
          <type name="RNG" c:type="NcmRNG*"/>
        </return-value>
        <parameters>
          <parameter name="algo"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">algorithm name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="seed" transfer-ownership="none">
            <doc xml:space="preserve">seed used to initialize the PRNG.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_rng_clear">
        <doc xml:space="preserve">Decreases the reference count of *@rng by one and sets *@rng to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="RNG" c:type="NcmRNG**"/>
          </parameter>
        </parameters>
      </function>
      <function name="pool_get" c:identifier="ncm_rng_pool_get">
        <doc xml:space="preserve">Gets the #NcmRNG named @name from the pool. If it doesn't exists creates
one, add to the pool and returns it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the #NcmRNG named @name.</doc>
          <type name="RNG" c:type="NcmRNG*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">a string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="beta_gen" c:identifier="ncm_rng_beta_gen">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_seed" c:identifier="ncm_rng_check_seed">
        <doc xml:space="preserve">Check if the seed was already used by any #NcmRNG.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE is @seed was never used.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </instance-parameter>
          <parameter name="seed" transfer-ownership="none">
            <doc xml:space="preserve">seed for the PRNG.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="exponential_gen" c:identifier="ncm_rng_exponential_gen">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </instance-parameter>
          <parameter name="mu" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="exppow_gen" c:identifier="ncm_rng_exppow_gen">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_rng_free">
        <doc xml:space="preserve">Decreases the reference count of @rng by one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="gamma_gen" c:identifier="ncm_rng_gamma_gen">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="gaussian_gen" c:identifier="ncm_rng_gaussian_gen">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </instance-parameter>
          <parameter name="mu" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sigma" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="gaussian_tail_gen"
              c:identifier="ncm_rng_gaussian_tail_gen">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sigma" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_algo" c:identifier="ncm_rng_get_algo">
        <doc xml:space="preserve">Gets the name of the algorithm.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">algorithm name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_seed" c:identifier="ncm_rng_get_seed">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the seed used to initialize the PRNG.</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="ncm_rng_get_state">
        <doc xml:space="preserve">Gets the state of the algorithm in Base64. It can be a very large string
depending on the underlining</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">algorithm state.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="laplace_gen" c:identifier="ncm_rng_laplace_gen">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="lock" c:identifier="ncm_rng_lock">
        <doc xml:space="preserve">Locks @rng.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_rng_ref">
        <doc xml:space="preserve">Increases the reference count of @rng by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@rng.</doc>
          <type name="RNG" c:type="NcmRNG*"/>
        </return-value>
        <parameters>
          <instance-parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_algo" c:identifier="ncm_rng_set_algo">
        <doc xml:space="preserve">Sets the algorithm.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </instance-parameter>
          <parameter name="algo" transfer-ownership="none">
            <doc xml:space="preserve">algorithm name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_random_seed" c:identifier="ncm_rng_set_random_seed">
        <doc xml:space="preserve">Sets the algorithm seed using a PRNG seeded by /dev/urandom (Unix/Linux)
or current time  when the first is not available (see #g_rand_new()). If
@allow_colisions is FALSE this function will set the first unused seed
generated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </instance-parameter>
          <parameter name="allow_colisions" transfer-ownership="none">
            <doc xml:space="preserve">a gboolean.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_seed" c:identifier="ncm_rng_set_seed">
        <doc xml:space="preserve">Sets the algorithm seed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </instance-parameter>
          <parameter name="seed" transfer-ownership="none">
            <doc xml:space="preserve">seed for the PRNG.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state" c:identifier="ncm_rng_set_state">
        <doc xml:space="preserve">Sets the algorithm state.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve">algorithm state.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="uniform_gen" c:identifier="ncm_rng_uniform_gen">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </instance-parameter>
          <parameter name="xl" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="xu" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="unlock" c:identifier="ncm_rng_unlock">
        <doc xml:space="preserve">Unlocks @rng.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="algorithm"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="seed" writable="1" transfer-ownership="none">
        <type name="gulong" c:type="gulong"/>
      </property>
      <property name="state" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="r" introspectable="0" readable="0" private="1">
        <type c:type="gsl_rng*"/>
      </field>
      <field name="seed_val" readable="0" private="1">
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="seed_set" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="lock" readable="0" private="1">
        <type name="GLib.Mutex" c:type="GMutex"/>
      </field>
    </class>
    <record name="RNGClass"
            c:type="NcmRNGClass"
            glib:is-gtype-struct-for="RNG">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="seed_gen" readable="0" private="1">
        <type name="GLib.Rand" c:type="GRand*"/>
      </field>
      <field name="seed_hash" readable="0" private="1">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
    </record>
    <class name="Reparam"
           c:symbol-prefix="reparam"
           c:type="NcmReparam"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NcmReparam"
           glib:get-type="ncm_reparam_get_type"
           glib:type-struct="ReparamClass">
      <function name="clear" c:identifier="ncm_reparam_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="reparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparam</doc>
            <type name="Reparam" c:type="NcmReparam**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="jac" invoker="jac">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="reparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparam</doc>
            <type name="Reparam" c:type="NcmReparam*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="gpointer" c:type="_NcmModel*"/>
          </parameter>
          <parameter name="jac" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="new2old" invoker="new2old">
        <doc xml:space="preserve">Using the values set in the new parametrization update the
values of the original parametrization.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="reparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparam</doc>
            <type name="Reparam" c:type="NcmReparam*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="gpointer" c:type="_NcmModel*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="old2new" invoker="old2new">
        <doc xml:space="preserve">Using the values set in the original parametrization update the
values of the new parametrization.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="reparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparam</doc>
            <type name="Reparam" c:type="NcmReparam*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="gpointer" c:type="_NcmModel*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="M_old2new" c:identifier="ncm_reparam_M_old2new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparam</doc>
            <type name="Reparam" c:type="NcmReparam*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gpointer" c:type="_NcmModel*"/>
          </parameter>
          <parameter name="jac" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
          <parameter name="old_M" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
          <parameter name="new_M" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_reparam_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparam</doc>
            <type name="Reparam" c:type="NcmReparam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_compat_type"
              c:identifier="ncm_reparam_get_compat_type">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the compatible #GType for this reparametrization.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="reparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparam</doc>
            <type name="Reparam" c:type="NcmReparam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_param_desc" c:identifier="ncm_reparam_get_param_desc">
        <doc xml:space="preserve">Gets the @i-th parameter description.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The @i-th parameter description.</doc>
          <type name="SParam" c:type="NcmSParam*"/>
        </return-value>
        <parameters>
          <instance-parameter name="reparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparam</doc>
            <type name="Reparam" c:type="NcmReparam*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">index of the changed parameter.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_params_desc_dict"
              c:identifier="ncm_reparam_get_params_desc_dict">
        <doc xml:space="preserve">Returns a #GVariant containing a dictionary describing the new parameters.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #GVariant dictionary.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="reparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparam.</doc>
            <type name="Reparam" c:type="NcmReparam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="grad_old2new" c:identifier="ncm_reparam_grad_old2new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparam</doc>
            <type name="Reparam" c:type="NcmReparam*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gpointer" c:type="_NcmModel*"/>
          </parameter>
          <parameter name="jac" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
          <parameter name="old_grad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="new_grad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="index_from_name"
              c:identifier="ncm_reparam_index_from_name">
        <doc xml:space="preserve">Looks for a parameter named @param_name and returns TRUE if found. If found
puts at @i its index.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whenever the parameter is found.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="reparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparam.</doc>
            <type name="Reparam" c:type="NcmReparam*"/>
          </instance-parameter>
          <parameter name="param_name" transfer-ownership="none">
            <doc xml:space="preserve">parameter name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="i"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">parameter index.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="jac" c:identifier="ncm_reparam_jac">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparam</doc>
            <type name="Reparam" c:type="NcmReparam*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="gpointer" c:type="_NcmModel*"/>
          </parameter>
          <parameter name="jac" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new2old" c:identifier="ncm_reparam_new2old">
        <doc xml:space="preserve">Using the values set in the new parametrization update the
values of the original parametrization.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparam</doc>
            <type name="Reparam" c:type="NcmReparam*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="gpointer" c:type="_NcmModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="old2new" c:identifier="ncm_reparam_old2new">
        <doc xml:space="preserve">Using the values set in the original parametrization update the
values of the new parametrization.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparam</doc>
            <type name="Reparam" c:type="NcmReparam*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="gpointer" c:type="_NcmModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_param_desc"
              c:identifier="ncm_reparam_peek_param_desc">
        <doc xml:space="preserve">Peeks the @i-th parameter description.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The @i-th parameter description.</doc>
          <type name="SParam" c:type="NcmSParam*"/>
        </return-value>
        <parameters>
          <instance-parameter name="reparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparam</doc>
            <type name="Reparam" c:type="NcmReparam*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">index of the changed parameter.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_reparam_ref">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Reparam" c:type="NcmReparam*"/>
        </return-value>
        <parameters>
          <instance-parameter name="reparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparam</doc>
            <type name="Reparam" c:type="NcmReparam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_param_desc" c:identifier="ncm_reparam_set_param_desc">
        <doc xml:space="preserve">Change the @i-th parameter description using @sp.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparam</doc>
            <type name="Reparam" c:type="NcmReparam*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">index of the changed parameter.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="sp" transfer-ownership="none">
            <doc xml:space="preserve">#NcmSParam describing the new parameter.</doc>
            <type name="SParam" c:type="NcmSParam*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_param_desc_full"
              c:identifier="ncm_reparam_set_param_desc_full">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparam</doc>
            <type name="Reparam" c:type="NcmReparam*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">index of the changed parameter.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">#NcmSParam:name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="symbol" transfer-ownership="none">
            <doc xml:space="preserve">#NcmSParam:symbol.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="lower_bound" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:lower-bound.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="upper_bound" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:upper-bound.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:scale.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:absolute-tolerance.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="default_val" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:default-value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="ftype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmParamType.</doc>
            <type name="ParamType" c:type="NcmParamType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_params_desc_dict"
              c:identifier="ncm_reparam_set_params_desc_dict">
        <doc xml:space="preserve">Sets the new parameters descriptions using the information from @pdesc_dict.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparam.</doc>
            <type name="Reparam" c:type="NcmReparam*"/>
          </instance-parameter>
          <parameter name="pdesc_dict" transfer-ownership="none">
            <doc xml:space="preserve">a #GVariant containing the new parameters descriptions.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <property name="compat-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="length"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="params-desc" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="length" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="new_params" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="sparams" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="sparams_name_id" readable="0" private="1">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="compat_type" readable="0" private="1">
        <type name="GType" c:type="GType"/>
      </field>
    </class>
    <record name="ReparamClass"
            c:type="NcmReparamClass"
            glib:is-gtype-struct-for="Reparam">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="old2new" readable="0" private="1">
        <type name="ReparamV" c:type="NcmReparamV"/>
      </field>
      <field name="new2old" readable="0" private="1">
        <type name="ReparamV" c:type="NcmReparamV"/>
      </field>
      <field name="jac" readable="0" private="1">
        <type name="ReparamJ" c:type="NcmReparamJ"/>
      </field>
    </record>
    <callback name="ReparamJ" c:type="NcmReparamJ">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="reparam" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmReparam</doc>
          <type name="Reparam" c:type="NcmReparam*"/>
        </parameter>
        <parameter name="model"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #NcmModel</doc>
          <type name="gpointer" c:type="_NcmModel*"/>
        </parameter>
        <parameter name="jac" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmMatrix</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="ReparamLinear"
           c:symbol-prefix="reparam_linear"
           c:type="NcmReparamLinear"
           parent="Reparam"
           glib:type-name="NcmReparamLinear"
           glib:get-type="ncm_reparam_linear_get_type"
           glib:type-struct="ReparamLinearClass">
      <constructor name="new" c:identifier="ncm_reparam_linear_new">
        <doc xml:space="preserve">Creates a new reparametrization using the parameters transformation matrix
@T and the shift vector @v, i.e., the new parameters vector $\vec{p}_n$ is
given by $\vec{p}_n = T\cdot{}\vec{p} + \vec{v}$, where $p$ are the old
parameters vector.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmReparamLinear.</doc>
          <type name="ReparamLinear" c:type="NcmReparamLinear*"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">model's length.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="T" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
          <parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_compat_type"
              c:identifier="ncm_reparam_linear_set_compat_type">
        <doc xml:space="preserve">Sets the object's type compatible with this reparametrization.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="lin" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmReparamLinear</doc>
            <type name="ReparamLinear" c:type="NcmReparamLinear*"/>
          </instance-parameter>
          <parameter name="compat_type" transfer-ownership="none">
            <doc xml:space="preserve">a #GType</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <property name="matrix"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The matrix $M$.</doc>
        <type name="Matrix"/>
      </property>
      <property name="vector"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The vector $\vec{v}$.</doc>
        <type name="Vector"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Reparam" c:type="NcmReparam"/>
      </field>
      <field name="T" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="v" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="vp" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="T_LU" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="p" introspectable="0" readable="0" private="1">
        <type c:type="gsl_permutation*"/>
      </field>
      <field name="signum" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
    </class>
    <record name="ReparamLinearClass"
            c:type="NcmReparamLinearClass"
            glib:is-gtype-struct-for="ReparamLinear">
      <field name="parent_class" readable="0" private="1">
        <type name="ReparamClass" c:type="NcmReparamClass"/>
      </field>
    </record>
    <callback name="ReparamV" c:type="NcmReparamV">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="reparam" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmReparam</doc>
          <type name="Reparam" c:type="NcmReparam*"/>
        </parameter>
        <parameter name="model"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #NcmModel</doc>
          <type name="gpointer" c:type="_NcmModel*"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="SERIALIZE_AUTOSAVE_NAME"
              value="S"
              c:type="NCM_SERIALIZE_AUTOSAVE_NAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SERIALIZE_AUTOSAVE_NFORMAT"
              value="%u"
              c:type="NCM_SERIALIZE_AUTOSAVE_NFORMAT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SERIALIZE_MATRIX_TYPE"
              value="aad"
              c:type="NCM_SERIALIZE_MATRIX_TYPE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SERIALIZE_OBJECT_FORMAT"
              value="{s@"
              c:type="NCM_SERIALIZE_OBJECT_FORMAT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SERIALIZE_OBJECT_TYPE"
              value="{s"
              c:type="NCM_SERIALIZE_OBJECT_TYPE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SERIALIZE_PROPERTIES_TYPE"
              value="a"
              c:type="NCM_SERIALIZE_PROPERTIES_TYPE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SERIALIZE_PROPERTY_TYPE"
              value="{sv}"
              c:type="NCM_SERIALIZE_PROPERTY_TYPE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SERIALIZE_STRV_TYPE"
              value="as"
              c:type="NCM_SERIALIZE_STRV_TYPE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SERIALIZE_VECTOR_TYPE"
              value="ad"
              c:type="NCM_SERIALIZE_VECTOR_TYPE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <record name="SFSBesselRecur" c:type="NcmSFSBesselRecur">
      <doc xml:space="preserve">FIXME</doc>
      <field name="l" readable="0" private="1">
        <type name="gint32" c:type="gint32"/>
      </field>
      <field name="x_grid" readable="0" private="1">
        <type name="Grid" c:type="NcmGrid*"/>
      </field>
      <field name="jl" readable="0" private="1">
        <type name="gdouble" c:type="gdouble*"/>
      </field>
      <field name="jlp1" readable="0" private="1">
        <type name="gdouble" c:type="gdouble*"/>
      </field>
      <field name="prepared" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <record name="SFSphericalBesselIntSpline"
            c:type="NcmSFSphericalBesselIntSpline">
      <doc xml:space="preserve">FIXME</doc>
      <field name="x_grid" readable="0" private="1">
        <type name="Grid" c:type="NcmGrid*"/>
      </field>
      <field name="x_data" readable="0" private="1">
        <type name="gdouble" c:type="gdouble*"/>
      </field>
      <field name="dd_jl" readable="0" private="1">
        <type name="gdouble" c:type="gdouble*"/>
      </field>
      <field name="dd_jlp1" readable="0" private="1">
        <type name="gdouble" c:type="gdouble*"/>
      </field>
      <field name="dd_int_jl_x0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble*"/>
      </field>
      <field name="dd_int_jl_x1" readable="0" private="1">
        <type name="gdouble" c:type="gdouble*"/>
      </field>
      <field name="dd_int_jl_x2" readable="0" private="1">
        <type name="gdouble" c:type="gdouble*"/>
      </field>
      <field name="dd_int_jl_x3" readable="0" private="1">
        <type name="gdouble" c:type="gdouble*"/>
      </field>
      <field name="jl" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline*"/>
      </field>
      <field name="jlp1" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline*"/>
      </field>
      <field name="int_jl_xn" readable="0" private="1">
        <array zero-terminated="0" c:type="NcmSpline" fixed-size="4">
          <type name="Spline" c:type="NcmSpline*"/>
        </array>
      </field>
      <field name="xnjlrec" readable="0" private="1">
        <type name="SFSphericalBesselIntegRecur"
              c:type="NcmSFSphericalBesselIntegRecur*"/>
      </field>
      <field name="prepared" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <record name="SFSphericalBesselIntegRecur"
            c:type="NcmSFSphericalBesselIntegRecur">
      <doc xml:space="preserve">FIXME</doc>
      <field name="jlrec" readable="0" private="1">
        <type name="SFSBesselRecur" c:type="NcmSFSBesselRecur*"/>
      </field>
      <field name="int_jl_xn" readable="0" private="1">
        <array zero-terminated="0" c:type="gdouble" fixed-size="4">
          <type name="gdouble" c:type="gdouble*"/>
        </array>
      </field>
      <field name="int_jlp1_xn" readable="0" private="1">
        <array zero-terminated="0" c:type="gdouble" fixed-size="4">
          <type name="gdouble" c:type="gdouble*"/>
        </array>
      </field>
      <field name="prepared" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <constant name="SPHERE_MAP_PIX_DEFAULT_SIGNAL"
              value="SIGNAL"
              c:type="NCM_SPHERE_MAP_PIX_DEFAULT_SIGNAL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SPHERE_MAP_PIX_HEALPIX_NULLVAL"
              value="1637499999999999923489519697920.000000"
              c:type="NCM_SPHERE_MAP_PIX_HEALPIX_NULLVAL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="SPHERE_MAP_RNG_NAME"
              value="sphere_map"
              c:type="NCM_SPHERE_MAP_RNG_NAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SPLINE2D_BICUBIC_00"
              value="0"
              c:type="NCM_SPLINE2D_BICUBIC_00">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SPLINE2D_BICUBIC_01"
              value="2"
              c:type="NCM_SPLINE2D_BICUBIC_01">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SPLINE2D_BICUBIC_10"
              value="1"
              c:type="NCM_SPLINE2D_BICUBIC_10">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SPLINE2D_BICUBIC_11"
              value="3"
              c:type="NCM_SPLINE2D_BICUBIC_11">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SPLINE2D_BICUBIC_F"
              value="0"
              c:type="NCM_SPLINE2D_BICUBIC_F">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SPLINE2D_BICUBIC_FX"
              value="1"
              c:type="NCM_SPLINE2D_BICUBIC_FX">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SPLINE2D_BICUBIC_FXY"
              value="3"
              c:type="NCM_SPLINE2D_BICUBIC_FXY">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SPLINE2D_BICUBIC_FY"
              value="2"
              c:type="NCM_SPLINE2D_BICUBIC_FY">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SPLINE_FUNC_DEFAULT_MAX_NODES"
              value="10000000"
              c:type="NCM_SPLINE_FUNC_DEFAULT_MAX_NODES">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SPLINE_KNOT_DIFF_TOL"
              value="0"
              c:type="NCM_SPLINE_KNOT_DIFF_TOL">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="SParam"
           c:symbol-prefix="sparam"
           c:type="NcmSParam"
           parent="GObject.Object"
           glib:type-name="NcmSParam"
           glib:get-type="ncm_sparam_get_type"
           glib:type-struct="SParamClass">
      <constructor name="new" c:identifier="ncm_sparam_new">
        <doc xml:space="preserve">This function allocates memory for a new #NcmSParam object and sets its properties to the values from
the input arguments.

The @name parameter is restricted to the interval [@lower_bound, @upper_bound].
@scale is an initial step for the statistical algorithms.
@abstol is the absolute error tolerance of the parameter.
@ftype indicates if the parameter will be fitted or not.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmSParam</doc>
          <type name="SParam" c:type="NcmSParam*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">#NcmSParam:name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="symbol" transfer-ownership="none">
            <doc xml:space="preserve">#NcmSParam:symbol</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="lower_bound" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:lower-bound</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="upper_bound" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:upper-bound</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:scale</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:absolute-tolerance</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="default_val" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:default-value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="ftype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmParamType</doc>
            <type name="ParamType" c:type="NcmParamType"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_sparam_clear">
        <doc xml:space="preserve">Atomically decrements the reference count of @sparam by one. If the reference count drops to 0,
all memory allocated by @sparam is released. Set the pointer to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="NcmSParam**"/>
          </parameter>
        </parameters>
      </function>
      <method name="copy" c:identifier="ncm_sparam_copy">
        <doc xml:space="preserve">Duplicates the #NcmSParam object setting the same values of the original propertities.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmSParam</doc>
          <type name="SParam" c:type="NcmSParam*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="NcmSParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_sparam_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @sparam by one. If the reference count drops to 0,
all memory allocated by @sparam is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="NcmSParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_absolute_tolerance"
              c:identifier="ncm_sparam_get_absolute_tolerance">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcmSParam:absolute_tolerance property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="const NcmSParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default_value"
              c:identifier="ncm_sparam_get_default_value">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcmSParam:default-value property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="const NcmSParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fit_type" c:identifier="ncm_sparam_get_fit_type">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #NcmParamType value of #NcmSParam:fit-type property.</doc>
          <type name="ParamType" c:type="NcmParamType"/>
        </return-value>
        <parameters>
          <instance-parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="const NcmSParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lower_bound" c:identifier="ncm_sparam_get_lower_bound">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcmSParam:lower-bound property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="const NcmSParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scale" c:identifier="ncm_sparam_get_scale">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of #NcmSParam:scale property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="const NcmSParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_upper_bound" c:identifier="ncm_sparam_get_upper_bound">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of #NcmSParam:upper-bound property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="const NcmSParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="name" c:identifier="ncm_sparam_name">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the internal name string. The caller must not free it.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="const NcmSParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_sparam_ref">
        <doc xml:space="preserve">Atomically increases the reference count of @sparam by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@sparam</doc>
          <type name="SParam" c:type="NcmSParam*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="NcmSParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_absolute_tolerance"
              c:identifier="ncm_sparam_set_absolute_tolerance">
        <doc xml:space="preserve">Sets the value @abstol to the #NcmSParam:absolute-tolerance property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="NcmSParam*"/>
          </instance-parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:absolute-tolerance</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_value"
              c:identifier="ncm_sparam_set_default_value">
        <doc xml:space="preserve">Sets the value @default_val to the #NcmSParam:default-value property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="NcmSParam*"/>
          </instance-parameter>
          <parameter name="default_val" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:default-value</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fit_type" c:identifier="ncm_sparam_set_fit_type">
        <doc xml:space="preserve">Sets the value @ftype to the #NcmSParam:fit-type property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="NcmSParam*"/>
          </instance-parameter>
          <parameter name="ftype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmParamType</doc>
            <type name="ParamType" c:type="const NcmParamType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lower_bound" c:identifier="ncm_sparam_set_lower_bound">
        <doc xml:space="preserve">Sets the value @lb to the #NcmSParam:lower-bound property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="NcmSParam*"/>
          </instance-parameter>
          <parameter name="lb" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:lower-bound</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scale" c:identifier="ncm_sparam_set_scale">
        <doc xml:space="preserve">Sets the value @scale to the #NcmSParam:scale property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="NcmSParam*"/>
          </instance-parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:scale</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_upper_bound" c:identifier="ncm_sparam_set_upper_bound">
        <doc xml:space="preserve">Sets the value @ub to the #NcmSParam:upper-bound property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="NcmSParam*"/>
          </instance-parameter>
          <parameter name="ub" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:upper-bound</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="symbol" c:identifier="ncm_sparam_symbol">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the internal symbol string. The caller must not free it.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="const NcmSParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="take_name" c:identifier="ncm_sparam_take_name">
        <doc xml:space="preserve">Takes @name as the name string.
The caller doesn't have to free it any more.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="NcmSParam*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">a string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_symbol" c:identifier="ncm_sparam_take_symbol">
        <doc xml:space="preserve">Takes @symbol as the symbol string.
The caller doesn't have to free it any more.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam</doc>
            <type name="SParam" c:type="NcmSParam*"/>
          </instance-parameter>
          <parameter name="symbol" transfer-ownership="none">
            <doc xml:space="preserve">a string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="absolute-tolerance"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Absolute tolerance, whose value is restricted to [0, G_MAXDOUBLE], is the size of the error used by #NcmFit.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="default-value" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Parameter's default value.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="fit-type" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Parameter's fit type: FIXED or FREE.</doc>
        <type name="ParamType"/>
      </property>
      <property name="lower-bound" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Lower parameter threshold whose value is restricted to [-G_MAXDOUBLE, G_MAXDOUBLE].</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The parameter' s name must be a string written using only ASCII and -.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="scale" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Scale, whose value is restricted to [0, G_MAXDOUBLE], is the step used by #NcmFit to increment the value of the parameter.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="symbol"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Parameter's name written in a usual form (including latex).</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="upper-bound" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Upper parameter threshold whose value is restricted to [-G_MAXDOUBLE, G_MAXDOUBLE].</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="name" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="symbol" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="lower_bound" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="upper_bound" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="scale" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="abstol" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="default_val" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="ftype" readable="0" private="1">
        <type name="ParamType" c:type="NcmParamType"/>
      </field>
    </class>
    <record name="SParamClass"
            c:type="NcmSParamClass"
            glib:is-gtype-struct-for="SParam">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Serialize"
           c:symbol-prefix="serialize"
           c:type="NcmSerialize"
           parent="GObject.Object"
           glib:type-name="NcmSerialize"
           glib:get-type="ncm_serialize_get_type"
           glib:type-struct="SerializeClass">
      <constructor name="new" c:identifier="ncm_serialize_new">
        <doc xml:space="preserve">Creates a new #NcmSerialize object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmSerialize.</doc>
          <type name="Serialize" c:type="NcmSerialize*"/>
        </return-value>
        <parameters>
          <parameter name="sopt" transfer-ownership="none">
            <doc xml:space="preserve">a set of options from #NcmSerializeOpt.</doc>
            <type name="SerializeOpt" c:type="NcmSerializeOpt"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_serialize_clear">
        <doc xml:space="preserve">Decreases the reference count of *@ser by one, and sets *@ser to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize**"/>
          </parameter>
        </parameters>
      </function>
      <function name="global" c:identifier="ncm_serialize_global">
        <doc xml:space="preserve">Gets the global serialization object, instanciates it if necessary.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The global #NcmSerialize.</doc>
          <type name="Serialize" c:type="NcmSerialize*"/>
        </return-value>
      </function>
      <function name="global_clear_instances"
                c:identifier="ncm_serialize_global_clear_instances">
        <doc xml:space="preserve">Releases all objects in global #NcmSerialize.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="autosave_only" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_contain_instance"
                c:identifier="ncm_serialize_global_contain_instance">
        <doc xml:space="preserve">Global version of ncm_serialize_contain_instance().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">if @obj is already in @ser.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_contain_name"
                c:identifier="ncm_serialize_global_contain_name">
        <doc xml:space="preserve">Global version of ncm_serialize_contain_name().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">if there is instance named @name in @ser.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">an instance name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_count_instances"
                c:identifier="ncm_serialize_global_count_instances">
        <doc xml:space="preserve">Global version of ncm_serialize_count_instances().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of instances in @ser.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </function>
      <function name="global_count_saved_serializations"
                c:identifier="ncm_serialize_global_count_saved_serializations">
        <doc xml:space="preserve">Global version of ncm_serialize_count_saved_serializations().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of instances in @ser.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </function>
      <function name="global_dup_obj"
                c:identifier="ncm_serialize_global_dup_obj">
        <doc xml:space="preserve">Global version of ncm_serialize_dup_obj().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A duplicate of @obj.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_from_binfile"
                c:identifier="ncm_serialize_global_from_binfile">
        <doc xml:space="preserve">Global version of ncm_serialize_from_binfile().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #GObject.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">File containing the serialized version of the object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_from_file"
                c:identifier="ncm_serialize_global_from_file">
        <doc xml:space="preserve">Global version of ncm_serialize_from_file().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #GObject.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">File containing the serialized version of the object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_from_name_params"
                c:identifier="ncm_serialize_global_from_name_params">
        <doc xml:space="preserve">Global version of ncm_serialize_from_name_params().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #GObject.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="obj_name" transfer-ownership="none">
            <doc xml:space="preserve">string containing the object name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">a #GVariant containing the object parameters.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_from_string"
                c:identifier="ncm_serialize_global_from_string">
        <doc xml:space="preserve">Global version of ncm_serialize_from_string().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #GObject.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="obj_ser" transfer-ownership="none">
            <doc xml:space="preserve">String containing the serialized version of the object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_from_variant"
                c:identifier="ncm_serialize_global_from_variant">
        <doc xml:space="preserve">Global version of ncm_serialize_from_variant().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GObject deserialized from @var_obj.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="var_obj" transfer-ownership="none">
            <doc xml:space="preserve">A #GVariant containing the serialized version of the object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_get_by_name"
                c:identifier="ncm_serialize_global_get_by_name">
        <doc xml:space="preserve">Global version of ncm_serialize_get_by_name().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">Gets the instance named @name or NULL.</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">an instance name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_global_peek_name"
                c:identifier="ncm_serialize_global_global_peek_name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="obj"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_gvalue_to_gvariant"
                c:identifier="ncm_serialize_global_gvalue_to_gvariant">
        <doc xml:space="preserve">Global version of ncm_serialize_gvalue_to_gvariant().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GVariant convertion of @val.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">a #GValue.</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_is_named"
                c:identifier="ncm_serialize_global_is_named">
        <doc xml:space="preserve">Global version of ncm_serialize_is_named().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether @serobj is a named serialized object.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="serobj" transfer-ownership="none">
            <doc xml:space="preserve">serialized object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">object name.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_log_stats"
                c:identifier="ncm_serialize_global_log_stats">
        <doc xml:space="preserve">Releases all objects in global #NcmSerialize.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="global_remove_ser"
                c:identifier="ncm_serialize_global_remove_ser">
        <doc xml:space="preserve">Global version of ncm_serialize_remove_ser().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_reset" c:identifier="ncm_serialize_global_reset">
        <doc xml:space="preserve">Releases all objects in global #NcmSerialize and erase
all serialized objects.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="autosave_only" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_set" c:identifier="ncm_serialize_global_set">
        <doc xml:space="preserve">Global version of ncm_serialize_set().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">the @obj name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="overwrite" transfer-ownership="none">
            <doc xml:space="preserve">whether to overwrite if there is already an object named @name.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_set_property"
                c:identifier="ncm_serialize_global_set_property">
        <doc xml:space="preserve">Global version of ncm_serialize_set_property().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="prop_str" transfer-ownership="none">
            <doc xml:space="preserve">a string containing the parameters to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_set_property_from_key_file"
                c:identifier="ncm_serialize_global_set_property_from_key_file">
        <doc xml:space="preserve">Global version of ncm_serialize_set_property().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="prop_file" transfer-ownership="none">
            <doc xml:space="preserve">a #GKeyFile containing the parameters to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_to_binfile"
                c:identifier="ncm_serialize_global_to_binfile">
        <doc xml:space="preserve">Global version of ncm_serialize_to_binfile().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">File where to save the serialized version of the object</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_to_file"
                c:identifier="ncm_serialize_global_to_file">
        <doc xml:space="preserve">Global version of ncm_serialize_to_file().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">File where to save the serialized version of the object</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_to_string"
                c:identifier="ncm_serialize_global_to_string">
        <doc xml:space="preserve">Global version of ncm_serialize_to_string().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A string containing the serialized version of @obj.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="valid_variant" transfer-ownership="none">
            <doc xml:space="preserve">whether to use a valid #GVariant representation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_to_variant"
                c:identifier="ncm_serialize_global_to_variant">
        <doc xml:space="preserve">Global version of ncm_serialize_to_variant().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GVariant dictionary describing the @obj.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="global_unset" c:identifier="ncm_serialize_global_unset">
        <doc xml:space="preserve">Global version of ncm_serialize_unset().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="clear_instances"
              c:identifier="ncm_serialize_clear_instances">
        <doc xml:space="preserve">Releases all objects in @ser. If @autosave_only is TRUE
it will release only autosaved objects.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="autosave_only" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="contain_instance"
              c:identifier="ncm_serialize_contain_instance">
        <doc xml:space="preserve">Checks if the #GObject instance @obj is contained in @ser.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">if @obj is already in @ser.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="contain_name" c:identifier="ncm_serialize_contain_name">
        <doc xml:space="preserve">Checks if there is an instance named @name in @ser.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">if there is instance named @name in @ser.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">an instance name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="count_instances"
              c:identifier="ncm_serialize_count_instances">
        <doc xml:space="preserve">Counts the number of instances registered in @ser.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of instances in @ser.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="count_saved_serializations"
              c:identifier="ncm_serialize_count_saved_serializations">
        <doc xml:space="preserve">Counts the number of instances registered in @ser.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of instances in @ser.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_obj" c:identifier="ncm_serialize_dup_obj">
        <doc xml:space="preserve">Duplicates @obj by serializing and deserializing a new object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A duplicate of @obj.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_serialize_free">
        <doc xml:space="preserve">Decreases the reference count of @ser by one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="from_binfile" c:identifier="ncm_serialize_from_binfile">
        <doc xml:space="preserve">Parses the serialized binary data in @filename and returns the newly created object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #GObject.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">File containing the binary serialized version of the object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="from_file" c:identifier="ncm_serialize_from_file">
        <doc xml:space="preserve">Parses the serialized string in @filename and returns the newly created object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #GObject.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">File containing the serialized version of the object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="from_name_params"
              c:identifier="ncm_serialize_from_name_params">
        <doc xml:space="preserve">Parses the serialized parameters and returns the newly created object using them.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #GObject.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="obj_name" transfer-ownership="none">
            <doc xml:space="preserve">string containing the object name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">a #GVariant containing the object parameters.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="from_string" c:identifier="ncm_serialize_from_string">
        <doc xml:space="preserve">Parses the serialized and returns the newly created object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #GObject.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="obj_ser" transfer-ownership="none">
            <doc xml:space="preserve">String containing the serialized version of the object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="from_variant" c:identifier="ncm_serialize_from_variant">
        <doc xml:space="preserve">Deserialize and returns the newly created object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #GObject.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="var_obj" transfer-ownership="none">
            <doc xml:space="preserve">A #GVariant containing the serialized version of the object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_by_name" c:identifier="ncm_serialize_get_by_name">
        <doc xml:space="preserve">Gets a new reference for the instance @name or null if there isn't a instance named @name.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">Gets the instance named @name or NULL.</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">an instance name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="gvalue_to_gvariant"
              c:identifier="ncm_serialize_gvalue_to_gvariant">
        <doc xml:space="preserve">Converts a #GValue to a #GVariant.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GVariant convertion of @val.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">a #GValue.</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_named" c:identifier="ncm_serialize_is_named">
        <doc xml:space="preserve">Checks if @serobj is a named serialized object, if so sets its name in @name
and returns TRUE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether @serobj is a named serialized object.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="serobj" transfer-ownership="none">
            <doc xml:space="preserve">serialized object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">object name.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="log_stats" c:identifier="ncm_serialize_log_stats">
        <doc xml:space="preserve">Releases all objects in @ser.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_by_name" c:identifier="ncm_serialize_peek_by_name">
        <doc xml:space="preserve">Peeks the instance @name or null if there isn't a instance named @name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Gets the instance named @name or NULL.</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">an instance name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_name" c:identifier="ncm_serialize_peek_name">
        <doc xml:space="preserve">Gets the named associated to the instance @obj, it is an error to call this function
when the @obj is not contained in @ser.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the name of @obj.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_serialize_ref">
        <doc xml:space="preserve">Increases the reference count of @ser by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@ser.</doc>
          <type name="Serialize" c:type="NcmSerialize*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_ser" c:identifier="ncm_serialize_remove_ser">
        <doc xml:space="preserve">Removes the object @obj to @ser using @name, it does nothing
if the instance @obj is not present in @ser.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="ncm_serialize_reset">
        <doc xml:space="preserve">Releases all objects in @ser and erase all serialized
objects. If @autosave_only is TRUE it will release only
autosaved objects.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="autosave_only" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="ncm_serialize_set">
        <doc xml:space="preserve">Adds the object @obj to @ser using @name.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">the @obj name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="overwrite" transfer-ownership="none">
            <doc xml:space="preserve">whether to overwrite if there is already an object named @name.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property" c:identifier="ncm_serialize_set_property">
        <doc xml:space="preserve">Deserialize the set of object properties in @params and sets the @obj.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="prop_str" transfer-ownership="none">
            <doc xml:space="preserve">a string containing the parameters to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property_from_key_file"
              c:identifier="ncm_serialize_set_property_from_key_file">
        <doc xml:space="preserve">Deserializes the set of object properties in @prop_file and sets the @obj.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="prop_file" transfer-ownership="none">
            <doc xml:space="preserve">a GKeyFile file containing the parameters to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_binfile" c:identifier="ncm_serialize_to_binfile">
        <doc xml:space="preserve">Serializes @obj and saves the binary in @filename.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">File where to save the serialized version of the object</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_file" c:identifier="ncm_serialize_to_file">
        <doc xml:space="preserve">Serializes @obj and saves the string in @filename.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">File where to save the serialized version of the object</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="ncm_serialize_to_string">
        <doc xml:space="preserve">Serialize the object @obj to a string.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A string containing the serialized version of @obj.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="valid_variant" transfer-ownership="none">
            <doc xml:space="preserve">whether to use a valid #GVariant representation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_variant" c:identifier="ncm_serialize_to_variant">
        <doc xml:space="preserve">Serialize the @obj to a @GVariant representation.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GVariant dictionary describing the @obj.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ncm_serialize_unref">
        <doc xml:space="preserve">Same as ncm_serialize_free().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unset" c:identifier="ncm_serialize_unset">
        <doc xml:space="preserve">Removes the object @obj to @ser using @name, it does nothing
if the instance @obj is not present in @ser.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ser" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSerialize.</doc>
            <type name="Serialize" c:type="NcmSerialize*"/>
          </instance-parameter>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve">a #GObject.</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="options"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Serialization options.</doc>
        <type name="SerializeOpt"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="name_ptr" readable="0" private="1">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="ptr_name" readable="0" private="1">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="saved_ptr_name" readable="0" private="1">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="saved_name_ser" readable="0" private="1">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="is_named_regex" readable="0" private="1">
        <type name="GLib.Regex" c:type="GRegex*"/>
      </field>
      <field name="parse_obj_regex" readable="0" private="1">
        <type name="GLib.Regex" c:type="GRegex*"/>
      </field>
      <field name="opts" readable="0" private="1">
        <type name="SerializeOpt" c:type="NcmSerializeOpt"/>
      </field>
      <field name="autosave_count" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="SerializeClass"
            c:type="NcmSerializeClass"
            glib:is-gtype-struct-for="Serialize">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="SerializeOpt"
              glib:type-name="NcmSerializeOpt"
              glib:get-type="ncm_serialize_opt_get_type"
              c:type="NcmSerializeOpt">
      <doc xml:space="preserve">Options for serialization.</doc>
      <member name="none"
              value="0"
              c:identifier="NCM_SERIALIZE_OPT_NONE"
              glib:nick="none">
        <doc xml:space="preserve">Use default serialization.</doc>
      </member>
      <member name="autosave_ser"
              value="1"
              c:identifier="NCM_SERIALIZE_OPT_AUTOSAVE_SER"
              glib:nick="autosave-ser">
        <doc xml:space="preserve">Whether to automatically include named deserialized objects in the named instances.</doc>
      </member>
      <member name="autoname_ser"
              value="2"
              c:identifier="NCM_SERIALIZE_OPT_AUTONAME_SER"
              glib:nick="autoname-ser">
        <doc xml:space="preserve">Whether to automatically name objects on serialization.</doc>
      </member>
      <member name="clean_dup"
              value="3"
              c:identifier="NCM_SERIALIZE_OPT_CLEAN_DUP"
              glib:nick="clean-dup">
        <doc xml:space="preserve">Combination of NCM_SERIALIZE_OPT_AUTOSAVE_SER and NCM_SERIALIZE_OPT_AUTONAME_SER</doc>
      </member>
    </bitfield>
    <record name="SerializePrivate" c:type="NcmSerializePrivate" disguised="1">
    </record>
    <class name="SphereMap"
           c:symbol-prefix="sphere_map"
           c:type="NcmSphereMap"
           parent="GObject.Object"
           glib:type-name="NcmSphereMap"
           glib:get-type="ncm_sphere_map_get_type"
           glib:type-struct="SphereMapClass">
      <doc xml:space="preserve">FIXME</doc>
      <constructor name="new" c:identifier="ncm_sphere_map_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="SphereMap" c:type="NcmSphereMap*"/>
        </return-value>
        <parameters>
          <parameter name="nside" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="clone" c:identifier="ncm_sphere_map_clone">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="SphereMap" c:type="NcmSphereMap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMap</doc>
            <type name="SphereMap" c:type="NcmSphereMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="ncm_sphere_map_copy">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMap</doc>
            <type name="SphereMap" c:type="NcmSphereMap*"/>
          </instance-parameter>
          <parameter name="orig" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMap</doc>
            <type name="SphereMap" c:type="NcmSphereMap*"/>
          </parameter>
        </parameters>
      </method>
      <method name="homogenize_noise"
              c:identifier="ncm_sphere_map_homogenize_noise">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMap</doc>
            <type name="SphereMap" c:type="NcmSphereMap*"/>
          </instance-parameter>
          <parameter name="base_sigma" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="ht_new"
              c:identifier="ncm_sphere_mapsht_new"
              moved-to="sphere_mapsht_new"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value>
          <doc xml:space="preserve">FIXME</doc>
          <type name="SphereMapSHT" c:type="NcmSphereMapSHT*"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMap</doc>
            <type name="SphereMap" c:type="NcmSphereMap*"/>
          </instance-parameter>
          <parameter name="mapalm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapAlm</doc>
            <type name="SphereMapAlm" c:type="NcmSphereMapAlm*"/>
          </parameter>
          <parameter name="fftw_flags" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_coord" c:identifier="ncm_sphere_map_init_coord">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMap</doc>
            <type name="SphereMap" c:type="NcmSphereMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rotate_avg" c:identifier="ncm_sphere_map_rotate_avg">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMap</doc>
            <type name="SphereMap" c:type="NcmSphereMap*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="glong" c:type="glong"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_order" c:identifier="ncm_sphere_map_set_order">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMap</doc>
            <type name="SphereMap" c:type="NcmSphereMap*"/>
          </instance-parameter>
          <parameter name="order" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapOrder</doc>
            <type name="SphereMapOrder" c:type="NcmSphereMapOrder"/>
          </parameter>
          <parameter name="init_coord" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="nside"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="dt" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector_float*"/>
      </field>
      <field name="qpol" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector_float*"/>
      </field>
      <field name="upol" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector_float*"/>
      </field>
      <field name="spur_signal" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector_float*"/>
      </field>
      <field name="nobs" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector_float*"/>
      </field>
      <field name="type" readable="0" private="1">
        <type name="SphereMapType" c:type="NcmSphereMapType"/>
      </field>
      <field name="npix" readable="0" private="1">
        <type name="glong" c:type="glong"/>
      </field>
      <field name="nside" readable="0" private="1">
        <type name="glong" c:type="glong"/>
      </field>
      <field name="nrings" readable="0" private="1">
        <type name="glong" c:type="glong"/>
      </field>
      <field name="loaded" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="order" readable="0" private="1">
        <type name="SphereMapOrder" c:type="NcmSphereMapOrder"/>
      </field>
      <field name="theta" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector*"/>
      </field>
      <field name="phi" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector*"/>
      </field>
      <field name="is_init_coord" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="SphereMapAlm" c:type="NcmSphereMapAlm">
      <doc xml:space="preserve">FIXME</doc>
      <field name="lmax" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="alm_size" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="loaded" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="alm" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector_complex*"/>
      </field>
      <field name="Nc" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector*"/>
      </field>
      <field name="sqrt_int" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector*"/>
      </field>
      <field name="lnpoch_m_1_2" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector*"/>
      </field>
      <field name="sphPlm_recur1" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector*"/>
      </field>
      <field name="sphPlm_recur2" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector*"/>
      </field>
      <field name="sphPmm" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector*"/>
      </field>
    </record>
    <record name="SphereMapClass"
            c:type="NcmSphereMapClass"
            glib:is-gtype-struct-for="SphereMap">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="SphereMapOrder"
                 glib:type-name="NcmSphereMapOrder"
                 glib:get-type="ncm_sphere_map_order_get_type"
                 c:type="NcmSphereMapOrder">
      <member name="nest"
              value="0"
              c:identifier="NC_SPHERE_MAP_ORDER_NEST"
              glib:nick="nest">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="ring"
              value="1"
              c:identifier="NC_SPHERE_MAP_ORDER_RING"
              glib:nick="ring">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="SphereMapPix"
           c:symbol-prefix="sphere_map_pix"
           c:type="NcmSphereMapPix"
           parent="GObject.Object"
           glib:type-name="NcmSphereMapPix"
           glib:get-type="ncm_sphere_map_pix_get_type"
           glib:type-struct="SphereMapPixClass">
      <constructor name="new" c:identifier="ncm_sphere_map_pix_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
        </return-value>
        <parameters>
          <parameter name="nside" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint64" c:type="const gint64"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_sphere_map_pix_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix**"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_noise" c:identifier="ncm_sphere_map_pix_add_noise">
        <doc xml:space="preserve">Adds a Gaussian noise with $\sigma=$ @sd and zero mean to each pixel.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="sd" transfer-ownership="none">
            <doc xml:space="preserve">noise standard deviation</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_to_ang" c:identifier="ncm_sphere_map_pix_add_to_ang">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">$\theta$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="phi" transfer-ownership="none">
            <doc xml:space="preserve">$\phi$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">signal</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_to_vec" c:identifier="ncm_sphere_map_pix_add_to_vec">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="vec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmTriVec</doc>
            <type name="TriVec" c:type="NcmTriVec*"/>
          </parameter>
          <parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">signal</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="alm2map" c:identifier="ncm_sphere_map_pix_alm2map">
        <doc xml:space="preserve">Compute map pixels from current $a_{\ell{}m}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ang2pix_nest"
              c:identifier="ncm_sphere_map_pix_ang2pix_nest">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="phi" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="nest_index"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint64" c:type="gint64*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ang2pix_ring"
              c:identifier="ncm_sphere_map_pix_ang2pix_ring">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="theta" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="phi" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="ring_index"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint64" c:type="gint64*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_pixels"
              c:identifier="ncm_sphere_map_pix_clear_pixels">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_sphere_map_pix_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_Cl" c:identifier="ncm_sphere_map_pix_get_Cl">
        <doc xml:space="preserve">Gets the value of $C_{\ell}$ previously calculated by
ncm_sphere_map_pix_prepare_alm() or ncm_sphere_map_pix_prepare_Cl().</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="l" transfer-ownership="none">
            <doc xml:space="preserve">value of $l &lt; \ell_\mathrm{max}$</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_alm" c:identifier="ncm_sphere_map_pix_get_alm">
        <doc xml:space="preserve">Gets the value of $a_{lm}$ previously calculated by
ncm_sphere_map_pix_prepare_alm().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="l" transfer-ownership="none">
            <doc xml:space="preserve">value of $l &lt; \ell_\mathrm{max}$</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="m" transfer-ownership="none">
            <doc xml:space="preserve">value of $m \leq l$.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="Re_alm"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">real part of $a_{lm}$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="Im_alm"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">imaginary part of $a_{lm}$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cap_size"
              c:identifier="ncm_sphere_map_pix_get_cap_size">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_coordsys"
              c:identifier="ncm_sphere_map_pix_get_coordsys">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="SphereMapPixCoordSys" c:type="NcmSphereMapPixCoordSys"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lmax" c:identifier="ncm_sphere_map_pix_get_lmax">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_middle_size"
              c:identifier="ncm_sphere_map_pix_get_middle_size">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_npix" c:identifier="ncm_sphere_map_pix_get_npix">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nrings" c:identifier="ncm_sphere_map_pix_get_nrings">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nrings_cap"
              c:identifier="ncm_sphere_map_pix_get_nrings_cap">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nrings_middle"
              c:identifier="ncm_sphere_map_pix_get_nrings_middle">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nside" c:identifier="ncm_sphere_map_pix_get_nside">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_order" c:identifier="ncm_sphere_map_pix_get_order">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="SphereMapPixOrder" c:type="NcmSphereMapPixOrder"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ring_first_index"
              c:identifier="ncm_sphere_map_pix_get_ring_first_index">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="r_i" transfer-ownership="none">
            <doc xml:space="preserve">ring index</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ring_size"
              c:identifier="ncm_sphere_map_pix_get_ring_size">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="r_i" transfer-ownership="none">
            <doc xml:space="preserve">ring index</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_fits" c:identifier="ncm_sphere_map_pix_load_fits">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="fits_file" transfer-ownership="none">
            <doc xml:space="preserve">fits filename</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="signal_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">signal column name in @fits_file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_fits_catalog"
              c:identifier="ncm_sphere_map_pix_load_from_fits_catalog">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="fits_file" transfer-ownership="none">
            <doc xml:space="preserve">fits filename</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="RA" transfer-ownership="none">
            <doc xml:space="preserve">RA column name in @fits_file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="DEC" transfer-ownership="none">
            <doc xml:space="preserve">DEC column name in @fits_file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="S"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">Signal column name in @fits_file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="nest2ring" c:identifier="ncm_sphere_map_pix_nest2ring">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="nest_index" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint64" c:type="const gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="pix2ang_nest"
              c:identifier="ncm_sphere_map_pix_pix2ang_nest">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="nest_index" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint64" c:type="const gint64"/>
          </parameter>
          <parameter name="theta"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="phi"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pix2ang_ring"
              c:identifier="ncm_sphere_map_pix_pix2ang_ring">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="ring_index" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint64" c:type="const gint64"/>
          </parameter>
          <parameter name="theta"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="phi"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pix2vec_nest"
              c:identifier="ncm_sphere_map_pix_pix2vec_nest">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="nest_index" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint64" c:type="const gint64"/>
          </parameter>
          <parameter name="vec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmTriVec</doc>
            <type name="TriVec" c:type="NcmTriVec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pix2vec_ring"
              c:identifier="ncm_sphere_map_pix_pix2vec_ring">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="ring_index" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint64" c:type="const gint64"/>
          </parameter>
          <parameter name="vec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmTriVec</doc>
            <type name="TriVec" c:type="NcmTriVec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_Cl" c:identifier="ncm_sphere_map_pix_prepare_Cl">
        <doc xml:space="preserve">Calculates the $C_{\ell}$ from the map @pix, using $\ell_\mathrm{max}$
set by ncm_sphere_map_pix_set_lmax(). If $\ell_\mathrm{max} = 0$
nothing is done. Note that this function will not save the values of $a_{\ell{}m}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare_alm" c:identifier="ncm_sphere_map_pix_prepare_alm">
        <doc xml:space="preserve">Calculates the $a_{\ell{}m}$ from the map @pix, using $\ell_\mathrm{max}$
set by ncm_sphere_map_pix_set_lmax(). If $\ell_\mathrm{max} = 0$
nothing is done.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_sphere_map_pix_ref">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ring2nest" c:identifier="ncm_sphere_map_pix_ring2nest">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="ring_index" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint64" c:type="const gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_fits" c:identifier="ncm_sphere_map_pix_save_fits">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="fits_file" transfer-ownership="none">
            <doc xml:space="preserve">fits filename</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="signal_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">signal column name in @fits_file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="overwrite" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_coordsys"
              c:identifier="ncm_sphere_map_pix_set_coordsys">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="coordsys" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="SphereMapPixCoordSys"
                  c:type="NcmSphereMapPixCoordSys"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lmax" c:identifier="ncm_sphere_map_pix_set_lmax">
        <doc xml:space="preserve">Prepare the object to calculate $a_{\ell{}m}$ and/or $C_\ell$,
up to $\ell=$@lmax.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="lmax" transfer-ownership="none">
            <doc xml:space="preserve">max value of $\ell$</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nside" c:identifier="ncm_sphere_map_pix_set_nside">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="nside" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_order" c:identifier="ncm_sphere_map_pix_set_order">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="order" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="SphereMapPixOrder" c:type="NcmSphereMapPixOrder"/>
          </parameter>
        </parameters>
      </method>
      <method name="vec2pix_nest"
              c:identifier="ncm_sphere_map_pix_vec2pix_nest">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="vec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmTriVec</doc>
            <type name="TriVec" c:type="NcmTriVec*"/>
          </parameter>
          <parameter name="nest_index"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint64" c:type="gint64*"/>
          </parameter>
        </parameters>
      </method>
      <method name="vec2pix_ring"
              c:identifier="ncm_sphere_map_pix_vec2pix_ring">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pix" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSphereMapPix</doc>
            <type name="SphereMapPix" c:type="NcmSphereMapPix*"/>
          </instance-parameter>
          <parameter name="vec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmTriVec</doc>
            <type name="TriVec" c:type="NcmTriVec*"/>
          </parameter>
          <parameter name="ring_index"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint64" c:type="gint64*"/>
          </parameter>
        </parameters>
      </method>
      <property name="coordsys"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="SphereMapPixCoordSys"/>
      </property>
      <property name="lmax"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="nside"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="order"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="SphereMapPixOrder"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="nside" readable="0" private="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="npix" readable="0" private="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="face_size" readable="0" private="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="middle_rings_size" readable="0" private="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="cap_size" readable="0" private="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="middle_size" readable="0" private="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="nrings" readable="0" private="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="nrings_cap" readable="0" private="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="nrings_middle" readable="0" private="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="order" readable="0" private="1">
        <type name="SphereMapPixOrder" c:type="NcmSphereMapPixOrder"/>
      </field>
      <field name="coordsys" readable="0" private="1">
        <type name="SphereMapPixCoordSys" c:type="NcmSphereMapPixCoordSys"/>
      </field>
      <field name="pvec" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="fft_pvec" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="fft_plan_r2c" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="fft_plan_c2r" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="lmax" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="Ylm" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="alm" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="Cl" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="t" readable="0" private="1">
        <type name="Timer" c:type="NcmTimer*"/>
      </field>
    </class>
    <record name="SphereMapPixClass"
            c:type="NcmSphereMapPixClass"
            glib:is-gtype-struct-for="SphereMapPix">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="SphereMapPixCoordSys"
                 glib:type-name="NcmSphereMapPixCoordSys"
                 glib:get-type="ncm_sphere_map_pix_coord_sys_get_type"
                 c:type="NcmSphereMapPixCoordSys">
      <doc xml:space="preserve">FIXME</doc>
      <member name="galactic"
              value="71"
              c:identifier="NCM_SPHERE_MAP_PIX_COORD_SYS_GALACTIC"
              glib:nick="galactic">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="ecliptic"
              value="69"
              c:identifier="NCM_SPHERE_MAP_PIX_COORD_SYS_ECLIPTIC"
              glib:nick="ecliptic">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="celestial"
              value="67"
              c:identifier="NCM_SPHERE_MAP_PIX_COORD_SYS_CELESTIAL"
              glib:nick="celestial">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <enumeration name="SphereMapPixOrder"
                 glib:type-name="NcmSphereMapPixOrder"
                 glib:get-type="ncm_sphere_map_pix_order_get_type"
                 c:type="NcmSphereMapPixOrder">
      <doc xml:space="preserve">FIXME</doc>
      <member name="nest"
              value="0"
              c:identifier="NCM_SPHERE_MAP_PIX_ORDER_NEST"
              glib:nick="nest">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="ring"
              value="1"
              c:identifier="NCM_SPHERE_MAP_PIX_ORDER_RING"
              glib:nick="ring">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <record name="SphereMapSHT" c:type="NcmSphereMapSHT">
      <doc xml:space="preserve">FIXME</doc>
      <field name="map" readable="0" private="1">
        <type name="SphereMap" c:type="NcmSphereMap*"/>
      </field>
      <field name="mapalm" readable="0" private="1">
        <type name="SphereMapAlm" c:type="NcmSphereMapAlm*"/>
      </field>
      <field name="n_rings" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="n_diff_rings" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="max_ring_size" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="forward_plans" readable="0" private="1">
        <type name="gint" c:type="gint*"/>
      </field>
      <field name="backward_plans" readable="0" private="1">
        <type name="gint" c:type="gint*"/>
      </field>
      <field name="save_wis" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="wis_file" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="lmin_file" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="fft_ring" introspectable="0" readable="0" private="1">
        <type c:type="gsl_matrix_complex*"/>
      </field>
      <field name="ring" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector*"/>
      </field>
      <field name="sphPlm" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector_complex*"/>
      </field>
      <field name="sphPlm_upper_limit"
             introspectable="0"
             readable="0"
             private="1">
        <type c:type="gsl_vector*"/>
      </field>
      <field name="sphPl0" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector*"/>
      </field>
    </record>
    <bitfield name="SphereMapType"
              glib:type-name="NcmSphereMapType"
              glib:get-type="ncm_sphere_map_type_get_type"
              c:type="NcmSphereMapType">
      <doc xml:space="preserve">FIXME</doc>
      <member name="temperature"
              value="1"
              c:identifier="NC_SPHERE_MAP_TYPE_TEMPERATURE"
              glib:nick="temperature">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="q_polarization"
              value="2"
              c:identifier="NC_SPHERE_MAP_TYPE_Q_POLARIZATION"
              glib:nick="q-polarization">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="u_polarisation"
              value="4"
              c:identifier="NC_SPHERE_MAP_TYPE_U_POLARISATION"
              glib:nick="u-polarisation">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="spur_signal"
              value="8"
              c:identifier="NC_SPHERE_MAP_TYPE_SPUR_SIGNAL"
              glib:nick="spur-signal">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="n_obs"
              value="16"
              c:identifier="NC_SPHERE_MAP_TYPE_N_OBS"
              glib:nick="n-obs">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </bitfield>
    <class name="Spline"
           c:symbol-prefix="spline"
           c:type="NcmSpline"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NcmSpline"
           glib:get-type="ncm_spline_get_type"
           glib:type-struct="SplineClass">
      <function name="clear" c:identifier="ncm_spline_clear">
        <doc xml:space="preserve">Atomically decrements the reference count of @s by one. If the reference count drops to 0,
all memory allocated by @s is released. The pointer is set to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="copy_empty" invoker="copy_empty">
        <doc xml:space="preserve">This function copies the spline @s into an initialized empty #NcmSpline of a specific type.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmSpline</doc>
          <type name="Spline" c:type="NcmSpline*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmSpline</doc>
            <type name="Spline" c:type="const NcmSpline*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="deriv">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <type name="Spline" c:type="const NcmSpline*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="deriv2">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <type name="Spline" c:type="const NcmSpline*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="deriv_nmax">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <type name="Spline" c:type="const NcmSpline*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval" invoker="eval">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The interpolated value of a function computed at @x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmSpline</doc>
            <type name="Spline" c:type="const NcmSpline*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-coordinate value</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="integ">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <type name="Spline" c:type="const NcmSpline*"/>
          </instance-parameter>
          <parameter name="xi" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="xf" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="min_size" invoker="min_size">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Minimum number of knots required.</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmSpline</doc>
            <type name="Spline" c:type="const NcmSpline*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <type name="Spline" c:type="NcmSpline*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare" invoker="prepare">
        <doc xml:space="preserve">This function prepares the spline @s such that one can evaluate it (#ncm_spline_eval), as well as
to compute its first and second derivatives (#ncm_spline_eval_deriv, #ncm_spline_eval_deriv2)
and integration (#ncm_spline_eval_integ).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_base" invoker="prepare_base">
        <doc xml:space="preserve">This function computes the second derivatives of @s and it is used to prepare a
bidimensional spline.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reset">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <type name="Spline" c:type="NcmSpline*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="acc" c:identifier="ncm_spline_acc">
        <doc xml:space="preserve">Enables or disables spline accelerator. Note that, if
enabled, the spline becomes non-reentrant. In other words,
if @enable is TRUE, the spline evaluation is not thread safe.
Therefore, it should not be called concomitantly by two different threads.

Warning: the accelerator must be reset if the spline's size changes, otherwise,
it can accessan out-of-bound index.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="ncm_spline_copy">
        <doc xml:space="preserve">This function copies the two #NcmVector of the spline @s into those two
#NcmVector of a new #NcmSpline.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmSpline</doc>
          <type name="Spline" c:type="NcmSpline*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a costant #NcmSpline</doc>
            <type name="Spline" c:type="const NcmSpline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy_empty" c:identifier="ncm_spline_copy_empty">
        <doc xml:space="preserve">This function copies the spline @s into an initialized empty #NcmSpline of a specific type.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmSpline</doc>
          <type name="Spline" c:type="NcmSpline*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmSpline</doc>
            <type name="Spline" c:type="const NcmSpline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="eval" c:identifier="ncm_spline_eval">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The interpolated value of a function computed at @x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmSpline</doc>
            <type name="Spline" c:type="const NcmSpline*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-coordinate value</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_deriv" c:identifier="ncm_spline_eval_deriv">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The derivative of an interpolated function computed at @x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmSpline</doc>
            <type name="Spline" c:type="const NcmSpline*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-coordinate value</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_deriv2" c:identifier="ncm_spline_eval_deriv2">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The second derivative of an interpolated function computed at @x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmSpline</doc>
            <type name="Spline" c:type="const NcmSpline*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-coordinate value</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_deriv_nmax" c:identifier="ncm_spline_eval_deriv_nmax">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The highest non null derivative of an interpolated function computed at @x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmSpline</doc>
            <type name="Spline" c:type="const NcmSpline*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-coordinate value</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_integ" c:identifier="ncm_spline_eval_integ">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The numerical integral of an interpolated function over the range [@x0, @x1].</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmSpline</doc>
            <type name="Spline" c:type="const NcmSpline*"/>
          </instance-parameter>
          <parameter name="x0" transfer-ownership="none">
            <doc xml:space="preserve">lower integration limit</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="x1" transfer-ownership="none">
            <doc xml:space="preserve">upper integration limit</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_spline_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @s by one. If the reference count drops to 0,
all memory allocated by @s is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bounds" c:identifier="ncm_spline_get_bounds">
        <doc xml:space="preserve">This function returns the lower and upper bound of @s.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </instance-parameter>
          <parameter name="lb"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">spline lower bound</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="ub"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">spline upper bound</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_index" c:identifier="ncm_spline_get_index">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The index of the lower knot of the interval @x belongs to.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmSpline</doc>
            <type name="Spline" c:type="const NcmSpline*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">a value of the abscissa axis</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_len" c:identifier="ncm_spline_get_len">
        <doc xml:space="preserve">This function gets the length of the spline.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">spline's size.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_xv" c:identifier="ncm_spline_get_xv">
        <doc xml:space="preserve">This function returns the @s #NcmVector of knots.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmVector</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_yv" c:identifier="ncm_spline_get_yv">
        <doc xml:space="preserve">This function returns the @s #NcmVector of the values of the function to be interpolated.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmVector</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_empty" c:identifier="ncm_spline_is_empty">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <type name="Spline" c:type="const NcmSpline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="min_size" c:identifier="ncm_spline_min_size">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Minimum number of knots required.</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmSpline</doc>
            <type name="Spline" c:type="const NcmSpline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="new" c:identifier="ncm_spline_new">
        <doc xml:space="preserve">This function returns a new #NcmSpline, where the knots of this new spline are given
in the #NcmVector @xv and the values of the function, at those knots, to be interpolated are
given in the #NcmVector @yv.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmSpline</doc>
          <type name="Spline" c:type="NcmSpline*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmSpline</doc>
            <type name="Spline" c:type="const NcmSpline*"/>
          </instance-parameter>
          <parameter name="xv" transfer-ownership="none">
            <doc xml:space="preserve">#NcmVector of knots</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="yv" transfer-ownership="none">
            <doc xml:space="preserve">#NcmVector of the values of the function, to be interpolated, computed at @xv</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="init" transfer-ownership="none">
            <doc xml:space="preserve">TRUE to prepare the new #NcmSpline or FALSE to not prepare it</doc>
            <type name="gboolean" c:type="const gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_array" c:identifier="ncm_spline_new_array">
        <doc xml:space="preserve">This function returns a new #NcmSpline, where the knots of this new spline are given
in the GArray @x and the values of the function, at those knots, to be interpolated are
given in the GArray @y.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmSpline</doc>
          <type name="Spline" c:type="NcmSpline*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmSpline</doc>
            <type name="Spline" c:type="const NcmSpline*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">GArray of knots</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">GArray of the values of the function, to be interpolated, computed at @x</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="init" transfer-ownership="none">
            <doc xml:space="preserve">TRUE to prepare the new #NcmSpline or FALSE to not prepare it</doc>
            <type name="gboolean" c:type="const gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_data" c:identifier="ncm_spline_new_data">
        <doc xml:space="preserve">This function returns a new #NcmSpline, where the knots of this new spline are given
in the array @x and the values of the function, at those knots, to be interpolated are
given in the array @y.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmSpline</doc>
          <type name="Spline" c:type="NcmSpline*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmSpline</doc>
            <type name="Spline" c:type="const NcmSpline*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">array of knots</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">array of the values of the function, to be interpolated, computed at @x</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">lenght of @x and @y</doc>
            <type name="gsize" c:type="const gsize"/>
          </parameter>
          <parameter name="init" transfer-ownership="none">
            <doc xml:space="preserve">TRUE to prepare the new #NcmSpline or FALSE to not prepare it</doc>
            <type name="gboolean" c:type="const gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="ncm_spline_prepare">
        <doc xml:space="preserve">This function prepares the spline @s such that one can evaluate it (#ncm_spline_eval), as well as
to compute its first and second derivatives (#ncm_spline_eval_deriv, #ncm_spline_eval_deriv2)
and integration (#ncm_spline_eval_integ).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare_base" c:identifier="ncm_spline_prepare_base">
        <doc xml:space="preserve">This function computes the second derivatives of @s and it is used to prepare a
bidimensional spline.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_spline_ref">
        <doc xml:space="preserve">Increases the reference count of @s by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@s</doc>
          <type name="Spline" c:type="NcmSpline*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="ncm_spline_set">
        <doc xml:space="preserve">This funtion sets both @xv and @yv vectors to @s.
The two vectors must have the same length.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSpline</doc>
          <type name="Spline" c:type="NcmSpline*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </instance-parameter>
          <parameter name="xv" transfer-ownership="none">
            <doc xml:space="preserve">#NcmVector of knots</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="yv" transfer-ownership="none">
            <doc xml:space="preserve">#NcmVector of the values of the function, to be interpolated, computed at @xv</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="init" transfer-ownership="none">
            <doc xml:space="preserve">TRUE to prepare @s or FALSE to not prepare it</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_array" c:identifier="ncm_spline_set_array">
        <doc xml:space="preserve">This function sets @x as the knot vector and @y as the function values vector
of the spline.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">GArray of knots</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">GArray of the values of the function, to be interpolated, computed at @x</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="init" transfer-ownership="none">
            <doc xml:space="preserve">TRUE to prepare @s or FALSE to not prepare it</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data_static" c:identifier="ncm_spline_set_data_static">
        <doc xml:space="preserve">This function sets @x as the knot vector and @y as the function values vector
of the spline.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">array of knots</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">array of the values of the function, to be interpolated, computed at @x</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">lenght of @x and @y</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="init" transfer-ownership="none">
            <doc xml:space="preserve">TRUE to prepare @s or FALSE to not prepare it</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_func"
              c:identifier="ncm_spline_set_func"
              introspectable="0">
        <doc xml:space="preserve">This function automatically determines the knots of @s in the interval [@xi, @xf] given a @ftype and @rel_error.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline.</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </instance-parameter>
          <parameter name="ftype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSplineFuncType.</doc>
            <type name="SplineFuncType" c:type="NcmSplineFuncType"/>
          </parameter>
          <parameter name="F" transfer-ownership="none">
            <doc xml:space="preserve">function to be approximated by spline functions.</doc>
            <type c:type="gsl_function*"/>
          </parameter>
          <parameter name="xi" transfer-ownership="none">
            <doc xml:space="preserve">lower knot.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="xf" transfer-ownership="none">
            <doc xml:space="preserve">upper knot.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="max_nodes" transfer-ownership="none">
            <doc xml:space="preserve">maximum number of knots.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="rel_error" transfer-ownership="none">
            <doc xml:space="preserve">relative error between the function to be interpolated and the spline result.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_len" c:identifier="ncm_spline_set_len">
        <doc xml:space="preserve">This function sets @len as the length of the spline,
it allocates the necessary #NcmVector. If it is already
allocated with different length it frees the current vectors
and allocates new ones.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </instance-parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">number of knots in the spline</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_xv" c:identifier="ncm_spline_set_xv">
        <doc xml:space="preserve">This function sets @xv as the knot vector of the spline.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline.</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </instance-parameter>
          <parameter name="xv" transfer-ownership="none">
            <doc xml:space="preserve">#NcmVector of knots.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="init" transfer-ownership="none">
            <doc xml:space="preserve">TRUE to prepare @s or FALSE to not prepare it.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_yv" c:identifier="ncm_spline_set_yv">
        <doc xml:space="preserve">This function sets @yv as the function values vector. This #NcmVector @yv
comprises the function values computed at the knots of the spline.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </instance-parameter>
          <parameter name="yv" transfer-ownership="none">
            <doc xml:space="preserve">#NcmVector of the values of the function to be interpolated</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="init" transfer-ownership="none">
            <doc xml:space="preserve">TRUE to prepare @s or FALSE to not prepare it</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="length"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="x" writable="1" transfer-ownership="none">
        <type name="Vector"/>
      </property>
      <property name="y" writable="1" transfer-ownership="none">
        <type name="Vector"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="len" readable="0" private="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="xv" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="yv" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="acc" introspectable="0" readable="0" private="1">
        <type c:type="gsl_interp_accel*"/>
      </field>
      <field name="init" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="empty" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <class name="Spline2d"
           c:symbol-prefix="spline2d"
           c:type="NcmSpline2d"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NcmSpline2d"
           glib:get-type="ncm_spline2d_get_type"
           glib:type-struct="Spline2dClass">
      <function name="clear" c:identifier="ncm_spline2d_clear">
        <doc xml:space="preserve">Atomically decrements the reference count of @s2d by one. If the reference count drops to 0,
all memory allocated by @s2d is released. Set pointer to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="copy_empty" invoker="copy_empty">
        <doc xml:space="preserve">This function copies the bidimensional spline @s2d into an initialized
empty #NcmSpline2d of a specific type.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmSpline2d.</doc>
          <type name="Spline2d" c:type="NcmSpline2d*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d.</doc>
            <type name="Spline2d" c:type="const NcmSpline2d*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="d2zdx2" invoker="deriv_d2zdx2">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The interpolated derivative $\mathrm{d}^2z/\mathrm{d}x^2$ computed at the point (@x, @y).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="d2zdxy" invoker="deriv_d2zdxy">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The interpolated derivative $\mathrm{d}^2z/\mathrm{d}x\mathrm{d}y$ computed at the point (@x, @y).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="d2zdy2" invoker="deriv_d2zdy2">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The interpolated derivative $\mathrm{d}^2z/\mathrm{d}y^2$ computed at the point (@x, @y).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dzdx" invoker="deriv_dzdx">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The interpolated derivative $\mathrm{d}z/\mathrm{d}x$ computed at the point (@x, @y).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dzdy" invoker="deriv_dzdy">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The interpolated derivative $\mathrm{d}z/\mathrm{d}y$ computed at the point (@x, @y).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval" invoker="eval">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The interpolated value of a function computed at the point (@x, @y).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="int_dx" invoker="integ_dx">
        <doc xml:space="preserve">This function computes the integration in x over the interval [@xl, @xu] and
at @y.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The numerical integral in x of an interpolated function over the range [@xl, @xu] and at @y.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="xl" transfer-ownership="none">
            <doc xml:space="preserve">lower limit of integration</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="xu" transfer-ownership="none">
            <doc xml:space="preserve">upper limit of integration</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="int_dx_spline" introspectable="0">
        <return-value>
          <type name="Spline" c:type="NcmSpline*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="xl" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="xu" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="int_dxdy" invoker="integ_dxdy">
        <doc xml:space="preserve">This function computes the integration in both x and y directions over the intervals
[@xl, @xu] and [@yl, @yu].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The numerical integral in x and y of an interpolated function over the ranges [@xl, @xu] and [@yl, @yu].</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="xl" transfer-ownership="none">
            <doc xml:space="preserve">lower limit of integration in the x-direction</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="xu" transfer-ownership="none">
            <doc xml:space="preserve">upper limit of integration in the x-direction</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yl" transfer-ownership="none">
            <doc xml:space="preserve">lower limit of integration in the y-direction</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yu" transfer-ownership="none">
            <doc xml:space="preserve">upper limit of integration in the y-direction</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="int_dy" invoker="integ_dy">
        <doc xml:space="preserve">This function computes the integration in y over the interval [@yl, @yu] and
at @x.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The numerical integral in y of an interpolated function over the range [@yl, @yu] and at @x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yl" transfer-ownership="none">
            <doc xml:space="preserve">lower limit of integration</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yu" transfer-ownership="none">
            <doc xml:space="preserve">upper limit of integration</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="int_dy_spline" introspectable="0">
        <return-value>
          <type name="Spline" c:type="NcmSpline*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="yl" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yu" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare" invoker="prepare">
        <doc xml:space="preserve">This function prepares the bidimensional spline @s2d such that one can evaluate it (#ncm_spline2d_eval),
as well as to compute its integration in x, y or both directions.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reset">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="copy" c:identifier="ncm_spline2d_copy">
        <doc xml:space="preserve">This function copies the two #NcmVector and the #NcmMatrix of the bidimensional
spline @s2d into those two #NcmVector and #NcmMatrix of a new #NcmSpline2d.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #NcmSpline2d.</doc>
          <type name="Spline2d" c:type="NcmSpline2d*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy_empty" c:identifier="ncm_spline2d_copy_empty">
        <doc xml:space="preserve">This function copies the bidimensional spline @s2d into an initialized
empty #NcmSpline2d of a specific type.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmSpline2d.</doc>
          <type name="Spline2d" c:type="NcmSpline2d*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d.</doc>
            <type name="Spline2d" c:type="const NcmSpline2d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="deriv_d2zdx2" c:identifier="ncm_spline2d_deriv_d2zdx2">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The interpolated derivative $\mathrm{d}^2z/\mathrm{d}x^2$ computed at the point (@x, @y).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="deriv_d2zdxy" c:identifier="ncm_spline2d_deriv_d2zdxy">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The interpolated derivative $\mathrm{d}^2z/\mathrm{d}x\mathrm{d}y$ computed at the point (@x, @y).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="deriv_d2zdy2" c:identifier="ncm_spline2d_deriv_d2zdy2">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The interpolated derivative $\mathrm{d}^2z/\mathrm{d}y^2$ computed at the point (@x, @y).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="deriv_dzdx" c:identifier="ncm_spline2d_deriv_dzdx">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The interpolated derivative $\mathrm{d}z/\mathrm{d}x$ computed at the point (@x, @y).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="deriv_dzdy" c:identifier="ncm_spline2d_deriv_dzdy">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The interpolated derivative $\mathrm{d}z/\mathrm{d}y$ computed at the point (@x, @y).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval" c:identifier="ncm_spline2d_eval">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The interpolated value of a function computed at the point (@x, @y).</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_spline2d_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @s2d by one. If the reference count drops to 0,
all memory allocated by @s2d is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="integ_dx" c:identifier="ncm_spline2d_integ_dx">
        <doc xml:space="preserve">This function computes the integration in x over the interval [@xl, @xu] and
at @y.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The numerical integral in x of an interpolated function over the range [@xl, @xu] and at @y.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="xl" transfer-ownership="none">
            <doc xml:space="preserve">lower limit of integration</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="xu" transfer-ownership="none">
            <doc xml:space="preserve">upper limit of integration</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="integ_dx_spline"
              c:identifier="ncm_spline2d_integ_dx_spline">
        <doc xml:space="preserve">This function computes the integral in x of the bidimensional interpolated function
over the range [@xl, @xu] resulting in a one dimensional function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #NcmSpline.</doc>
          <type name="Spline" c:type="NcmSpline*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="xl" transfer-ownership="none">
            <doc xml:space="preserve">lower limit of integration x</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="xu" transfer-ownership="none">
            <doc xml:space="preserve">upper limit of integration x</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="integ_dx_spline_val"
              c:identifier="ncm_spline2d_integ_dx_spline_val">
        <doc xml:space="preserve">This function calls #ncm_spline2d_integ_dx_spline and evaluates the resulting
#NcmSpline at @y.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of @s2d integrated in x over the range [@xl, @xu] and computed at @y.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="xl" transfer-ownership="none">
            <doc xml:space="preserve">lower limit of integration</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="xu" transfer-ownership="none">
            <doc xml:space="preserve">upper limit of integration</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="integ_dxdy" c:identifier="ncm_spline2d_integ_dxdy">
        <doc xml:space="preserve">This function computes the integration in both x and y directions over the intervals
[@xl, @xu] and [@yl, @yu].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The numerical integral in x and y of an interpolated function over the ranges [@xl, @xu] and [@yl, @yu].</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="xl" transfer-ownership="none">
            <doc xml:space="preserve">lower limit of integration in the x-direction</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="xu" transfer-ownership="none">
            <doc xml:space="preserve">upper limit of integration in the x-direction</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yl" transfer-ownership="none">
            <doc xml:space="preserve">lower limit of integration in the y-direction</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yu" transfer-ownership="none">
            <doc xml:space="preserve">upper limit of integration in the y-direction</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="integ_dxdy_spline_x"
              c:identifier="ncm_spline2d_integ_dxdy_spline_x">
        <doc xml:space="preserve">This function calls #ncm_spline2d_integ_dx_spline and integrates the resulting
#NcmSpline over the interval [@yl, @yu].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of @s2d integrated in x and y over the ranges [@xl, @xu] and [@yl, @yu], respectively.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="xl" transfer-ownership="none">
            <doc xml:space="preserve">lower limit of integration in the x-direction</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="xu" transfer-ownership="none">
            <doc xml:space="preserve">upper limit of integration in the x-direction</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yl" transfer-ownership="none">
            <doc xml:space="preserve">lower limit of integration in the y-direction</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yu" transfer-ownership="none">
            <doc xml:space="preserve">upper limit of integration in the y-direction</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="integ_dxdy_spline_y"
              c:identifier="ncm_spline2d_integ_dxdy_spline_y">
        <doc xml:space="preserve">This function calls #ncm_spline2d_integ_dy_spline and integrates the resulting
#NcmSpline over the interval [@xl, @xu].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of @s2d integrated in x and y over the ranges [@xl, @xu] and [@yl, @yu], respectively.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="xl" transfer-ownership="none">
            <doc xml:space="preserve">lower limit of integration in the x-direction</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="xu" transfer-ownership="none">
            <doc xml:space="preserve">upper limit of integration in the x-direction</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yl" transfer-ownership="none">
            <doc xml:space="preserve">lower limit of integration in the y-direction</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yu" transfer-ownership="none">
            <doc xml:space="preserve">upper limit of integration in the y-direction</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="integ_dy" c:identifier="ncm_spline2d_integ_dy">
        <doc xml:space="preserve">This function computes the integration in y over the interval [@yl, @yu] and
at @x.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The numerical integral in y of an interpolated function over the range [@yl, @yu] and at @x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yl" transfer-ownership="none">
            <doc xml:space="preserve">lower limit of integration</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yu" transfer-ownership="none">
            <doc xml:space="preserve">upper limit of integration</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="integ_dy_spline"
              c:identifier="ncm_spline2d_integ_dy_spline">
        <doc xml:space="preserve">This function computes the integral in y of the bidimensional interpolated function
over the range [@yl, @yu] resulting in a one dimensional function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #NcmSpline.</doc>
          <type name="Spline" c:type="NcmSpline*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="yl" transfer-ownership="none">
            <doc xml:space="preserve">lower limit of integration</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yu" transfer-ownership="none">
            <doc xml:space="preserve">upper limit of integration</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="integ_dy_spline_val"
              c:identifier="ncm_spline2d_integ_dy_spline_val">
        <doc xml:space="preserve">This function calls #ncm_spline2d_integ_dy_spline and evaluates the resulting
#NcmSpline at @x.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of @s2d integrated in y over the range [@yl, @yu] and computed at @x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-coordinate value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yl" transfer-ownership="none">
            <doc xml:space="preserve">lower limit of integration</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yu" transfer-ownership="none">
            <doc xml:space="preserve">upper limit of integration</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="m_integ_total"
              c:identifier="ncm_spline2dim_integ_total"
              moved-to="spline2dim_integ_total">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The numerical integral in both x and y directions of an interpolated function
over the entire valid ranges of x and y coordinates.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="min_size" c:identifier="ncm_spline2d_min_size">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The size of the #NcmSpline member of @s2d.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="new" c:identifier="ncm_spline2d_new">
        <doc xml:space="preserve">This function returns a new #NcmSpline2d, where the knots of this new spline are given
in the #NcmVector @xv and @yv. The values of the function, at those knots, to be interpolated are
given in the #NcmMatrix @zm.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmSpline2d.</doc>
          <type name="Spline2d" c:type="NcmSpline2d*"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmSpline2d</doc>
            <type name="Spline2d" c:type="const NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="xv" transfer-ownership="none">
            <doc xml:space="preserve">#NcmVector of knots</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="yv" transfer-ownership="none">
            <doc xml:space="preserve">#NcmVector of knots</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="zm" transfer-ownership="none">
            <doc xml:space="preserve">#NcmMatrix of the values of the function, to be interpolated, computed at @xv and @yv</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
          <parameter name="init" transfer-ownership="none">
            <doc xml:space="preserve">TRUE to prepare the new #NcmSpline2d or FALSE to not prepare it</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="ncm_spline2d_prepare">
        <doc xml:space="preserve">This function prepares the bidimensional spline @s2d such that one can evaluate it (#ncm_spline2d_eval),
as well as to compute its integration in x, y or both directions.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="ncm_spline2d_set">
        <doc xml:space="preserve">This funtion sets @xv and @yv vectors and @zm matrix to @s.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="xv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector of knots</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="yv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector of knots</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="zm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix of the values of the function, to be interpolated, computed at @xv and @yv</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
          <parameter name="init" transfer-ownership="none">
            <doc xml:space="preserve">TRUE to prepare the #NcmSpline2d or FALSE to not prepare it</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_function"
              c:identifier="ncm_spline2d_set_function"
              introspectable="0">
        <doc xml:space="preserve">This function automatically determines the knots of @s2d in the intervals [@xl, @xu] and
[@yl, @yu] given a @ftype and @rel_error.

The functions @Fx and @Fy are the bidimensional function given at specific values of y and x, respectively.
These x and y values must be in the the intervals [@xl, @xu] and [@yl, @yu].</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="ftype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSplineFuncType</doc>
            <type name="SplineFuncType" c:type="NcmSplineFuncType"/>
          </parameter>
          <parameter name="Fx" transfer-ownership="none">
            <doc xml:space="preserve">function of x variable to be approximated by spline functions</doc>
            <type c:type="gsl_function*"/>
          </parameter>
          <parameter name="Fy" transfer-ownership="none">
            <doc xml:space="preserve">function of y variable to be approximated by spline functions</doc>
            <type c:type="gsl_function*"/>
          </parameter>
          <parameter name="xl" transfer-ownership="none">
            <doc xml:space="preserve">lower knot of x-coordinate</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="xu" transfer-ownership="none">
            <doc xml:space="preserve">upper knot of x-coordinate</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yl" transfer-ownership="none">
            <doc xml:space="preserve">lower knot of y-coordinate</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yu" transfer-ownership="none">
            <doc xml:space="preserve">upper knot of y-coordinate</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="rel_err" transfer-ownership="none">
            <doc xml:space="preserve">relative error between the function to be interpolated and the spline result</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="use_acc" c:identifier="ncm_spline2d_use_acc">
        <doc xml:space="preserve">Whether to use accelerated bsearch to find the
right knots. When enabled evalulation functions
are not reentrant.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="s2d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline2d</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </instance-parameter>
          <parameter name="use_acc" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="init" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">boolean whether to prepare the NcmSpline2d</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="spline"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">#NcmSpline object used internally.</doc>
        <type name="Spline"/>
      </property>
      <property name="use-acc" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="x-vector" writable="1" transfer-ownership="none">
        <type name="Vector"/>
      </property>
      <property name="y-vector" writable="1" transfer-ownership="none">
        <type name="Vector"/>
      </property>
      <property name="z-matrix" writable="1" transfer-ownership="none">
        <type name="Matrix"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="empty" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="init" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="to_init" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="s" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline*"/>
      </field>
      <field name="xv" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="yv" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="zm" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="acc_x" introspectable="0" readable="0" private="1">
        <type c:type="gsl_interp_accel*"/>
      </field>
      <field name="acc_y" introspectable="0" readable="0" private="1">
        <type c:type="gsl_interp_accel*"/>
      </field>
      <field name="use_acc" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="no_stride" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <class name="Spline2dBicubic"
           c:symbol-prefix="spline2d_bicubic"
           c:type="NcmSpline2dBicubic"
           parent="Spline2d"
           glib:type-name="NcmSpline2dBicubic"
           glib:get-type="ncm_spline2d_bicubic_get_type"
           glib:type-struct="Spline2dBicubicClass">
      <constructor name="new" c:identifier="ncm_spline2d_bicubic_new">
        <doc xml:space="preserve">This function initializes a #NcmSpline2d of bicubic type given @s.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmSpline2d.</doc>
          <type name="Spline2d" c:type="NcmSpline2d*"/>
        </return-value>
        <parameters>
          <parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSplineCubic derived #NcmSpline.</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="notaknot_new"
                   c:identifier="ncm_spline2d_bicubic_notaknot_new">
        <doc xml:space="preserve">This function initializes a #NcmSpline2d of bicubic notaknot type.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmSpline2d.</doc>
          <type name="Spline2d" c:type="NcmSpline2d*"/>
        </return-value>
      </constructor>
      <function name="bi" c:identifier="ncm_spline2d_bicubic_bi">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="sc" transfer-ownership="none">
            <type name="SplineCubic" c:type="NcmSplineCubic*"/>
          </parameter>
          <parameter name="xv" transfer-ownership="none">
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="yv" transfer-ownership="none">
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </function>
      <function name="bi_bip1" c:identifier="ncm_spline2d_bicubic_bi_bip1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sc" transfer-ownership="none">
            <type name="SplineCubic" c:type="NcmSplineCubic*"/>
          </parameter>
          <parameter name="xv" transfer-ownership="none">
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="yv" transfer-ownership="none">
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="b_i" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="b_ip1" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </function>
      <function name="eval_poly" c:identifier="ncm_spline2d_bicubic_eval_poly">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="sa" transfer-ownership="none">
            <type name="Spline2dBicubicCoeffs"
                  c:type="const NcmSpline2dBicubicCoeffs*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="fij_to_aij"
                c:identifier="ncm_spline2d_bicubic_fij_to_aij">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sf" transfer-ownership="none">
            <type name="Spline2dBicubicCoeffs"
                  c:type="NcmSpline2dBicubicCoeffs*"/>
          </parameter>
          <parameter name="dx" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="dy" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sa" transfer-ownership="none">
            <type name="Spline2dBicubicCoeffs"
                  c:type="NcmSpline2dBicubicCoeffs*"/>
          </parameter>
        </parameters>
      </function>
      <function name="integ_dx_coeffs"
                c:identifier="ncm_spline2d_bicubic_integ_dx_coeffs">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="aij" transfer-ownership="none">
            <type name="Spline2dBicubicCoeffs"
                  c:type="NcmSpline2dBicubicCoeffs*"/>
          </parameter>
          <parameter name="dy" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="coeffs" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </function>
      <function name="integ_dy_coeffs"
                c:identifier="ncm_spline2d_bicubic_integ_dy_coeffs">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="aij" transfer-ownership="none">
            <type name="Spline2dBicubicCoeffs"
                  c:type="NcmSpline2dBicubicCoeffs*"/>
          </parameter>
          <parameter name="dx" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="coeffs" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </function>
      <function name="integ_eval2d"
                c:identifier="ncm_spline2d_bicubic_integ_eval2d">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="aij" transfer-ownership="none">
            <type name="Spline2dBicubicCoeffs"
                  c:type="NcmSpline2dBicubicCoeffs*"/>
          </parameter>
          <parameter name="x0" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="xl" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="xu" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="y0" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="yl" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="yu" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Spline2d" c:type="NcmSpline2d"/>
      </field>
      <field name="z_x" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline*"/>
      </field>
      <field name="dzdy_x" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline*"/>
      </field>
      <field name="z_y" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline*"/>
      </field>
      <field name="bicoeff" readable="0" private="1">
        <type name="Spline2dBicubicCoeffs" c:type="NcmSpline2dBicubicCoeffs*"/>
      </field>
      <field name="optimize_dx" introspectable="0" readable="0" private="1">
        <type c:type="_NcmSpline2dBicubicOptimizeInt"/>
      </field>
      <field name="optimize_dy" introspectable="0" readable="0" private="1">
        <type c:type="_NcmSpline2dBicubicOptimizeInt"/>
      </field>
    </class>
    <record name="Spline2dBicubicClass"
            c:type="NcmSpline2dBicubicClass"
            glib:is-gtype-struct-for="Spline2dBicubic">
      <field name="parent_class" readable="0" private="1">
        <type name="Spline2dClass" c:type="NcmSpline2dClass"/>
      </field>
    </record>
    <record name="Spline2dBicubicCoeffs" c:type="NcmSpline2dBicubicCoeffs">
      <doc xml:space="preserve">FIXME</doc>
      <field name="ij" readable="0" private="1">
        <array zero-terminated="0" c:type="gdouble" fixed-size="4">
          <type name="gdouble" c:type="gdouble"/>
        </array>
      </field>
    </record>
    <record name="Spline2dClass"
            c:type="NcmSpline2dClass"
            glib:is-gtype-struct-for="Spline2d">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="copy_empty">
        <callback name="copy_empty">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">a #NcmSpline2d.</doc>
            <type name="Spline2d" c:type="NcmSpline2d*"/>
          </return-value>
          <parameters>
            <parameter name="s2d" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmSpline2d.</doc>
              <type name="Spline2d" c:type="const NcmSpline2d*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reset">
        <callback name="reset">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="s2d" transfer-ownership="none">
              <type name="Spline2d" c:type="NcmSpline2d*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare">
        <callback name="prepare">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="s2d" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmSpline2d</doc>
              <type name="Spline2d" c:type="NcmSpline2d*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval">
        <callback name="eval">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The interpolated value of a function computed at the point (@x, @y).</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="s2d" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmSpline2d</doc>
              <type name="Spline2d" c:type="NcmSpline2d*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve">x-coordinate value</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve">y-coordinate value</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dzdx">
        <callback name="dzdx">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The interpolated derivative $\mathrm{d}z/\mathrm{d}x$ computed at the point (@x, @y).</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="s2d" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmSpline2d</doc>
              <type name="Spline2d" c:type="NcmSpline2d*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve">x-coordinate value</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve">y-coordinate value</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dzdy">
        <callback name="dzdy">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The interpolated derivative $\mathrm{d}z/\mathrm{d}y$ computed at the point (@x, @y).</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="s2d" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmSpline2d</doc>
              <type name="Spline2d" c:type="NcmSpline2d*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve">x-coordinate value</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve">y-coordinate value</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="d2zdxy">
        <callback name="d2zdxy">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The interpolated derivative $\mathrm{d}^2z/\mathrm{d}x\mathrm{d}y$ computed at the point (@x, @y).</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="s2d" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmSpline2d</doc>
              <type name="Spline2d" c:type="NcmSpline2d*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve">x-coordinate value</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve">y-coordinate value</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="d2zdx2">
        <callback name="d2zdx2">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The interpolated derivative $\mathrm{d}^2z/\mathrm{d}x^2$ computed at the point (@x, @y).</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="s2d" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmSpline2d</doc>
              <type name="Spline2d" c:type="NcmSpline2d*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve">x-coordinate value</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve">y-coordinate value</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="d2zdy2">
        <callback name="d2zdy2">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The interpolated derivative $\mathrm{d}^2z/\mathrm{d}y^2$ computed at the point (@x, @y).</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="s2d" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmSpline2d</doc>
              <type name="Spline2d" c:type="NcmSpline2d*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve">x-coordinate value</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve">y-coordinate value</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="int_dx">
        <callback name="int_dx">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The numerical integral in x of an interpolated function over the range [@xl, @xu] and at @y.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="s2d" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmSpline2d</doc>
              <type name="Spline2d" c:type="NcmSpline2d*"/>
            </parameter>
            <parameter name="xl" transfer-ownership="none">
              <doc xml:space="preserve">lower limit of integration</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="xu" transfer-ownership="none">
              <doc xml:space="preserve">upper limit of integration</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve">y-coordinate value</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="int_dy">
        <callback name="int_dy">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The numerical integral in y of an interpolated function over the range [@yl, @yu] and at @x.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="s2d" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmSpline2d</doc>
              <type name="Spline2d" c:type="NcmSpline2d*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve">x-coordinate value</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="yl" transfer-ownership="none">
              <doc xml:space="preserve">lower limit of integration</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="yu" transfer-ownership="none">
              <doc xml:space="preserve">upper limit of integration</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="int_dxdy">
        <callback name="int_dxdy">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The numerical integral in x and y of an interpolated function over the ranges [@xl, @xu] and [@yl, @yu].</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="s2d" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmSpline2d</doc>
              <type name="Spline2d" c:type="NcmSpline2d*"/>
            </parameter>
            <parameter name="xl" transfer-ownership="none">
              <doc xml:space="preserve">lower limit of integration in the x-direction</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="xu" transfer-ownership="none">
              <doc xml:space="preserve">upper limit of integration in the x-direction</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="yl" transfer-ownership="none">
              <doc xml:space="preserve">lower limit of integration in the y-direction</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="yu" transfer-ownership="none">
              <doc xml:space="preserve">upper limit of integration in the y-direction</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="int_dx_spline" introspectable="0">
        <callback name="int_dx_spline" introspectable="0">
          <return-value>
            <type name="Spline" c:type="NcmSpline*"/>
          </return-value>
          <parameters>
            <parameter name="s2d" transfer-ownership="none">
              <type name="Spline2d" c:type="NcmSpline2d*"/>
            </parameter>
            <parameter name="xl" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="xu" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="int_dy_spline" introspectable="0">
        <callback name="int_dy_spline" introspectable="0">
          <return-value>
            <type name="Spline" c:type="NcmSpline*"/>
          </return-value>
          <parameters>
            <parameter name="s2d" transfer-ownership="none">
              <type name="Spline2d" c:type="NcmSpline2d*"/>
            </parameter>
            <parameter name="yl" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="yu" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Spline2dGsl"
           c:symbol-prefix="spline2d_gsl"
           c:type="NcmSpline2dGsl"
           parent="Spline2d"
           glib:type-name="NcmSpline2dGsl"
           glib:get-type="ncm_spline2d_gsl_get_type"
           glib:type-struct="Spline2dGslClass">
      <constructor name="natural_new"
                   c:identifier="ncm_spline2d_gsl_natural_new">
        <doc xml:space="preserve">This function initializes a #NcmSpline2d of gsl type.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmSpline2d.</doc>
          <type name="Spline2d" c:type="NcmSpline2d*"/>
        </return-value>
      </constructor>
      <constructor name="new" c:identifier="ncm_spline2d_gsl_new">
        <doc xml:space="preserve">This function initializes a #NcmSpline2d of gsl type given s.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmSpline2d.</doc>
          <type name="Spline2d" c:type="NcmSpline2d*"/>
        </return-value>
        <parameters>
          <parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSplineGsl derived #NcmSpline.</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Spline2d" c:type="NcmSpline2d"/>
      </field>
      <field name="zdiff" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="vertv" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="vertintv" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="s_hor" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline**"/>
      </field>
      <field name="s_dzdy" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline**"/>
      </field>
      <field name="s_ver" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline*"/>
      </field>
      <field name="s_ver_integ" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline*"/>
      </field>
      <field name="s_hor_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="Spline2dGslClass"
            c:type="NcmSpline2dGslClass"
            glib:is-gtype-struct-for="Spline2dGsl">
      <field name="parent_class" readable="0" private="1">
        <type name="Spline2dClass" c:type="NcmSpline2dClass"/>
      </field>
    </record>
    <class name="Spline2dSpline"
           c:symbol-prefix="spline2d_spline"
           c:type="NcmSpline2dSpline"
           parent="Spline2d"
           glib:type-name="NcmSpline2dSpline"
           glib:get-type="ncm_spline2d_spline_get_type"
           glib:type-struct="Spline2dSplineClass">
      <constructor name="new" c:identifier="ncm_spline2d_spline_new">
        <doc xml:space="preserve">This function initializes a #NcmSpline2d
FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmSpline2d.</doc>
          <type name="Spline2d" c:type="NcmSpline2d*"/>
        </return-value>
        <parameters>
          <parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline.</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Spline2d" c:type="NcmSpline2d"/>
      </field>
      <field name="first_prepare" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="first_prepare_integ" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="last_x" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="last_xl" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="last_xu" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="last_yl" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="last_yu" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="vertv" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="vertintv" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="s_hor" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline**"/>
      </field>
      <field name="s_ver" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline*"/>
      </field>
      <field name="s_ver_integ" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline*"/>
      </field>
      <field name="s_hor_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="Spline2dSplineClass"
            c:type="NcmSpline2dSplineClass"
            glib:is-gtype-struct-for="Spline2dSpline">
      <field name="parent_class" readable="0" private="1">
        <type name="Spline2dClass" c:type="NcmSpline2dClass"/>
      </field>
    </record>
    <record name="SplineClass"
            c:type="NcmSplineClass"
            glib:is-gtype-struct-for="Spline">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="name">
        <callback name="name">
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="s" transfer-ownership="none">
              <type name="Spline" c:type="NcmSpline*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reset">
        <callback name="reset">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="s" transfer-ownership="none">
              <type name="Spline" c:type="NcmSpline*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare">
        <callback name="prepare">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="s" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmSpline</doc>
              <type name="Spline" c:type="NcmSpline*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_base">
        <callback name="prepare_base">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="s" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmSpline</doc>
              <type name="Spline" c:type="NcmSpline*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="min_size">
        <callback name="min_size">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">Minimum number of knots required.</doc>
            <type name="gsize" c:type="gsize"/>
          </return-value>
          <parameters>
            <parameter name="s" transfer-ownership="none">
              <doc xml:space="preserve">a constant #NcmSpline</doc>
              <type name="Spline" c:type="const NcmSpline*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval">
        <callback name="eval">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The interpolated value of a function computed at @x.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="s" transfer-ownership="none">
              <doc xml:space="preserve">a constant #NcmSpline</doc>
              <type name="Spline" c:type="const NcmSpline*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve">x-coordinate value</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="deriv">
        <callback name="deriv">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="s" transfer-ownership="none">
              <type name="Spline" c:type="const NcmSpline*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="deriv2">
        <callback name="deriv2">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="s" transfer-ownership="none">
              <type name="Spline" c:type="const NcmSpline*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="deriv_nmax">
        <callback name="deriv_nmax">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="s" transfer-ownership="none">
              <type name="Spline" c:type="const NcmSpline*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="integ">
        <callback name="integ">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="s" transfer-ownership="none">
              <type name="Spline" c:type="const NcmSpline*"/>
            </parameter>
            <parameter name="xi" transfer-ownership="none">
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="xf" transfer-ownership="none">
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="copy_empty">
        <callback name="copy_empty">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </return-value>
          <parameters>
            <parameter name="s" transfer-ownership="none">
              <doc xml:space="preserve">a constant #NcmSpline</doc>
              <type name="Spline" c:type="const NcmSpline*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="SplineCubic"
           c:symbol-prefix="spline_cubic"
           c:type="NcmSplineCubic"
           parent="Spline"
           abstract="1"
           glib:type-name="NcmSplineCubic"
           glib:get-type="ncm_spline_cubic_get_type"
           glib:type-struct="SplineCubicClass">
      <field name="parent_instance" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline"/>
      </field>
      <field name="b" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="c" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="d" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="g" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="diag" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="offdiag" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="init" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="len" readable="0" private="1">
        <type name="gsize" c:type="gsize"/>
      </field>
    </class>
    <record name="SplineCubicClass"
            c:type="NcmSplineCubicClass"
            glib:is-gtype-struct-for="SplineCubic">
      <field name="parent_class" readable="0" private="1">
        <type name="SplineClass" c:type="NcmSplineClass"/>
      </field>
    </record>
    <class name="SplineCubicNotaknot"
           c:symbol-prefix="spline_cubic_notaknot"
           c:type="NcmSplineCubicNotaknot"
           parent="SplineCubic"
           glib:type-name="NcmSplineCubicNotaknot"
           glib:get-type="ncm_spline_cubic_notaknot_get_type"
           glib:type-struct="SplineCubicNotaknotClass">
      <constructor name="new" c:identifier="ncm_spline_cubic_notaknot_new">
        <doc xml:space="preserve">This function returns a new cubic #NcmSpline.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmSpline.</doc>
          <type name="Spline" c:type="NcmSpline*"/>
        </return-value>
      </constructor>
      <constructor name="new_full"
                   c:identifier="ncm_spline_cubic_notaknot_new_full">
        <doc xml:space="preserve">This function returns a new #NcmSpline setting all its members.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmSpline.</doc>
          <type name="Spline" c:type="NcmSpline*"/>
        </return-value>
        <parameters>
          <parameter name="xv" transfer-ownership="none">
            <doc xml:space="preserve">#NcmVector of knots.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="yv" transfer-ownership="none">
            <doc xml:space="preserve">#NcmVector of the values of the function, to be interpolated, computed at @xv.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="init" transfer-ownership="none">
            <doc xml:space="preserve">TRUE to prepare the new #NcmSpline or FALSE to not prepare it.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="SplineCubic" c:type="NcmSplineCubic"/>
      </field>
    </class>
    <record name="SplineCubicNotaknotClass"
            c:type="NcmSplineCubicNotaknotClass"
            glib:is-gtype-struct-for="SplineCubicNotaknot">
      <field name="parent_class" readable="0" private="1">
        <type name="SplineCubicClass" c:type="NcmSplineCubicClass"/>
      </field>
    </record>
    <enumeration name="SplineFuncType"
                 glib:type-name="NcmSplineFuncType"
                 glib:get-type="ncm_spline_func_type_get_type"
                 c:type="NcmSplineFuncType">
      <doc xml:space="preserve">FIXME</doc>
      <member name="4points"
              value="0"
              c:identifier="NCM_SPLINE_FUNCTION_4POINTS"
              glib:nick="4points">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="2x2points"
              value="1"
              c:identifier="NCM_SPLINE_FUNCTION_2x2POINTS"
              glib:nick="2x2points">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="spline"
              value="2"
              c:identifier="NCM_SPLINE_FUNCTION_SPLINE"
              glib:nick="spline">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="spline_lnknot"
              value="3"
              c:identifier="NCM_SPLINE_FUNCTION_SPLINE_LNKNOT"
              glib:nick="spline-lnknot">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="spline_sinhknot"
              value="4"
              c:identifier="NCM_SPLINE_FUNCTION_SPLINE_SINHKNOT"
              glib:nick="spline-sinhknot">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="SplineGsl"
           c:symbol-prefix="spline_gsl"
           c:type="NcmSplineGsl"
           parent="Spline"
           glib:type-name="NcmSplineGsl"
           glib:get-type="ncm_spline_gsl_get_type"
           glib:type-struct="SplineGslClass">
      <constructor name="new"
                   c:identifier="ncm_spline_gsl_new"
                   introspectable="0">
        <doc xml:space="preserve">This function returns a new gsl #NcmSpline which will use @type
interpolation method.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmSpline.</doc>
          <type name="Spline" c:type="NcmSpline*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">gsl interpolation method.</doc>
            <type c:type="const gsl_interp_type*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full"
                   c:identifier="ncm_spline_gsl_new_full"
                   introspectable="0">
        <doc xml:space="preserve">This function returns a new gsl #NcmSpline setting all its members.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmSpline.</doc>
          <type name="Spline" c:type="NcmSpline*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">gsl interpolation method.</doc>
            <type c:type="const gsl_interp_type*"/>
          </parameter>
          <parameter name="xv" transfer-ownership="none">
            <doc xml:space="preserve">#NcmVector of knots.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="yv" transfer-ownership="none">
            <doc xml:space="preserve">#NcmVector of the values of the function, to be interpolated, computed at @xv.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="init" transfer-ownership="none">
            <doc xml:space="preserve">TRUE to prepare the new #NcmSpline or FALSE to not prepare it.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_type"
              c:identifier="ncm_spline_gsl_set_type"
              introspectable="0">
        <doc xml:space="preserve">This function sets the interpolation method @type to @sg.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sg" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSplineGsl.</doc>
            <type name="SplineGsl" c:type="NcmSplineGsl*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">gsl interpolation method.</doc>
            <type c:type="const gsl_interp_type*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_type_by_id"
              c:identifier="ncm_spline_gsl_set_type_by_id">
        <doc xml:space="preserve">This function sets the interpolation method @type_id to @sg.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sg" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSplineGsl.</doc>
            <type name="SplineGsl" c:type="NcmSplineGsl*"/>
          </instance-parameter>
          <parameter name="type_id" transfer-ownership="none">
            <doc xml:space="preserve">gsl interpolation method id.</doc>
            <type name="SplineGslType" c:type="NcmSplineGslType"/>
          </parameter>
        </parameters>
      </method>
      <property name="type-name"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline"/>
      </field>
      <field name="interp" introspectable="0" readable="0" private="1">
        <type c:type="gsl_interp*"/>
      </field>
      <field name="type_id" readable="0" private="1">
        <type name="SplineGslType" c:type="NcmSplineGslType"/>
      </field>
      <field name="inst_name" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="type" introspectable="0" readable="0" private="1">
        <type c:type="const gsl_interp_type*"/>
      </field>
    </class>
    <record name="SplineGslClass"
            c:type="NcmSplineGslClass"
            glib:is-gtype-struct-for="SplineGsl">
      <field name="parent_class" readable="0" private="1">
        <type name="SplineClass" c:type="NcmSplineClass"/>
      </field>
    </record>
    <enumeration name="SplineGslType"
                 glib:type-name="NcmSplineGslType"
                 glib:get-type="ncm_spline_gsl_type_get_type"
                 c:type="NcmSplineGslType">
      <doc xml:space="preserve">FIXME</doc>
      <member name="linear"
              value="0"
              c:identifier="NCM_SPLINE_GSL_LINEAR"
              glib:nick="linear">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="polynomial"
              value="1"
              c:identifier="NCM_SPLINE_GSL_POLYNOMIAL"
              glib:nick="polynomial">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="cspline"
              value="2"
              c:identifier="NCM_SPLINE_GSL_CSPLINE"
              glib:nick="cspline">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="cspline_periodic"
              value="3"
              c:identifier="NCM_SPLINE_GSL_CSPLINE_PERIODIC"
              glib:nick="cspline-periodic">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="akima"
              value="4"
              c:identifier="NCM_SPLINE_GSL_AKIMA"
              glib:nick="akima">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="akima_periodic"
              value="5"
              c:identifier="NCM_SPLINE_GSL_AKIMA_PERIODIC"
              glib:nick="akima-periodic">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="StatsDist1d"
           c:symbol-prefix="stats_dist1d"
           c:type="NcmStatsDist1d"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NcmStatsDist1d"
           glib:get-type="ncm_stats_dist1d_get_type"
           glib:type-struct="StatsDist1dClass">
      <function name="clear" c:identifier="ncm_stats_dist1d_clear">
        <doc xml:space="preserve">Decreases the reference count of *@sd1 and sets the pointer *@sd1 to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sd1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsDist1d</doc>
            <type name="StatsDist1d" c:type="NcmStatsDist1d**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="m2lnp">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="sd1" transfer-ownership="none">
            <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="p">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="sd1" transfer-ownership="none">
            <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare" invoker="prepare">
        <doc xml:space="preserve">Prepares the object for calculations.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sd1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsDist1d</doc>
            <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="eval_inv_pdf" c:identifier="ncm_stats_dist1d_eval_inv_pdf">
        <doc xml:space="preserve">Calculates the value of the random variable $x$ for which the cumulative
distribution satisfy $\int_{x_i}^x\mathrm{d}x^\prime p(x^\prime) = u$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="sd1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsDist1d</doc>
            <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
          </instance-parameter>
          <parameter name="u" transfer-ownership="none">
            <doc xml:space="preserve">a number between [0, 1]</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_inv_pdf_tail"
              c:identifier="ncm_stats_dist1d_eval_inv_pdf_tail">
        <doc xml:space="preserve">Calculates the value of the random variable $x$ for which the cumulative
distribution satisfy $\int_{x}^{x_f}\mathrm{d}x^\prime p(x^\prime) = v$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="sd1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsDist1d</doc>
            <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
          </instance-parameter>
          <parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">a number between [0, 1]</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_m2lnp" c:identifier="ncm_stats_dist1d_eval_m2lnp">
        <doc xml:space="preserve">Calculates the value of the $-2\ln(p(x))$ for the probability density.
It can be unnormalized, the norma can be retrieved using
ncm_stats_dist1d_eval_norma().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of $-2\ln(p(x))$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="sd1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsDist1d</doc>
            <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">random variable value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_mode" c:identifier="ncm_stats_dist1d_eval_mode">
        <doc xml:space="preserve">Calculates the mode of the distribution.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the mode of the probability distribution.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="sd1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsDist1d</doc>
            <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="eval_norma" c:identifier="ncm_stats_dist1d_eval_norma">
        <doc xml:space="preserve">Calculates the norma of the distribution. If the probability
density is already normalized it will return 1.0.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value distribution normalization.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="sd1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsDist1d</doc>
            <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="eval_p" c:identifier="ncm_stats_dist1d_eval_p">
        <doc xml:space="preserve">Calculates the value of the probability density at @x.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the probability density at @x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="sd1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsDist1d</doc>
            <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">random variable value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_pdf" c:identifier="ncm_stats_dist1d_eval_pdf">
        <doc xml:space="preserve">Calculates the value of the probability of the interval [x_i, @x].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the probability of the interval [x_i, @x].</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="sd1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsDist1d</doc>
            <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">random variable value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_stats_dist1d_free">
        <doc xml:space="preserve">Decreases the reference count of @sd1.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sd1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsDist1d</doc>
            <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="gen" c:identifier="ncm_stats_dist1d_gen">
        <doc xml:space="preserve">Generates a realization of the probability distribution.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the probability of the interval [x_i, @x].</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="sd1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsDist1d</doc>
            <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
          </instance-parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="ncm_stats_dist1d_prepare">
        <doc xml:space="preserve">Prepares the object for calculations.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sd1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsDist1d</doc>
            <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_stats_dist1d_ref">
        <doc xml:space="preserve">Increases the reference count of @sd1.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@sd1.</doc>
          <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sd1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsDist1d</doc>
            <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="abstol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="max-prob"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="norma" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="reltol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="xf" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="xi" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="xi" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="xf" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="norma" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="reltol" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="abstol" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="max_prob" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="inv_P" readable="0" private="1">
        <type name="OdeSpline" c:type="NcmOdeSpline*"/>
      </field>
      <field name="inv_Q" readable="0" private="1">
        <type name="OdeSpline" c:type="NcmOdeSpline*"/>
      </field>
      <field name="pdf" readable="0" private="1">
        <type name="OdeSpline" c:type="NcmOdeSpline*"/>
      </field>
      <field name="fmin" introspectable="0" readable="0" private="1">
        <type c:type="gsl_min_fminimizer*"/>
      </field>
    </class>
    <record name="StatsDist1dClass"
            c:type="NcmStatsDist1dClass"
            glib:is-gtype-struct-for="StatsDist1d">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="p">
        <callback name="p">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="sd1" transfer-ownership="none">
              <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="m2lnp">
        <callback name="m2lnp">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="sd1" transfer-ownership="none">
              <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare">
        <callback name="prepare">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="sd1" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmStatsDist1d</doc>
              <type name="StatsDist1d" c:type="NcmStatsDist1d*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="StatsDist1dEPDF"
           c:symbol-prefix="stats_dist1d_epdf"
           c:type="NcmStatsDist1dEPDF"
           parent="StatsDist1d"
           glib:type-name="NcmStatsDist1dEPDF"
           glib:get-type="ncm_stats_dist1d_epdf_get_type"
           glib:type-struct="StatsDist1dEPDFClass">
      <constructor name="new" c:identifier="ncm_stats_dist1d_epdf_new">
        <doc xml:space="preserve">Creates a new EPDF object, it creates an interpolated
PDF from the observations.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmStatsDist1dEPDF</doc>
          <type name="StatsDist1dEPDF" c:type="NcmStatsDist1dEPDF*"/>
        </return-value>
        <parameters>
          <parameter name="sd_min_scale" transfer-ownership="none">
            <doc xml:space="preserve">scale of the minimum distance</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full"
                   c:identifier="ncm_stats_dist1d_epdf_new_full">
        <doc xml:space="preserve">Creates a new EPDF object, it creates an interpolated
PDF from the observations.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmStatsDist1dEPDF</doc>
          <type name="StatsDist1dEPDF" c:type="NcmStatsDist1dEPDF*"/>
        </return-value>
        <parameters>
          <parameter name="max_obs" transfer-ownership="none">
            <doc xml:space="preserve">maximum observations before compacting</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="bw" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsDist1dEPDFBw</doc>
            <type name="StatsDist1dEPDFBw" c:type="NcmStatsDist1dEPDFBw"/>
          </parameter>
          <parameter name="h_fixed" transfer-ownership="none">
            <doc xml:space="preserve">fixed bandwidth</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="sd_min_scale" transfer-ownership="none">
            <doc xml:space="preserve">scale of the minimum distance</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_obs" c:identifier="ncm_stats_dist1d_epdf_add_obs">
        <doc xml:space="preserve">Adds a new observation @x (weight 1.0) to the @epdf1d updating
the internal approximation of the EPDF when necessary.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="epdf1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsDist1dEPDF</doc>
            <type name="StatsDist1dEPDF" c:type="NcmStatsDist1dEPDF*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">an observation</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_obs_weight"
              c:identifier="ncm_stats_dist1d_epdf_add_obs_weight">
        <doc xml:space="preserve">Adds a new observation @x with weight @w to the @epdf1d updating
the internal approximation of the EPDF when necessary.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="epdf1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsDist1dEPDF</doc>
            <type name="StatsDist1dEPDF" c:type="NcmStatsDist1dEPDF*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">an observation</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="w" transfer-ownership="none">
            <doc xml:space="preserve">observation weight</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_obs_mean"
              c:identifier="ncm_stats_dist1d_epdf_get_obs_mean">
        <doc xml:space="preserve">Calculates the mean value of the observations.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the mean value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="epdf1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsDist1dEPDF</doc>
            <type name="StatsDist1dEPDF" c:type="NcmStatsDist1dEPDF*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="ncm_stats_dist1d_epdf_reset">
        <doc xml:space="preserve">Empty the object @epdf1d discarding all observations.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="epdf1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsDist1dEPDF</doc>
            <type name="StatsDist1dEPDF" c:type="NcmStatsDist1dEPDF*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_max" c:identifier="ncm_stats_dist1d_epdf_set_max">
        <doc xml:space="preserve">Empty the object @epdf1d discarding all observations.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="epdf1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsDist1dEPDF</doc>
            <type name="StatsDist1dEPDF" c:type="NcmStatsDist1dEPDF*"/>
          </instance-parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:space="preserve">sets max observation value</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_min" c:identifier="ncm_stats_dist1d_epdf_set_min">
        <doc xml:space="preserve">Empty the object @epdf1d discarding all observations.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="epdf1d" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsDist1dEPDF</doc>
            <type name="StatsDist1dEPDF" c:type="NcmStatsDist1dEPDF*"/>
          </instance-parameter>
          <parameter name="min" transfer-ownership="none">
            <doc xml:space="preserve">sets min observation value</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="bandwidth"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="StatsDist1dEPDFBw"/>
      </property>
      <property name="h-fixed"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="max-obs"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="n-obs" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="outliers-threshold"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="sd-min-scale"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="StatsDist1d" c:type="NcmStatsDist1d"/>
      </field>
      <field name="obs_stats" readable="0" private="1">
        <type name="StatsVec" c:type="NcmStatsVec*"/>
      </field>
      <field name="max_obs" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="bw" readable="0" private="1">
        <type name="StatsDist1dEPDFBw" c:type="NcmStatsDist1dEPDFBw"/>
      </field>
      <field name="h_fixed" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="sd_min_scale" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="outliers_threshold" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="h" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="n_obs" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="np_obs" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="WT" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="obs" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="obs_seq" readable="0" private="1">
        <type name="GLib.Sequence" c:type="GSequence*"/>
      </field>
      <field name="min" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="max" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="list_sorted" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="fftsize" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="Iv" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="p_data" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="p_tilde" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="p_tilde2" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="p_est" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="xv" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="pv" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="fft_data_to_tilde" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="fft_tilde_to_est" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="ph_spline" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline*"/>
      </field>
      <field name="p_spline" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline*"/>
      </field>
      <field name="bw_set" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <enumeration name="StatsDist1dEPDFBw"
                 glib:type-name="NcmStatsDist1dEPDFBw"
                 glib:get-type="ncm_stats_dist1d_epdf_bw_get_type"
                 c:type="NcmStatsDist1dEPDFBw">
      <doc xml:space="preserve">Gaussian kernel bandwidth type.</doc>
      <member name="fixed"
              value="0"
              c:identifier="NCM_STATS_DIST1D_EPDF_BW_FIXED"
              glib:nick="fixed">
        <doc xml:space="preserve">Uses the given value of bandwidth.</doc>
      </member>
      <member name="rot"
              value="1"
              c:identifier="NCM_STATS_DIST1D_EPDF_BW_RoT"
              glib:nick="rot">
        <doc xml:space="preserve">Uses the Silverman's rule of thumb to determine the bandwidth.</doc>
      </member>
      <member name="auto"
              value="2"
              c:identifier="NCM_STATS_DIST1D_EPDF_BW_AUTO"
              glib:nick="auto">
        <doc xml:space="preserve">Uses Botev's et al method to automatically determine the best bandwidth.</doc>
      </member>
    </enumeration>
    <record name="StatsDist1dEPDFClass"
            c:type="NcmStatsDist1dEPDFClass"
            glib:is-gtype-struct-for="StatsDist1dEPDF">
      <field name="parent_class" readable="0" private="1">
        <type name="StatsDist1dClass" c:type="NcmStatsDist1dClass"/>
      </field>
    </record>
    <class name="StatsDist1dSpline"
           c:symbol-prefix="stats_dist1d_spline"
           c:type="NcmStatsDist1dSpline"
           parent="StatsDist1d"
           glib:type-name="NcmStatsDist1dSpline"
           glib:get-type="ncm_stats_dist1d_spline_get_type"
           glib:type-struct="StatsDist1dSplineClass">
      <constructor name="new" c:identifier="ncm_stats_dist1d_spline_new">
        <doc xml:space="preserve">Returns a new #NcmStatsDist1dSpline where @m2lnp, $-2\ln(p(x))$, is a #NcmSpline, where $p(x)$
is the probability density. The probability density $p(x)$ do not need to be normalized.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcmStatsDist1dSpline</doc>
          <type name="StatsDist1dSpline" c:type="NcmStatsDist1dSpline*"/>
        </return-value>
        <parameters>
          <parameter name="m2lnp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline</doc>
            <type name="Spline" c:type="NcmSpline*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="m2lnp"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="Spline"/>
      </property>
      <property name="tail-sigma"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="StatsDist1d" c:type="NcmStatsDist1d"/>
      </field>
      <field name="m2lnp" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline*"/>
      </field>
      <field name="tail_sigma" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="left_tail" readable="0" private="1">
        <type name="StatsDist1dSplineTail" c:type="NcmStatsDist1dSplineTail"/>
      </field>
      <field name="right_tail" readable="0" private="1">
        <type name="StatsDist1dSplineTail" c:type="NcmStatsDist1dSplineTail"/>
      </field>
    </class>
    <record name="StatsDist1dSplineClass"
            c:type="NcmStatsDist1dSplineClass"
            glib:is-gtype-struct-for="StatsDist1dSpline">
      <field name="parent_class" readable="0" private="1">
        <type name="StatsDist1dClass" c:type="NcmStatsDist1dClass"/>
      </field>
    </record>
    <record name="StatsDist1dSplineTail" c:type="NcmStatsDist1dSplineTail">
      <field name="xb" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="a" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="b" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="c" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="sigma" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </record>
    <class name="StatsVec"
           c:symbol-prefix="stats_vec"
           c:type="NcmStatsVec"
           parent="GObject.Object"
           glib:type-name="NcmStatsVec"
           glib:get-type="ncm_stats_vec_get_type"
           glib:type-struct="StatsVecClass">
      <constructor name="new" c:identifier="ncm_stats_vec_new">
        <doc xml:space="preserve">Creates a new #NcmStatsVec.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="StatsVec" c:type="NcmStatsVec*"/>
        </return-value>
        <parameters>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">number of random variables</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">type of statistics to be calculated</doc>
            <type name="StatsVecType" c:type="NcmStatsVecType"/>
          </parameter>
          <parameter name="save_x" transfer-ownership="none">
            <doc xml:space="preserve">whenever to save each vector x</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_stats_vec_clear">
        <doc xml:space="preserve">Decrease the reference count of @svec by one, and sets the pointer *svec to
NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec**"/>
          </parameter>
        </parameters>
      </function>
      <method name="append" c:identifier="ncm_stats_vec_append">
        <doc xml:space="preserve">Appends and updates the statistics using weight 1.0 for the vector @x #NcmVector of same
size #NcmStatsVec:length and with continuous allocation. i.e., NcmVector:stride == 1.

If @svec was created with save_x TRUE, the paramenter @dup determines if the vector
@x will be duplicated or if just a reference for @x will be saved.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector to be added</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="dup" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_data" c:identifier="ncm_stats_vec_append_data">
        <doc xml:space="preserve">Appends and updates the statistics using the data contained in @data and weight == 1.0.
It assumes that each element of @data is a #NcmVector of same size #NcmStatsVec:length and
with continuous allocation. i.e., NcmVector:stride == 1.

If @svec was created with save_x TRUE, the paramenter @dup determines if the vectors
from @data will be duplicated or if just a reference for the current vectors in @data
will be saved.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GPtrArray containing #NcmVector s to be added</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Vector"/>
            </array>
          </parameter>
          <parameter name="dup" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_weight" c:identifier="ncm_stats_vec_append_weight">
        <doc xml:space="preserve">Appends and updates the statistics using weight @w for the vector @x #NcmVector of same
size #NcmStatsVec:length and with continuous allocation. i.e., NcmVector:stride == 1.

If @svec was created with save_x TRUE, the paramenter @dup determines if the vector
@x will be duplicated or if just a reference for @x will be saved.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector to be added</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="w" transfer-ownership="none">
            <doc xml:space="preserve">the weight of @x</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="dup" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="ar_ess" c:identifier="ncm_stats_vec_ar_ess">
        <doc xml:space="preserve">Calculates the effective sample size for the parameter @p.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the effective sample size.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="ar_crit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVecARType</doc>
            <type name="StatsVecARType" c:type="NcmStatsVecARType"/>
          </parameter>
          <parameter name="spec0"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">spectral density at zero</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="c_order"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">@ar_crit determined order</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_quantile"
              c:identifier="ncm_stats_vec_disable_quantile">
        <doc xml:space="preserve">Disables quantile calculation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_saved_x" c:identifier="ncm_stats_vec_dup_saved_x">
        <doc xml:space="preserve">Creates a copy of the internal saved_x array.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a copy of the saved x array or NULL if it was not saved.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Vector"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="enable_quantile"
              c:identifier="ncm_stats_vec_enable_quantile">
        <doc xml:space="preserve">Enables quantile calculation, it will calculate the $p$
quantile. Warning, it does not support weighted samples, the results
will disconsider the weights.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">double $\in (0, 1)$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="fit_ar_model" c:identifier="ncm_stats_vec_fit_ar_model">
        <doc xml:space="preserve">If order is zero the value of floor $\left[10 log_{10}(s) \right]$, where $s$
is the number of points.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if @c_order is equal to @order.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="order" transfer-ownership="none">
            <doc xml:space="preserve">max order</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="ar_crit" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVecARType</doc>
            <type name="StatsVecARType" c:type="NcmStatsVecARType"/>
          </parameter>
          <parameter name="rho"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the vector containing the ar(@p) model parameters</doc>
            <type name="Vector" c:type="NcmVector**"/>
          </parameter>
          <parameter name="pacf"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the vector containing the partial autocorrelations</doc>
            <type name="Vector" c:type="NcmVector**"/>
          </parameter>
          <parameter name="ivar"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">innovations variance</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="c_order"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the actual order calculated</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_stats_vec_free">
        <doc xml:space="preserve">Decrease the reference count of @svec by one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="ncm_stats_vec_get">
        <doc xml:space="preserve">Returns the value of the current @i-th random variable.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@i-th random variable.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">a variable index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_autocorr" c:identifier="ncm_stats_vec_get_autocorr">
        <doc xml:space="preserve">Calculates the autocorrelation vector, the j-th element represent
the selfcorrelation with lag-j.

The returning vector use the internal memory allocation and will
change with subsequent calls to ncm_stats_vec_get_autocorr().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the autocorrelation vector.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_autocorr_tau"
              c:identifier="ncm_stats_vec_get_autocorr_tau">
        <doc xml:space="preserve">Calculates the integrated autocorrelation time for the parameter @p
using all rows of data.

If @max_lag is 0 or larger than the current number of itens than it use
the current number of itens as @max_lag.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the integrated autocorrelation time of the whole data.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="max_lag" transfer-ownership="none">
            <doc xml:space="preserve">max lag in the computation</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cor" c:identifier="ncm_stats_vec_get_cor">
        <doc xml:space="preserve">Return the current value of the correlation between the @i-th and the @j-th
variables, i.e., $$Cor_{ij} \equiv \frac{Cov_{ij}}{\sigma_i\sigma_j}.$$</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$Cor_{ij}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">a variable index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="j" transfer-ownership="none">
            <doc xml:space="preserve">a variable index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cov" c:identifier="ncm_stats_vec_get_cov">
        <doc xml:space="preserve">Return the current value of the variance between the @i-th and the @j-th
variables, i.e., $Cov_{ij}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$Cov_{ij}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">a variable index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="j" transfer-ownership="none">
            <doc xml:space="preserve">a variable index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cov_matrix"
              c:identifier="ncm_stats_vec_get_cov_matrix">
        <doc xml:space="preserve">Copy the current value of the correlation between the variables to the
matrix @m starting from paramenter @offset.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="m" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="Matrix" c:type="NcmMatrix*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve">first parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mean" c:identifier="ncm_stats_vec_get_mean">
        <doc xml:space="preserve">Return the current value of the variable mean, i.e., $\bar{x}_n$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\bar{x}_n$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">a variable index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mean_vector"
              c:identifier="ncm_stats_vec_get_mean_vector">
        <doc xml:space="preserve">Copy the current value of the means to the vector @mean starting from parameter @offset.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="mean" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve">first parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_param_at" c:identifier="ncm_stats_vec_get_param_at">
        <doc xml:space="preserve">Gets the p-th parameter in the i-th data row used in the statistics, this
function fails if the object was not created with save_x == TRUE;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the parameter value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">the row's index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">the parameter's index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_quantile" c:identifier="ncm_stats_vec_get_quantile">
        <doc xml:space="preserve">Returns the current estimate of the quantile initialized
through ncm_stats_vec_enable_quantile().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the current estimate of the quantile.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">a variable index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_quantile_spread"
              c:identifier="ncm_stats_vec_get_quantile_spread">
        <doc xml:space="preserve">Returns the current estimate of the quantile spread, from the
probability $p$ initialized through ncm_stats_vec_enable_quantile(),
i.e., it returns the difference between $(p + 1)/2$ quantile
and the $p/2$. For example, if $p = 0.5$ then it returns the
interquartile range.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the current estimate of the quantile spread.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">a variable index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sd" c:identifier="ncm_stats_vec_get_sd">
        <doc xml:space="preserve">Return the current value of the variable standard deviation,
i.e., $\sigma_n \equiv sqrt (Var_n)$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\sigma_n$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">a variable index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_subsample_autocorr"
              c:identifier="ncm_stats_vec_get_subsample_autocorr">
        <doc xml:space="preserve">Calculates the autocorrelation vector, the j-th element represent
the selfcorrelation with lag-j using the @subsample parameter.

The returning vector use the internal memory allocation and will
change with subsequent calls to ncm_stats_vec_get_autocorr().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the autocorrelation vector.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="subsample" transfer-ownership="none">
            <doc xml:space="preserve">size of the subsample ($&gt;0$)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_subsample_autocorr_tau"
              c:identifier="ncm_stats_vec_get_subsample_autocorr_tau">
        <doc xml:space="preserve">Calculates the integrated autocorrelation time for the parameter @p
using the @subsample parameter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the integrated autocorrelation time of data with @subsample.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">parameter id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="subsample" transfer-ownership="none">
            <doc xml:space="preserve">size of the subsample ($&gt;0$)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="max_lag" transfer-ownership="none">
            <doc xml:space="preserve">max lag in the computation</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_var" c:identifier="ncm_stats_vec_get_var">
        <doc xml:space="preserve">Return the current value of the variable variance, i.e., $Var_n$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$Var_n$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">a variable index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_weight" c:identifier="ncm_stats_vec_get_weight">
        <doc xml:space="preserve">Return the current value of the weight, for non-weighted means this is simply
the number of elements.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$W_n$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="heidel_diag" c:identifier="ncm_stats_vec_heidel_diag">
        <doc xml:space="preserve">Applies the Heidelberger and Welch’s convergence diagnostic
applying @ntests Schruben tests sequentially, if @ntests == 0
it will use the default 10 tests. The variable @bindex will
contains the smallest index where all p-values are smaller than
@pvalue, if @pvalue is zero it used the default value of $0.05$.

If the test is not satisfied by any index @bindex will contain
-1 and the return vector the p-values considering the whole system.

See:
- [Heidelberger (1981)][XHeidelberger1981]
- [Schruben (1982)][XSchruben1982]
- [Heidelberger (1983)][XHeidelberger1983]</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmVector containing the best p-values.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="ntests" transfer-ownership="none">
            <doc xml:space="preserve">number of tests</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="pvalue" transfer-ownership="none">
            <doc xml:space="preserve">required p-value</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="bindex"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">index of the best p-values</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="wp"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">worst parameter index</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="wp_order"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">worst parameter AR fit order</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="wp_pvalue"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">worst parameter p-value</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="len" c:identifier="ncm_stats_vec_len">
        <doc xml:space="preserve">Gets @svec length.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number of variables in @svec.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec.</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="max_ess_time" c:identifier="ncm_stats_vec_max_ess_time">
        <doc xml:space="preserve">Calculates the time $t_m$ that maximizes the Effective Sample Size (ESS).
The variable @ntests control the number of divisions where the ESS
will be calculated, if it is zero the default 10 tests will be used.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmVector containing the best ess.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="ntests" transfer-ownership="none">
            <doc xml:space="preserve">number of tests</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="bindex"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">time index of the best ESS's</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="wp"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">worst parameter index</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="wp_order"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">worst parameter AR fit order</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="wp_ess"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">worst parameter ESS</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="nitens" c:identifier="ncm_stats_vec_nitens">
        <doc xml:space="preserve">Gets the number of itens added to the object;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of itens added.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="nrows" c:identifier="ncm_stats_vec_nrows">
        <doc xml:space="preserve">Gets the number of saved rows, this function fails if the object
was not created with save_x == TRUE;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of saved rows.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_cov_matrix"
              c:identifier="ncm_stats_vec_peek_cov_matrix">
        <doc xml:space="preserve">Gets the internal covariance matrix starting from paramenter @offset.
This is the internal matrix of @svec and can change with further
additions to @svec. It is not guaranteed to be valid after new additions.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the covariance matrix.</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve">first parameter index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_mean" c:identifier="ncm_stats_vec_peek_mean">
        <doc xml:space="preserve">Gets the local mean vector.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the internal mean #NcmVector.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_row" c:identifier="ncm_stats_vec_peek_row">
        <doc xml:space="preserve">The i-th data row used in the statistics, this function fails if the object
was not created with save_x == TRUE;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the i-th data row.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">the row's index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_x" c:identifier="ncm_stats_vec_peek_x">
        <doc xml:space="preserve">Returns the vector containing the current value of the random variables.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the random variables vector.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepend" c:identifier="ncm_stats_vec_prepend">
        <doc xml:space="preserve">Prepends and updates the statistics using the vector @x and weight 1.0.
It assumes that #NcmVector is of same size #NcmStatsVec:length and
with continuous allocation. i.e., NcmVector:stride == 1.

If @svec was created with save_x TRUE, the paramenter @dup determines if the vector
will be duplicated or if just a reference for @x will be saved.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector to be added</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="dup" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend_data" c:identifier="ncm_stats_vec_prepend_data">
        <doc xml:space="preserve">Prepends and updates the statistics using the data contained in @data and weight == 1.0.
It assumes that each element of @data is a #NcmVector of same size #NcmStatsVec:length and
with continuous allocation. i.e., NcmVector:stride == 1.

If @svec was created with save_x TRUE, the paramenter @dup determines if the vectors
from @data will be duplicated or if just a reference for the current vectors in @data
will be saved.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GPtrArray containing #NcmVector s to be added</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Vector"/>
            </array>
          </parameter>
          <parameter name="dup" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend_weight"
              c:identifier="ncm_stats_vec_prepend_weight">
        <doc xml:space="preserve">Prepends and updates the statistics using the vector @x and weight @w.
It assumes that #NcmVector is of same size #NcmStatsVec:length and
with continuous allocation. i.e., NcmVector:stride == 1.

If @svec was created with save_x TRUE, the paramenter @dup determines if the vector
will be duplicated or if just a reference for @x will be saved.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector to be added</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="w" transfer-ownership="none">
            <doc xml:space="preserve">the weight of @x</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="dup" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_stats_vec_ref">
        <doc xml:space="preserve">Increase the reference of @svec by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@svec.</doc>
          <type name="StatsVec" c:type="NcmStatsVec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="ncm_stats_vec_reset">
        <doc xml:space="preserve">Reset all data in @svec. If @rm_saved is TRUE and @svec has
saved data, it will be also removed from the object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="rm_saved" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="ncm_stats_vec_set">
        <doc xml:space="preserve">Sets the value of the current @i-th random variable to @x_i.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">a variable index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="x_i" transfer-ownership="none">
            <doc xml:space="preserve">the value of the @i-th variable</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="ncm_stats_vec_update">
        <doc xml:space="preserve">Same as ncm_stats_vec_update_weight() assuming weigth equal to one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec.</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update_weight" c:identifier="ncm_stats_vec_update_weight">
        <doc xml:space="preserve">Updates the statistics using @svec-&gt;x set in @svec and @weight, then reset
@svec-&gt;x to zero.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="w" transfer-ownership="none">
            <doc xml:space="preserve">The statistical weight</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="visual_heidel_diag"
              c:identifier="ncm_stats_vec_visual_heidel_diag">
        <doc xml:space="preserve">Computes the empirical cumulative and the mean used to build
the Heidelberger and Welch’s convergence diagnostic.

See ncm_stats_vec_heidel_diag().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmVector containing the empirical cumulative distribution.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="svec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmStatsVec</doc>
            <type name="StatsVec" c:type="NcmStatsVec*"/>
          </instance-parameter>
          <parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">vector index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="fi" transfer-ownership="none">
            <doc xml:space="preserve">first index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="mean"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">mean</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="var"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">test's variance</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <property name="length"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Number of random variables.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="save-x"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Whenever to save each vector x through each interation.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The statistics to be calculated.</doc>
        <type name="StatsVecType"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="t" readable="0" private="1">
        <type name="StatsVecType" c:type="NcmStatsVecType"/>
      </field>
      <field name="update" readable="0" private="1">
        <type name="StatsVecUpdateFunc" c:type="NcmStatsVecUpdateFunc"/>
      </field>
      <field name="tmp" readable="0" private="1">
        <type name="StatsVec" c:type="NcmStatsVec*"/>
      </field>
      <field name="len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="save_x" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="weight" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="weight2" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="bias_wt" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="nitens" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="x" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="mean" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="var" readable="0" private="1">
        <type name="Vector" c:type="NcmVector*"/>
      </field>
      <field name="cov" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="real_cov" readable="0" private="1">
        <type name="Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="saved_x" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="q_array" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="fft_size" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="fft_plan_size" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="param_data" readable="0" private="1">
        <type name="gdouble" c:type="gdouble*"/>
      </field>
      <field name="param_fft" readable="0" private="1">
        <type name="gint" c:type="gint*"/>
      </field>
      <field name="param_r2c" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="param_c2r" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
    </class>
    <enumeration name="StatsVecARType"
                 glib:type-name="NcmStatsVecARType"
                 glib:get-type="ncm_stats_vec_ar_type_get_type"
                 c:type="NcmStatsVecARType">
      <doc xml:space="preserve">FIXME</doc>
      <member name="none"
              value="0"
              c:identifier="NCM_STATS_VEC_AR_NONE"
              glib:nick="none">
        <doc xml:space="preserve">Calculates using the required order.</doc>
      </member>
      <member name="fpe"
              value="1"
              c:identifier="NCM_STATS_VEC_AR_FPE"
              glib:nick="fpe">
        <doc xml:space="preserve">Uses the FPE criterium to choose the ar order.</doc>
      </member>
      <member name="aic"
              value="2"
              c:identifier="NCM_STATS_VEC_AR_AIC"
              glib:nick="aic">
        <doc xml:space="preserve">Uses the AIC criterium to choose the ar order.</doc>
      </member>
      <member name="aicc"
              value="3"
              c:identifier="NCM_STATS_VEC_AR_AICC"
              glib:nick="aicc">
        <doc xml:space="preserve">Uses the AICc criterium to choose the ar order.</doc>
      </member>
    </enumeration>
    <record name="StatsVecClass"
            c:type="NcmStatsVecClass"
            glib:is-gtype-struct-for="StatsVec">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="StatsVecType"
                 glib:type-name="NcmStatsVecType"
                 glib:get-type="ncm_stats_vec_type_get_type"
                 c:type="NcmStatsVecType">
      <doc xml:space="preserve">FIXME</doc>
      <member name="mean"
              value="0"
              c:identifier="NCM_STATS_VEC_MEAN"
              glib:nick="mean">
        <doc xml:space="preserve">Calculates mean only.</doc>
      </member>
      <member name="var"
              value="1"
              c:identifier="NCM_STATS_VEC_VAR"
              glib:nick="var">
        <doc xml:space="preserve">Calculates mean and variance.</doc>
      </member>
      <member name="cov"
              value="2"
              c:identifier="NCM_STATS_VEC_COV"
              glib:nick="cov">
        <doc xml:space="preserve">Calculates mean, variance and covariance.</doc>
      </member>
    </enumeration>
    <callback name="StatsVecUpdateFunc" c:type="NcmStatsVecUpdateFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="svec" transfer-ownership="none">
          <type name="StatsVec" c:type="NcmStatsVec*"/>
        </parameter>
        <parameter name="w" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="Vector" c:type="NcmVector*"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="THREAD_POOL_MAX" value="5" c:type="NCM_THREAD_POOL_MAX">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="TIMER_SEC_FORMAT"
              value="%07.4f"
              c:type="NCM_TIMER_SEC_FORMAT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Timer"
           c:symbol-prefix="timer"
           c:type="NcmTimer"
           parent="GObject.Object"
           glib:type-name="NcmTimer"
           glib:get-type="ncm_timer_get_type"
           glib:type-struct="TimerClass">
      <constructor name="new" c:identifier="ncm_timer_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Timer" c:type="NcmTimer*"/>
        </return-value>
      </constructor>
      <function name="clear" c:identifier="ncm_timer_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer**"/>
          </parameter>
        </parameters>
      </function>
      <method name="continue" c:identifier="ncm_timer_continue">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="elapsed" c:identifier="ncm_timer_elapsed">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="elapsed_dhms" c:identifier="ncm_timer_elapsed_dhms">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
          <parameter name="elap_day"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="elap_hour"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="elap_min"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="elap_sec"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="elapsed_dhms_str"
              c:identifier="ncm_timer_elapsed_dhms_str">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_timer_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_timer_ref">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Timer" c:type="NcmTimer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="ncm_timer_set_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="ncm_timer_start">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="ncm_timer_stop">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="task_accumulate" c:identifier="ncm_timer_task_accumulate">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
          <parameter name="nitens" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="task_add_tasks" c:identifier="ncm_timer_task_add_tasks">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
          <parameter name="ptasks" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="task_continue" c:identifier="ncm_timer_task_continue">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="task_cur_datetime_str"
              c:identifier="ncm_timer_task_cur_datetime_str">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="task_elapsed_str"
              c:identifier="ncm_timer_task_elapsed_str">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="task_end" c:identifier="ncm_timer_task_end">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="task_end_datetime_str"
              c:identifier="ncm_timer_task_end_datetime_str">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="task_estimate_by_time"
              c:identifier="ncm_timer_task_estimate_by_time">
        <doc xml:space="preserve">Estimate how many task points would take @sec seconds.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the estimated number of points.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
          <parameter name="sec" transfer-ownership="none">
            <doc xml:space="preserve">time in seconds</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="task_increment" c:identifier="ncm_timer_task_increment">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="task_is_running" c:identifier="ncm_timer_task_is_running">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="task_log_cur_datetime"
              c:identifier="ncm_timer_task_log_cur_datetime">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="task_log_elapsed"
              c:identifier="ncm_timer_task_log_elapsed">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="task_log_end_datetime"
              c:identifier="ncm_timer_task_log_end_datetime">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="task_log_mean_time"
              c:identifier="ncm_timer_task_log_mean_time">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="task_log_start_datetime"
              c:identifier="ncm_timer_task_log_start_datetime">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="task_log_time_left"
              c:identifier="ncm_timer_task_log_time_left">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="task_mean_time" c:identifier="ncm_timer_task_mean_time">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="task_mean_time_str"
              c:identifier="ncm_timer_task_mean_time_str">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="task_pause" c:identifier="ncm_timer_task_pause">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="task_start" c:identifier="ncm_timer_task_start">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
          <parameter name="task_len" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="task_start_datetime_str"
              c:identifier="ncm_timer_task_start_datetime_str">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="task_time_left" c:identifier="ncm_timer_task_time_left">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="task_time_left_str"
              c:identifier="ncm_timer_task_time_left_str">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="nt" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Timer" c:type="NcmTimer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="name"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Timer's name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="task-len" transfer-ownership="none">
        <doc xml:space="preserve">Length of the current task.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="task-pos" transfer-ownership="none">
        <doc xml:space="preserve">Position of the current task, varying from [0, #NcmTimer:task-len - 1]</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="gt" readable="0" private="1">
        <type name="GLib.Timer" c:type="GTimer*"/>
      </field>
      <field name="name" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="task_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="task_pos" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="pos_time" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="last_log_time" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="time_stats" readable="0" private="1">
        <type name="StatsVec" c:type="NcmStatsVec*"/>
      </field>
      <field name="msg" readable="0" private="1">
        <type name="GLib.String" c:type="GString*"/>
      </field>
      <field name="msg_tmp1" readable="0" private="1">
        <type name="GLib.String" c:type="GString*"/>
      </field>
      <field name="msg_tmp2" readable="0" private="1">
        <type name="GLib.String" c:type="GString*"/>
      </field>
    </class>
    <record name="TimerClass"
            c:type="NcmTimerClass"
            glib:is-gtype-struct-for="Timer">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="TriVec"
            c:type="NcmTriVec"
            glib:type-name="NcmTriVec"
            glib:get-type="ncm_trivec_get_type"
            c:symbol-prefix="trivec">
      <field name="c" readable="0" private="1">
        <array zero-terminated="0" c:type="gdouble" fixed-size="3">
          <type name="gdouble" c:type="gdouble"/>
        </array>
      </field>
      <constructor name="new" c:identifier="ncm_trivec_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="TriVec" c:type="NcmTriVec*"/>
        </return-value>
      </constructor>
      <constructor name="new_full" c:identifier="ncm_trivec_new_full">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="TriVec" c:type="NcmTriVec*"/>
        </return-value>
        <parameters>
          <parameter name="c" transfer-ownership="none">
            <doc xml:space="preserve">components</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full_c" c:identifier="ncm_trivec_new_full_c">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="TriVec" c:type="NcmTriVec*"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x-component</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y-component</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">z-component</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="dot" c:identifier="ncm_trivec_dot">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="v1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmTriVec</doc>
            <type name="TriVec" c:type="const NcmTriVec*"/>
          </instance-parameter>
          <parameter name="v2" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmTriVec</doc>
            <type name="TriVec" c:type="const NcmTriVec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="ncm_trivec_dup">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="TriVec" c:type="NcmTriVec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmTriVec</doc>
            <type name="TriVec" c:type="NcmTriVec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_trivec_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmTriVec</doc>
            <type name="TriVec" c:type="NcmTriVec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phi" c:identifier="ncm_trivec_get_phi">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmTriVec</doc>
            <type name="TriVec" c:type="NcmTriVec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spherical_coord"
              c:identifier="ncm_trivec_get_spherical_coord">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmTriVec</doc>
            <type name="TriVec" c:type="NcmTriVec*"/>
          </instance-parameter>
          <parameter name="theta"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="phi"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="memcpy" c:identifier="ncm_trivec_memcpy">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmTriVec</doc>
            <type name="TriVec" c:type="NcmTriVec*"/>
          </instance-parameter>
          <parameter name="orig" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmTriVec</doc>
            <type name="TriVec" c:type="const NcmTriVec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="norm" c:identifier="ncm_trivec_norm">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmTriVec</doc>
            <type name="TriVec" c:type="NcmTriVec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="normalize" c:identifier="ncm_trivec_normalize">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmTriVec</doc>
            <type name="TriVec" c:type="NcmTriVec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="scale" c:identifier="ncm_trivec_scale">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmTriVec</doc>
            <type name="TriVec" c:type="NcmTriVec*"/>
          </instance-parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_0" c:identifier="ncm_trivec_set_0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmTriVec</doc>
            <type name="TriVec" c:type="NcmTriVec*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="VParam"
           c:symbol-prefix="vparam"
           c:type="NcmVParam"
           parent="GObject.Object"
           glib:type-name="NcmVParam"
           glib:get-type="ncm_vparam_get_type"
           glib:type-struct="VParamClass">
      <constructor name="full_new" c:identifier="ncm_vparam_full_new">
        <doc xml:space="preserve">This function allocates memory for a new #NcmVParam object and sets its properties to the values from
the input arguments.

The @name parameter is restricted to the interval [@lower_bound, @upper_bound].
@scale is an initial step for the statistical algorithms.
@abstol is the absolute error tolerance of the parameter.
@ftype indicates if the parameter will be fitted or not.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmVParam.</doc>
          <type name="VParam" c:type="NcmVParam*"/>
        </return-value>
        <parameters>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">vector length.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">#NcmSParam:name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="symbol" transfer-ownership="none">
            <doc xml:space="preserve">#NcmSParam:symbol.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="lower_bound" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:lower-bound.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="upper_bound" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:upper-bound.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:scale.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:absolute-tolerance.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="default_val" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:default-value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="ftype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmParamType.</doc>
            <type name="ParamType" c:type="NcmParamType"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new" c:identifier="ncm_vparam_new">
        <doc xml:space="preserve">This function allocates memory for a new #NcmVParam object and sets its properties to the values from
the input arguments. @len provides the number of components.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmVParam.</doc>
          <type name="VParam" c:type="NcmVParam*"/>
        </return-value>
        <parameters>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">vector length.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="default_param" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam.</doc>
            <type name="SParam" c:type="NcmSParam*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_vparam_clear">
        <doc xml:space="preserve">Atomically decrements the reference count of @vparam by one. If the reference count drops to 0,
all memory allocated by @vparam is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="NcmVParam**"/>
          </parameter>
        </parameters>
      </function>
      <method name="copy" c:identifier="ncm_vparam_copy">
        <doc xml:space="preserve">Duplicates the #NcmVParam object setting the same values of the original propertities.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmVParam.</doc>
          <type name="VParam" c:type="NcmVParam*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="NcmVParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_vparam_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @vparam by one. If the reference count drops to 0,
all memory allocated by @vparam is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="NcmVParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_absolute_tolerance"
              c:identifier="ncm_vparam_get_absolute_tolerance">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of #NcmSParam:absolute-tolerance property of the @n-th component of @vparam.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="const NcmVParam*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">vector index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_default_value"
              c:identifier="ncm_vparam_get_default_value">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of #NcmSParam:default-value property of the @n-th component of @vparam.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="const NcmVParam*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">vector index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_fit_type" c:identifier="ncm_vparam_get_fit_type">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of #NcmSParam:fit-type property of the @n-th component of @vparam.</doc>
          <type name="ParamType" c:type="NcmParamType"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="const NcmVParam*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">vector index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_len" c:identifier="ncm_vparam_get_len">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The length of @vparam.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="NcmVParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lower_bound" c:identifier="ncm_vparam_get_lower_bound">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of #NcmSParam:lower-bound property of the @n-th component of @vparam.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="const NcmVParam*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">vector index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_scale" c:identifier="ncm_vparam_get_scale">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of #NcmSParam:scale property of the @n-th component of @vparam.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="const NcmVParam*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">vector index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sparam" c:identifier="ncm_vparam_get_sparam">
        <doc xml:space="preserve">This function returns the @n-th component of @vparam increasing its reference count.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #NcmSParam.</doc>
          <type name="SParam" c:type="NcmSParam*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="NcmVParam*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">vector index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_upper_bound" c:identifier="ncm_vparam_get_upper_bound">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of #NcmSParam:upper-bound property of the @n-th component of @vparam.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="const NcmVParam*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">vector index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="len" c:identifier="ncm_vparam_len">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The length of @vparam.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="const NcmVParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="name" c:identifier="ncm_vparam_name">
        <doc xml:space="preserve">Gets the @vparam base name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@vparam base name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="const NcmVParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_sparam" c:identifier="ncm_vparam_peek_sparam">
        <doc xml:space="preserve">This function does not increment the reference count of #NcmSParam.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #NcmSParam, which is the @n-th component of @vparam.</doc>
          <type name="SParam" c:type="NcmSParam*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="const NcmVParam*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">vector index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_vparam_ref">
        <doc xml:space="preserve">Increases the reference count of @vparam by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@vparam</doc>
          <type name="VParam" c:type="NcmVParam*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="NcmVParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_absolute_tolerance"
              c:identifier="ncm_vparam_set_absolute_tolerance">
        <doc xml:space="preserve">Sets the value @abstol to the #NcmSParam:absolute-tolerance property of the @n-th component of @vparam.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="NcmVParam*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">vector index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:absolute-tolerance.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_value"
              c:identifier="ncm_vparam_set_default_value">
        <doc xml:space="preserve">Sets the value @default_val to the #NcmSParam:default-value property of the @n-th component of @vparam.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="NcmVParam*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">vector index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="default_val" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:default-value.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fit_type" c:identifier="ncm_vparam_set_fit_type">
        <doc xml:space="preserve">Sets @ftype to the #NcmSParam:fit-type property of the @n-th component of @vparam.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="NcmVParam*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">vector index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="ftype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmParamType.</doc>
            <type name="ParamType" c:type="const NcmParamType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_len" c:identifier="ncm_vparam_set_len">
        <doc xml:space="preserve">Sets the length of @vparam to @len.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="NcmVParam*"/>
          </instance-parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">lenght of the #NcmVParam.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lower_bound" c:identifier="ncm_vparam_set_lower_bound">
        <doc xml:space="preserve">Sets the value @lb to the #NcmSParam:lower-bound property of the @n-th component of @vparam.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="NcmVParam*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">vector index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="lb" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:lower-bound.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scale" c:identifier="ncm_vparam_set_scale">
        <doc xml:space="preserve">Sets the value @scale to the #NcmSParam:scale property of the @n-th component of @vparam.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="NcmVParam*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">vector index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:scale.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sparam" c:identifier="ncm_vparam_set_sparam">
        <doc xml:space="preserve">Sets the #NcmSParam associated with the @n-th component of #NcmVParam.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="NcmVParam*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">vector index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="spn" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSParam.</doc>
            <type name="SParam" c:type="NcmSParam*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sparam_full" c:identifier="ncm_vparam_set_sparam_full">
        <doc xml:space="preserve">This function sets the properties of the @n-th @vparam component.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="NcmVParam*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">vector index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">#NcmSParam:name.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="symbol" transfer-ownership="none">
            <doc xml:space="preserve">#NcmSParam:symbol.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="lower_bound" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:lower-bound.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="upper_bound" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:upper-bound.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:scale.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:absolute-tolerance.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="default_val" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:default-value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="ftype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmParamType.</doc>
            <type name="ParamType" c:type="NcmParamType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_upper_bound" c:identifier="ncm_vparam_set_upper_bound">
        <doc xml:space="preserve">Sets the value @ub to the #NcmSParam:upper-bound property of the @n-th component of @vparam.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="NcmVParam*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">vector index.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="ub" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcmSParam:upper-bound.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="symbol" c:identifier="ncm_vparam_symbol">
        <doc xml:space="preserve">Gets the @vparam base symbol.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@vparam base symbol</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vparam" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVParam.</doc>
            <type name="VParam" c:type="const NcmVParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="default-sparam"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="SParam"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="default_sparam" readable="0" private="1">
        <type name="SParam" c:type="NcmSParam*"/>
      </field>
      <field name="sparam" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="VParamClass"
            c:type="NcmVParamClass"
            glib:is-gtype-struct-for="VParam">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Vector"
           c:symbol-prefix="vector"
           c:type="NcmVector"
           parent="GObject.Object"
           glib:type-name="NcmVector"
           glib:get-type="ncm_vector_get_type"
           glib:type-struct="VectorClass">
      <constructor name="const_new_data"
                   c:identifier="ncm_vector_const_new_data">
        <doc xml:space="preserve">This function returns a constant #NcmVector of the array @d.
The memory allocated is kept during all time life of the object and
must not be freed during this period.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A new constant #NcmVector.</doc>
          <type name="Vector" c:type="const NcmVector*"/>
        </return-value>
        <parameters>
          <parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve">pointer to the first double allocated.</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">number of doubles allocated.</doc>
            <type name="gsize" c:type="const gsize"/>
          </parameter>
          <parameter name="stride" transfer-ownership="none">
            <doc xml:space="preserve">the step-size from one element to the next in physical memory, measured in units of double.</doc>
            <type name="gsize" c:type="const gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="const_new_gsl"
                   c:identifier="ncm_vector_const_new_gsl"
                   introspectable="0">
        <doc xml:space="preserve">This function converts @v into a constant #NcmVector.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A new constant #NcmVector.</doc>
          <type name="Vector" c:type="const NcmVector*"/>
        </return-value>
        <parameters>
          <parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">vector from GNU Scientific Library (GSL).</doc>
            <type c:type="const gsl_vector*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="const_new_variant"
                   c:identifier="ncm_vector_const_new_variant">
        <doc xml:space="preserve">This function convert a #GVariant array to a #NcmVector. Since it returns
a constant #NcmVector it uses the same memory of @var.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmVector.</doc>
          <type name="Vector" c:type="const NcmVector*"/>
        </return-value>
        <parameters>
          <parameter name="var" transfer-ownership="none">
            <doc xml:space="preserve">a #GVariant of the type "ad".</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new" c:identifier="ncm_vector_new">
        <doc xml:space="preserve">This function allocates memory for a new #NcmVector of double
with @n components.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmVector.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">defines the size of the vector.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_array" c:identifier="ncm_vector_new_array">
        <doc xml:space="preserve">This function saves @a internally and frees it when it is no longer necessary.
The @a array must not be freed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmVector.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">array of doubles to be converted into a #NcmVector.</doc>
            <array zero-terminated="0" name="GLib.Array" c:type="GArray*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_data_dup" c:identifier="ncm_vector_new_data_dup">
        <doc xml:space="preserve">This function returns a #NcmVector of the array @d.
It allocate a new vector and copy the contents of @d into it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmVector.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve">pointer to the first double allocated.</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">number of doubles allocated.</doc>
            <type name="gsize" c:type="const gsize"/>
          </parameter>
          <parameter name="stride" transfer-ownership="none">
            <doc xml:space="preserve">the step-size from one element to the next in physical memory, measured in units of double.</doc>
            <type name="gsize" c:type="const gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_data_malloc"
                   c:identifier="ncm_vector_new_data_malloc">
        <doc xml:space="preserve">This function returns a #NcmVector of the array @d allocated using malloc.
It saves @d internally and frees it when it is no longer necessary.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmVector.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve">pointer to the first double allocated.</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">number of doubles allocated.</doc>
            <type name="gsize" c:type="const gsize"/>
          </parameter>
          <parameter name="stride" transfer-ownership="none">
            <doc xml:space="preserve">the step-size from one element to the next in physical memory, measured in units of double.</doc>
            <type name="gsize" c:type="const gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_data_slice"
                   c:identifier="ncm_vector_new_data_slice">
        <doc xml:space="preserve">This function returns a #NcmVector of the array @d allocated using g_slice function.
This function saves @a internally and frees it when it is no longer necessary.
The @a vector must not be freed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmVector.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve">pointer to the first double allocated.</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">number of doubles allocated.</doc>
            <type name="gsize" c:type="const gsize"/>
          </parameter>
          <parameter name="stride" transfer-ownership="none">
            <doc xml:space="preserve">the step-size from one element to the next in physical memory, measured in units of double.</doc>
            <type name="gsize" c:type="const gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_data_static"
                   c:identifier="ncm_vector_new_data_static">
        <doc xml:space="preserve">This function returns a #NcmVector of the array @d.
The memory allocated is kept during all time life of the object and
must not be freed during this period.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmVector.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve">pointer to the first double allocated.</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">number of doubles allocated.</doc>
            <type name="gsize" c:type="const gsize"/>
          </parameter>
          <parameter name="stride" transfer-ownership="none">
            <doc xml:space="preserve">the step-size from one element to the next in physical memory, measured in units of double.</doc>
            <type name="gsize" c:type="const gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_fftw" c:identifier="ncm_vector_new_fftw">
        <doc xml:space="preserve">This function allocates memory for a new #NcmVector of double
with @n components. It uses fftw_alloc_real in order to be used
by fftw* functions.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmVector.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">number of doubles allocated.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full" c:identifier="ncm_vector_new_full">
        <doc xml:space="preserve">This function returns a #NcmVector of the array @d.
This function saves @userdata internally and frees it using @free
when it is no longer necessary.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmVector.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <parameter name="d" transfer-ownership="none">
            <doc xml:space="preserve">pointer to the first double allocated.</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">number of doubles allocated.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="stride" transfer-ownership="none">
            <doc xml:space="preserve">the step-size from one element to the next in physical memory, measured in units of double.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="pdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">descending data pointer.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="pfree"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve">free function to be called when destroying the vector.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_gsl"
                   c:identifier="ncm_vector_new_gsl"
                   introspectable="0">
        <doc xml:space="preserve">This function saves @gv internally and frees it when it is no longer necessary.
The @gv vector must not be freed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmVector.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <parameter name="gv" transfer-ownership="none">
            <doc xml:space="preserve">vector from GNU Scientific Library (GSL) to be converted into a #NcmVector.</doc>
            <type c:type="gsl_vector*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_gsl_static"
                   c:identifier="ncm_vector_new_gsl_static"
                   introspectable="0">
        <doc xml:space="preserve">This function saves @gv internally and does not frees.
The @gv vector must be valid during the life of the created #NcmVector.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmVector.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <parameter name="gv" transfer-ownership="none">
            <doc xml:space="preserve">vector from GNU Scientific Library (GSL) to be converted into a #NcmVector.</doc>
            <type c:type="gsl_vector*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_variant" c:identifier="ncm_vector_new_variant">
        <doc xml:space="preserve">This function convert a #GVariant array to a #NcmVector allocating new
memory for the vector.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcmVector.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <parameter name="var" transfer-ownership="none">
            <doc xml:space="preserve">a #GVariant of the type "ad".</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="ncm_vector_clear">
        <doc xml:space="preserve">Atomically decrements the reference count of @cv by one. If the reference count drops to 0,
all memory allocated by @cv is released. The pointer is set to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector**"/>
          </parameter>
        </parameters>
      </function>
      <function name="substitute" c:identifier="ncm_vector_substitute">
        <doc xml:space="preserve">This function substitute the vector *@cv by @nv, it will unref *@cv first.
If @check_size is TRUE then the function asserts that both vectors have the
same size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector**"/>
          </parameter>
          <parameter name="nv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="check_size" transfer-ownership="none">
            <doc xml:space="preserve">whether to check vector size.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <method name="add" c:identifier="ncm_vector_add">
        <doc xml:space="preserve">This function adds the components of the vector @cv2 to the components of the vector @cv1.
The two vectors must have the same length.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="cv2" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_constant" c:identifier="ncm_vector_add_constant">
        <doc xml:space="preserve">This function adds the constant @val to all components.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">a cosntant double.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="addto" c:identifier="ncm_vector_addto">
        <doc xml:space="preserve">This function adds @val to the value of the @i-th component of @cv.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">component index.</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">a constant double.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="const_data" c:identifier="ncm_vector_const_data">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="const gdouble*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="const_free" c:identifier="ncm_vector_const_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @cv by one. If the reference count drops to 0,
all memory allocated by @cv is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="const_gsl"
              c:identifier="ncm_vector_const_gsl"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type c:type="const gsl_vector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="const_ptr" c:identifier="ncm_vector_const_ptr">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="const_ref" c:identifier="ncm_vector_const_ref">
        <doc xml:space="preserve">This function increses the reference count of the constant vector @cv.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@cv</doc>
          <type name="Vector" c:type="const NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="data" c:identifier="ncm_vector_data">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="div" c:identifier="ncm_vector_div">
        <doc xml:space="preserve">This function divides the components of the vector @cv1 by the components of the vector @cv2.
The two vectors must have the same length.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector, numerator.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="cv2" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector, denominator.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dnrm2" c:identifier="ncm_vector_dnrm2">
        <doc xml:space="preserve">Calculates the Euclidean norm of the vector @cv, i.e.,
$\vert\text{cv}\vert_2$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\vert\text{cv}\vert_2$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a @NcmVector</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="ncm_vector_dup">
        <doc xml:space="preserve">This function copies the elements of the constant vector @cv into a new #NcmVector.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #NcmVector.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_array" c:identifier="ncm_vector_dup_array">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gdouble"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fast_addto" c:identifier="ncm_vector_fast_addto">
        <doc xml:space="preserve">This function adds @val to the value of the @i-th component of @cv assuming stride == 1.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">component index.</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">a constant double.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="fast_get" c:identifier="ncm_vector_fast_get">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The @i-th component of the vector @cv assuming stride == 1.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">component index.</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="fast_mulby" c:identifier="ncm_vector_fast_mulby">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="fast_ptr" c:identifier="ncm_vector_fast_ptr">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A pointer to the @i-th component of the vector @cv assuming stride == 1.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">component index.</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="fast_set" c:identifier="ncm_vector_fast_set">
        <doc xml:space="preserve">This function sets the value of the @i-th component of the vector @cv to @val assuming stride == 1.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">component index.</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">a constant double.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="fast_subfrom" c:identifier="ncm_vector_fast_subfrom">
        <doc xml:space="preserve">This function subtracts @val from the value of the @i-th component of @cv assuming stride == 1.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">component index.</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">a cosntant double.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ncm_vector_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @cv by one. If the reference count drops to 0,
all memory allocated by @cv is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="ncm_vector_get">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The @i-th component of the vector @cv.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a constant #NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">component index.</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_absminmax" c:identifier="ncm_vector_get_absminmax">
        <doc xml:space="preserve">Gets the minimum/maximum absolute value of the vector components.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a @NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
          <parameter name="absmin"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">minimum component absolute value of @cv</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="absmax"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">maximum component absolute value of @cv</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_array" c:identifier="ncm_vector_get_array">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">FIXME</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gdouble"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max" c:identifier="ncm_vector_get_max">
        <doc xml:space="preserve">Gets the maximum value of the vector components.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the maximum value of the vector components.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a @NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_index" c:identifier="ncm_vector_get_max_index">
        <doc xml:space="preserve">Gets the index of the maximal vector component.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the index of the maximal component.</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a @NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_min" c:identifier="ncm_vector_get_min">
        <doc xml:space="preserve">Gets the minimum value of the vector components.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the minimum value of the vector components.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a @NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_min_index" c:identifier="ncm_vector_get_min_index">
        <doc xml:space="preserve">Gets the index of the minimal vector component.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the index of the minimal component.</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a @NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_minmax" c:identifier="ncm_vector_get_minmax">
        <doc xml:space="preserve">Gets the minimum/maximum value of the vector components.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a @NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
          <parameter name="min"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">minimum component value of @cv</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="max"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">maximum component value of @cv</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_subvector" c:identifier="ncm_vector_get_subvector">
        <doc xml:space="preserve">This function returns a #NcmVector which is a subvector of the vector @cv.
The start of the new vector is the @k-th component from the original vector @cv.
The new vector has @size elements.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #NcmVector.</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">component index of the original vector.</doc>
            <type name="gsize" c:type="const gsize"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">number of components of the subvector.</doc>
            <type name="gsize" c:type="const gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_variant" c:identifier="ncm_vector_get_variant">
        <doc xml:space="preserve">Convert @v to a GVariant of the type "ad" without destroying the
original vector @v;</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GVariant of the type "ad".</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="gsl" c:identifier="ncm_vector_gsl" introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value>
          <doc xml:space="preserve">FIXME</doc>
          <type c:type="gsl_vector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="len" c:identifier="ncm_vector_len">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="log_vals" c:identifier="ncm_vector_log_vals">
        <doc xml:space="preserve">Log the vector values using @prestr and @format.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
          <parameter name="prestr" transfer-ownership="none">
            <doc xml:space="preserve">initial string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">float format</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve">whether to include a cariage return</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="log_vals_avpb" c:identifier="ncm_vector_log_vals_avpb">
        <doc xml:space="preserve">Log the vector values ($a\vec{v}+b$) using @prestr and @format.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
          <parameter name="prestr" transfer-ownership="none">
            <doc xml:space="preserve">initial string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">float format.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a double.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">a double.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="log_vals_func" c:identifier="ncm_vector_log_vals_func">
        <doc xml:space="preserve">Log the vector values (f(\vec{v}_i)$) using @prestr and @format.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
          <parameter name="prestr" transfer-ownership="none">
            <doc xml:space="preserve">initial string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">float format.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="f"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:space="preserve">a #NcmVectorCompFunc.</doc>
            <type name="VectorCompFunc" c:type="NcmVectorCompFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data used in @f.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="memcpy" c:identifier="ncm_vector_memcpy">
        <doc xml:space="preserve">This function copies the components of the vector @cv2 into the vector @cv1.
The two vectors must have the same length.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="cv2" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="memcpy2" c:identifier="ncm_vector_memcpy2">
        <doc xml:space="preserve">This function copies @size components of @cv2, counting from @cv2_start,
to the vector @cv1, starting from the @cv1_start component.
It is useful for vectors with different sizes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="cv2" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </parameter>
          <parameter name="cv1_start" transfer-ownership="none">
            <doc xml:space="preserve">component of @cv1.</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="cv2_start" transfer-ownership="none">
            <doc xml:space="preserve">component of @cv2.</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">number of components.</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="mulby" c:identifier="ncm_vector_mulby">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="nvector"
              c:identifier="ncm_vector_nvector"
              introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value>
          <doc xml:space="preserve">FIXME</doc>
          <type c:type="N_Vector"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_variant" c:identifier="ncm_vector_peek_variant">
        <doc xml:space="preserve">Convert @v to a GVariant of the type "ad" using the same memory space.
The vector @v should not be modified during the variant existance.
If the vector has stride != 1 then ncm_vector_get_variant() is called.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GVariant of the type "ad".</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ptr" c:identifier="ncm_vector_ptr">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A pointer to the @i-th component of the vector @cv.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">component index.</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ncm_vector_ref">
        <doc xml:space="preserve">This function increses the reference count of the vector @cv.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@cv</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="scale" c:identifier="ncm_vector_scale">
        <doc xml:space="preserve">This function multiplies the components of the vector @cv by the constant factor @val.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">a cosntant double.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="ncm_vector_set">
        <doc xml:space="preserve">This function sets the value of the @i-th component of the vector @cv to @val.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">component index.</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">a constant double.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_all" c:identifier="ncm_vector_set_all">
        <doc xml:space="preserve">This function sets all the components of the vector @cv to the value @val.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">a constant double.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_array" c:identifier="ncm_vector_set_array">
        <doc xml:space="preserve">This function sets all the components of the vector @cv using the data array @array,
@array-&gt;len must match the vector size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">a pointer to a double #GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_data" c:identifier="ncm_vector_set_data">
        <doc xml:space="preserve">This function sets all the components of the vector @cv using the data array @array,
@size must match the vector size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve">a pointer to a double array</doc>
            <array length="1" zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">data array size</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_variant"
              c:identifier="ncm_vector_set_from_variant">
        <doc xml:space="preserve">Sets the values of @cv using the variant @var. This function fails
if @cv and @var differ in size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a @NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="var" transfer-ownership="none">
            <doc xml:space="preserve">a #GVariant of type ad.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_zero" c:identifier="ncm_vector_set_zero">
        <doc xml:space="preserve">This function sets all the components of the vector @cv to zero.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="stride" c:identifier="ncm_vector_stride">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="sub" c:identifier="ncm_vector_sub">
        <doc xml:space="preserve">This function subtracts the components of the vector @cv2 to the components of the vector @cv1.
The two vectors must have the same length.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="cv2" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="subfrom" c:identifier="ncm_vector_subfrom">
        <doc xml:space="preserve">This function subtracts @val from the value of the @i-th component of @cv.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="Vector" c:type="NcmVector*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">component index.</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve">a cosntant double.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="sum_cpts" c:identifier="ncm_vector_sum_cpts">
        <doc xml:space="preserve">Calculates the sum of the components.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the sum of the vector @cv components.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cv" transfer-ownership="none">
            <doc xml:space="preserve">a @NcmVector</doc>
            <type name="Vector" c:type="const NcmVector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="values" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="vv" introspectable="0" readable="0" private="1">
        <type c:type="gsl_vector_view"/>
      </field>
      <field name="pdata" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="pfree" readable="0" private="1">
        <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
      </field>
      <field name="type" readable="0" private="1">
        <type name="VectorInternal" c:type="NcmVectorInternal"/>
      </field>
    </class>
    <record name="VectorClass"
            c:type="NcmVectorClass"
            glib:is-gtype-struct-for="Vector">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <callback name="VectorCompFunc" c:type="NcmVectorCompFunc">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="v_i" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="i" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="VectorInternal"
                 glib:type-name="NcmVectorInternal"
                 glib:get-type="ncm_vector_internal_get_type"
                 c:type="NcmVectorInternal">
      <doc xml:space="preserve">FIXME</doc>
      <member name="slice"
              value="0"
              c:identifier="NCM_VECTOR_SLICE"
              glib:nick="slice">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="gsl_vector"
              value="1"
              c:identifier="NCM_VECTOR_GSL_VECTOR"
              glib:nick="gsl-vector">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="malloc"
              value="2"
              c:identifier="NCM_VECTOR_MALLOC"
              glib:nick="malloc">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="array"
              value="3"
              c:identifier="NCM_VECTOR_ARRAY"
              glib:nick="array">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="derived"
              value="4"
              c:identifier="NCM_VECTOR_DERIVED"
              glib:nick="derived">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <constant name="ZERO_LIMIT" value="0.000000" c:type="NCM_ZERO_LIMIT">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <callback name="_FitLSFJ" c:type="_NcmFitLSFJ">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="fit" transfer-ownership="none">
          <type name="Fit" c:type="NcmFit*"/>
        </parameter>
        <parameter name="f" transfer-ownership="none">
          <type name="Vector" c:type="NcmVector*"/>
        </parameter>
        <parameter name="J" transfer-ownership="none">
          <type name="Matrix" c:type="NcmMatrix*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="_FitLSJ" c:type="_NcmFitLSJ">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="fit" transfer-ownership="none">
          <type name="Fit" c:type="NcmFit*"/>
        </parameter>
        <parameter name="J" transfer-ownership="none">
          <type name="Matrix" c:type="NcmMatrix*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="_FitM2lnLGrad" c:type="_NcmFitM2lnLGrad">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="fit" transfer-ownership="none">
          <type name="Fit" c:type="NcmFit*"/>
        </parameter>
        <parameter name="grad" transfer-ownership="none">
          <type name="Vector" c:type="NcmVector*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="_FitM2lnLValGrad" c:type="_NcmFitM2lnLValGrad">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="fit" transfer-ownership="none">
          <type name="Fit" c:type="NcmFit*"/>
        </parameter>
        <parameter name="m2lnL" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="grad" transfer-ownership="none">
          <type name="Vector" c:type="NcmVector*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="_Integrand2dimFunc" c:type="_NcmIntegrand2dimFunc">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="userdata"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="_Integrand3dimFunc" c:type="_NcmIntegrand3dimFunc">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="z" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="userdata"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="_Spline2dBicubicOptimizeInt"
            c:type="_NcmSpline2dBicubicOptimizeInt">
      <field name="l" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="u" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="init" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="s" readable="0" private="1">
        <type name="Spline" c:type="NcmSpline*"/>
      </field>
    </record>
    <function name="binsplit_alloc"
              c:identifier="ncm_binsplit_alloc"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="BinSplit" c:type="NcmBinSplit*"/>
      </return-value>
      <parameters>
        <parameter name="userdata"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="binsplit_eval_join"
              c:identifier="ncm_binsplit_eval_join"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="bs" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmBinSplit</doc>
          <type name="BinSplit" c:type="NcmBinSplit*"/>
        </parameter>
        <parameter name="bs_eval" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmBinSplitEval</doc>
          <type name="BinSplitEval" c:type="NcmBinSplitEval"/>
        </parameter>
        <parameter name="nt" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
      </parameters>
    </function>
    <function name="binsplit_eval_prec"
              c:identifier="ncm_binsplit_eval_prec"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gulong" c:type="gulong"/>
      </return-value>
      <parameters>
        <parameter name="bs" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmBinSplit</doc>
          <type name="BinSplit" c:type="NcmBinSplit*"/>
        </parameter>
        <parameter name="bs_eval" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmBinSplitEval</doc>
          <type name="BinSplitEval" c:type="NcmBinSplitEval"/>
        </parameter>
        <parameter name="step" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="prec" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
      </parameters>
    </function>
    <function name="binsplit_get"
              c:identifier="ncm_binsplit_get"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="bs" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmBinSplit</doc>
          <type name="BinSplit" c:type="NcmBinSplit*"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="binsplit_get_d"
              c:identifier="ncm_binsplit_get_d"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="bs" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmBinSplit</doc>
          <type name="BinSplit" c:type="NcmBinSplit*"/>
        </parameter>
        <parameter name="rnd" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="binsplit_get_q"
              c:identifier="ncm_binsplit_get_q"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="bs" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmBinSplit</doc>
          <type name="BinSplit" c:type="NcmBinSplit*"/>
        </parameter>
        <parameter name="q" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="binsplit_join" c:identifier="ncm_binsplit_join">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="bs" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmBinSplit</doc>
          <type name="BinSplit" c:type="NcmBinSplit*"/>
        </parameter>
        <parameter name="bs_l" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmBinSplit</doc>
          <type name="BinSplit" c:type="NcmBinSplit*"/>
        </parameter>
        <parameter name="bs_r" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmBinSplit</doc>
          <type name="BinSplit" c:type="NcmBinSplit*"/>
        </parameter>
      </parameters>
    </function>
    <function name="binsplit_test_next"
              c:identifier="ncm_binsplit_test_next"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="glong" c:type="glong"/>
      </return-value>
      <parameters>
        <parameter name="bs" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmBinSplit</doc>
          <type name="BinSplit" c:type="NcmBinSplit*"/>
        </parameter>
        <parameter name="bs_eval" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmBinSplitEval</doc>
          <type name="BinSplitEval" c:type="NcmBinSplitEval"/>
        </parameter>
        <parameter name="nt" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_array_set_variant"
              c:identifier="ncm_cfg_array_set_variant"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">a #GArray.</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
        <parameter name="var" transfer-ownership="none">
          <doc xml:space="preserve">a variant of array type.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_array_to_variant"
              c:identifier="ncm_cfg_array_to_variant"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">FIXME</doc>
        <type name="GLib.Variant" c:type="GVariant*"/>
      </return-value>
      <parameters>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">a #GArray.</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
        <parameter name="etype" transfer-ownership="none">
          <doc xml:space="preserve">element type.</doc>
          <type name="GLib.VariantType" c:type="const GVariantType*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_command_line" c:identifier="ncm_cfg_command_line">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">FIXME</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="argv" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="argc" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_enable_gsl_err_handler"
              c:identifier="ncm_cfg_enable_gsl_err_handler">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="cfg_entries_to_keyfile"
              c:identifier="ncm_cfg_entries_to_keyfile">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="kfile" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="GLib.KeyFile" c:type="GKeyFile*"/>
        </parameter>
        <parameter name="group_name" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="entries" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="GLib.OptionEntry" c:type="GOptionEntry*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_enum_get_value" c:identifier="ncm_cfg_enum_get_value">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="GObject.EnumValue" c:type="const GEnumValue*"/>
      </return-value>
      <parameters>
        <parameter name="enum_type" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_enum_print_all" c:identifier="ncm_cfg_enum_print_all">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="enum_type" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="header" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_exists"
              c:identifier="ncm_cfg_exists"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_fopen" c:identifier="ncm_cfg_fopen" introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gint" c:type="gint*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="mode" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_get_data_filename"
              c:identifier="ncm_cfg_get_data_filename">
      <doc xml:space="preserve">Looks for @filename in the data path and returns
the full path if found.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">Full path for @filename.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">filename to search in the data path.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="must_exist" transfer-ownership="none">
          <doc xml:space="preserve">raises an error if @filename is not found.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_get_enum_by_id_name_nick"
              c:identifier="ncm_cfg_get_enum_by_id_name_nick">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="GObject.EnumValue" c:type="const GEnumValue*"/>
      </return-value>
      <parameters>
        <parameter name="enum_type" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="id_name_nick" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_get_fullpath"
              c:identifier="ncm_cfg_get_fullpath"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">FIXME</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_init" c:identifier="ncm_cfg_init">
      <doc xml:space="preserve">Main library configuration function. Must be called before any
other function of NumCosmo.

Initializes internal variables and sets
all other library number of threads to one.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="cfg_keyfile_to_arg" c:identifier="ncm_cfg_keyfile_to_arg">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="kfile" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="GLib.KeyFile" c:type="GKeyFile*"/>
        </parameter>
        <parameter name="group_name" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="entries" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="GLib.OptionEntry" c:type="GOptionEntry*"/>
        </parameter>
        <parameter name="argv" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="argc" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_load_fftw_wisdom"
              c:identifier="ncm_cfg_load_fftw_wisdom"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_load_spline"
              c:identifier="ncm_cfg_load_spline"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="stype" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type c:type="const gsl_interp_type*"/>
        </parameter>
        <parameter name="s" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Spline" c:type="NcmSpline**"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_lock_plan_fftw" c:identifier="ncm_cfg_lock_plan_fftw">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="cfg_logfile" c:identifier="ncm_cfg_logfile">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="on" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_logfile_flush" c:identifier="ncm_cfg_logfile_flush">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="on" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_logfile_flush_now"
              c:identifier="ncm_cfg_logfile_flush_now">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="cfg_msg_sepa" c:identifier="ncm_cfg_msg_sepa">
      <doc xml:space="preserve">Log a message separator.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="cfg_register_obj" c:identifier="ncm_cfg_register_obj">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_save_fftw_wisdom"
              c:identifier="ncm_cfg_save_fftw_wisdom"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_save_spline"
              c:identifier="ncm_cfg_save_spline"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="s" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Spline" c:type="NcmSpline*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_set_fftw_default_flag"
              c:identifier="ncm_cfg_set_fftw_default_flag">
      <doc xml:space="preserve">Sets the default FFTW flag (FFTW_ESTIMATE, FFTW_MEASURE, FFTW_PATIENT, FFTW_EXHAUSTIVE)
to be used when building plans. The variable @timeout sets the maximum time spended on
planners.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="flag" transfer-ownership="none">
          <doc xml:space="preserve">a FFTW library flag</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="timeout" transfer-ownership="none">
          <doc xml:space="preserve">planner time out in seconds</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_set_logfile" c:identifier="ncm_cfg_set_logfile">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_string_to_comment"
              c:identifier="ncm_cfg_string_to_comment">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">FIXME</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_unlock_plan_fftw"
              c:identifier="ncm_cfg_unlock_plan_fftw">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="cfg_variant_to_array"
              c:identifier="ncm_cfg_variant_to_array"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">FIXME</doc>
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="var" transfer-ownership="none">
          <doc xml:space="preserve">a variant of array type.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
        <parameter name="esize" transfer-ownership="none">
          <doc xml:space="preserve">element size.</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="cfg_vfopen"
              c:identifier="ncm_cfg_vfopen"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gint" c:type="gint*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="mode" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="ap" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="va_list" c:type="va_list"/>
        </parameter>
      </parameters>
    </function>
    <function name="cmp" c:identifier="ncm_cmp">
      <doc xml:space="preserve">Compare x and y and return -1 if x &lt; y, 0 if x == y and 1 if x &gt; y,
all comparisons are done with precision @prec.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">-1, 0, 1.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">a double.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve">a double.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="reltol" transfer-ownership="none">
          <doc xml:space="preserve">relative precision.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="cmpdbl" c:identifier="ncm_cmpdbl">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">a double.</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve">a double.</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="complex_clear"
              c:identifier="ncm_complex_clear"
              moved-to="Complex.clear">
      <doc xml:space="preserve">Frees *@c and sets *@c to NULL, it should not be used on a statically allocated NcmComplex.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="c" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmComplex.</doc>
          <type name="Complex" c:type="NcmComplex**"/>
        </parameter>
      </parameters>
    </function>
    <function name="d1exprel" c:identifier="ncm_d1exprel">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">a double</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="d2exprel" c:identifier="ncm_d2exprel">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">a double</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="d3exprel" c:identifier="ncm_d3exprel">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">a double</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="exprel" c:identifier="ncm_exprel">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">a double</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="func_eval_log_pool_stats"
              c:identifier="ncm_func_eval_log_pool_stats">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="func_eval_set_max_threads"
              c:identifier="ncm_func_eval_set_max_threads">
      <doc xml:space="preserve">Set the new maximun number of threads to be used by the pool. Note that this
function is global changing this will affect every place which uses these
functions.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="mt" transfer-ownership="none">
          <doc xml:space="preserve">new max threads to be used in the pool, -1 means unlimited</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="func_eval_threaded_loop"
              c:identifier="ncm_func_eval_threaded_loop">
      <doc xml:space="preserve">Using the thread pool, evaluate @fl in each value of (@f-@i)/nthreads</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="lfunc"
                   transfer-ownership="none"
                   scope="notified"
                   closure="3">
          <doc xml:space="preserve">#NcmFuncEvalLoop to be evaluated in threads</doc>
          <type name="FuncEvalLoop" c:type="NcmFuncEvalLoop"/>
        </parameter>
        <parameter name="i" transfer-ownership="none">
          <doc xml:space="preserve">initial index</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="f" transfer-ownership="none">
          <doc xml:space="preserve">final index</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">pointer to be passed to @fl</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="func_eval_threaded_loop_full"
              c:identifier="ncm_func_eval_threaded_loop_full">
      <doc xml:space="preserve">Using the thread pool, evaluate @fl sending one worker per index.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="lfunc"
                   transfer-ownership="none"
                   scope="notified"
                   closure="3">
          <doc xml:space="preserve">#NcmFuncEvalLoop to be evaluated in threads</doc>
          <type name="FuncEvalLoop" c:type="NcmFuncEvalLoop"/>
        </parameter>
        <parameter name="i" transfer-ownership="none">
          <doc xml:space="preserve">initial index</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="f" transfer-ownership="none">
          <doc xml:space="preserve">final index</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">pointer to be passed to @fl</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="func_eval_threaded_loop_nw"
              c:identifier="ncm_func_eval_threaded_loop_nw">
      <doc xml:space="preserve">Using the thread pool, evaluate @fl in each value of (@f-@i)/@nwork.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="lfunc"
                   transfer-ownership="none"
                   scope="notified"
                   closure="3">
          <doc xml:space="preserve">#NcmFuncEvalLoop to be evaluated in threads</doc>
          <type name="FuncEvalLoop" c:type="NcmFuncEvalLoop"/>
        </parameter>
        <parameter name="i" transfer-ownership="none">
          <doc xml:space="preserve">initial index</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="f" transfer-ownership="none">
          <doc xml:space="preserve">final index</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">pointer to be passed to @fl</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="nworkers" transfer-ownership="none">
          <doc xml:space="preserve">number of workers.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="function_cache_clear"
              c:identifier="ncm_function_cache_clear"
              moved-to="FunctionCache.clear">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cache" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmFunctionCache</doc>
          <type name="FunctionCache" c:type="NcmFunctionCache**"/>
        </parameter>
      </parameters>
    </function>
    <function name="function_cache_new"
              c:identifier="ncm_function_cache_new"
              moved-to="FunctionCache.new"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="FunctionCache" c:type="NcmFunctionCache*"/>
      </return-value>
      <parameters>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="abstol" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="reltol" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="grid_get_name"
              c:identifier="ncm_grid_get_name"
              moved-to="Grid.get_name">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">FIXME</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="secs" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmGridSection</doc>
          <type name="GridSection" c:type="NcmGridSection*"/>
        </parameter>
      </parameters>
    </function>
    <function name="grid_new"
              c:identifier="ncm_grid_new"
              moved-to="Grid.new"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="Grid" c:type="NcmGrid*"/>
      </return-value>
      <parameters>
        <parameter name="nnodes" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
      </parameters>
    </function>
    <function name="grid_new_from_sections"
              c:identifier="ncm_grid_new_from_sections"
              moved-to="Grid.new_from_sections"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="Grid" c:type="NcmGrid*"/>
      </return-value>
      <parameters>
        <parameter name="secs" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmGridSection</doc>
          <type name="GridSection" c:type="NcmGridSection*"/>
        </parameter>
      </parameters>
    </function>
    <function name="grid_read"
              c:identifier="ncm_grid_read"
              moved-to="Grid.read"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="Grid" c:type="NcmGrid*"/>
      </return-value>
      <parameters>
        <parameter name="f" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="integral_cached_0_x"
              c:identifier="ncm_integral_cached_0_x"
              introspectable="0">
      <doc xml:space="preserve">This function searchs for the nearest x_near value previously chosed as the upper integration limit
and perform the integration at [x_near, x] interval. This result is summed to that obtained at [0, x_near]
and then it is saved in the cache.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the error code returned by gsl_integration_qag.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="cache" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to #NcmFunctionCache.</doc>
          <type name="FunctionCache" c:type="NcmFunctionCache*"/>
        </parameter>
        <parameter name="F" transfer-ownership="none">
          <doc xml:space="preserve">a gsl_function wich is the integrand.</doc>
          <type c:type="gsl_function*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">upper integration limit.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the result.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the estimated error.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="integral_cached_x_inf"
              c:identifier="ncm_integral_cached_x_inf"
              introspectable="0">
      <doc xml:space="preserve">This function searchs for the nearest x_near value previously chosed as the lower integration limit
and perform the integration at $[x, x_{near}]$ interval. This result is summed to that
obtained at $[x_{near}, \infty]$ and then it is saved in the cache.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the error code returned by gsl_integration_qagiu.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="cache" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to #NcmFunctionCache.</doc>
          <type name="FunctionCache" c:type="NcmFunctionCache*"/>
        </parameter>
        <parameter name="F" transfer-ownership="none">
          <doc xml:space="preserve">a gsl_function wich is the integrand.</doc>
          <type c:type="gsl_function*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">lower integration limit.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the result.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the estimated error.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="integral_fixed_new"
              c:identifier="ncm_integral_fixed_new"
              moved-to="IntegralFixed.new"
              introspectable="0">
      <doc xml:space="preserve">This function prepares the #NcmIntegralFixed with a grid
with n_nodes - 1 intervals beteween xl and xu. In each interval it uses
a fixed order (rule_n) Gauss-Legendre integration rule to determine the
interval inner points. This results in a grid with (n_nodes - 1) * rule_n points.</doc>
      <return-value>
        <doc xml:space="preserve">a pointer to the newly created #NcmIntegralFixed structure.</doc>
        <type name="IntegralFixed" c:type="NcmIntegralFixed*"/>
      </return-value>
      <parameters>
        <parameter name="n_nodes" transfer-ownership="none">
          <doc xml:space="preserve">number of nodes in the full interval.</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="rule_n" transfer-ownership="none">
          <doc xml:space="preserve">order of the Gauss-Legendre integration rule to be applied in each interval.</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="xl" transfer-ownership="none">
          <doc xml:space="preserve">the interval lower limit.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="xu" transfer-ownership="none">
          <doc xml:space="preserve">the interval upper limit.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="integral_get_workspace"
              c:identifier="ncm_integral_get_workspace"
              introspectable="0">
      <doc xml:space="preserve">This function provides a workspace to be used by numerical integration
functions of GSL. It keeps a internal pool of workspaces and allocate a
new one if the function is called and the pool is empty. It is designed
to be used in a multithread enviroment. The workspace must be unlocked
in order to return to the pool. This must be done using the #ncm_memory_pool_return.</doc>
      <return-value>
        <doc xml:space="preserve">a pointer to #gsl_integration_workspace structure.</doc>
        <type c:type="gsl_integration_workspace**"/>
      </return-value>
    </function>
    <function name="integral_locked_a_b"
              c:identifier="ncm_integral_locked_a_b"
              introspectable="0">
      <doc xml:space="preserve">This function uses a workspace from the pool and gsl_integration_qag function to perform
the numerical integration in the [a, b] interval.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the error code returned by gsl_integration_qag.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="F" transfer-ownership="none">
          <doc xml:space="preserve">a gsl_function wich is the integrand.</doc>
          <type c:type="gsl_function*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">lower integration limit.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <doc xml:space="preserve">upper integration limit.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="abstol" transfer-ownership="none">
          <doc xml:space="preserve">absolute tolerance.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="reltol" transfer-ownership="none">
          <doc xml:space="preserve">relative tolerance.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the result.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the estimated error.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="integral_locked_a_inf"
              c:identifier="ncm_integral_locked_a_inf"
              introspectable="0">
      <doc xml:space="preserve">This function uses a workspace from the pool and gsl_integration_qagiu function to perform
the numerical integration in the $[a, \infty]$ interval.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the error code returned by gsl_integration_qagiu.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="F" transfer-ownership="none">
          <doc xml:space="preserve">a gsl_function wich is the integrand.</doc>
          <type c:type="gsl_function*"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">lower integration limit.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="abstol" transfer-ownership="none">
          <doc xml:space="preserve">absolute tolerance.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="reltol" transfer-ownership="none">
          <doc xml:space="preserve">relative tolerance.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the result.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the estimated error.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="integrate_2dim" c:identifier="ncm_integrate_2dim">
      <doc xml:space="preserve">This function FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a gboolean</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="integ" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to #NcmIntegrand2dim.</doc>
          <type name="Integrand2dim" c:type="NcmIntegrand2dim*"/>
        </parameter>
        <parameter name="xi" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the lower integration limit of variable x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="yi" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the lower integration limit of variable y.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="xf" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the upper integration limit of variable x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="yf" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the upper integration limit of variable y.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="epsrel" transfer-ownership="none">
          <doc xml:space="preserve">relative error</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="epsabs" transfer-ownership="none">
          <doc xml:space="preserve">absolute error</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the result.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the estimated error.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="integrate_2dim_divonne"
              c:identifier="ncm_integrate_2dim_divonne">
      <doc xml:space="preserve">This function FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a gboolean</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="integ" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to #NcmIntegrand2dim</doc>
          <type name="Integrand2dim" c:type="NcmIntegrand2dim*"/>
        </parameter>
        <parameter name="xi" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the lower integration limit of variable x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="yi" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the lower integration limit of variable y.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="xf" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the upper integration limit of variable x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="yf" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the upper integration limit of variable y.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="epsrel" transfer-ownership="none">
          <doc xml:space="preserve">relative error</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="epsabs" transfer-ownership="none">
          <doc xml:space="preserve">absolute error</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="ngiven" transfer-ownership="none">
          <doc xml:space="preserve">number of peaks</doc>
          <type name="gint" c:type="const gint"/>
        </parameter>
        <parameter name="ldxgiven" transfer-ownership="none">
          <doc xml:space="preserve">the leading dimension of xgiven, i.e. the offset between one
point and the next in memory (ref. libcuba documentation)</doc>
          <type name="gint" c:type="const gint"/>
        </parameter>
        <parameter name="xgiven" transfer-ownership="none">
          <doc xml:space="preserve">list of points where the integrand might have peaks (ref. libcuba documentation)</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the result.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the estimated error.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="integrate_2dim_divonne_peakfinder"
              c:identifier="ncm_integrate_2dim_divonne_peakfinder">
      <doc xml:space="preserve">This function FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a gboolean</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="integ" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to #NcmIntegrand2dim</doc>
          <type name="Integrand2dim" c:type="NcmIntegrand2dim*"/>
        </parameter>
        <parameter name="xi" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the lower integration limit of variable x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="yi" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the lower integration limit of variable y.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="xf" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the upper integration limit of variable x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="yf" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the upper integration limit of variable y.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="epsrel" transfer-ownership="none">
          <doc xml:space="preserve">relative error</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="epsabs" transfer-ownership="none">
          <doc xml:space="preserve">absolute error</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="ngiven" transfer-ownership="none">
          <doc xml:space="preserve">number of peaks</doc>
          <type name="gint" c:type="const gint"/>
        </parameter>
        <parameter name="ldxgiven" transfer-ownership="none">
          <doc xml:space="preserve">the leading dimension of xgiven, i.e. the offset between one
point and the next in memory (ref. libcuba documentation)</doc>
          <type name="gint" c:type="const gint"/>
        </parameter>
        <parameter name="xgiven" transfer-ownership="none">
          <doc xml:space="preserve">list of points where the integrand might have peaks (ref. libcuba documentation)</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="nextra" transfer-ownership="none">
          <doc xml:space="preserve">the maximum number of extra points the peakfinder will return.</doc>
          <type name="gint" c:type="const gint"/>
        </parameter>
        <parameter name="peakfinder" transfer-ownership="none" scope="call">
          <doc xml:space="preserve">a #NcmIntegralPeakfinder</doc>
          <type name="IntegralPeakfinder" c:type="NcmIntegralPeakfinder"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the result.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the estimated error.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="integrate_2dim_vegas"
              c:identifier="ncm_integrate_2dim_vegas">
      <doc xml:space="preserve">This function FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a gboolean</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="integ" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to #NcmIntegrand2dim</doc>
          <type name="Integrand2dim" c:type="NcmIntegrand2dim*"/>
        </parameter>
        <parameter name="xi" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the lower integration limit of variable x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="yi" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the lower integration limit of variable y.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="xf" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the upper integration limit of variable x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="yf" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the upper integration limit of variable y.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="epsrel" transfer-ownership="none">
          <doc xml:space="preserve">relative error</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="epsabs" transfer-ownership="none">
          <doc xml:space="preserve">absolute error</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="nstart" transfer-ownership="none">
          <doc xml:space="preserve">number of samples to start the first round of integration with.</doc>
          <type name="gint" c:type="const gint"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the result.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the estimated error.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="integrate_3dim" c:identifier="ncm_integrate_3dim">
      <doc xml:space="preserve">This function FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a gboolean</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="integ" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to #NcmIntegrand3dim.</doc>
          <type name="Integrand3dim" c:type="NcmIntegrand3dim*"/>
        </parameter>
        <parameter name="xi" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the lower integration limit of variable x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="yi" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the lower integration limit of variable y.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="zi" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the lower integration limit of variable z.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="xf" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the upper integration limit of variable x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="yf" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the upper integration limit of variable y.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="zf" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the upper integration limit of variable z.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="epsrel" transfer-ownership="none">
          <doc xml:space="preserve">relative error</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="epsabs" transfer-ownership="none">
          <doc xml:space="preserve">absolute error</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the result.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the estimated error.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="integrate_3dim_divonne"
              c:identifier="ncm_integrate_3dim_divonne">
      <doc xml:space="preserve">This function FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a gboolean</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="integ" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to #NcmIntegrand3dim</doc>
          <type name="Integrand3dim" c:type="NcmIntegrand3dim*"/>
        </parameter>
        <parameter name="xi" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the lower integration limit of variable x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="yi" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the lower integration limit of variable y.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="zi" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the lower integration limit of variable z.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="xf" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the upper integration limit of variable x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="yf" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the upper integration limit of variable y.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="zf" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the upper integration limit of variable z.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="epsrel" transfer-ownership="none">
          <doc xml:space="preserve">relative error</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="epsabs" transfer-ownership="none">
          <doc xml:space="preserve">absolute error</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="ngiven" transfer-ownership="none">
          <doc xml:space="preserve">number of peaks</doc>
          <type name="gint" c:type="const gint"/>
        </parameter>
        <parameter name="ldxgiven" transfer-ownership="none">
          <doc xml:space="preserve">the leading dimension of xgiven, i.e. the offset between one
point and the next in memory (ref. libcuba documentation)</doc>
          <type name="gint" c:type="const gint"/>
        </parameter>
        <parameter name="xgiven" transfer-ownership="none">
          <doc xml:space="preserve">list of points where the integrand might have peaks (ref. libcuba documentation)</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the result.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the estimated error.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="integrate_3dim_vegas"
              c:identifier="ncm_integrate_3dim_vegas">
      <doc xml:space="preserve">This function FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a gboolean</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="integ" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to #NcmIntegrand3dim</doc>
          <type name="Integrand3dim" c:type="NcmIntegrand3dim*"/>
        </parameter>
        <parameter name="xi" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the lower integration limit of variable x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="yi" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the lower integration limit of variable y.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="zi" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the lower integration limit of variable z.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="xf" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the upper integration limit of variable x.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="yf" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the upper integration limit of variable y.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="zf" transfer-ownership="none">
          <doc xml:space="preserve">gbouble which is the upper integration limit of variable z.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="epsrel" transfer-ownership="none">
          <doc xml:space="preserve">relative error</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="epsabs" transfer-ownership="none">
          <doc xml:space="preserve">absolute error</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="nstart" transfer-ownership="none">
          <doc xml:space="preserve">number of samples to start the first round of integration with.</doc>
          <type name="gint" c:type="const gint"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the result.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a gdouble in which the function stores the estimated error.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="interp_dd_eval" c:identifier="ncm_interp_dd_eval">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="vx" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble*"/>
        </parameter>
        <parameter name="dd" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="np" transfer-ownership="none">
          <type name="gint" c:type="const gint"/>
        </parameter>
        <parameter name="nf" transfer-ownership="none">
          <type name="gint" c:type="const gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="interp_dd_eval_2_4" c:identifier="ncm_interp_dd_eval_2_4">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="vx" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble*"/>
        </parameter>
        <parameter name="dd" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="interp_dd_init" c:identifier="ncm_interp_dd_init">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="vx" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble*"/>
        </parameter>
        <parameter name="dd" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="np" transfer-ownership="none">
          <type name="gint" c:type="const gint"/>
        </parameter>
        <parameter name="nf" transfer-ownership="none">
          <type name="gint" c:type="const gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="interp_dd_init_2_4" c:identifier="ncm_interp_dd_init_2_4">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="vx" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble*"/>
        </parameter>
        <parameter name="dd" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="lapack_dggglm_alloc"
              c:identifier="ncm_lapack_dggglm_alloc">
      <doc xml:space="preserve">Calculates and allocs memory to solve the system
determined by the parameters.

This function is expect the matrix @X and @L to be row-major.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the newly allocated workspace</doc>
        <array zero-terminated="0" name="GLib.Array" c:type="GArray*">
          <type name="gdouble"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="L" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmMatrix</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </parameter>
        <parameter name="X" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmMatrix</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </parameter>
        <parameter name="p" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmVector</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </parameter>
        <parameter name="d" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmVector</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmVector</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </parameter>
      </parameters>
    </function>
    <function name="lapack_dggglm_run" c:identifier="ncm_lapack_dggglm_run">
      <doc xml:space="preserve">Runs the dggglm function using the workspace @ws.

This function is expect the matrix @X and @L to be row-major.</doc>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="ws" transfer-ownership="none">
          <doc xml:space="preserve">a workspace</doc>
          <array zero-terminated="0" name="GLib.Array" c:type="GArray*">
            <type name="gdouble"/>
          </array>
        </parameter>
        <parameter name="L" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmMatrix</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </parameter>
        <parameter name="X" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmMatrix</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </parameter>
        <parameter name="p" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmVector</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </parameter>
        <parameter name="d" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmVector</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmVector</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </parameter>
      </parameters>
    </function>
    <function name="lapack_dpotrf" c:identifier="ncm_lapack_dpotrf">
      <doc xml:space="preserve">This function computes the Cholesky factorization of a real symmetric
positive definite matrix @a.

The factorization has the form
$A = U^T * U$, if @uplo = 'U', or
$A = L  * L^T$, if @uplo = 'L',
where A = @a, $U$ is an upper triangular matrix and $L$ is lower triangular.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">i = 0:  successful exit

         &lt; 0:  -i, the i-th argument had an illegal value

         &gt; 0:   i, the leading minor of order i is not
               positive definite, and the factorization could not be
               completed.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="uplo" transfer-ownership="none">
          <doc xml:space="preserve">'U' upper triangle of @a is stored; 'L' lower triangle of @a is stored</doc>
          <type name="gchar" c:type="gchar"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve">The order of the matrix @a.  @size &gt;= 0</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">array of doubles with dimension (@size, @lda)</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="lda" transfer-ownership="none">
          <doc xml:space="preserve">The leading dimension of the array @a.  @lda &gt;= max(1,@size)</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="lapack_dpotri" c:identifier="ncm_lapack_dpotri">
      <doc xml:space="preserve">This function computes the inverse of a real symmetric positive
definite matrix @a = A using the Cholesky factorization
$A = U^T*U$ or $A = L*L^T$ computed by %ncm_lapack_dpotrf.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">i = 0:  successful exit

         &lt; 0:  -i, the i-th argument had an illegal value

         &gt; 0: the (i,i) element of the factor U
           or L is zero, and the inverse could not be computed.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="uplo" transfer-ownership="none">
          <doc xml:space="preserve">'U' upper triangle of @a is stored; 'L' lower triangle of @a is stored</doc>
          <type name="gchar" c:type="gchar"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve">The order of the matrix @a.  @size &gt;= 0</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">array of doubles with dimension (@size, @lda)</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="lda" transfer-ownership="none">
          <doc xml:space="preserve">The leading dimension of the array @a.  @lda &gt;= max(1,@size)</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="lapack_dptsv" c:identifier="ncm_lapack_dptsv">
      <doc xml:space="preserve">This function computes the solution to a real system of linear equations
$A*X = B$ (B = @b), where $A$ is an N-by-N (N = @size) symmetric positive definite tridiagonal
matrix, and $X$ and $B$ are N-by-NRHS (NRHS = 1) matrices.

$A$ is factored as $A = L*D*L^T$, and the factored form of $A$ is then
used to solve the system of equations.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">i = 0:  successful exit

       &lt; 0:  -i, the i-th argument had an illegal value

       &gt; 0:   i, the leading minor of order i is not
              positive definite, and the solution has not been
              computed.  The factorization has not been completed
              unless i = N.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="d" transfer-ownership="none">
          <doc xml:space="preserve">array of doubles with dimension @size</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="e" transfer-ownership="none">
          <doc xml:space="preserve">array of doubles with dimension @size -1</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <doc xml:space="preserve">array of doubles with dimension @size</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">array of doubles with dimension @size</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve">The order of the matrix $A$ (&gt;= 0)</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="lapack_dtrsv" c:identifier="ncm_lapack_dtrsv">
      <doc xml:space="preserve">Runs the dtrsv function.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="uplo" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gchar" c:type="gchar"/>
        </parameter>
        <parameter name="trans" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gchar" c:type="gchar"/>
        </parameter>
        <parameter name="diag" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gchar" c:type="gchar"/>
        </parameter>
        <parameter name="A" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Matrix" c:type="NcmMatrix*"/>
        </parameter>
        <parameter name="v" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Vector" c:type="NcmVector*"/>
        </parameter>
      </parameters>
    </function>
    <function name="lh_ratio2d_region_clear"
              c:identifier="ncm_lh_ratio2d_region_clear"
              moved-to="LHRatio2dRegion.clear">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="rg" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmLHRatio2dRegion.</doc>
          <type name="LHRatio2dRegion" c:type="NcmLHRatio2dRegion**"/>
        </parameter>
      </parameters>
    </function>
    <function name="magnus_iserles_ode_eval_vec"
              c:identifier="ncm_magnus_iserles_ode_eval_vec"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="mi_ode" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmMIOde</doc>
          <type name="MIOde" c:type="NcmMIOde*"/>
        </parameter>
        <parameter name="u_i" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="up_i" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="u" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="long double" c:type="long double*"/>
        </parameter>
        <parameter name="up" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="long double" c:type="long double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="magnus_iserles_ode_new"
              c:identifier="ncm_magnus_iserles_ode_new"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="MIOde" c:type="NcmMIOde*"/>
      </return-value>
      <parameters>
        <parameter name="x0" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="long double" c:type="long double"/>
        </parameter>
        <parameter name="g" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmMIOdeFunction</doc>
          <type name="MIOdeFunction" c:type="NcmMIOdeFunction*"/>
        </parameter>
      </parameters>
    </function>
    <function name="magnus_iserles_ode_step"
              c:identifier="ncm_magnus_iserles_ode_step"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="mi_ode" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmMIOde</doc>
          <type name="MIOde" c:type="NcmMIOde*"/>
        </parameter>
        <parameter name="h" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="magnus_iserles_ode_step_frac"
              c:identifier="ncm_magnus_iserles_ode_step_frac"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="mi_ode" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmMIOde</doc>
          <type name="MIOde" c:type="NcmMIOde*"/>
        </parameter>
        <parameter name="frac" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="long double" c:type="long double"/>
        </parameter>
      </parameters>
    </function>
    <function name="memory_pool_new"
              c:identifier="ncm_memory_pool_new"
              moved-to="MemoryPool.new"
              introspectable="0">
      <doc xml:space="preserve">This function prepare a memory pool which allocate memory
using mp_alloc and save it for future use, the memory must
be returned to the pool using #ncm_memory_pool_return.
These functions are thread safe.</doc>
      <return-value>
        <doc xml:space="preserve">the memory pool #NcmMemoryPool</doc>
        <type name="MemoryPool" c:type="NcmMemoryPool*"/>
      </return-value>
      <parameters>
        <parameter name="mp_alloc"
                   transfer-ownership="none"
                   scope="notified"
                   closure="1"
                   destroy="2">
          <doc xml:space="preserve">a #NcmMemoryPoolAlloc, function used to alloc memory.</doc>
          <type name="MemoryPoolAlloc" c:type="NcmMemoryPoolAlloc"/>
        </parameter>
        <parameter name="userdata"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">userdata pointer for @mp_alloc function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="mp_free" transfer-ownership="none" scope="async">
          <doc xml:space="preserve">function used to free memory alloced by mp_alloc.</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="memory_pool_return"
              c:identifier="ncm_memory_pool_return"
              moved-to="MemoryPool.return">
      <doc xml:space="preserve">Put the slice pointed by slice back to the pool.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="p"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">slice to be returned to the pool</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="message" c:identifier="ncm_message" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="message_ww" c:identifier="ncm_message_ww">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="first" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="rest" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="ncols" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpfr_inp_raw"
              c:identifier="ncm_mpfr_inp_raw"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="rop" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="stream" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpfr_out_raw"
              c:identifier="ncm_mpfr_out_raw"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="stream" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="op" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpq_hash_new" c:identifier="ncm_mpq_hash_new">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">FIXME</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
    </function>
    <function name="mpq_inp_raw"
              c:identifier="ncm_mpq_inp_raw"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="q" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="f" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpq_out_raw"
              c:identifier="ncm_mpq_out_raw"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="f" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="q" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpq_tree_new"
              c:identifier="ncm_mpq_tree_new"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="GLib.Tree" c:type="GTree*"/>
      </return-value>
    </function>
    <function name="mpsf_0F1_d"
              c:identifier="ncm_mpsf_0F1_d"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="b" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="rnd" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_0F1_q"
              c:identifier="ncm_mpsf_0F1_q"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="b" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="rnd" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel"
              c:identifier="ncm_mpsf_sbessel"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="q" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="rnd" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_d"
              c:identifier="ncm_mpsf_sbessel_d"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="rnd" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_integrate"
              c:identifier="ncm_mpsf_sbessel_integrate">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="int_jlspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmMpsfSBesselIntSpline</doc>
          <type name="MpsfSBesselIntSpline" c:type="NcmMpsfSBesselIntSpline*"/>
        </parameter>
        <parameter name="s" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSpline</doc>
          <type name="Spline" c:type="NcmSpline*"/>
        </parameter>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="ki" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="xi" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="diff" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integral"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integral"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="j" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="rnd" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integral_a_b"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integral_a_b"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="int_jlspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmMpsfSBesselIntSpline</doc>
          <type name="MpsfSBesselIntSpline" c:type="NcmMpsfSBesselIntSpline*"/>
        </parameter>
        <parameter name="ki" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="xi" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="rnd" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integral_q"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integral_q"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="j" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="q" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="rnd" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integral_recur_calc_d2jl"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integral_recur_calc_d2jl"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="xnjlrec" transfer-ownership="none">
          <doc xml:space="preserve">a NcmMpsfSBesselIntegRecur</doc>
          <type name="MpsfSBesselIntegRecur"
                c:type="NcmMpsfSBesselIntegRecur*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="rule" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="rnd" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integral_recur_calc_djl"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integral_recur_calc_djl"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="xnjlrec" transfer-ownership="none">
          <doc xml:space="preserve">a NcmMpsfSBesselIntegRecur</doc>
          <type name="MpsfSBesselIntegRecur"
                c:type="NcmMpsfSBesselIntegRecur*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="rule" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="rnd" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integral_recur_free"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integral_recur_free"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="xnjlrec" transfer-ownership="none">
          <doc xml:space="preserve">a NcmMpsfSBesselIntegRecur</doc>
          <type name="MpsfSBesselIntegRecur"
                c:type="NcmMpsfSBesselIntegRecur*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integral_recur_goto"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integral_recur_goto"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="xnjlrec" transfer-ownership="none">
          <doc xml:space="preserve">a NcmMpsfSBesselIntegRecur</doc>
          <type name="MpsfSBesselIntegRecur"
                c:type="NcmMpsfSBesselIntegRecur*"/>
        </parameter>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="rnd" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integral_recur_new"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integral_recur_new"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="MpsfSBesselIntegRecur" c:type="NcmMpsfSBesselIntegRecur*"/>
      </return-value>
      <parameters>
        <parameter name="prec" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="jlrec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmMpsfSBesselRecur</doc>
          <type name="MpsfSBesselRecur" c:type="NcmMpsfSBesselRecur*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integral_recur_next"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integral_recur_next"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="xnjlrec" transfer-ownership="none">
          <doc xml:space="preserve">a NcmMpsfSBesselIntegRecur</doc>
          <type name="MpsfSBesselIntegRecur"
                c:type="NcmMpsfSBesselIntegRecur*"/>
        </parameter>
        <parameter name="rnd" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integral_recur_previous"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integral_recur_previous"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="xnjlrec" transfer-ownership="none">
          <doc xml:space="preserve">a NcmMpsfSBesselIntegRecur</doc>
          <type name="MpsfSBesselIntegRecur"
                c:type="NcmMpsfSBesselIntegRecur*"/>
        </parameter>
        <parameter name="rnd" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integral_recur_read"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integral_recur_read"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="MpsfSBesselIntegRecur" c:type="NcmMpsfSBesselIntegRecur*"/>
      </return-value>
      <parameters>
        <parameter name="f" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integral_recur_write"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integral_recur_write"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="xnjlrec" transfer-ownership="none">
          <doc xml:space="preserve">a NcmMpsfSBesselIntegRecur</doc>
          <type name="MpsfSBesselIntegRecur"
                c:type="NcmMpsfSBesselIntegRecur*"/>
        </parameter>
        <parameter name="f" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integrate_spline_cached_new"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integrate_spline_cached_new"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="MpsfSBesselIntSpline" c:type="NcmMpsfSBesselIntSpline*"/>
      </return-value>
      <parameters>
        <parameter name="prec" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="x_secs" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmGridSection</doc>
          <type name="GridSection" c:type="NcmGridSection*"/>
        </parameter>
        <parameter name="k_secs" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmGridSection</doc>
          <type name="GridSection" c:type="NcmGridSection*"/>
        </parameter>
        <parameter name="rnd" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integrate_spline_goto"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integrate_spline_goto"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="int_jlspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmMpsfSBesselIntSpline</doc>
          <type name="MpsfSBesselIntSpline" c:type="NcmMpsfSBesselIntSpline*"/>
        </parameter>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="rnd" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integrate_spline_load"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integrate_spline_load"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="MpsfSBesselIntSpline" c:type="NcmMpsfSBesselIntSpline*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integrate_spline_new"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integrate_spline_new"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="MpsfSBesselIntSpline" c:type="NcmMpsfSBesselIntSpline*"/>
      </return-value>
      <parameters>
        <parameter name="prec" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmGrid</doc>
          <type name="Grid" c:type="NcmGrid*"/>
        </parameter>
        <parameter name="k" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmGrid</doc>
          <type name="Grid" c:type="NcmGrid*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integrate_spline_new_from_sections"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integrate_spline_new_from_sections"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="MpsfSBesselIntSpline" c:type="NcmMpsfSBesselIntSpline*"/>
      </return-value>
      <parameters>
        <parameter name="prec" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="x_secs" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmGridSection</doc>
          <type name="GridSection" c:type="NcmGridSection*"/>
        </parameter>
        <parameter name="k_secs" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmGridSection</doc>
          <type name="GridSection" c:type="NcmGridSection*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integrate_spline_next"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integrate_spline_next"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="int_jlspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmMpsfSBesselIntSpline</doc>
          <type name="MpsfSBesselIntSpline" c:type="NcmMpsfSBesselIntSpline*"/>
        </parameter>
        <parameter name="rnd" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integrate_spline_prepare"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integrate_spline_prepare"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="int_jlspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmMpsfSBesselIntSpline</doc>
          <type name="MpsfSBesselIntSpline" c:type="NcmMpsfSBesselIntSpline*"/>
        </parameter>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="rnd" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integrate_spline_prepare_new"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integrate_spline_prepare_new"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="int_jlspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmMpsfSBesselIntSpline</doc>
          <type name="MpsfSBesselIntSpline" c:type="NcmMpsfSBesselIntSpline*"/>
        </parameter>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="rnd" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integrate_spline_previous"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integrate_spline_previous"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="int_jlspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmMpsfSBesselIntSpline</doc>
          <type name="MpsfSBesselIntSpline" c:type="NcmMpsfSBesselIntSpline*"/>
        </parameter>
        <parameter name="rnd" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_jl_xj_integrate_spline_save"
              c:identifier="ncm_mpsf_sbessel_jl_xj_integrate_spline_save">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="int_jlspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmMpsfSBesselIntSpline</doc>
          <type name="MpsfSBesselIntSpline" c:type="NcmMpsfSBesselIntSpline*"/>
        </parameter>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_recur_new"
              c:identifier="ncm_mpsf_sbessel_recur_new"
              moved-to="MpsfSBesselRecur.new"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="MpsfSBesselRecur" c:type="NcmMpsfSBesselRecur*"/>
      </return-value>
      <parameters>
        <parameter name="prec" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sbessel_recur_read"
              c:identifier="ncm_mpsf_sbessel_recur_read"
              moved-to="MpsfSBesselRecur.read"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="MpsfSBesselRecur" c:type="NcmMpsfSBesselRecur*"/>
      </return-value>
      <parameters>
        <parameter name="f" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpsf_sin_int_mpfr"
              c:identifier="ncm_mpsf_sin_int_mpfr"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="q" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="rnd" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpz_clears"
              c:identifier="ncm_mpz_clears"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="z" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="mpz_inits" c:identifier="ncm_mpz_inits" introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="z" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="numdiff_1" c:identifier="ncm_numdiff_1" introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="F" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type c:type="gsl_function*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="ho" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="err" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="numdiff_2" c:identifier="ncm_numdiff_2" introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="F" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type c:type="gsl_function*"/>
        </parameter>
        <parameter name="ofx" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="ho" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="err" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="numdiff_2_err"
              c:identifier="ncm_numdiff_2_err"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="F" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type c:type="gsl_function*"/>
        </parameter>
        <parameter name="ofx" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="ho" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="err" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="ferr" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="obj_array_clear"
              c:identifier="ncm_obj_array_clear"
              moved-to="ObjArray.clear">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="oa" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to a #NcmObjArray.</doc>
          <type name="ObjArray" c:type="NcmObjArray**"/>
        </parameter>
      </parameters>
    </function>
    <function name="obj_array_load"
              c:identifier="ncm_obj_array_load"
              moved-to="ObjArray.load">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">FIXME</doc>
        <type name="ObjArray" c:type="NcmObjArray*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">oa filename</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="ser" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSerialize</doc>
          <type name="Serialize" c:type="NcmSerialize*"/>
        </parameter>
      </parameters>
    </function>
    <function name="poly_eval" c:identifier="ncm_poly_eval" introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="poly" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type c:type="gsl_vector*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="poly_eval_diff"
              c:identifier="ncm_poly_eval_diff"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="poly" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type c:type="gsl_vector*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="poly_eval_int"
              c:identifier="ncm_poly_eval_int"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="poly" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type c:type="gsl_vector*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="poly_eval_int_P_over_x"
              c:identifier="ncm_poly_eval_int_P_over_x"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="poly" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type c:type="gsl_vector*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="poly_new" c:identifier="ncm_poly_new" introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type c:type="gsl_vector*"/>
      </return-value>
      <parameters>
        <parameter name="degree" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="quadrature_filon_calc_inter_point"
              c:identifier="ncm_quadrature_filon_calc_inter_point">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="quadf" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmQuadFilon</doc>
          <type name="QuadFilon" c:type="NcmQuadFilon*"/>
        </parameter>
        <parameter name="g" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="quadrature_filon_calc_mu_dxnm"
              c:identifier="ncm_quadrature_filon_calc_mu_dxnm">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="quadf" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmQuadFilon</doc>
          <type name="QuadFilon" c:type="NcmQuadFilon*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quadrature_filon_calc_vandermonde"
              c:identifier="ncm_quadrature_filon_calc_vandermonde">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="quadf" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmQuadFilon</doc>
          <type name="QuadFilon" c:type="NcmQuadFilon*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quadrature_filon_eval"
              c:identifier="ncm_quadrature_filon_eval"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="quadf" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmQuadFilon</doc>
          <type name="QuadFilon" c:type="NcmQuadFilon*"/>
        </parameter>
        <parameter name="F" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type c:type="gsl_function*"/>
        </parameter>
        <parameter name="xi" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type c:type="gsl_complex*"/>
        </parameter>
        <parameter name="err" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="quadrature_filon_new"
              c:identifier="ncm_quadrature_filon_new"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="QuadFilon" c:type="NcmQuadFilon*"/>
      </return-value>
      <parameters>
        <parameter name="omega" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="inter_n" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="order" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="range" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="quadrature_filon_solve_vandermonde"
              c:identifier="ncm_quadrature_filon_solve_vandermonde">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="quadf" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmQuadFilon</doc>
          <type name="QuadFilon" c:type="NcmQuadFilon*"/>
        </parameter>
      </parameters>
    </function>
    <function name="random_seed" c:identifier="ncm_random_seed">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gulong" c:type="gulong"/>
      </return-value>
    </function>
    <function name="rational_coarce_double"
              c:identifier="ncm_rational_coarce_double"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="q" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_0F1" c:identifier="ncm_sf_0F1">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="b" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel" c:identifier="ncm_sf_sbessel">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_deriv" c:identifier="ncm_sf_sbessel_deriv">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="jl" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="jlp1" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="djl" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integral"
              c:identifier="ncm_sf_sbessel_jl_xj_integral">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="j" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integral_a_b"
              c:identifier="ncm_sf_sbessel_jl_xj_integral_a_b">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="int_jlspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSphericalBesselIntSpline</doc>
          <type name="SFSphericalBesselIntSpline"
                c:type="NcmSFSphericalBesselIntSpline*"/>
        </parameter>
        <parameter name="x0" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="x1" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="w" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="xnjl_rules" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="xndjl_rules" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="xnd2jl_rules" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integral_recur_cached_new"
              c:identifier="ncm_sf_sbessel_jl_xj_integral_recur_cached_new"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="SFSphericalBesselIntegRecur"
              c:type="NcmSFSphericalBesselIntegRecur*"/>
      </return-value>
      <parameters>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="x_sec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmGridSection</doc>
          <type name="GridSection" c:type="NcmGridSection*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integral_recur_free"
              c:identifier="ncm_sf_sbessel_jl_xj_integral_recur_free">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="xnjlrec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSphericalBesselIntegRecur</doc>
          <type name="SFSphericalBesselIntegRecur"
                c:type="NcmSFSphericalBesselIntegRecur*"/>
        </parameter>
        <parameter name="free_grid" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integral_recur_goto"
              c:identifier="ncm_sf_sbessel_jl_xj_integral_recur_goto">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="glong" c:type="glong"/>
      </return-value>
      <parameters>
        <parameter name="xnjlrec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSphericalBesselIntegRecur</doc>
          <type name="SFSphericalBesselIntegRecur"
                c:type="NcmSFSphericalBesselIntegRecur*"/>
        </parameter>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integral_recur_load"
              c:identifier="ncm_sf_sbessel_jl_xj_integral_recur_load"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="SFSphericalBesselIntegRecur"
              c:type="NcmSFSphericalBesselIntegRecur*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integral_recur_new"
              c:identifier="ncm_sf_sbessel_jl_xj_integral_recur_new"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="SFSphericalBesselIntegRecur"
              c:type="NcmSFSphericalBesselIntegRecur*"/>
      </return-value>
      <parameters>
        <parameter name="jlrec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSBesselRecur</doc>
          <type name="SFSBesselRecur" c:type="NcmSFSBesselRecur*"/>
        </parameter>
        <parameter name="x_grid" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmGrid</doc>
          <type name="Grid" c:type="NcmGrid*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integral_recur_new_from_section"
              c:identifier="ncm_sf_sbessel_jl_xj_integral_recur_new_from_section"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="SFSphericalBesselIntegRecur"
              c:type="NcmSFSphericalBesselIntegRecur*"/>
      </return-value>
      <parameters>
        <parameter name="x_sec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmGridSection</doc>
          <type name="GridSection" c:type="NcmGridSection*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integral_recur_next"
              c:identifier="ncm_sf_sbessel_jl_xj_integral_recur_next">
      <return-value transfer-ownership="none">
        <type name="glong" c:type="glong"/>
      </return-value>
      <parameters>
        <parameter name="xnjlrec" transfer-ownership="none">
          <type name="SFSphericalBesselIntegRecur"
                c:type="NcmSFSphericalBesselIntegRecur*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integral_recur_previous"
              c:identifier="ncm_sf_sbessel_jl_xj_integral_recur_previous">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="glong" c:type="glong"/>
      </return-value>
      <parameters>
        <parameter name="xnjlrec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSphericalBesselIntegRecur</doc>
          <type name="SFSphericalBesselIntegRecur"
                c:type="NcmSFSphericalBesselIntegRecur*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integral_recur_read"
              c:identifier="ncm_sf_sbessel_jl_xj_integral_recur_read"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="SFSphericalBesselIntegRecur"
              c:type="NcmSFSphericalBesselIntegRecur*"/>
      </return-value>
      <parameters>
        <parameter name="f" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integral_recur_save"
              c:identifier="ncm_sf_sbessel_jl_xj_integral_recur_save">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="xnjlrec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSphericalBesselIntegRecur</doc>
          <type name="SFSphericalBesselIntegRecur"
                c:type="NcmSFSphericalBesselIntegRecur*"/>
        </parameter>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integral_recur_set"
              c:identifier="ncm_sf_sbessel_jl_xj_integral_recur_set">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="xnjlrec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSphericalBesselIntegRecur</doc>
          <type name="SFSphericalBesselIntegRecur"
                c:type="NcmSFSphericalBesselIntegRecur*"/>
        </parameter>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integral_recur_write"
              c:identifier="ncm_sf_sbessel_jl_xj_integral_recur_write"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="xnjlrec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSphericalBesselIntegRecur</doc>
          <type name="SFSphericalBesselIntegRecur"
                c:type="NcmSFSphericalBesselIntegRecur*"/>
        </parameter>
        <parameter name="f" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integral_spline"
              c:identifier="ncm_sf_sbessel_jl_xj_integral_spline">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="int_jlspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSphericalBesselIntSpline</doc>
          <type name="SFSphericalBesselIntSpline"
                c:type="NcmSFSphericalBesselIntSpline*"/>
        </parameter>
        <parameter name="s0" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSpline</doc>
          <type name="Spline" c:type="NcmSpline*"/>
        </parameter>
        <parameter name="s1" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSpline</doc>
          <type name="Spline" c:type="NcmSpline*"/>
        </parameter>
        <parameter name="s2" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSpline</doc>
          <type name="Spline" c:type="NcmSpline*"/>
        </parameter>
        <parameter name="w" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integrate_spline_cached_new"
              c:identifier="ncm_sf_sbessel_jl_xj_integrate_spline_cached_new"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="SFSphericalBesselIntSpline"
              c:type="NcmSFSphericalBesselIntSpline*"/>
      </return-value>
      <parameters>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="x_sec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmGridSection</doc>
          <type name="GridSection" c:type="NcmGridSection*"/>
        </parameter>
        <parameter name="init" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integrate_spline_eval"
              c:identifier="ncm_sf_sbessel_jl_xj_integrate_spline_eval">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="int_jlspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSphericalBesselIntSpline</doc>
          <type name="SFSphericalBesselIntSpline"
                c:type="NcmSFSphericalBesselIntSpline*"/>
        </parameter>
        <parameter name="d" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integrate_spline_goto"
              c:identifier="ncm_sf_sbessel_jl_xj_integrate_spline_goto">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="int_jlspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSphericalBesselIntSpline</doc>
          <type name="SFSphericalBesselIntSpline"
                c:type="NcmSFSphericalBesselIntSpline*"/>
        </parameter>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integrate_spline_new"
              c:identifier="ncm_sf_sbessel_jl_xj_integrate_spline_new"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="SFSphericalBesselIntSpline"
              c:type="NcmSFSphericalBesselIntSpline*"/>
      </return-value>
      <parameters>
        <parameter name="xnjlrec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSphericalBesselIntegRecur</doc>
          <type name="SFSphericalBesselIntegRecur"
                c:type="NcmSFSphericalBesselIntegRecur*"/>
        </parameter>
        <parameter name="init" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integrate_spline_next"
              c:identifier="ncm_sf_sbessel_jl_xj_integrate_spline_next">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="int_jlspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSphericalBesselIntSpline</doc>
          <type name="SFSphericalBesselIntSpline"
                c:type="NcmSFSphericalBesselIntSpline*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integrate_spline_previous"
              c:identifier="ncm_sf_sbessel_jl_xj_integrate_spline_previous">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="int_jlspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSphericalBesselIntSpline</doc>
          <type name="SFSphericalBesselIntSpline"
                c:type="NcmSFSphericalBesselIntSpline*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integrate_spline_reset"
              c:identifier="ncm_sf_sbessel_jl_xj_integrate_spline_reset">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="int_jlspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSphericalBesselIntSpline</doc>
          <type name="SFSphericalBesselIntSpline"
                c:type="NcmSFSphericalBesselIntSpline*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_jl_xj_integrate_spline_set"
              c:identifier="ncm_sf_sbessel_jl_xj_integrate_spline_set">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="int_jlspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSphericalBesselIntSpline</doc>
          <type name="SFSphericalBesselIntSpline"
                c:type="NcmSFSphericalBesselIntSpline*"/>
        </parameter>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_recur_free"
              c:identifier="ncm_sf_sbessel_recur_free">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="jlrec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSBesselRecur</doc>
          <type name="SFSBesselRecur" c:type="NcmSFSBesselRecur*"/>
        </parameter>
        <parameter name="free_grid" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_recur_goto"
              c:identifier="ncm_sf_sbessel_recur_goto">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="jlrec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSBesselRecur</doc>
          <type name="SFSBesselRecur" c:type="NcmSFSBesselRecur*"/>
        </parameter>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_recur_new"
              c:identifier="ncm_sf_sbessel_recur_new"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="SFSBesselRecur" c:type="NcmSFSBesselRecur*"/>
      </return-value>
      <parameters>
        <parameter name="x_grid" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmGrid</doc>
          <type name="Grid" c:type="NcmGrid*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_recur_next"
              c:identifier="ncm_sf_sbessel_recur_next">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="jlrec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSBesselRecur</doc>
          <type name="SFSBesselRecur" c:type="NcmSFSBesselRecur*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_recur_previous"
              c:identifier="ncm_sf_sbessel_recur_previous">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="jlrec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSBesselRecur</doc>
          <type name="SFSBesselRecur" c:type="NcmSFSBesselRecur*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_recur_read"
              c:identifier="ncm_sf_sbessel_recur_read"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="SFSBesselRecur" c:type="NcmSFSBesselRecur*"/>
      </return-value>
      <parameters>
        <parameter name="f" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_recur_set"
              c:identifier="ncm_sf_sbessel_recur_set">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="jlrec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSBesselRecur</doc>
          <type name="SFSBesselRecur" c:type="NcmSFSBesselRecur*"/>
        </parameter>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_recur_write"
              c:identifier="ncm_sf_sbessel_recur_write"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="jlrec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSBesselRecur</doc>
          <type name="SFSBesselRecur" c:type="NcmSFSBesselRecur*"/>
        </parameter>
        <parameter name="f" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_spline" c:identifier="ncm_sf_sbessel_spline">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">FIXME</doc>
        <type name="Spline" c:type="NcmSpline*"/>
      </return-value>
      <parameters>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="xi" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="xf" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="reltol" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_taylor" c:identifier="ncm_sf_sbessel_taylor">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="djl" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sf_sbessel_taylor_coeff_jl_jlp1"
              c:identifier="ncm_sf_sbessel_taylor_coeff_jl_jlp1">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="jlrec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSFSBesselRecur</doc>
          <type name="SFSBesselRecur" c:type="NcmSFSBesselRecur*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="djl" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="djlp1" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="smoothd" c:identifier="ncm_smoothd">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble*"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="N" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gsize" c:type="size_t"/>
        </parameter>
        <parameter name="points" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gsize" c:type="size_t"/>
        </parameter>
        <parameter name="pass" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gsize" c:type="size_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="sphPlm_test_theta" c:identifier="ncm_sphPlm_test_theta">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="theta" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="lmax" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="lmin_data" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sphPlm_x" c:identifier="ncm_sphPlm_x">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="m" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="order" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="sphere_healpix_nest2ring"
              c:identifier="ncm_sphere_healpix_nest2ring">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="glong" c:type="glong"/>
      </return-value>
      <parameters>
        <parameter name="nside" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="nest_index" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
      </parameters>
    </function>
    <function name="sphere_healpix_pix2ang_nest"
              c:identifier="ncm_sphere_healpix_pix2ang_nest">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="nside" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="nest_index" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="theta" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="phi" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sphere_healpix_pix2ang_ring"
              c:identifier="ncm_sphere_healpix_pix2ang_ring">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="nside" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="ring_index" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="theta" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="phi" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sphere_healpix_pix2vec_nest"
              c:identifier="ncm_sphere_healpix_pix2vec_nest">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="nside" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="nest_index" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="vec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmTriVec</doc>
          <type name="TriVec" c:type="NcmTriVec*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sphere_healpix_pix2vec_ring"
              c:identifier="ncm_sphere_healpix_pix2vec_ring">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="nside" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="ring_index" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="vec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmTriVec</doc>
          <type name="TriVec" c:type="NcmTriVec*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sphere_healpix_read_map"
              c:identifier="ncm_sphere_healpix_read_map"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="SphereMap" c:type="NcmSphereMap*"/>
      </return-value>
      <parameters>
        <parameter name="fits_file" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="map" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSphereMap</doc>
          <type name="SphereMap" c:type="NcmSphereMap*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sphere_healpix_ring2nest"
              c:identifier="ncm_sphere_healpix_ring2nest">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="glong" c:type="glong"/>
      </return-value>
      <parameters>
        <parameter name="nside" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="ring_index" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
      </parameters>
    </function>
    <function name="sphere_healpix_vec2pix_ring"
              c:identifier="ncm_sphere_healpix_vec2pix_ring">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="nside" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="vec" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmTriVec</doc>
          <type name="TriVec" c:type="NcmTriVec*"/>
        </parameter>
        <parameter name="i" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sphere_healpix_write_map"
              c:identifier="ncm_sphere_healpix_write_map">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="map" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSphereMap</doc>
          <type name="SphereMap" c:type="NcmSphereMap*"/>
        </parameter>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="overwrite" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="sphere_mapalm_init" c:identifier="ncm_sphere_mapalm_init">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="mapalm" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSphereMapAlm</doc>
          <type name="SphereMapAlm" c:type="NcmSphereMapAlm*"/>
        </parameter>
        <parameter name="lmax" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="sphere_mapalm_new"
              c:identifier="ncm_sphere_mapalm_new"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="SphereMapAlm" c:type="NcmSphereMapAlm*"/>
      </return-value>
    </function>
    <function name="sphere_mapsht_alm2map"
              c:identifier="ncm_sphere_mapsht_alm2map">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="mapsht" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSphereMapSHT</doc>
          <type name="SphereMapSHT" c:type="NcmSphereMapSHT*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sphere_mapsht_alm2map_circle"
              c:identifier="ncm_sphere_mapsht_alm2map_circle">
      <doc xml:space="preserve">Transform the map to alm circle by circle using fft in each one
Copied from gsl-1.11 specfunc/legendre_poly.c line 596
And then adapted...
And then adapted again...</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="mapsht" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSphereMapSHT</doc>
          <type name="SphereMapSHT" c:type="NcmSphereMapSHT*"/>
        </parameter>
        <parameter name="ring" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="ring_size" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="theta" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="phi" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="sphere_mapsht_map2alm"
              c:identifier="ncm_sphere_mapsht_map2alm">
      <doc xml:space="preserve">Transform the map to alm circle by circle using fft in each one</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="mapsht" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSphereMapSHT</doc>
          <type name="SphereMapSHT" c:type="NcmSphereMapSHT*"/>
        </parameter>
        <parameter name="cut" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="sphere_mapsht_map2alm_circle"
              c:identifier="ncm_sphere_mapsht_map2alm_circle">
      <doc xml:space="preserve">Transform the map to alm circle by circle using fft in each one
Copied from gsl-1.11 specfunc/legendre_poly.c line 596
And then adapted...</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="mapsht" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSphereMapSHT</doc>
          <type name="SphereMapSHT" c:type="NcmSphereMapSHT*"/>
        </parameter>
        <parameter name="ring" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="ring_size" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="norma" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="theta" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="phi" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="start_m" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="end_m" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="sphere_mapsht_new"
              c:identifier="ncm_sphere_mapsht_new"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="SphereMapSHT" c:type="NcmSphereMapSHT*"/>
      </return-value>
      <parameters>
        <parameter name="map" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSphereMap</doc>
          <type name="SphereMap" c:type="NcmSphereMap*"/>
        </parameter>
        <parameter name="mapalm" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSphereMapAlm</doc>
          <type name="SphereMapAlm" c:type="NcmSphereMapAlm*"/>
        </parameter>
        <parameter name="fftw_flags" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="spline2dim_integ_total"
              c:identifier="ncm_spline2dim_integ_total">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The numerical integral in both x and y directions of an interpolated function
over the entire valid ranges of x and y coordinates.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="s2d" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSpline2d</doc>
          <type name="Spline2d" c:type="NcmSpline2d*"/>
        </parameter>
      </parameters>
    </function>
    <function name="string_ww" c:identifier="ncm_string_ww">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">word wraped string @msg.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="first" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="rest" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="ncols" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="sum" c:identifier="ncm_sum">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="d" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
      </parameters>
    </function>
    <function name="topology_comoving_a0_lss"
              c:identifier="ncm_topology_comoving_a0_lss">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="alpha" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="topology_sigma_comoving_a0_lss"
              c:identifier="ncm_topology_sigma_comoving_a0_lss">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="alpha" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="sigma_alpha" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_1mcosx" c:identifier="ncm_util_1mcosx">
      <doc xml:space="preserve">Calculates $1 - \cos(x)$ using the appropriated taylor series when
$\cos(x) \approx 1$.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">$1 - \cos(x)$.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="sinx" transfer-ownership="none">
          <doc xml:space="preserve">a real number $\sin(x)$</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="cosx" transfer-ownership="none">
          <doc xml:space="preserve">a real number $\cos(x)$</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_1msinx" c:identifier="ncm_util_1msinx">
      <doc xml:space="preserve">Calculates $1 - \sin(x)$ using the appropriated taylor series when
$\sin(x) \approx 1$.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">$1 - \sin(x)$.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="sinx" transfer-ownership="none">
          <doc xml:space="preserve">a real number $\sin(x)$</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="cosx" transfer-ownership="none">
          <doc xml:space="preserve">a real number $\cos(x)$</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_1pcosx" c:identifier="ncm_util_1pcosx">
      <doc xml:space="preserve">Calculates $1 + \cos(x)$ using the appropriated taylor series when
$\cos(x) \approx -1$.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">$1 + \cos(x)$.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="sinx" transfer-ownership="none">
          <doc xml:space="preserve">a real number $\sin(x)$</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="cosx" transfer-ownership="none">
          <doc xml:space="preserve">a real number $\cos(x)$</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_1psinx" c:identifier="ncm_util_1psinx">
      <doc xml:space="preserve">Calculates $1 + \sin(x)$ using the appropriated taylor series when
$\sin(x) \approx -1$.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">$1 + \sin(x)$.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="sinx" transfer-ownership="none">
          <doc xml:space="preserve">a real number $\sin(x)$</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="cosx" transfer-ownership="none">
          <doc xml:space="preserve">a real number $\cos(x)$</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_KScdf"
              c:identifier="ncm_util_KScdf"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_KSfbar"
              c:identifier="ncm_util_KSfbar"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_basename_fits" c:identifier="ncm_util_basename_fits">
      <doc xml:space="preserve">Extracts the extension .fits or .fit from @fits_filename and returns
the prefix. If the extension is not found a copy of @fits_filename is
returned.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">prefix of @fits_filename.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="fits_filename" transfer-ownership="none">
          <doc xml:space="preserve">a fits filename</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_cos2x" c:identifier="ncm_util_cos2x">
      <doc xml:space="preserve">Calculates $\cos(2x)$ using the appropriated taylor series when
$\sin(x) \approx 1$.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">$1 - \sin(x)$.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="sinx" transfer-ownership="none">
          <doc xml:space="preserve">a real number $\sin(x)$</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="cosx" transfer-ownership="none">
          <doc xml:space="preserve">a real number $\cos(x)$</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_cvode_check_flag"
              c:identifier="ncm_util_cvode_check_flag">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="flagvalue"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="funcname" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="opt" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_cvode_print_stats"
              c:identifier="ncm_util_cvode_print_stats">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="cvode"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_fact_size" c:identifier="ncm_util_fact_size">
      <doc xml:space="preserve">Calculate the smallest factorization of @n such that
$n_f = 2^\mu \times 3^\nu \times 5^\alpha \times 7^\beta$
and $n_f \geq n$.

This functions is useful to find a fft size such that fftw
can optimized it more easily.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">$n_f$</doc>
        <type name="gulong" c:type="gulong"/>
      </return-value>
      <parameters>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">a unsigned long integer</doc>
          <type name="gulong" c:type="const gulong"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_function_params"
              c:identifier="ncm_util_function_params">
      <doc xml:space="preserve">Extracts the function name and its numerical parameters.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">function name or NULL if it fails.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="func" transfer-ownership="none">
          <doc xml:space="preserve">string representing function and its parameters</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="x"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">the parameters or NULL if none found</doc>
          <array zero-terminated="0" c:type="gdouble**">
            <type name="gdouble"/>
          </array>
        </parameter>
        <parameter name="len"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve">number of parameters</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_ln1pexpx" c:identifier="ncm_util_ln1pexpx">
      <doc xml:space="preserve">Calculates $\ln[1+\exp(x)]$.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">$\ln[1+\exp(x)]$.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">a real number $x$</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_print_bits" c:identifier="ncm_util_print_bits">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="num" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint64" c:type="guint64"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_smooth_trans" c:identifier="ncm_util_smooth_trans">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="f0" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="f1" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="z0" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="dz" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="z" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_smooth_trans_get_theta"
              c:identifier="ncm_util_smooth_trans_get_theta">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="z0" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="dz" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="z" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="theta0" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="theta1" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_sqrt1px_m1" c:identifier="ncm_util_sqrt1px_m1">
      <doc xml:space="preserve">Calculates $\sqrt{1+x}-1$ using the appropriated expression
to avoid round-off when $x \approx 0$.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">$\sqrt{1+x}-1$.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve">a real number $&amp;gt;-1$</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_swilk" c:identifier="ncm_util_swilk">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="w" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="pw" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="ifault" transfer-ownership="none">
          <type name="gint" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
