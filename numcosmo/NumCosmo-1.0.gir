<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="NumCosmoMath" version="1.0"/>
  <c:include name="numcosmo/numcosmo.h"/>
  <namespace name="NumCosmo"
             version="1.0"
             shared-library="/usr/local/lib/libnumcosmo.0.dylib"
             c:identifier-prefixes="Nc"
             c:symbol-prefixes="nc">
    <class name="ABCClusterNCount"
           c:symbol-prefix="abc_cluster_ncount"
           c:type="NcABCClusterNCount"
           parent="NumCosmoMath.ABC"
           glib:type-name="NcABCClusterNCount"
           glib:get-type="nc_abc_cluster_ncount_get_type"
           glib:type-struct="ABCClusterNCountClass">
      <constructor name="new" c:identifier="nc_abc_cluster_ncount_new">
        <doc xml:space="preserve">Creates a new #NcABCClusterNCount.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcABCClusterNCount.</doc>
          <type name="ABCClusterNCount" c:type="NcABCClusterNCount*"/>
        </return-value>
        <parameters>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet.</doc>
            <type name="NumCosmoMath.MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="prior" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetTransKern.</doc>
            <type name="NumCosmoMath.MSetTransKern"
                  c:type="NcmMSetTransKern*"/>
          </parameter>
          <parameter name="dset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmDataset.</doc>
            <type name="NumCosmoMath.Dataset" c:type="NcmDataset*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_bin_nodes"
              c:identifier="nc_abc_cluster_ncount_set_bin_nodes">
        <doc xml:space="preserve">Sets the binning type to #NC_ABC_CLUSTER_NCOUNT_SUMMARY_BIN_NODES and uses
@z_nodes and @lnM_nodes as nodes for binning.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abcnc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcABCClusterNCount.</doc>
            <type name="ABCClusterNCount" c:type="NcABCClusterNCount*"/>
          </instance-parameter>
          <parameter name="z_nodes" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="lnM_nodes" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector.</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bin_quantile"
              c:identifier="nc_abc_cluster_ncount_set_bin_quantile">
        <doc xml:space="preserve">Sets the binning type to #NC_ABC_CLUSTER_NCOUNT_SUMMARY_BIN_QUANTILE and uses
@quantiles as the quantiles for both z and lnM. If @quantiles is NULL
uses the defaults: (0.02, 0.09, 0.25, 0.5, 0.75, 0.91, 0.98).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abcnc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcABCClusterNCount.</doc>
            <type name="ABCClusterNCount" c:type="NcABCClusterNCount*"/>
          </instance-parameter>
          <parameter name="quantiles"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcmVector or NULL.</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bin_uniform"
              c:identifier="nc_abc_cluster_ncount_set_bin_uniform">
        <doc xml:space="preserve">Sets the binning type to #NC_ABC_CLUSTER_NCOUNT_SUMMARY_BIN_UNIFORM.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abcnc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcABCClusterNCount.</doc>
            <type name="ABCClusterNCount" c:type="NcABCClusterNCount*"/>
          </instance-parameter>
          <parameter name="z_bins" transfer-ownership="none">
            <doc xml:space="preserve">number of bins in z.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="lnM_bins" transfer-ownership="none">
            <doc xml:space="preserve">number of bins in lnM.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_epsilon_update"
              c:identifier="nc_abc_cluster_ncount_set_epsilon_update">
        <doc xml:space="preserve">Sets the quantile used to update epsilon.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abcnc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcABCClusterNCount.</doc>
            <type name="ABCClusterNCount" c:type="NcABCClusterNCount*"/>
          </instance-parameter>
          <parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">the quantile $q \in (0, 1)$.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scale_cov"
              c:identifier="nc_abc_cluster_ncount_set_scale_cov">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="abcnc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcABCClusterNCount.</doc>
            <type name="ABCClusterNCount" c:type="NcABCClusterNCount*"/>
          </instance-parameter>
          <parameter name="on" transfer-ownership="none">
            <doc xml:space="preserve">whether sets on or off covariance scaling.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="epsilon-update"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="epsilon-update-type"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="ABCClusterNCountEpsilonUpdate"/>
      </property>
      <property name="lnM-bins"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="lnM-nodes"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="quantiles"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="rbf-scale"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="scale-cov"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="summary-type" writable="1" transfer-ownership="none">
        <type name="ABCClusterNCountSummary"/>
      </property>
      <property name="z-bins"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="z-nodes"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.ABC" c:type="NcmABC"/>
      </field>
      <field name="scale_cov" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="data_summary" introspectable="0" readable="0" private="1">
        <type c:type="gsl_histogram2d*"/>
      </field>
      <field name="ncount" readable="0" private="1">
        <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
      </field>
      <field name="data_total" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="covar" readable="0" private="1">
        <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="quantiles" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="z_nodes" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="lnM_nodes" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="z_bins" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="lnM_bins" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="rbf_scale" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="z_lnM_stats" readable="0" private="1">
        <type name="NumCosmoMath.StatsVec" c:type="NcmStatsVec*"/>
      </field>
      <field name="sigma_z" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="sigma_lnM" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="rho" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="epsilon_update" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="s_type" readable="0" private="1">
        <type name="ABCClusterNCountSummary"
              c:type="NcABCClusterNCountSummary"/>
      </field>
      <field name="uptype" readable="0" private="1">
        <type name="ABCClusterNCountEpsilonUpdate"
              c:type="NcABCClusterNCountEpsilonUpdate"/>
      </field>
    </class>
    <record name="ABCClusterNCountClass"
            c:type="NcABCClusterNCountClass"
            glib:is-gtype-struct-for="ABCClusterNCount">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.ABCClass" c:type="NcmABCClass"/>
      </field>
    </record>
    <enumeration name="ABCClusterNCountEpsilonUpdate"
                 glib:type-name="NcABCClusterNCountEpsilonUpdate"
                 glib:get-type="nc_abc_cluster_ncount_epsilon_update_get_type"
                 c:type="NcABCClusterNCountEpsilonUpdate">
      <doc xml:space="preserve">FIXME</doc>
      <member name="uniform"
              value="0"
              c:identifier="NC_ABC_CLUSTER_NCOUNT_EPSILON_UPDATE_UNIFORM"
              glib:nick="uniform">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="quantile"
              value="1"
              c:identifier="NC_ABC_CLUSTER_NCOUNT_EPSILON_UPDATE_QUANTILE"
              glib:nick="quantile">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <enumeration name="ABCClusterNCountSummary"
                 glib:type-name="NcABCClusterNCountSummary"
                 glib:get-type="nc_abc_cluster_ncount_summary_get_type"
                 c:type="NcABCClusterNCountSummary">
      <doc xml:space="preserve">FIXME</doc>
      <member name="bin_uniform"
              value="0"
              c:identifier="NC_ABC_CLUSTER_NCOUNT_SUMMARY_BIN_UNIFORM"
              glib:nick="bin-uniform">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="bin_quantile"
              value="1"
              c:identifier="NC_ABC_CLUSTER_NCOUNT_SUMMARY_BIN_QUANTILE"
              glib:nick="bin-quantile">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="bin_nodes"
              value="2"
              c:identifier="NC_ABC_CLUSTER_NCOUNT_SUMMARY_BIN_NODES"
              glib:nick="bin-nodes">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="gauss_rbf"
              value="3"
              c:identifier="NC_ABC_CLUSTER_NCOUNT_SUMMARY_GAUSS_RBF"
              glib:nick="gauss-rbf">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="CBE"
           c:symbol-prefix="cbe"
           c:type="NcCBE"
           parent="GObject.Object"
           glib:type-name="NcCBE"
           glib:get-type="nc_cbe_get_type"
           glib:type-struct="CBEClass">
      <constructor name="new" c:identifier="nc_cbe_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcCBEPrecision.</doc>
          <type name="CBE" c:type="NcCBE*"/>
        </return-value>
      </constructor>
      <constructor name="prec_file_new" c:identifier="nc_cbe_prec_file_new">
        <return-value transfer-ownership="full">
          <type name="CBE" c:type="NcCBE*"/>
        </return-value>
        <parameters>
          <parameter name="prec_filename" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="prec_new" c:identifier="nc_cbe_prec_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcCBEPrecision.</doc>
          <type name="CBE" c:type="NcCBE*"/>
        </return-value>
        <parameters>
          <parameter name="cbe_prec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBEPrecision.</doc>
            <type name="CBEPrecision" c:type="NcCBEPrecision*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_cbe_clear">
        <doc xml:space="preserve">Decreases the reference count of *@cbe and sets *@cbe to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE**"/>
          </parameter>
        </parameters>
      </function>
      <method name="calc_transfer" c:identifier="nc_cbe_calc_transfer">
        <doc xml:space="preserve">Gets whether it calculates the transfer function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a boolean.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="compare_bg" c:identifier="nc_cbe_compare_bg">
        <doc xml:space="preserve">Compares CLASS and NumCosmo background calculations and returns the worst discrepancy.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">worst error.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="log_cmp" transfer-ownership="none">
            <doc xml:space="preserve">whether to print the comparison</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="debug_test" c:identifier="nc_cbe_debug_test">
        <doc xml:space="preserve">Temporary debug function</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_cbe_free">
        <doc xml:space="preserve">Decreases the reference count of @cbe.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_all_Cls" c:identifier="nc_cbe_get_all_Cls">
        <doc xml:space="preserve">Gets and store the angular power spectra $C_l$'s calculated in the vectors @TT_Cls, @EE_Cls,
@BB_Cls and @TE_Cls. If any of these vectors are NULL, then it is (they are)
ignored.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
          <parameter name="TT_Cls" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="EE_Cls" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="BB_Cls" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="TE_Cls" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_matter_ps" c:identifier="nc_cbe_get_matter_ps">
        <doc xml:space="preserve">Gets the logarithm base e of the matter power spectrum as a function of the redshift $z$ and mode $\ln (k)$.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmSpline2d for the logarithm base e of the matter power spectrum, $\ln P(\ln k, z)$.</doc>
          <type name="NumCosmoMath.Spline2d" c:type="NcmSpline2d*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_matter_pk_k"
              c:identifier="nc_cbe_get_max_matter_pk_k">
        <doc xml:space="preserve">Gets the maximum mode $k_\mathrm{max}$ for which the matter power spectrum $P (k, z)$ is evaluated.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$k_\mathrm{max}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_matter_pk_z"
              c:identifier="nc_cbe_get_max_matter_pk_z">
        <doc xml:space="preserve">Gets the maximum redshift $z_\mathrm{max}$ for which the matter power spectrum $P(k, z)$ is evaluated.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$z_\mathrm{max}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scalar_lmax" c:identifier="nc_cbe_get_scalar_lmax">
        <doc xml:space="preserve">Gets the maximum multipole $\ell_\textrm{max}$ at which the
angular power spectrum $C_{\ell}$ of the scalar mode is computed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the maximum (scalar) multipole $\ell_\textrm{max}$.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_target_Cls" c:identifier="nc_cbe_get_target_Cls">
        <doc xml:space="preserve">Gets the target_Cls flags.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #NcDataCMBDataType flags.</doc>
          <type name="DataCMBDataType" c:type="NcDataCMBDataType"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tensor_lmax" c:identifier="nc_cbe_get_tensor_lmax">
        <doc xml:space="preserve">Gets the maximum multipole $\ell_\textrm{max}$ at which the
angular power spectrum $C_{\ell}$ of the tensor mode is computed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the maximum (tensor) multipole $\ell_\textrm{max}$.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vector_lmax" c:identifier="nc_cbe_get_vector_lmax">
        <doc xml:space="preserve">Gets the maximum multipole $\ell_\textrm{max}$ at which the
angular power spectrum $C_{\ell}$ of the vector mode is computed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the maximum (vector) multipole $\ell_\textrm{max}$.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lensed_Cls" c:identifier="nc_cbe_lensed_Cls">
        <doc xml:space="preserve">Gets whether it uses lensed $C_{\ell}$'s.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a boolean.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_precision" c:identifier="nc_cbe_peek_precision">
        <doc xml:space="preserve">Peeks the #NcCBEPrecision object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #NcCBEPrecision object.</doc>
          <type name="CBEPrecision" c:type="NcCBEPrecision*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="nc_cbe_prepare">
        <doc xml:space="preserve">Prepares all necessary Class structures.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_if_needed" c:identifier="nc_cbe_prepare_if_needed">
        <doc xml:space="preserve">Prepares all necessary Class structures.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_cbe_ref">
        <doc xml:space="preserve">Increases the reference count of @cbe.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@cbe.</doc>
          <type name="CBE" c:type="NcCBE*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_calc_transfer" c:identifier="nc_cbe_set_calc_transfer">
        <doc xml:space="preserve">Sets whether it should calculate the transfer function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
          <parameter name="calc_transfer" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lensed_Cls" c:identifier="nc_cbe_set_lensed_Cls">
        <doc xml:space="preserve">Sets whether it should use lensed Cl's.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
          <parameter name="use_lensed_Cls" transfer-ownership="none">
            <doc xml:space="preserve">a boolean.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_matter_pk_k"
              c:identifier="nc_cbe_set_max_matter_pk_k">
        <doc xml:space="preserve">Sets $k_\mathrm{max}$ for which the matter power spectrum $P (k, z)$ is evaluated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
          <parameter name="kmax" transfer-ownership="none">
            <doc xml:space="preserve">maximum mode</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_matter_pk_z"
              c:identifier="nc_cbe_set_max_matter_pk_z">
        <doc xml:space="preserve">Sets $z_\mathrm{max}$ for (until?) which the matter power spectrum $P(k, z)$ is evaluated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
          <parameter name="zmax" transfer-ownership="none">
            <doc xml:space="preserve">maximum redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_precision" c:identifier="nc_cbe_set_precision">
        <doc xml:space="preserve">Sets the @cbe_prec as the precision object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
          <parameter name="cbe_prec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBEPrecision</doc>
            <type name="CBEPrecision" c:type="NcCBEPrecision*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scalar_lmax" c:identifier="nc_cbe_set_scalar_lmax">
        <doc xml:space="preserve">Sets the maximum multipole $\ell_\textrm{max}$ at which the
angular power spectrum $C_{\ell}$ of the scalar mode is computed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
          <parameter name="scalar_lmax" transfer-ownership="none">
            <doc xml:space="preserve">a guint</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_target_Cls" c:identifier="nc_cbe_set_target_Cls">
        <doc xml:space="preserve">Sets the @target_Cls target.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
          <parameter name="target_Cls" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataCMBDataType.</doc>
            <type name="DataCMBDataType" c:type="NcDataCMBDataType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tensor" c:identifier="nc_cbe_set_tensor">
        <doc xml:space="preserve">Sets whether it should use tensor contribution.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
          <parameter name="use_tensor" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tensor_lmax" c:identifier="nc_cbe_set_tensor_lmax">
        <doc xml:space="preserve">Sets the maximum multipole $\ell_\textrm{max}$ at which the
angular power spectrum $C_{\ell}$ of the tensor mode is computed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
          <parameter name="tensor_lmax" transfer-ownership="none">
            <doc xml:space="preserve">a guint</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_thermodyn" c:identifier="nc_cbe_set_thermodyn">
        <doc xml:space="preserve">Sets whether it should use the thermodynamics module.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
          <parameter name="use_thermodyn" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vector_lmax" c:identifier="nc_cbe_set_vector_lmax">
        <doc xml:space="preserve">Sets the maximum multipole $\ell_\textrm{max}$ at which the
angular power spectrum $C_{\ell}$ of the vector mode is computed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
          <parameter name="vector_lmax" transfer-ownership="none">
            <doc xml:space="preserve">a guint</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="tensor" c:identifier="nc_cbe_tensor">
        <doc xml:space="preserve">Gets whether it uses tensor contributions.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a boolean.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="thermodyn" c:identifier="nc_cbe_thermodyn">
        <doc xml:space="preserve">Gets whether it uses the thermodynamics module.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a boolean.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="thermodyn_get_Xe" c:identifier="nc_cbe_thermodyn_get_Xe">
        <doc xml:space="preserve">Gets the free electrons fraction $X_e$ as a function of the redshift.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmSpline for Xe.</doc>
          <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="thermodyn_prepare" c:identifier="nc_cbe_thermodyn_prepare">
        <doc xml:space="preserve">Prepares the thermodynamic Class structure.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="thermodyn_prepare_if_needed"
              c:identifier="nc_cbe_thermodyn_prepare_if_needed">
        <doc xml:space="preserve">Prepares the thermodynamic Class structure.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <property name="calc-transfer"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="matter-pk-maxk"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="matter-pk-maxz"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="precision"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="CBEPrecision"/>
      </property>
      <property name="scalar-lmax"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="target-Cls"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="DataCMBDataType"/>
      </property>
      <property name="tensor-lmax"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="use-lensed-Cls"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="use-tensor"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="use-thermodyn"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="vector-lmax"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="verbosity"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="prec" readable="0" private="1">
        <type name="CBEPrecision" c:type="NcCBEPrecision*"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CBEPrivate" c:type="NcCBEPrivate*"/>
      </field>
      <field name="a" readable="0" private="1">
        <type name="Scalefactor" c:type="NcScalefactor*"/>
      </field>
      <field name="bg_verbose" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="thermo_verbose" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="pert_verbose" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="transfer_verbose" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="prim_verbose" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="spectra_verbose" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="nonlin_verbose" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="lensing_verbose" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="target_Cls" readable="0" private="1">
        <type name="DataCMBDataType" c:type="NcDataCMBDataType"/>
      </field>
      <field name="calc_transfer" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="use_lensed_Cls" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="use_tensor" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="use_thermodyn" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="scalar_lmax" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="vector_lmax" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="tensor_lmax" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="ctrl_cosmo" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
      <field name="ctrl_prim" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
      <field name="call" readable="0" private="1">
        <type name="CBECall" c:type="NcCBECall"/>
      </field>
      <field name="free" readable="0" private="1">
        <type name="CBEFree" c:type="NcCBEFree"/>
      </field>
      <field name="allocated" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="thermodyn_prepared" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <callback name="CBECall" c:type="NcCBECall">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cbe" transfer-ownership="none">
          <type name="CBE" c:type="NcCBE*"/>
        </parameter>
        <parameter name="cosmo" transfer-ownership="none">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="CBEClass" c:type="NcCBEClass" glib:is-gtype-struct-for="CBE">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <callback name="CBEFree" c:type="NcCBEFree">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cbe" transfer-ownership="none">
          <type name="CBE" c:type="NcCBE*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="CBEPrecision"
           c:symbol-prefix="cbe_precision"
           c:type="NcCBEPrecision"
           parent="GObject.Object"
           glib:type-name="NcCBEPrecision"
           glib:get-type="nc_cbe_precision_get_type"
           glib:type-struct="CBEPrecisionClass">
      <constructor name="new" c:identifier="nc_cbe_precision_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcCBEPrecision</doc>
          <type name="CBEPrecision" c:type="NcCBEPrecision*"/>
        </return-value>
      </constructor>
      <function name="clear" c:identifier="nc_cbe_precision_clear">
        <doc xml:space="preserve">Decreases the reference count of *@cbe_prec and sets *@cbe_prec to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cbe_prec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBEPrecision.</doc>
            <type name="CBEPrecision" c:type="NcCBEPrecision**"/>
          </parameter>
        </parameters>
      </function>
      <method name="assert_default"
              c:identifier="nc_cbe_precision_assert_default">
        <doc xml:space="preserve">Check agaist CLASS default values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe_prec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBEPrecision.</doc>
            <type name="CBEPrecision" c:type="NcCBEPrecision*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_cbe_precision_free">
        <doc xml:space="preserve">Decreases the reference count of @cbe_prec.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe_prec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBEPrecision.</doc>
            <type name="CBEPrecision" c:type="NcCBEPrecision*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_cbe_precision_ref">
        <doc xml:space="preserve">Increases the reference count of @cbe_prec.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@cbe_prec.</doc>
          <type name="CBEPrecision" c:type="NcCBEPrecision*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cbe_prec" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBEPrecision.</doc>
            <type name="CBEPrecision" c:type="NcCBEPrecision*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="a-ini-over-a-today-default"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="accurate-lensing"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="back-integration-stepsize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="curvature-ini"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="delta-l-max"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="entropy-ini"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="evolver"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="gw-ini"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="halofit-dz"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="halofit-min-k-max"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="halofit-min-k-nonlinear"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="halofit-sigma-precision"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="hyper-flat-approximation-nu"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="hyper-nu-sampling-step"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="hyper-phi-min-abs"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="hyper-sampling-curved-high-nu"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="hyper-sampling-curved-low-nu"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="hyper-sampling-flat"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="hyper-x-min"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="hyper-x-tol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="hyrec-Alpha-inf-file"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hyrec-R-inf-file"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hyrec-two-photon-tables-file"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="k-bao-center"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="k-bao-width"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="k-max-tau0-over-l-max"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="k-min-tau0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="k-per-decade-for-bao"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="k-per-decade-for-pk"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="k-per-decade-primordial"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="k-step-sub"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="k-step-super"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="k-step-super-reduction"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="k-step-transition"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="l-linstep"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="l-logstep"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="l-max-dr"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="l-max-g"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="l-max-g-ten"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="l-max-ncdm"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="l-max-pol-g"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="l-max-pol-g-ten"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="l-max-ur"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="l-switch-limber"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="l-switch-limber-for-nc-local-over-z"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="l-switch-limber-for-nc-los-over-z"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="ncdm-fluid-approximation"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="ncdm-fluid-trigger-tau-over-tau-k"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="neglect-CMB-sources-below-visibility"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="num-mu-minus-lmax"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="perturb-integration-stepsize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="perturb-sampling-stepsize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="primordial-inflation-aH-ini-target"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="primordial-inflation-attractor-maxit"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="primordial-inflation-attractor-precision-initial"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="primordial-inflation-attractor-precision-pivot"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="primordial-inflation-bg-stepsize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="primordial-inflation-end-dphi"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="primordial-inflation-end-logstep"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="primordial-inflation-extra-efolds"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="primordial-inflation-phi-ini-maxit"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="primordial-inflation-pt-stepsize"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="primordial-inflation-ratio-max"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="primordial-inflation-ratio-min"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="primordial-inflation-small-epsilon"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="primordial-inflation-small-epsilon-tol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="primordial-inflation-tol-curvature"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="primordial-inflation-tol-integration"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="q-linstep"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="q-logstep-open"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="q-logstep-spline"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="q-logstep-trapzd"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="q-numstep-transition"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="radiation-streaming-approximation"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="radiation-streaming-trigger-tau-c-over-tau"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="radiation-streaming-trigger-tau-over-tau-k"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-AGauss1"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-AGauss2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-H-frac"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-Heswitch"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="recfast-Hswitch"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="recfast-Nz0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="recfast-delta-fudge-H"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-delta-z-He-1"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-delta-z-He-2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-delta-z-He-3"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-fudge-H"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-fudge-He"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-wGauss1"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-wGauss2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-x-H0-trigger"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-x-H0-trigger-delta"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-x-H0-trigger2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-x-He0-trigger"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-x-He0-trigger-delta"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-x-He0-trigger2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-z-He-1"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-z-He-2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-z-He-3"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-z-initial"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-zGauss1"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="recfast-zGauss2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="reionization-optical-depth-tol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="reionization-sampling"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="reionization-start-factor"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="reionization-z-start-max"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="sBBN-file"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="selection-cut-at-sigma"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="selection-sampling"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="selection-sampling-bessel"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="selection-tophat-edge"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="smallest-allowed-variation"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="start-large-k-at-tau-h-over-tau-k"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="start-small-k-at-tau-c-over-tau-h"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="start-sources-at-tau-c-over-tau-h"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="thermo-rate-smoothing-radius"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="tight-coupling-approximation"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="tight-coupling-trigger-tau-c-over-tau-h"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="tight-coupling-trigger-tau-c-over-tau-k"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="tol-M-ncdm"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="tol-background-integration"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="tol-gauss-legendre"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="tol-initial-Omega-r"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="tol-ncdm"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="tol-ncdm-bg"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="tol-ncdm-initial-w"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="tol-ncdm-newtonian"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="tol-ncdm-synchronous"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="tol-perturb-integration"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="tol-tau-approx"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="tol-thermo-integration"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="transfer-neglect-delta-k-S-e"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="transfer-neglect-delta-k-S-t0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="transfer-neglect-delta-k-S-t1"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="transfer-neglect-delta-k-S-t2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="transfer-neglect-delta-k-T-b"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="transfer-neglect-delta-k-T-e"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="transfer-neglect-delta-k-T-t2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="transfer-neglect-delta-k-V-b"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="transfer-neglect-delta-k-V-e"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="transfer-neglect-delta-k-V-t1"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="transfer-neglect-delta-k-V-t2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="transfer-neglect-late-source"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="ur-fluid-approximation"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="ur-fluid-trigger-tau-over-tau-k"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CBEPrecisionPrivate" c:type="NcCBEPrecisionPrivate*"/>
      </field>
    </class>
    <record name="CBEPrecisionClass"
            c:type="NcCBEPrecisionClass"
            glib:is-gtype-struct-for="CBEPrecision">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="CBEPrecisionPrivate"
            c:type="NcCBEPrecisionPrivate"
            disguised="1">
    </record>
    <record name="CBEPrivate" c:type="NcCBEPrivate" disguised="1">
    </record>
    <constant name="CLUSTER_MASS_ASCASO_DEFAULT_P0"
              value="0.000000"
              c:type="NC_CLUSTER_MASS_ASCASO_DEFAULT_P0">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_ASCASO_DEFAULT_P1"
              value="1.000000"
              c:type="NC_CLUSTER_MASS_ASCASO_DEFAULT_P1">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_ASCASO_DEFAULT_P2"
              value="1.000000"
              c:type="NC_CLUSTER_MASS_ASCASO_DEFAULT_P2">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_ASCASO_DEFAULT_PARAMS_ABSTOL"
              value="0.000000"
              c:type="NC_CLUSTER_MASS_ASCASO_DEFAULT_PARAMS_ABSTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_ASCASO_DEFAULT_SIGMA"
              value="0.040000"
              c:type="NC_CLUSTER_MASS_ASCASO_DEFAULT_SIGMA">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_BENSON_DEFAULT_A_SZ"
              value="5.580000"
              c:type="NC_CLUSTER_MASS_BENSON_DEFAULT_A_SZ">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_BENSON_DEFAULT_B_SZ"
              value="1.320000"
              c:type="NC_CLUSTER_MASS_BENSON_DEFAULT_B_SZ">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_BENSON_DEFAULT_C_SZ"
              value="0.870000"
              c:type="NC_CLUSTER_MASS_BENSON_DEFAULT_C_SZ">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_BENSON_DEFAULT_D_SZ"
              value="0.240000"
              c:type="NC_CLUSTER_MASS_BENSON_DEFAULT_D_SZ">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_BENSON_DEFAULT_PARAMS_ABSTOL"
              value="0.000000"
              c:type="NC_CLUSTER_MASS_BENSON_DEFAULT_PARAMS_ABSTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_BENSON_M_LOWER_BOUND"
              value="10000000000000.000000"
              c:type="NC_CLUSTER_MASS_BENSON_M_LOWER_BOUND">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_BENSON_XI_ZETA_DIST_CUT"
              value="2.000000"
              c:type="NC_CLUSTER_MASS_BENSON_XI_ZETA_DIST_CUT">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_BENSON_XRAY_DEFAULT_A_X"
              value="5.770000"
              c:type="NC_CLUSTER_MASS_BENSON_XRAY_DEFAULT_A_X">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_BENSON_XRAY_DEFAULT_B_X"
              value="0.570000"
              c:type="NC_CLUSTER_MASS_BENSON_XRAY_DEFAULT_B_X">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_BENSON_XRAY_DEFAULT_C_X"
              value="0.400000"
              c:type="NC_CLUSTER_MASS_BENSON_XRAY_DEFAULT_C_X">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_BENSON_XRAY_DEFAULT_D_X"
              value="0.120000"
              c:type="NC_CLUSTER_MASS_BENSON_XRAY_DEFAULT_D_X">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_BENSON_XRAY_DEFAULT_PARAMS_ABSTOL"
              value="0.000000"
              c:type="NC_CLUSTER_MASS_BENSON_XRAY_DEFAULT_PARAMS_ABSTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_LNNORMAL_DEFAULT_BIAS"
              value="0.000000"
              c:type="NC_CLUSTER_MASS_LNNORMAL_DEFAULT_BIAS">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_LNNORMAL_DEFAULT_PARAMS_ABSTOL"
              value="0.000000"
              c:type="NC_CLUSTER_MASS_LNNORMAL_DEFAULT_PARAMS_ABSTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_LNNORMAL_DEFAULT_SIGMA"
              value="0.040000"
              c:type="NC_CLUSTER_MASS_LNNORMAL_DEFAULT_SIGMA">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_PLCL_DEFAULT_A_L"
              value="0.900000"
              c:type="NC_CLUSTER_MASS_PLCL_DEFAULT_A_L">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_PLCL_DEFAULT_A_SZ"
              value="1.000000"
              c:type="NC_CLUSTER_MASS_PLCL_DEFAULT_A_SZ">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_PLCL_DEFAULT_B_L"
              value="0.000000"
              c:type="NC_CLUSTER_MASS_PLCL_DEFAULT_B_L">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_PLCL_DEFAULT_B_SZ"
              value="0.200000"
              c:type="NC_CLUSTER_MASS_PLCL_DEFAULT_B_SZ">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_PLCL_DEFAULT_COR"
              value="0.500000"
              c:type="NC_CLUSTER_MASS_PLCL_DEFAULT_COR">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_PLCL_DEFAULT_PARAMS_ABSTOL"
              value="0.000000"
              c:type="NC_CLUSTER_MASS_PLCL_DEFAULT_PARAMS_ABSTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_PLCL_DEFAULT_SD_L"
              value="0.200000"
              c:type="NC_CLUSTER_MASS_PLCL_DEFAULT_SD_L">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_PLCL_DEFAULT_SD_SZ"
              value="0.300000"
              c:type="NC_CLUSTER_MASS_PLCL_DEFAULT_SD_SZ">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_PLCL_MCL"
              value="1"
              c:type="NC_CLUSTER_MASS_PLCL_MCL">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CLUSTER_MASS_PLCL_MPL"
              value="0"
              c:type="NC_CLUSTER_MASS_PLCL_MPL">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CLUSTER_MASS_PLCL_SD_CL"
              value="1"
              c:type="NC_CLUSTER_MASS_PLCL_SD_CL">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CLUSTER_MASS_PLCL_SD_PL"
              value="0"
              c:type="NC_CLUSTER_MASS_PLCL_SD_PL">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CLUSTER_MASS_VANDERLINDE_DEFAULT_A_SZ"
              value="6.010000"
              c:type="NC_CLUSTER_MASS_VANDERLINDE_DEFAULT_A_SZ">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_VANDERLINDE_DEFAULT_B_SZ"
              value="1.310000"
              c:type="NC_CLUSTER_MASS_VANDERLINDE_DEFAULT_B_SZ">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_VANDERLINDE_DEFAULT_C_SZ"
              value="1.600000"
              c:type="NC_CLUSTER_MASS_VANDERLINDE_DEFAULT_C_SZ">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_VANDERLINDE_DEFAULT_D_SZ"
              value="0.210000"
              c:type="NC_CLUSTER_MASS_VANDERLINDE_DEFAULT_D_SZ">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_MASS_VANDERLINDE_DEFAULT_PARAMS_ABSTOL"
              value="0.000000"
              c:type="NC_CLUSTER_MASS_VANDERLINDE_DEFAULT_PARAMS_ABSTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_PHOTOZ_GAUSS_BIAS"
              value="0"
              c:type="NC_CLUSTER_PHOTOZ_GAUSS_BIAS">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CLUSTER_PHOTOZ_GAUSS_SIGMA"
              value="1"
              c:type="NC_CLUSTER_PHOTOZ_GAUSS_SIGMA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CLUSTER_PSEUDO_COUNTS_DEFAULT_DELTAZ"
              value="0.990000"
              c:type="NC_CLUSTER_PSEUDO_COUNTS_DEFAULT_DELTAZ">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_PSEUDO_COUNTS_DEFAULT_LNMCUT"
              value="33.000000"
              c:type="NC_CLUSTER_PSEUDO_COUNTS_DEFAULT_LNMCUT">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_PSEUDO_COUNTS_DEFAULT_PARAMS_ABSTOL"
              value="0.000000"
              c:type="NC_CLUSTER_PSEUDO_COUNTS_DEFAULT_PARAMS_ABSTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_PSEUDO_COUNTS_DEFAULT_SD_MCUT"
              value="0.206000"
              c:type="NC_CLUSTER_PSEUDO_COUNTS_DEFAULT_SD_MCUT">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_PSEUDO_COUNTS_DEFAULT_ZMIN"
              value="0.188000"
              c:type="NC_CLUSTER_PSEUDO_COUNTS_DEFAULT_ZMIN">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_REDSHIFT_PHOTOZ_GAUSS_GLOBAL_DEFAULT_BIAS"
              value="0.000000"
              c:type="NC_CLUSTER_REDSHIFT_PHOTOZ_GAUSS_GLOBAL_DEFAULT_BIAS">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_REDSHIFT_PHOTOZ_GAUSS_GLOBAL_DEFAULT_PARAMS_ABSTOL"
              value="0.000000"
              c:type="NC_CLUSTER_REDSHIFT_PHOTOZ_GAUSS_GLOBAL_DEFAULT_PARAMS_ABSTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="CLUSTER_REDSHIFT_PHOTOZ_GAUSS_GLOBAL_DEFAULT_SIGMA0"
              value="0.030000"
              c:type="NC_CLUSTER_REDSHIFT_PHOTOZ_GAUSS_GLOBAL_DEFAULT_SIGMA0">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <class name="ClusterAbundance"
           c:symbol-prefix="cluster_abundance"
           c:type="NcClusterAbundance"
           parent="GObject.Object"
           glib:type-name="NcClusterAbundance"
           glib:get-type="nc_cluster_abundance_get_type"
           glib:type-struct="ClusterAbundanceClass">
      <constructor name="new" c:identifier="nc_cluster_abundance_new">
        <doc xml:space="preserve">This function allocates memory for a new #NcClusterAbundance object and sets its properties to the values from
the input arguments.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcClusterAbundance.</doc>
          <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
        </return-value>
        <parameters>
          <parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </parameter>
          <parameter name="mbiasf"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcHaloBiasFunc</doc>
            <type name="HaloBiasFunc" c:type="NcHaloBiasFunc*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="nodist_new"
                   c:identifier="nc_cluster_abundance_nodist_new">
        <doc xml:space="preserve">This function allocates memory for a new #NcClusterAbundance object and sets its properties to the values from
the input arguments.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcClusterAbundance.</doc>
          <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
        </return-value>
        <parameters>
          <parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction.</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </parameter>
          <parameter name="mbiasf"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcHaloBiasFunc.</doc>
            <type name="HaloBiasFunc" c:type="NcHaloBiasFunc*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_cluster_abundance_clear">
        <doc xml:space="preserve">Atomically decrements the reference count of @cad by one. If the reference count drops to 0,
all memory allocated by @cad is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance**"/>
          </parameter>
        </parameters>
      </function>
      <method name="d2n" c:identifier="nc_cluster_abundance_d2n">
        <doc xml:space="preserve">This function computes /f$ \int_{\ln M^{obs} - 7\sigma_{\ln M}}^{\ln M^{obs} + 7\sigma_{\ln M}} d\ln M \,
\frac{d^2N}{dzdlnM} * P(\ln M^{obs}|\ln M) /f$. The integral limits were determined requiring a precision
to five decimal places.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a gdouble which corresponds to /f$ \int_{\ln M^{obs} - 7\sigma_{\ln M}}^{\ln M^{obs} + 7\sigma_{\ln M}} d\ln M \,
\frac{d^2N}{dzdlnM} * P(\ln M^{obs}|\ln M) /f$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </parameter>
          <parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </parameter>
          <parameter name="lnM" transfer-ownership="none">
            <doc xml:space="preserve">true mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">true redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_cluster_abundance_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @cad by one. If the reference count drops to 0,
all memory allocated by @cad is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="intp_d2n" c:identifier="nc_cluster_abundance_intp_d2n">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </parameter>
          <parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </parameter>
          <parameter name="lnM" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the cluster mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="lnM_p_d2n" c:identifier="nc_cluster_abundance_lnM_p_d2n">
        <doc xml:space="preserve">This function computes /f$ \int_{\ln M^{obs} - 7\sigma_{\ln M}}^{\ln M^{obs} + 7\sigma_{\ln M}} d\ln M \,
\frac{d^2N}{dzdlnM} * P(\ln M^{obs}|\ln M) /f$. The integral limits were determined requiring a precision
to five decimal places.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a gdouble which corresponds to /f$ \int_{\ln M^{obs} - 7\sigma_{\ln M}}^{\ln M^{obs} + 7\sigma_{\ln M}} d\ln M \,
\frac{d^2N}{dzdlnM} * P(\ln M^{obs}|\ln M) /f$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </parameter>
          <parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </parameter>
          <parameter name="lnM_obs" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the observed mass</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="lnM_obs_params" transfer-ownership="none">
            <doc xml:space="preserve">other information of the observed mass, such as its error</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="n" c:identifier="nc_cluster_abundance_n">
        <doc xml:space="preserve">This function computes the total number of clusters within specific redshift
and mass intervals, which are defined in @clusterz and @clusterm, respectively,
and over a sky area.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">total number of clusters.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </parameter>
          <parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="nc_cluster_abundance_prepare">
        <doc xml:space="preserve">This function prepares ...</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </parameter>
          <parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_if_needed"
              c:identifier="nc_cluster_abundance_prepare_if_needed">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </parameter>
          <parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_inv_dNdlnM_z"
              c:identifier="nc_cluster_abundance_prepare_inv_dNdlnM_z">
        <doc xml:space="preserve">This function prepares a spline where the x array corresponds to the value
of $\int_{\ln M_0} ^{\ln M_1} d^2N/dzd\ln M dM/ \int_lnMi^lnMf dN/dz dM$ given a redshift $z$
and the y array contains the values of logarithms base e of the mass.
It is used to generate a sample of $\ln M$ values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnMi" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the minimum mass $\ln(M_i)$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_inv_dNdz"
              c:identifier="nc_cluster_abundance_prepare_inv_dNdz">
        <doc xml:space="preserve">This function prepares a bidimensional spline...</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnMi" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the minimum mass $\ln(M_i)$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_cluster_abundance_ref">
        <doc xml:space="preserve">Increases the reference count of @cad by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@cad</doc>
          <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="true_n" c:identifier="nc_cluster_abundance_true_n">
        <doc xml:space="preserve">This function computes the total number of "true" clusters, i.e., halos
within redshift and mass intervals, and over a sky area.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">total number of halos (normalization)</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </parameter>
          <parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </parameter>
        </parameters>
      </method>
      <method name="z_p_d2n" c:identifier="nc_cluster_abundance_z_p_d2n">
        <doc xml:space="preserve">This function computes /f$ \int_{z_{phot} - 10\sigma_{phot}}^{z_{phot} + 10\sigma_{phot}} dz \,
\frac{d^2N}{dzdlnM} * P(z^{photo}|z) /f$. The integral limits were determined requiring a precision
to five decimal places.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a gdouble which corresponds to /f$ \int_{z_{phot} - 10\sigma_{phot}}^{z_{phot} + 10\sigma_{phot}} dz \,
\frac{d^2N}{dzdlnM} * P(z^{photo}|z) /f$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </parameter>
          <parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </parameter>
          <parameter name="lnM" transfer-ownership="none">
            <doc xml:space="preserve">the logarithm base e of the mass (gdouble)</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z_obs" transfer-ownership="none">
            <doc xml:space="preserve">observed redshift</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="z_obs_params" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="z_p_lnM_p_d2n"
              c:identifier="nc_cluster_abundance_z_p_lnM_p_d2n">
        <doc xml:space="preserve">This function computes /f$ \int_0^\infty dz \int_0^\infty d\ln M \frac{d^2N(\ln M, z)}{dzd\ln M} * P(z^{phot}|z) *
P(\ln M^{obs}|\ln M, z) /f$. We studied the convergence of this integral to optimize this function. We verified
that it converges to 5 decimal places at the redshift interval /f$ [z^{phot} - 10\sigma^{phot}, z^{phot} +
10\sigma^{phot}] /f$ and the mass interval /f$ [\ln M^{obs} - 7\sigma_{\ln M}, \ln M^{obs} + 7\sigma_{\ln M}] /f$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a gdouble which represents /f$ \frac{d^2N(\ln M^{obs}, z^{phot})}{dzd\lnM} /f$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </parameter>
          <parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </parameter>
          <parameter name="lnM_obs" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the observed mass</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="lnM_obs_params" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="z_obs" transfer-ownership="none">
            <doc xml:space="preserve">observed redshift</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="z_obs_params" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <property name="halo-mass-function"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Number  density of halos with mass [M, M + dM].</doc>
        <type name="HaloMassFunction"/>
      </property>
      <property name="mean-bias"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="HaloBiasFunc"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="mfp" readable="0" private="1">
        <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
      </field>
      <field name="mbiasf" readable="0" private="1">
        <type name="HaloBiasFunc" c:type="NcHaloBiasFunc*"/>
      </field>
      <field name="N" readable="0" private="1">
        <type name="ClusterAbundanceN" c:type="NcClusterAbundanceN"/>
      </field>
      <field name="intp_d2N" readable="0" private="1">
        <type name="ClusterAbundanceIntPd2N"
              c:type="NcClusterAbundanceIntPd2N"/>
      </field>
      <field name="norma" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="log_norma" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lnMi" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lnMf" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="zi" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="zf" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lnM_epsilon" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="z_epsilon" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="optimize" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="purity" introspectable="0" readable="0" private="1">
        <type c:type="gsl_histogram2d*"/>
      </field>
      <field name="sd_lnM" introspectable="0" readable="0" private="1">
        <type c:type="gsl_histogram2d*"/>
      </field>
      <field name="dbdlnM" readable="0" private="1">
        <type name="NumCosmoMath.Spline2d" c:type="NcmSpline2d*"/>
      </field>
      <field name="inv_z" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="inv_lnM" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="inv_lnM_z" readable="0" private="1">
        <type name="NumCosmoMath.Spline2d" c:type="NcmSpline2d*"/>
      </field>
      <field name="rng" introspectable="0" readable="0" private="1">
        <type c:type="gsl_rng*"/>
      </field>
      <field name="ctrl_cosmo" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
      <field name="ctrl_reion" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
      <field name="ctrl_z" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
      <field name="ctrl_m" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
    </class>
    <record name="ClusterAbundanceClass"
            c:type="NcClusterAbundanceClass"
            glib:is-gtype-struct-for="ClusterAbundance">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ClusterAbundanceDataBin"
            c:type="NcClusterAbundanceDataBin"
            disguised="1">
    </record>
    <record name="ClusterAbundanceDataBinM"
            c:type="NcClusterAbundanceDataBinM"
            disguised="1">
    </record>
    <record name="ClusterAbundanceDataBinZ"
            c:type="NcClusterAbundanceDataBinZ"
            disguised="1">
    </record>
    <record name="ClusterAbundanceDataP"
            c:type="NcClusterAbundanceDataP"
            disguised="1">
    </record>
    <callback name="ClusterAbundanceIntPd2N"
              c:type="NcClusterAbundanceIntPd2N">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="cad" transfer-ownership="none">
          <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
        </parameter>
        <parameter name="cosmo" transfer-ownership="none">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
        <parameter name="clusterz" transfer-ownership="none">
          <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
        </parameter>
        <parameter name="clusterm" transfer-ownership="none">
          <type name="ClusterMass" c:type="NcClusterMass*"/>
        </parameter>
        <parameter name="lnM" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="z" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ClusterAbundanceN" c:type="NcClusterAbundanceN">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="cad" transfer-ownership="none">
          <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
        </parameter>
        <parameter name="cosmo" transfer-ownership="none">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
        <parameter name="clusterz" transfer-ownership="none">
          <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
        </parameter>
        <parameter name="clusterm" transfer-ownership="none">
          <type name="ClusterMass" c:type="NcClusterMass*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="ClusterMass"
           c:symbol-prefix="cluster_mass"
           c:type="NcClusterMass"
           parent="NumCosmoMath.Model"
           abstract="1"
           glib:type-name="NcClusterMass"
           glib:get-type="nc_cluster_mass_get_type"
           glib:type-struct="ClusterMassClass">
      <constructor name="new_from_name"
                   c:identifier="nc_cluster_mass_new_from_name">
        <doc xml:space="preserve">This function returns a new #NcClusterMass whose type is defined by @mass_name.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcClusterMass.</doc>
          <type name="ClusterMass" c:type="NcClusterMass*"/>
        </return-value>
        <parameters>
          <parameter name="mass_name" transfer-ownership="none">
            <doc xml:space="preserve">string which specifies the type of the mass distribution.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_cluster_mass_clear">
        <doc xml:space="preserve">The reference count of @clusterm is decreased and the pointer is set to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass**"/>
          </parameter>
        </parameters>
      </function>
      <function name="id" c:identifier="nc_cluster_mass_id">
        <return-value transfer-ownership="none">
          <type name="gint32" c:type="gint32"/>
        </return-value>
      </function>
      <function name="log_all_models"
                c:identifier="nc_cluster_mass_log_all_models">
        <doc xml:space="preserve">This function lists all implemented models of cluster mass distributions.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <virtual-method name="N_limits">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterm" transfer-ownership="none">
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnM_lower" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="lnM_upper" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="P">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterm" transfer-ownership="none">
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnM" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="lnM_obs" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble*"/>
          </parameter>
          <parameter name="lnM_obs_params" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="P_limits">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterm" transfer-ownership="none">
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnM_obs" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble*"/>
          </parameter>
          <parameter name="lnM_obs_params" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble*"/>
          </parameter>
          <parameter name="lnM_lower" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="lnM_upper" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="intP">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterm" transfer-ownership="none">
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnM" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="obs_len" invoker="obs_len">
        <doc xml:space="preserve">The number of observable masses (or just the observable which is related to the cluster mass)
of each cluster, e.g.,
1 - SZ mass,
1 - X-ray mass,
1 - Lensing mass,
2 - SZ and X-ray masses,
3 - SZ, X-ray and lensing masses.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of observable masses.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="obs_params_len" invoker="obs_params_len">
        <doc xml:space="preserve">The number of parameters related to the observable masses of each cluster, e.g.,
1 - error of the SZ mass,
1 - error of the X-ray mass,
2 - errors of SZ and X-ray masses.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of parameters related to the observable masses.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="resample" invoker="resample">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass.</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnM" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the true mass.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">true redshift.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="lnM_obs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">logarithm base e of the observed mass.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="lnM_obs_params"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">observed mass params.</doc>
            <type name="gdouble" c:type="const gdouble*"/>
          </parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="NumCosmoMath.RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="free" c:identifier="nc_cluster_mass_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @clusterm by one. If the reference count drops to 0,
all memory allocated by @clusterm is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="intp" c:identifier="nc_cluster_mass_intp">
        <doc xml:space="preserve">It computes the @clusterm probability distribution of @lnM lying
in the range $[]$, namely,
$$ intp = \int_{\ln M^{obs}_{min}}^{\ln M^{obs}_{max}} p \, d\ln M^{obs},$$
where $p$ is [nc_cluster_mass_p()].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The probability distribution of @lnM lying within $[\ln M^{obs}_{min}, \ln M^{obs}_{max}]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnM" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the true mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">true redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="n_limits" c:identifier="nc_cluster_mass_n_limits">
        <doc xml:space="preserve">FIXME
The function which will call this one is responsible to allocate memory for @lnM_lower and @lnM_upper.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass.</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnM_lower"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">lower limit of the logarithm base e of the true mass.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="lnM_upper"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">upper limit of the lgarithm base e of the true mass.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="obs_len" c:identifier="nc_cluster_mass_obs_len">
        <doc xml:space="preserve">The number of observable masses (or just the observable which is related to the cluster mass)
of each cluster, e.g.,
1 - SZ mass,
1 - X-ray mass,
1 - Lensing mass,
2 - SZ and X-ray masses,
3 - SZ, X-ray and lensing masses.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of observable masses.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="obs_params_len"
              c:identifier="nc_cluster_mass_obs_params_len">
        <doc xml:space="preserve">The number of parameters related to the observable masses of each cluster, e.g.,
1 - error of the SZ mass,
1 - error of the X-ray mass,
2 - errors of SZ and X-ray masses.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of parameters related to the observable masses.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="p" c:identifier="nc_cluster_mass_p">
        <doc xml:space="preserve">It computes the probability density function (pdf) of the cluster mass distribution @clusterm
given @cosmo, @lnM, @z and the observable cluster mass (or just the observable).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The pdf of @clusterm.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnM" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the true mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">true redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="lnM_obs" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the observed mass</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="lnM_obs_params" transfer-ownership="none">
            <doc xml:space="preserve">observed mass paramaters</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="p_limits" c:identifier="nc_cluster_mass_p_limits">
        <doc xml:space="preserve">FIXME
The function which will call this one is responsible to allocate memory for @lnM_lower and @lnM_upper.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass.</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnM_obs" transfer-ownership="none">
            <doc xml:space="preserve">observed mass.</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="lnM_obs_params" transfer-ownership="none">
            <doc xml:space="preserve">observed mass params.</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="lnM_lower"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">pointer to the lower limit of the real mass integration.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="lnM_upper"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">pointer to the upper limit of the real mass integration.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="plcl_Msz_Ml_p_ndetone"
              c:identifier="nc_cluster_mass_plcl_Msz_Ml_p_ndetone">
        <doc xml:space="preserve">This function computes the i-th term of the posterior given flat priors for
the selection function and mass function. See function nc_cluster_pseudo_counts_posterior_ndetone().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </instance-parameter>
          <parameter name="lnMcut" transfer-ownership="none">
            <doc xml:space="preserve">lower threshold of the true mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="Mpl" transfer-ownership="none">
            <doc xml:space="preserve">Planck cluster mass</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="Mcl" transfer-ownership="none">
            <doc xml:space="preserve">CLASH cluster mass</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sigma_pl" transfer-ownership="none">
            <doc xml:space="preserve">Planck mass error</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sigma_cl" transfer-ownership="none">
            <doc xml:space="preserve">CLASH mass error</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="plcl_pdf" c:identifier="nc_cluster_mass_plcl_pdf">
        <doc xml:space="preserve">FIXME
Integrals in $M_{sz}$ and $M_l$ performed in the dimensionless quantities $\ln (M_{sz} / M_0)$
and $\ln (M_l / M_0)$, respectively. The Gaussian distributions between $M_{Pl}$ and $M_{CL}$
are written in terms of the dimensionless quantities $M_{Pl}/M_0$, $M_{CL}/M_0$, $\sigma_{Pl}/M_0$
and $\sigma_{CL}/M_0$.

This distribution is "partially" normalized. The constant normalization factor is included
only in nc_cluster_pseudo_counts_posterior_numerator_plcl().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </instance-parameter>
          <parameter name="lnM_M0" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the true mass minus lnM0 (pivot mass)</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="w1" transfer-ownership="none">
            <doc xml:space="preserve">new variable 1</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="w2" transfer-ownership="none">
            <doc xml:space="preserve">new variable 2</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="Mobs" transfer-ownership="none">
            <doc xml:space="preserve">observed masses</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="Mobs_params" transfer-ownership="none">
            <doc xml:space="preserve">observed mass paramaters</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="plcl_pdf_only_lognormal"
              c:identifier="nc_cluster_mass_plcl_pdf_only_lognormal">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$P(\ln M_{SZ}, \ln M_L | M_{500})$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </instance-parameter>
          <parameter name="lnM" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the true mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="lnMsz_M0" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the SZ mass minus lnM0 (pivot mass)</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="lnMl_M0" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the lensing mass minus lnM0 (pivot mass)</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_cluster_mass_ref">
        <doc xml:space="preserve">Increases the reference count of @clusterm by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@clusterm</doc>
          <type name="ClusterMass" c:type="NcClusterMass*"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="resample" c:identifier="nc_cluster_mass_resample">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass.</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnM" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the true mass.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">true redshift.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="lnM_obs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">logarithm base e of the observed mass.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="lnM_obs_params"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">observed mass params.</doc>
            <type name="gdouble" c:type="const gdouble*"/>
          </parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG.</doc>
            <type name="NumCosmoMath.RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Model" c:type="NcmModel"/>
      </field>
    </class>
    <class name="ClusterMassAscaso"
           c:symbol-prefix="cluster_mass_ascaso"
           c:type="NcClusterMassAscaso"
           parent="ClusterMass"
           glib:type-name="NcClusterMassAscaso"
           glib:get-type="nc_cluster_mass_ascaso_get_type"
           glib:type-struct="ClusterMassAscasoClass">
      <property name="M0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Pivot mass FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="lnRichness-max"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="lnRichness-min"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="p0" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="p0-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="p1" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="p1-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="p2" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="p2-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="sigma" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Distribution's standard deviation, $\sigma \in [10^{-4}, 10]$.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="sigma-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="ClusterMass" c:type="NcClusterMass"/>
      </field>
      <field name="M0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lnRichness_max" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lnRichness_min" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="ClusterMassAscasoClass"
            c:type="NcClusterMassAscasoClass"
            glib:is-gtype-struct-for="ClusterMassAscaso">
      <field name="parent_class" readable="0" private="1">
        <type name="ClusterMassClass" c:type="NcClusterMassClass"/>
      </field>
    </record>
    <enumeration name="ClusterMassAscasoParams"
                 glib:type-name="NcClusterMassAscasoParams"
                 glib:get-type="nc_cluster_mass_ascaso_params_get_type"
                 c:type="NcClusterMassAscasoParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="p0"
              value="0"
              c:identifier="NC_CLUSTER_MASS_ASCASO_P0"
              glib:nick="p0">
        <doc xml:space="preserve">bias</doc>
      </member>
      <member name="p1"
              value="1"
              c:identifier="NC_CLUSTER_MASS_ASCASO_P1"
              glib:nick="p1">
        <doc xml:space="preserve">slope</doc>
      </member>
      <member name="p2"
              value="2"
              c:identifier="NC_CLUSTER_MASS_ASCASO_P2"
              glib:nick="p2">
        <doc xml:space="preserve">redshift dependency</doc>
      </member>
      <member name="sigma"
              value="3"
              c:identifier="NC_CLUSTER_MASS_ASCASO_SIGMA"
              glib:nick="sigma">
        <doc xml:space="preserve">standard deviation of the log-normal distribution</doc>
      </member>
    </enumeration>
    <class name="ClusterMassBenson"
           c:symbol-prefix="cluster_mass_benson"
           c:type="NcClusterMassBenson"
           parent="ClusterMass"
           glib:type-name="NcClusterMassBenson"
           glib:get-type="nc_cluster_mass_benson_get_type"
           glib:type-struct="ClusterMassBensonClass">
      <property name="Asz" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Slope of the SZ signal-mass scaling relation.
FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Asz-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Bsz" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">SZ signal-mass scaling parameter.
FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Bsz-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Csz" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">SZ signal-mass scaling parameter.
FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Csz-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Dsz" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Standard deviation of the SZ signal-mass scaling relation.
$D_sz \in [0.01, 2.0]$.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Dsz-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="M0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Reference mass (in h^(-1) * M_sun unit) in the SZ signal-mass scaling relation.
FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="signif-obs-max"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="signif-obs-min"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="z0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Reference redshift in the SZ signal-mass scaling relation.
FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="ClusterMass" c:type="NcClusterMass"/>
      </field>
      <field name="signif_obs_min" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="signif_obs_max" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="z0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="M0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="ClusterMassBensonClass"
            c:type="NcClusterMassBensonClass"
            glib:is-gtype-struct-for="ClusterMassBenson">
      <field name="parent_class" readable="0" private="1">
        <type name="ClusterMassClass" c:type="NcClusterMassClass"/>
      </field>
    </record>
    <enumeration name="ClusterMassBensonParams"
                 glib:type-name="NcClusterMassBensonParams"
                 glib:get-type="nc_cluster_mass_benson_params_get_type"
                 c:type="NcClusterMassBensonParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="a_sz"
              value="0"
              c:identifier="NC_CLUSTER_MASS_BENSON_A_SZ"
              glib:nick="a-sz">
        <doc xml:space="preserve">normalization of the mass-observable relation</doc>
      </member>
      <member name="b_sz"
              value="1"
              c:identifier="NC_CLUSTER_MASS_BENSON_B_SZ"
              glib:nick="b-sz">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="c_sz"
              value="2"
              c:identifier="NC_CLUSTER_MASS_BENSON_C_SZ"
              glib:nick="c-sz">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="d_sz"
              value="3"
              c:identifier="NC_CLUSTER_MASS_BENSON_D_SZ"
              glib:nick="d-sz">
        <doc xml:space="preserve">standard deviation of the mass-observable relation</doc>
      </member>
    </enumeration>
    <class name="ClusterMassBensonXRay"
           c:symbol-prefix="cluster_mass_benson_xray"
           c:type="NcClusterMassBensonXRay"
           parent="ClusterMassBenson"
           glib:type-name="NcClusterMassBensonXRay"
           glib:get-type="nc_cluster_mass_benson_xray_get_type"
           glib:type-struct="ClusterMassBensonXRayClass">
      <property name="Ax" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Ax-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Bx" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Bx-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Cx" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Cx-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Dx" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Dx-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="M0x"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Y0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Yx reference (in 10^{14} * M_sun * keV unit) in the X-Ray proxy-mass scaling relation.
FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Yx-obs-max"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Yx-obs-min"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="ClusterMassBenson" c:type="NcClusterMassBenson"/>
      </field>
      <field name="Yx_obs_min" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="Yx_obs_max" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="M0x" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="Y0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="ClusterMassBensonXRayClass"
            c:type="NcClusterMassBensonXRayClass"
            glib:is-gtype-struct-for="ClusterMassBensonXRay">
      <field name="parent_class" readable="0" private="1">
        <type name="ClusterMassBensonClass" c:type="NcClusterMassBensonClass"/>
      </field>
    </record>
    <enumeration name="ClusterMassBensonXRayParams"
                 glib:type-name="NcClusterMassBensonXRayParams"
                 glib:get-type="nc_cluster_mass_benson_xray_params_get_type"
                 c:type="NcClusterMassBensonXRayParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="a_x"
              value="4"
              c:identifier="NC_CLUSTER_MASS_BENSON_XRAY_A_X"
              glib:nick="a-x">
        <doc xml:space="preserve">normalization of the X-ray mass-observable relation</doc>
      </member>
      <member name="b_x"
              value="5"
              c:identifier="NC_CLUSTER_MASS_BENSON_XRAY_B_X"
              glib:nick="b-x">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="c_x"
              value="6"
              c:identifier="NC_CLUSTER_MASS_BENSON_XRAY_C_X"
              glib:nick="c-x">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="d_x"
              value="7"
              c:identifier="NC_CLUSTER_MASS_BENSON_XRAY_D_X"
              glib:nick="d-x">
        <doc xml:space="preserve">standard deviation of the X-ray mass-observable relation</doc>
      </member>
    </enumeration>
    <record name="ClusterMassClass"
            c:type="NcClusterMassClass"
            glib:is-gtype-struct-for="ClusterMass">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.ModelClass" c:type="NcmModelClass"/>
      </field>
      <field name="P">
        <callback name="P">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="clusterm" transfer-ownership="none">
              <type name="ClusterMass" c:type="NcClusterMass*"/>
            </parameter>
            <parameter name="cosmo" transfer-ownership="none">
              <type name="HICosmo" c:type="NcHICosmo*"/>
            </parameter>
            <parameter name="lnM" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="z" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="lnM_obs" transfer-ownership="none">
              <type name="gdouble" c:type="const gdouble*"/>
            </parameter>
            <parameter name="lnM_obs_params" transfer-ownership="none">
              <type name="gdouble" c:type="const gdouble*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="intP">
        <callback name="intP">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="clusterm" transfer-ownership="none">
              <type name="ClusterMass" c:type="NcClusterMass*"/>
            </parameter>
            <parameter name="cosmo" transfer-ownership="none">
              <type name="HICosmo" c:type="NcHICosmo*"/>
            </parameter>
            <parameter name="lnM" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="z" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="resample">
        <callback name="resample">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="clusterm" transfer-ownership="none">
              <doc xml:space="preserve">a #NcClusterMass.</doc>
              <type name="ClusterMass" c:type="NcClusterMass*"/>
            </parameter>
            <parameter name="cosmo" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHICosmo.</doc>
              <type name="HICosmo" c:type="NcHICosmo*"/>
            </parameter>
            <parameter name="lnM" transfer-ownership="none">
              <doc xml:space="preserve">logarithm base e of the true mass.</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="z" transfer-ownership="none">
              <doc xml:space="preserve">true redshift.</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="lnM_obs"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">logarithm base e of the observed mass.</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="lnM_obs_params"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">observed mass params.</doc>
              <type name="gdouble" c:type="const gdouble*"/>
            </parameter>
            <parameter name="rng" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmRNG.</doc>
              <type name="NumCosmoMath.RNG" c:type="NcmRNG*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="P_limits">
        <callback name="P_limits">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="clusterm" transfer-ownership="none">
              <type name="ClusterMass" c:type="NcClusterMass*"/>
            </parameter>
            <parameter name="cosmo" transfer-ownership="none">
              <type name="HICosmo" c:type="NcHICosmo*"/>
            </parameter>
            <parameter name="lnM_obs" transfer-ownership="none">
              <type name="gdouble" c:type="const gdouble*"/>
            </parameter>
            <parameter name="lnM_obs_params" transfer-ownership="none">
              <type name="gdouble" c:type="const gdouble*"/>
            </parameter>
            <parameter name="lnM_lower" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="lnM_upper" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="N_limits">
        <callback name="N_limits">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="clusterm" transfer-ownership="none">
              <type name="ClusterMass" c:type="NcClusterMass*"/>
            </parameter>
            <parameter name="cosmo" transfer-ownership="none">
              <type name="HICosmo" c:type="NcHICosmo*"/>
            </parameter>
            <parameter name="lnM_lower" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="lnM_upper" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="obs_len">
        <callback name="obs_len">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The number of observable masses.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="clusterm" transfer-ownership="none">
              <doc xml:space="preserve">a #NcClusterMass</doc>
              <type name="ClusterMass" c:type="NcClusterMass*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="obs_params_len">
        <callback name="obs_params_len">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The number of parameters related to the observable masses.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="clusterm" transfer-ownership="none">
              <doc xml:space="preserve">a #NcClusterMass</doc>
              <type name="ClusterMass" c:type="NcClusterMass*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="ClusterMassImpl"
                 glib:type-name="NcClusterMassImpl"
                 glib:get-type="nc_cluster_mass_impl_get_type"
                 c:type="NcClusterMassImpl">
      <member name="p"
              value="0"
              c:identifier="NC_CLUSTER_MASS_P"
              glib:nick="p">
        <doc xml:space="preserve">probability density function of the true-observable cluster masses</doc>
      </member>
      <member name="intp"
              value="1"
              c:identifier="NC_CLUSTER_MASS_INTP"
              glib:nick="intp">
        <doc xml:space="preserve">probability distribution (integration over the observable mass(es))</doc>
      </member>
      <member name="resample"
              value="2"
              c:identifier="NC_CLUSTER_MASS_RESAMPLE"
              glib:nick="resample">
        <doc xml:space="preserve">resample function to generate the cluster masses following
the underlying cluster mass distribution.</doc>
      </member>
      <member name="p_limits"
              value="3"
              c:identifier="NC_CLUSTER_MASS_P_LIMITS"
              glib:nick="p-limits">
        <doc xml:space="preserve">function to set the lower and upper limits of the to compute
the integral of the cluster mass distribution.</doc>
      </member>
      <member name="n_limits"
              value="4"
              c:identifier="NC_CLUSTER_MASS_N_LIMITS"
              glib:nick="n-limits">
        <doc xml:space="preserve">function to set the lower and upper thresholds of
the observable cluster mass to compute the normalization of the cluster mass distribution.</doc>
      </member>
    </enumeration>
    <class name="ClusterMassLnnormal"
           c:symbol-prefix="cluster_mass_lnnormal"
           c:type="NcClusterMassLnnormal"
           parent="ClusterMass"
           glib:type-name="NcClusterMassLnnormal"
           glib:get-type="nc_cluster_mass_lnnormal_get_type"
           glib:type-struct="ClusterMassLnnormalClass">
      <property name="bias" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Distribution's bias.
FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bias-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="lnMobs-max"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="lnMobs-min"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="sigma" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Distribution's standard deviation, $\sigma \in [10^{-4}, 10]$.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="sigma-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="ClusterMass" c:type="NcClusterMass"/>
      </field>
      <field name="lnMobs_max" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lnMobs_min" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="ClusterMassLnnormalClass"
            c:type="NcClusterMassLnnormalClass"
            glib:is-gtype-struct-for="ClusterMassLnnormal">
      <field name="parent_class" readable="0" private="1">
        <type name="ClusterMassClass" c:type="NcClusterMassClass"/>
      </field>
    </record>
    <enumeration name="ClusterMassLnnormalParams"
                 glib:type-name="NcClusterMassLnnormalParams"
                 glib:get-type="nc_cluster_mass_lnnormal_params_get_type"
                 c:type="NcClusterMassLnnormalParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="bias"
              value="0"
              c:identifier="NC_CLUSTER_MASS_LNNORMAL_BIAS"
              glib:nick="bias">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="sigma"
              value="1"
              c:identifier="NC_CLUSTER_MASS_LNNORMAL_SIGMA"
              glib:nick="sigma">
        <doc xml:space="preserve">standard deviation of the log-normal distribution</doc>
      </member>
    </enumeration>
    <class name="ClusterMassNodist"
           c:symbol-prefix="cluster_mass_nodist"
           c:type="NcClusterMassNodist"
           parent="ClusterMass"
           glib:type-name="NcClusterMassNodist"
           glib:get-type="nc_cluster_mass_nodist_get_type"
           glib:type-struct="ClusterMassNodistClass">
      <property name="lnM-max"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="lnM-min"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="ClusterMass" c:type="NcClusterMass"/>
      </field>
      <field name="lnM_min" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lnM_max" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="ClusterMassNodistClass"
            c:type="NcClusterMassNodistClass"
            glib:is-gtype-struct-for="ClusterMassNodist">
      <field name="parent_class" readable="0" private="1">
        <type name="ClusterMassClass" c:type="NcClusterMassClass"/>
      </field>
    </record>
    <class name="ClusterMassPlCL"
           c:symbol-prefix="cluster_mass_plcl"
           c:type="NcClusterMassPlCL"
           parent="ClusterMass"
           glib:type-name="NcClusterMassPlCL"
           glib:get-type="nc_cluster_mass_plcl_get_type"
           glib:type-struct="ClusterMassPlCLClass">
      <function name="gsl_J_new_variables"
                c:identifier="nc_cluster_mass_plcl_gsl_J_new_variables"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type c:type="const gsl_vector*"/>
          </parameter>
          <parameter name="j" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type c:type="gsl_matrix*"/>
          </parameter>
          <parameter name="mszl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMassPlCL</doc>
            <type name="ClusterMassPlCL" c:type="NcClusterMassPlCL*"/>
          </parameter>
          <parameter name="lnM_M0" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the mass divided by the pivot mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="Mobs" transfer-ownership="none">
            <doc xml:space="preserve">observed mass</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="Mobs_params" transfer-ownership="none">
            <doc xml:space="preserve">observed mass paramaters</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="gsl_f" c:identifier="nc_cluster_mass_plcl_gsl_f">
        <doc xml:space="preserve">The $\chi^2$ is minimized with respect to the parameters $\ln\left(M_{SZ}/M_0\right)$ and
 $\ln\left(M_{L}/M_0\right)$, therefore @p = 2. FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">number of parameters</doc>
            <type name="gdouble" c:type="const gdouble*"/>
          </parameter>
          <parameter name="hx" transfer-ownership="none">
            <doc xml:space="preserve">components of the $\chi^2$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">number of elements of the $\chi^2$</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="mszl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMassPlCL</doc>
            <type name="ClusterMassPlCL" c:type="NcClusterMassPlCL*"/>
          </parameter>
          <parameter name="lnM" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the mass divided by the pivot mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="Mobs" transfer-ownership="none">
            <doc xml:space="preserve">observed mass</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="Mobs_params" transfer-ownership="none">
            <doc xml:space="preserve">observed mass paramaters</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="gsl_f_new_variables"
                c:identifier="nc_cluster_mass_plcl_gsl_f_new_variables"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type c:type="const gsl_vector*"/>
          </parameter>
          <parameter name="hx" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type c:type="gsl_vector*"/>
          </parameter>
          <parameter name="mszl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMassPlCL</doc>
            <type name="ClusterMassPlCL" c:type="NcClusterMassPlCL*"/>
          </parameter>
          <parameter name="lnM_M0" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the mass divided by the pivot mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="Mobs" transfer-ownership="none">
            <doc xml:space="preserve">observed mass</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="Mobs_params" transfer-ownership="none">
            <doc xml:space="preserve">observed mass paramaters</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="peak_new_variables"
                c:identifier="nc_cluster_mass_plcl_peak_new_variables">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="N" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="lb" transfer-ownership="none">
            <doc xml:space="preserve">lower bounds</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="ub" transfer-ownership="none">
            <doc xml:space="preserve">upper bounds</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="mszl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMassPlCL</doc>
            <type name="ClusterMassPlCL" c:type="NcClusterMassPlCL*"/>
          </parameter>
          <parameter name="lnM" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="Mobs" transfer-ownership="none">
            <doc xml:space="preserve">observed mass</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="Mobs_params" transfer-ownership="none">
            <doc xml:space="preserve">observed mass paramaters</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <property name="Al" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Lensing signal-mass scaling parameter.
FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Al-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Asz" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">SZ signal-mass scaling parameter.
FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Asz-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Bl" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Lensing signal-mass scaling parameter.
FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Bl-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Bsz" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">SZ signal-mass scaling parameter.
FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Bsz-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="M0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Reference mass (in h^(-1) * M_sun unit) in the SZ signal-mass scaling relation.
FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="cor" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">SZ-Lensing signal-mass correlation, $0.0 \leq \rho \leq 1.0$.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="cor-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="sigma-l" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="sigma-l-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="sigma-sz" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="sigma-sz-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="ClusterMass" c:type="NcClusterMass"/>
      </field>
      <field name="M0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="T" introspectable="0" readable="0" private="1">
        <type c:type="const gsl_multifit_fdfsolver_type*"/>
      </field>
      <field name="s" introspectable="0" readable="0" private="1">
        <type c:type="gsl_multifit_fdfsolver*"/>
      </field>
    </class>
    <record name="ClusterMassPlCLClass"
            c:type="NcClusterMassPlCLClass"
            glib:is-gtype-struct-for="ClusterMassPlCL">
      <field name="parent_class" readable="0" private="1">
        <type name="ClusterMassClass" c:type="NcClusterMassClass"/>
      </field>
    </record>
    <enumeration name="ClusterMassPlCLParams"
                 glib:type-name="NcClusterMassPlCLParams"
                 glib:get-type="nc_cluster_mass_pl_cl_params_get_type"
                 c:type="NcClusterMassPlCLParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="a_sz"
              value="0"
              c:identifier="NC_CLUSTER_MASS_PLCL_A_SZ"
              glib:nick="a-sz">
        <doc xml:space="preserve">slope of the mass-SZ relation</doc>
      </member>
      <member name="b_sz"
              value="1"
              c:identifier="NC_CLUSTER_MASS_PLCL_B_SZ"
              glib:nick="b-sz">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="sd_sz"
              value="2"
              c:identifier="NC_CLUSTER_MASS_PLCL_SD_SZ"
              glib:nick="sd-sz">
        <doc xml:space="preserve">standard deviation of the mass-SZ relation</doc>
      </member>
      <member name="a_l"
              value="3"
              c:identifier="NC_CLUSTER_MASS_PLCL_A_L"
              glib:nick="a-l">
        <doc xml:space="preserve">slope of the mass-lensing relation</doc>
      </member>
      <member name="b_l"
              value="4"
              c:identifier="NC_CLUSTER_MASS_PLCL_B_L"
              glib:nick="b-l">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="sd_l"
              value="5"
              c:identifier="NC_CLUSTER_MASS_PLCL_SD_L"
              glib:nick="sd-l">
        <doc xml:space="preserve">standard deviation of the mass-lensing relation</doc>
      </member>
      <member name="cor"
              value="6"
              c:identifier="NC_CLUSTER_MASS_PLCL_COR"
              glib:nick="cor">
        <doc xml:space="preserve">correlation coefficient between the SZ and lensing masses</doc>
      </member>
    </enumeration>
    <class name="ClusterMassVanderlinde"
           c:symbol-prefix="cluster_mass_vanderlinde"
           c:type="NcClusterMassVanderlinde"
           parent="ClusterMass"
           glib:type-name="NcClusterMassVanderlinde"
           glib:get-type="nc_cluster_mass_vanderlinde_get_type"
           glib:type-struct="ClusterMassVanderlindeClass">
      <property name="Asz" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Asz-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Bsz" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Bsz-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Csz" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Csz-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Dsz" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Dsz-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="M0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Reference mass (in h^(-1) * M_sun unit) in the SZ signal-mass scaling relation.
FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="signif-obs-max"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="signif-obs-min"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="z0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Reference redshift in the SZ signal-mass scaling relation.
FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="ClusterMass" c:type="NcClusterMass"/>
      </field>
      <field name="signif_obs_min" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="signif_obs_max" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="z0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="M0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="ClusterMassVanderlindeClass"
            c:type="NcClusterMassVanderlindeClass"
            glib:is-gtype-struct-for="ClusterMassVanderlinde">
      <field name="parent_class" readable="0" private="1">
        <type name="ClusterMassClass" c:type="NcClusterMassClass"/>
      </field>
    </record>
    <enumeration name="ClusterMassVanderlindeParams"
                 glib:type-name="NcClusterMassVanderlindeParams"
                 glib:get-type="nc_cluster_mass_vanderlinde_params_get_type"
                 c:type="NcClusterMassVanderlindeParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="a_sz"
              value="0"
              c:identifier="NC_CLUSTER_MASS_VANDERLINDE_A_SZ"
              glib:nick="a-sz">
        <doc xml:space="preserve">normalization of the mass-observable relation</doc>
      </member>
      <member name="b_sz"
              value="1"
              c:identifier="NC_CLUSTER_MASS_VANDERLINDE_B_SZ"
              glib:nick="b-sz">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="c_sz"
              value="2"
              c:identifier="NC_CLUSTER_MASS_VANDERLINDE_C_SZ"
              glib:nick="c-sz">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="d_sz"
              value="3"
              c:identifier="NC_CLUSTER_MASS_VANDERLINDE_D_SZ"
              glib:nick="d-sz">
        <doc xml:space="preserve">standard deviation of the mass-observable relation</doc>
      </member>
    </enumeration>
    <class name="ClusterPhotozGauss"
           c:symbol-prefix="cluster_photoz_gauss"
           c:type="NcClusterPhotozGauss"
           parent="ClusterRedshift"
           glib:type-name="NcClusterPhotozGauss"
           glib:get-type="nc_cluster_photoz_gauss_get_type"
           glib:type-struct="ClusterPhotozGaussClass">
      <constructor name="new" c:identifier="nc_cluster_photoz_gauss_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcClusterRedshift.</doc>
          <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
        </return-value>
      </constructor>
      <property name="pz-max"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="pz-min"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="ClusterRedshift" c:type="NcClusterRedshift"/>
      </field>
      <field name="pz_max" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="pz_min" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="ClusterPhotozGaussClass"
            c:type="NcClusterPhotozGaussClass"
            glib:is-gtype-struct-for="ClusterPhotozGauss">
      <field name="parent_class" readable="0" private="1">
        <type name="ClusterRedshiftClass" c:type="NcClusterRedshiftClass"/>
      </field>
    </record>
    <class name="ClusterPhotozGaussGlobal"
           c:symbol-prefix="cluster_photoz_gauss_global"
           c:type="NcClusterPhotozGaussGlobal"
           parent="ClusterRedshift"
           glib:type-name="NcClusterPhotozGaussGlobal"
           glib:get-type="nc_cluster_photoz_gauss_global_get_type"
           glib:type-struct="ClusterPhotozGaussGlobalClass">
      <constructor name="new"
                   c:identifier="nc_cluster_photoz_gauss_global_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcClusterRedshift.</doc>
          <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
        </return-value>
        <parameters>
          <parameter name="pz_min" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="pz_max" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z_bias" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="sigma0" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_sigma0"
              c:identifier="nc_cluster_photoz_gauss_global_get_sigma0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcClusterPhotozGaussGlobal:sigma0 property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="pzg_global" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterPhotozGaussGlobal.</doc>
            <type name="ClusterPhotozGaussGlobal"
                  c:type="const NcClusterPhotozGaussGlobal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_z_bias"
              c:identifier="nc_cluster_photoz_gauss_global_get_z_bias">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcClusterPhotozGaussGlobal:z-bias property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="pzg_global" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterPhotozGaussGlobal.</doc>
            <type name="ClusterPhotozGaussGlobal"
                  c:type="const NcClusterPhotozGaussGlobal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_sigma0"
              c:identifier="nc_cluster_photoz_gauss_global_set_sigma0">
        <doc xml:space="preserve">Sets the value @sigma0 to the #NcClusterPhotozGaussGlobal:sigma0 property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pzg_global" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterPhotozGaussGlobal.</doc>
            <type name="ClusterPhotozGaussGlobal"
                  c:type="NcClusterPhotozGaussGlobal*"/>
          </instance-parameter>
          <parameter name="sigma0" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcClusterPhotozGaussGlobal:sigma0.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_z_bias"
              c:identifier="nc_cluster_photoz_gauss_global_set_z_bias">
        <doc xml:space="preserve">Sets the value @z_bias to the #NcClusterPhotozGaussGlobal:z-bias property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pzg_global" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterPhotozGaussGlobal.</doc>
            <type name="ClusterPhotozGaussGlobal"
                  c:type="NcClusterPhotozGaussGlobal*"/>
          </instance-parameter>
          <parameter name="z_bias" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcClusterPhotozGaussGlobal:z-bias.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="pz-max"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="pz-min"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="sigma0" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="sigma0-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="z-bias" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="z-bias-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="ClusterRedshift" c:type="NcClusterRedshift"/>
      </field>
      <field name="pz_min" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="pz_max" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="ClusterPhotozGaussGlobalClass"
            c:type="NcClusterPhotozGaussGlobalClass"
            glib:is-gtype-struct-for="ClusterPhotozGaussGlobal">
      <field name="parent_class" readable="0" private="1">
        <type name="ClusterRedshiftClass" c:type="NcClusterRedshiftClass"/>
      </field>
    </record>
    <enumeration name="ClusterPhotozGaussGlobalParams"
                 glib:type-name="NcClusterPhotozGaussGlobalParams"
                 glib:get-type="nc_cluster_photoz_gauss_global_params_get_type"
                 c:type="NcClusterPhotozGaussGlobalParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="z_bias"
              value="0"
              c:identifier="NC_CLUSTER_PHOTOZ_GAUSS_GLOBAL_Z_BIAS"
              glib:nick="z-bias">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="sigma0"
              value="1"
              c:identifier="NC_CLUSTER_PHOTOZ_GAUSS_GLOBAL_SIGMA0"
              glib:nick="sigma0">
        <doc xml:space="preserve">standard deviation of the gaussian distribution</doc>
      </member>
    </enumeration>
    <class name="ClusterPseudoCounts"
           c:symbol-prefix="cluster_pseudo_counts"
           c:type="NcClusterPseudoCounts"
           parent="NumCosmoMath.Model"
           glib:type-name="NcClusterPseudoCounts"
           glib:get-type="nc_cluster_pseudo_counts_get_type"
           glib:type-struct="ClusterPseudoCountsClass">
      <constructor name="new" c:identifier="nc_cluster_pseudo_counts_new">
        <doc xml:space="preserve">This function allocates memory for a new #NcClusterPseudoCounts object and sets its properties to the values from
the input argument.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcClusterPseudoCounts.</doc>
          <type name="ClusterPseudoCounts" c:type="NcClusterPseudoCounts*"/>
        </return-value>
        <parameters>
          <parameter name="nclusters" transfer-ownership="none">
            <doc xml:space="preserve">total number of clusters (resample)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_cluster_pseudo_counts_clear">
        <doc xml:space="preserve">The reference count of @cpc is decreased and the pointer is set to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cpc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterPseudoCounts</doc>
            <type name="ClusterPseudoCounts" c:type="NcClusterPseudoCounts**"/>
          </parameter>
        </parameters>
      </function>
      <function name="id" c:identifier="nc_cluster_pseudo_counts_id">
        <return-value transfer-ownership="none">
          <type name="gint32" c:type="gint32"/>
        </return-value>
      </function>
      <method name="free" c:identifier="nc_cluster_pseudo_counts_free">
        <doc xml:space="preserve">Atomically decreases the reference count of @cpc by one. If the reference count drops to 0,
all memory allocated by @cpc is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cpc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterPseudoCounts</doc>
            <type name="ClusterPseudoCounts" c:type="NcClusterPseudoCounts*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mf_lognormal_integral"
              c:identifier="nc_cluster_pseudo_counts_mf_lognormal_integral">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cpc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterPseudoCounts</doc>
            <type name="ClusterPseudoCounts" c:type="NcClusterPseudoCounts*"/>
          </instance-parameter>
          <parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </parameter>
          <parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnMsz" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of SZ mass</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="lnMl" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of lensing mass</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">spectroscopic redshift</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="ndet" c:identifier="nc_cluster_pseudo_counts_ndet">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cpc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterPseudoCounts</doc>
            <type name="ClusterPseudoCounts" c:type="NcClusterPseudoCounts*"/>
          </instance-parameter>
          <parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ndet_no_z_integral"
              c:identifier="nc_cluster_pseudo_counts_ndet_no_z_integral">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cpc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterPseudoCounts</doc>
            <type name="ClusterPseudoCounts" c:type="NcClusterPseudoCounts*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="posterior_ndetone"
              c:identifier="nc_cluster_pseudo_counts_posterior_ndetone">
        <doc xml:space="preserve">This function computes the i-th term of the posterior given flat priors for
the selection function and mass function. FIXME (include equations)

Warning!!! The normalization factor of the true redshift prior has to be included in this function
if $z_{min}$ and or $z_max$ will be fitted. FIXME Include equations.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cpc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterPseudoCounts</doc>
            <type name="ClusterPseudoCounts" c:type="NcClusterPseudoCounts*"/>
          </instance-parameter>
          <parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a @NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a @NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="Mpl" transfer-ownership="none">
            <doc xml:space="preserve">Planck cluster mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="Mcl" transfer-ownership="none">
            <doc xml:space="preserve">CLASH cluster mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="sigma_pl" transfer-ownership="none">
            <doc xml:space="preserve">Planck mass error</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="sigma_cl" transfer-ownership="none">
            <doc xml:space="preserve">CLASH mass error</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="posterior_numerator"
              c:identifier="nc_cluster_pseudo_counts_posterior_numerator">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cpc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterPseudoCounts</doc>
            <type name="ClusterPseudoCounts" c:type="NcClusterPseudoCounts*"/>
          </instance-parameter>
          <parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </parameter>
          <parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">spectroscopic redshift</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="Mobs" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the observed mass</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="Mobs_params" transfer-ownership="none">
            <doc xml:space="preserve">observed mass paramaters</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="posterior_numerator_plcl"
              c:identifier="nc_cluster_pseudo_counts_posterior_numerator_plcl">
        <doc xml:space="preserve">FIXME Warning! The pivot mass is hard coded ($M_0 = 5.7 \times 10^{14} \, h^{-1} M_\odot$).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cpc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterPseudoCounts</doc>
            <type name="ClusterPseudoCounts" c:type="NcClusterPseudoCounts*"/>
          </instance-parameter>
          <parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </parameter>
          <parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">spectroscopic redshift</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="Mpl" transfer-ownership="none">
            <doc xml:space="preserve">Planck mass</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="Mcl" transfer-ownership="none">
            <doc xml:space="preserve">CLASH mass</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sigma_pl" transfer-ownership="none">
            <doc xml:space="preserve">standard deviation of Planck mass</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sigma_cl" transfer-ownership="none">
            <doc xml:space="preserve">standard deviation of CLASH mass</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_cluster_pseudo_counts_ref">
        <doc xml:space="preserve">Increases the reference count of @cpc by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@cpc</doc>
          <type name="ClusterPseudoCounts" c:type="NcClusterPseudoCounts*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cpc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterPseudoCounts</doc>
            <type name="ClusterPseudoCounts" c:type="NcClusterPseudoCounts*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="selection_function"
              c:identifier="nc_cluster_pseudo_counts_selection_function">
        <doc xml:space="preserve">This function computes the selection function (include equation). FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cpc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterPseudoCounts</doc>
            <type name="ClusterPseudoCounts" c:type="NcClusterPseudoCounts*"/>
          </instance-parameter>
          <parameter name="lnM" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the true mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">true redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="selection_function_lnMi"
              c:identifier="nc_cluster_pseudo_counts_selection_function_lnMi">
        <doc xml:space="preserve">This function computes the lower mass threshold used in the resample function, namely, $l\ln M_i = lnM_{cut} - 6\sigma_{cut}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\ln M_i$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cpc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterPseudoCounts</doc>
            <type name="ClusterPseudoCounts" c:type="NcClusterPseudoCounts*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <property name="Deltaz" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Maximum redsift is $z_{max} = z_{min} + \Delta z$. Range: $\Delta z \in [0.1, 2.0]$.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Deltaz-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="lnMCut" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Logarithm base e of the lower mass cut-off,
$\ln M_{CUT} \in [12.0 \ln(10), 16.0 \ln(10)]$.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="lnMCut-fit" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="number-clusters"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="sigma-Mcut" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="sigma-Mcut-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="zmin" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Range: $z_{min} \in [10^{-5}, 2.0]$</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="zmin-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Model" c:type="NcmModel"/>
      </field>
      <field name="nclusters" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="T" introspectable="0" readable="0" private="1">
        <type c:type="const gsl_multifit_fdfsolver_type*"/>
      </field>
      <field name="s" introspectable="0" readable="0" private="1">
        <type c:type="gsl_multifit_fdfsolver*"/>
      </field>
      <field name="workz" readable="0" private="1">
        <type name="gdouble" c:type="gdouble*"/>
      </field>
    </class>
    <record name="ClusterPseudoCountsClass"
            c:type="NcClusterPseudoCountsClass"
            glib:is-gtype-struct-for="ClusterPseudoCounts">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.ModelClass" c:type="NcmModelClass"/>
      </field>
    </record>
    <enumeration name="ClusterPseudoCountsParams"
                 glib:type-name="NcClusterPseudoCountsParams"
                 glib:get-type="nc_cluster_pseudo_counts_params_get_type"
                 c:type="NcClusterPseudoCountsParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="lnmcut"
              value="0"
              c:identifier="NC_CLUSTER_PSEUDO_COUNTS_LNMCUT"
              glib:nick="lnmcut">
        <doc xml:space="preserve">logarithm base e of the mass cut-off</doc>
      </member>
      <member name="sd_mcut"
              value="1"
              c:identifier="NC_CLUSTER_PSEUDO_COUNTS_SD_MCUT"
              glib:nick="sd-mcut">
        <doc xml:space="preserve">standard deviation of mass cut-off</doc>
      </member>
      <member name="zmin"
              value="2"
              c:identifier="NC_CLUSTER_PSEUDO_COUNTS_ZMIN"
              glib:nick="zmin">
        <doc xml:space="preserve">minimum redshift</doc>
      </member>
      <member name="deltaz"
              value="3"
              c:identifier="NC_CLUSTER_PSEUDO_COUNTS_DELTAZ"
              glib:nick="deltaz">
        <doc xml:space="preserve">redshift interval size</doc>
      </member>
    </enumeration>
    <class name="ClusterRedshift"
           c:symbol-prefix="cluster_redshift"
           c:type="NcClusterRedshift"
           parent="NumCosmoMath.Model"
           abstract="1"
           glib:type-name="NcClusterRedshift"
           glib:get-type="nc_cluster_redshift_get_type"
           glib:type-struct="ClusterRedshiftClass">
      <constructor name="new_from_name"
                   c:identifier="nc_cluster_redshift_new_from_name">
        <doc xml:space="preserve">This function returns a new #NcClusterRedshift whose type is defined by @redshift_name.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcClusterRedshift.</doc>
          <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
        </return-value>
        <parameters>
          <parameter name="redshift_name" transfer-ownership="none">
            <doc xml:space="preserve">string which specifies the type of the redshift distribution.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_cluster_redshift_clear">
        <doc xml:space="preserve">Atomically decrements the reference count of @clusterz by one. Set pointer to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift**"/>
          </parameter>
        </parameters>
      </function>
      <function name="id" c:identifier="nc_cluster_redshift_id">
        <return-value transfer-ownership="none">
          <type name="gint32" c:type="gint32"/>
        </return-value>
      </function>
      <function name="log_all_models"
                c:identifier="nc_cluster_redshift_log_all_models">
        <doc xml:space="preserve">This function lists all implemented models of cluster redshift distributions.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <virtual-method name="N_limits">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterz" transfer-ownership="none">
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </instance-parameter>
          <parameter name="z_lower" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="z_upper" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="P">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterz" transfer-ownership="none">
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </instance-parameter>
          <parameter name="lnM" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z_obs" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="z_obs_params" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="P_limits">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterz" transfer-ownership="none">
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </instance-parameter>
          <parameter name="z_obs" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="z_obs_params" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="z_lower" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="z_upper" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="intP">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterz" transfer-ownership="none">
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </instance-parameter>
          <parameter name="lnM" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="obs_len" invoker="obs_len">
        <doc xml:space="preserve">The number of observable redshifts of each cluster, e.g.,
1 - only photometric redshift,
1 - only spectroscopic redshift,
2 - both photometric and spectroscopic redshifts.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of observable redshifts.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="obs_params_len" invoker="obs_params_len">
        <doc xml:space="preserve">The number of parameters related to the observable redshifts of each cluster, e.g.,
1 - measured error of the photometric redshift.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of parameters related to the observable redshifts.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="resample" invoker="resample">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </instance-parameter>
          <parameter name="lnM" transfer-ownership="none">
            <doc xml:space="preserve">true mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">true redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z_obs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">observed redshift</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="z_obs_params"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">observed redshift params</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="NumCosmoMath.RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="free" c:identifier="nc_cluster_redshift_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @clusterz by one. If the reference count drops to 0,
all memory allocated by @clusterz is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="intp" c:identifier="nc_cluster_redshift_intp">
        <doc xml:space="preserve">It computes the @clusterz probability distribution of @z lying
in the range $[z^{obs}_{min}, z^{obs}_{max}]$, namely,
$$ intp = \int_{z^{obs}_{min}}^{z^{obs}_{max}} p \, dz^{obs},$$
where $p$ is [nc_cluster_redshift_p()].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The probability distribution of @z lying within $[z^{obs}_{min}, z^{obs}_{max}]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </instance-parameter>
          <parameter name="lnM" transfer-ownership="none">
            <doc xml:space="preserve">true mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">true redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="n_limits" c:identifier="nc_cluster_redshift_n_limits">
        <doc xml:space="preserve">FIXME
The function which will call this one is responsible to allocate memory for @z_lower and @z_upper.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </instance-parameter>
          <parameter name="z_lower"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">pointer to the lower limit of the true redshift</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="z_upper"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">pointer to the upper limit of the true redshift</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="obs_len" c:identifier="nc_cluster_redshift_obs_len">
        <doc xml:space="preserve">The number of observable redshifts of each cluster, e.g.,
1 - only photometric redshift,
1 - only spectroscopic redshift,
2 - both photometric and spectroscopic redshifts.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of observable redshifts.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="obs_params_len"
              c:identifier="nc_cluster_redshift_obs_params_len">
        <doc xml:space="preserve">The number of parameters related to the observable redshifts of each cluster, e.g.,
1 - measured error of the photometric redshift.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of parameters related to the observable redshifts.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="p" c:identifier="nc_cluster_redshift_p">
        <doc xml:space="preserve">It computes the probability density function (pdf) of the cluster redshift distribution @clusterz
given @z, @lnM and the measured redshit @z_obs and its parameter(s) @z_obs_params.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The pdf of @clusterz.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </instance-parameter>
          <parameter name="lnM" transfer-ownership="none">
            <doc xml:space="preserve">true mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">true redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z_obs" transfer-ownership="none">
            <doc xml:space="preserve">measured redshift</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="z_obs_params" transfer-ownership="none">
            <doc xml:space="preserve">measured redshift params</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="p_limits" c:identifier="nc_cluster_redshift_p_limits">
        <doc xml:space="preserve">FIXME
The function which will call this one is responsible to allocate memory for @z_lower and @z_upper.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </instance-parameter>
          <parameter name="z_obs" transfer-ownership="none">
            <doc xml:space="preserve">observed redshift</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="z_obs_params" transfer-ownership="none">
            <doc xml:space="preserve">observed redshift params</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="z_lower"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">pointer to the lower limit of the true redshift integration</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="z_upper"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">pointer to the upper limit of the true redshift integration</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_cluster_redshift_ref">
        <doc xml:space="preserve">Increases the reference count of @clusterz by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@clusterz</doc>
          <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="resample" c:identifier="nc_cluster_redshift_resample">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="clusterz" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterRedshift</doc>
            <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
          </instance-parameter>
          <parameter name="lnM" transfer-ownership="none">
            <doc xml:space="preserve">true mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">true redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z_obs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">observed redshift</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="z_obs_params"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">observed redshift params</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="NumCosmoMath.RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Model" c:type="NcmModel"/>
      </field>
    </class>
    <record name="ClusterRedshiftClass"
            c:type="NcClusterRedshiftClass"
            glib:is-gtype-struct-for="ClusterRedshift">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.ModelClass" c:type="NcmModelClass"/>
      </field>
      <field name="P">
        <callback name="P">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="clusterz" transfer-ownership="none">
              <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
            </parameter>
            <parameter name="lnM" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="z" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="z_obs" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="z_obs_params" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="intP">
        <callback name="intP">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="clusterz" transfer-ownership="none">
              <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
            </parameter>
            <parameter name="lnM" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="z" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="resample">
        <callback name="resample">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="clusterz" transfer-ownership="none">
              <doc xml:space="preserve">a #NcClusterRedshift</doc>
              <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
            </parameter>
            <parameter name="lnM" transfer-ownership="none">
              <doc xml:space="preserve">true mass</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="z" transfer-ownership="none">
              <doc xml:space="preserve">true redshift</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="z_obs"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">observed redshift</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="z_obs_params"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">observed redshift params</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="rng" transfer-ownership="none">
              <doc xml:space="preserve">a #NcmRNG</doc>
              <type name="NumCosmoMath.RNG" c:type="NcmRNG*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="P_limits">
        <callback name="P_limits">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="clusterz" transfer-ownership="none">
              <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
            </parameter>
            <parameter name="z_obs" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="z_obs_params" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="z_lower" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="z_upper" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="N_limits">
        <callback name="N_limits">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="clusterz" transfer-ownership="none">
              <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
            </parameter>
            <parameter name="z_lower" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="z_upper" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="obs_len">
        <callback name="obs_len">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The number of observable redshifts.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="clusterz" transfer-ownership="none">
              <doc xml:space="preserve">a #NcClusterRedshift</doc>
              <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="obs_params_len">
        <callback name="obs_params_len">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The number of parameters related to the observable redshifts.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="clusterz" transfer-ownership="none">
              <doc xml:space="preserve">a #NcClusterRedshift</doc>
              <type name="ClusterRedshift" c:type="NcClusterRedshift*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="ClusterRedshiftImpl"
                 glib:type-name="NcClusterRedshiftImpl"
                 glib:get-type="nc_cluster_redshift_impl_get_type"
                 c:type="NcClusterRedshiftImpl">
      <member name="p"
              value="0"
              c:identifier="NC_CLUSTER_REDSHIFT_P"
              glib:nick="p">
        <doc xml:space="preserve">probability density function of the true-measured cluster redshifts</doc>
      </member>
      <member name="intp"
              value="1"
              c:identifier="NC_CLUSTER_REDSHIFT_INTP"
              glib:nick="intp">
        <doc xml:space="preserve">probability distribution (integration over the measured redshift)</doc>
      </member>
      <member name="resample"
              value="2"
              c:identifier="NC_CLUSTER_REDSHIFT_RESAMPLE"
              glib:nick="resample">
        <doc xml:space="preserve">resample function to generate the cluster redshifts following
the underlying cluster redshift distribution.</doc>
      </member>
      <member name="p_limits"
              value="3"
              c:identifier="NC_CLUSTER_REDSHIFT_P_LIMITS"
              glib:nick="p-limits">
        <doc xml:space="preserve">function to set the lower and upper limits of the to compute
the integral of the cluster redshift distribution.</doc>
      </member>
      <member name="n_limts"
              value="4"
              c:identifier="NC_CLUSTER_REDSHIFT_N_LIMTS"
              glib:nick="n-limts">
        <doc xml:space="preserve">function to set the lower and upper thresholds of
the observable cluster redshift to compute the normalization of the cluster redshift distribution.</doc>
      </member>
    </enumeration>
    <class name="ClusterRedshiftNodist"
           c:symbol-prefix="cluster_redshift_nodist"
           c:type="NcClusterRedshiftNodist"
           parent="ClusterRedshift"
           glib:type-name="NcClusterRedshiftNodist"
           glib:get-type="nc_cluster_redshift_nodist_get_type"
           glib:type-struct="ClusterRedshiftNodistClass">
      <property name="z-max"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="z-min"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="ClusterRedshift" c:type="NcClusterRedshift"/>
      </field>
      <field name="z_min" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="z_max" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="ClusterRedshiftNodistClass"
            c:type="NcClusterRedshiftNodistClass"
            glib:is-gtype-struct-for="ClusterRedshiftNodist">
      <field name="parent_class" readable="0" private="1">
        <type name="ClusterRedshiftClass" c:type="NcClusterRedshiftClass"/>
      </field>
    </record>
    <class name="CorClusterCmbLensLimber"
           c:symbol-prefix="cor_cluster_cmb_lens_limber"
           c:type="NcCorClusterCmbLensLimber"
           parent="GObject.Object"
           glib:type-name="NcCorClusterCmbLensLimber"
           glib:get-type="nc_cor_cluster_cmb_lens_limber_get_type"
           glib:type-struct="CorClusterCmbLensLimberClass">
      <constructor name="new"
                   c:identifier="nc_cor_cluster_cmb_lens_limber_new">
        <doc xml:space="preserve">This function allocates memory for a new #NcCorClusterCmbLensLimber object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcCorClusterCmbLensLimber.</doc>
          <type name="CorClusterCmbLensLimber"
                c:type="NcCorClusterCmbLensLimber*"/>
        </return-value>
      </constructor>
      <method name="oneh_int_mass"
              c:identifier="nc_cor_cluster_cmb_lens_limber_oneh_int_mass">
        <doc xml:space="preserve">This function computes the 1-halo integral on mass of the cluster and CMB lensing potential $\psi$, using Limber approximation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cccll" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCorClusterCmbLensLimber</doc>
            <type name="CorClusterCmbLensLimber"
                  c:type="NcCorClusterCmbLensLimber*"/>
          </instance-parameter>
          <parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </parameter>
          <parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="dp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDensityProfile</doc>
            <type name="DensityProfile" c:type="NcDensityProfile*"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="lnM_obs" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="lnM_obs_params" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="oneh_term"
              c:identifier="nc_cor_cluster_cmb_lens_limber_oneh_term">
        <doc xml:space="preserve">This function computes the 1-halo term of the cluster and CMB lensing potential $\psi$, using Limber approximation:
\begin{equation}
\left(C_l^{cl \psi} \right)_{1h} = -3 \frac{\Omega_{m0} H_0^2}{l^2} \int dz \frac{c}{H(z)} (1+z) \chi(z)^2
 \frac{\left( \chi(z_\ast) - \chi(z) \right)}{\chi(z_\ast) \chi(z)} \int d\ln M S(\ln M, z) \frac{M}{\overline{\rho}(z)} \frac{dn(M, z)}{d\ln M}
\tilde{u}^\ast (k = l/\chi(z) \vert M),
\end{equation}
where ...</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\left(C_l^{cl \psi} \right)_{1h}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cccll" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCorClusterCmbLensLimber</doc>
            <type name="CorClusterCmbLensLimber"
                  c:type="NcCorClusterCmbLensLimber*"/>
          </instance-parameter>
          <parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
          <parameter name="dp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDensityProfile</doc>
            <type name="DensityProfile" c:type="NcDensityProfile*"/>
          </parameter>
          <parameter name="l" transfer-ownership="none">
            <doc xml:space="preserve">spherical harmonis index</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="lnM_obs" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="lnM_obs_params" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="z_obs" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="z_obs_params" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="twoh_int_mass1"
              c:identifier="nc_cor_cluster_cmb_lens_limber_twoh_int_mass1">
        <doc xml:space="preserve">This function computes the first integral on mass of the 2-halo term of the cluster and CMB lensing potential
$\psi$, using Limber approximation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cccll" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCorClusterCmbLensLimber</doc>
            <type name="CorClusterCmbLensLimber"
                  c:type="NcCorClusterCmbLensLimber*"/>
          </instance-parameter>
          <parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </parameter>
          <parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="twoh_int_mass2"
              c:identifier="nc_cor_cluster_cmb_lens_limber_twoh_int_mass2">
        <doc xml:space="preserve">This function computes the second integral on mass of the 2-halo term of the cluster and CMB lensing potential
$\psi$, using Limber approximation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cccll" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCorClusterCmbLensLimber</doc>
            <type name="CorClusterCmbLensLimber"
                  c:type="NcCorClusterCmbLensLimber*"/>
          </instance-parameter>
          <parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </parameter>
          <parameter name="clusterm" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterMass</doc>
            <type name="ClusterMass" c:type="NcClusterMass*"/>
          </parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="dp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDensityProfile</doc>
            <type name="DensityProfile" c:type="NcDensityProfile*"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="twoh_int_mm"
              c:identifier="nc_cor_cluster_cmb_lens_limber_twoh_int_mm">
        <doc xml:space="preserve">This function computes the 2-halo term of the matter-matter power spectrum.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cccll" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCorClusterCmbLensLimber</doc>
            <type name="CorClusterCmbLensLimber"
                  c:type="NcCorClusterCmbLensLimber*"/>
          </instance-parameter>
          <parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="dp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDensityProfile</doc>
            <type name="DensityProfile" c:type="NcDensityProfile*"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="twoh_term"
              c:identifier="nc_cor_cluster_cmb_lens_limber_twoh_term">
        <doc xml:space="preserve">This function computes the 2-halo term of the cluster and CMB lensing potential $\psi$, using Limber approximation:
\begin{equation}
\left(C_l^{cl \psi} \right)_{1h} = -3 \frac{\Omega_{m0} H_0^2}{l^2 c^2} \int dz \frac{c}{H(z)} (1+z) \chi(z)^2
 \frac{\left( \chi(z_\ast) - \chi(z) \right)}{\chi(z_\ast) \chi(z)} P_{lin}(k = l/\chi, z) \int d\ln M S(\ln M, z) \frac{dn(M, z)}{d\ln M} b(M, z)
\int dln M^{\prime} \frac{M^\prime}{\overline{\rho}(z)} \frac{dn(M^\prime, z)}{d\ln M} b(M^\prime, z) \tilde{u}^\ast (k = l/\chi(z) \vert M^\prime),
\end{equation}
where ...</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\left(C_l^{cl \psi} \right)_{2h}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cccll" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCorClusterCmbLensLimber</doc>
            <type name="CorClusterCmbLensLimber"
                  c:type="NcCorClusterCmbLensLimber*"/>
          </instance-parameter>
          <parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
          <parameter name="dp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDensityProfile</doc>
            <type name="DensityProfile" c:type="NcDensityProfile*"/>
          </parameter>
          <parameter name="l" transfer-ownership="none">
            <doc xml:space="preserve">spherical harmonis index</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="z_obs" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="z_obs_params" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <array zero-terminated="0" c:type="gdouble*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="oneh_int_mass_spline" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
    </class>
    <record name="CorClusterCmbLensLimberClass"
            c:type="NcCorClusterCmbLensLimberClass"
            glib:is-gtype-struct-for="CorClusterCmbLensLimber">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <constant name="DATA_BAO_RDV_LEN" value="1" c:type="NC_DATA_BAO_RDV_LEN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DATA_CLUSTER_PSEUDO_COUNTS_RESAMPLE_MAX_TRIES"
              value="100000"
              c:type="NC_DATA_CLUSTER_PSEUDO_COUNTS_RESAMPLE_MAX_TRIES">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DATA_SNIA_COV_CAT_DESC"
              value="DESC"
              c:type="NC_DATA_SNIA_COV_CAT_DESC">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DATA_SNIA_COV_CAT_DESC_COMMENT"
              value="Catalog data description"
              c:type="NC_DATA_SNIA_COV_CAT_DESC_COMMENT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DATA_SNIA_COV_CAT_HAS_COMPLETE_COV"
              value="CMPL_COV"
              c:type="NC_DATA_SNIA_COV_CAT_HAS_COMPLETE_COV">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DATA_SNIA_COV_CAT_HAS_COMPLETE_COV_COMMENT"
              value="Whether the covariance matrix is complete"
              c:type="NC_DATA_SNIA_COV_CAT_HAS_COMPLETE_COV_COMMENT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DATA_SNIA_COV_CAT_LAST_VERSION"
              value="1"
              c:type="NC_DATA_SNIA_COV_CAT_LAST_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DATA_SNIA_COV_CAT_VERSION"
              value="VERSION"
              c:type="NC_DATA_SNIA_COV_CAT_VERSION">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DATA_SNIA_COV_CAT_VERSION_COMMENT"
              value="Version number"
              c:type="NC_DATA_SNIA_COV_CAT_VERSION_COMMENT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DATA_SNIA_COV_COLOUR_KEY"
              value="colour"
              c:type="NC_DATA_SNIA_COV_COLOUR_KEY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DATA_SNIA_COV_DATA_DESC"
              value="Description"
              c:type="NC_DATA_SNIA_COV_DATA_DESC">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DATA_SNIA_COV_DATA_GROUP"
              value="Supernovae Ia Data"
              c:type="NC_DATA_SNIA_COV_DATA_GROUP">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DATA_SNIA_COV_DATA_HAS_COMPLETE_COV_KEY"
              value="has-complete-cov"
              c:type="NC_DATA_SNIA_COV_DATA_HAS_COMPLETE_COV_KEY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DATA_SNIA_COV_DATA_KEY"
              value="snia-data"
              c:type="NC_DATA_SNIA_COV_DATA_KEY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DATA_SNIA_COV_DATA_LEN_KEY"
              value="data-length"
              c:type="NC_DATA_SNIA_COV_DATA_LEN_KEY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DATA_SNIA_COV_INIT_ALL"
              value="0"
              c:type="NC_DATA_SNIA_COV_INIT_ALL">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DATA_SNIA_COV_LEN" value="1" c:type="NC_DATA_SNIA_COV_LEN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DATA_SNIA_COV_MAG_COLOUR_KEY"
              value="magnitude-colour"
              c:type="NC_DATA_SNIA_COV_MAG_COLOUR_KEY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DATA_SNIA_COV_MAG_KEY"
              value="magnitude"
              c:type="NC_DATA_SNIA_COV_MAG_KEY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DATA_SNIA_COV_MAG_WIDTH_KEY"
              value="magnitude-width"
              c:type="NC_DATA_SNIA_COV_MAG_WIDTH_KEY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DATA_SNIA_COV_SYMM_TOL"
              value="0.000000"
              c:type="NC_DATA_SNIA_COV_SYMM_TOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="DATA_SNIA_COV_WIDTH_COLOUR_KEY"
              value="width-colour"
              c:type="NC_DATA_SNIA_COV_WIDTH_COLOUR_KEY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DATA_SNIA_COV_WIDTH_KEY"
              value="width"
              c:type="NC_DATA_SNIA_COV_WIDTH_KEY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DATA_SNIA_SIMPLE_LEN"
              value="1"
              c:type="NC_DATA_SNIA_SIMPLE_LEN">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="DataBaoA"
           c:symbol-prefix="data_bao_a"
           c:type="NcDataBaoA"
           parent="NumCosmoMath.DataGaussDiag"
           glib:type-name="NcDataBaoA"
           glib:get-type="nc_data_bao_a_get_type"
           glib:type-struct="DataBaoAClass">
      <constructor name="new_from_file"
                   c:identifier="nc_data_bao_a_new_from_file">
        <doc xml:space="preserve">Creates a new #NcDataBaoA from @filename.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcDataBaoA.</doc>
          <type name="DataBaoA" c:type="NcDataBaoA*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">file containing a serialized #NcDataBaoA.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_id" c:identifier="nc_data_bao_a_new_from_id">
        <return-value transfer-ownership="full">
          <type name="DataBaoA" c:type="NcDataBaoA*"/>
        </return-value>
        <parameters>
          <parameter name="dist" transfer-ownership="none">
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="DataBaoId" c:type="NcDataBaoId"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_dist" c:identifier="nc_data_bao_a_set_dist">
        <doc xml:space="preserve">Sets the distance object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bao_a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataBaoA</doc>
            <type name="DataBaoA" c:type="NcDataBaoA*"/>
          </instance-parameter>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
        </parameters>
      </method>
      <property name="dist" writable="1" transfer-ownership="none">
        <type name="Distance"/>
      </property>
      <property name="z" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussDiag" c:type="NcmDataGaussDiag"/>
      </field>
      <field name="dist" readable="0" private="1">
        <type name="Distance" c:type="NcDistance*"/>
      </field>
      <field name="x" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
    </class>
    <record name="DataBaoAClass"
            c:type="NcDataBaoAClass"
            glib:is-gtype-struct-for="DataBaoA">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussDiagClass"
              c:type="NcmDataGaussDiagClass"/>
      </field>
    </record>
    <class name="DataBaoDHrDAr"
           c:symbol-prefix="data_bao_dhr_dar"
           c:type="NcDataBaoDHrDAr"
           parent="NumCosmoMath.DataGaussCov"
           glib:type-name="NcDataBaoDHrDAr"
           glib:get-type="nc_data_bao_dhr_dar_get_type"
           glib:type-struct="DataBaoDHrDArClass">
      <constructor name="new_from_file"
                   c:identifier="nc_data_bao_dhr_dar_new_from_file">
        <doc xml:space="preserve">Creates a new #NcDataBaoDHrDAr from @filename.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcDataBaoDHrDAr.</doc>
          <type name="DataBaoDHrDAr" c:type="NcDataBaoDHrDAr*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">file containing a serialized #NcDataBaoDHrDAr.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_id"
                   c:identifier="nc_data_bao_dhr_dar_new_from_id">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcDataBaoDHrDAr</doc>
          <type name="DataBaoDHrDAr" c:type="NcDataBaoDHrDAr*"/>
        </return-value>
        <parameters>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataBaoId</doc>
            <type name="DataBaoId" c:type="NcDataBaoId"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_dist" c:identifier="nc_data_bao_dhr_dar_set_dist">
        <doc xml:space="preserve">Sets the distance object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dhda" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataBaoDHrDAr</doc>
            <type name="DataBaoDHrDAr" c:type="NcDataBaoDHrDAr*"/>
          </instance-parameter>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
        </parameters>
      </method>
      <property name="dist" writable="1" transfer-ownership="none">
        <type name="Distance"/>
      </property>
      <property name="z" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussCov" c:type="NcmDataGaussCov"/>
      </field>
      <field name="dist" readable="0" private="1">
        <type name="Distance" c:type="NcDistance*"/>
      </field>
      <field name="x" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
    </class>
    <record name="DataBaoDHrDArClass"
            c:type="NcDataBaoDHrDArClass"
            glib:is-gtype-struct-for="DataBaoDHrDAr">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussCovClass"
              c:type="NcmDataGaussCovClass"/>
      </field>
    </record>
    <class name="DataBaoDMrHr"
           c:symbol-prefix="data_bao_dmr_hr"
           c:type="NcDataBaoDMrHr"
           parent="NumCosmoMath.DataGaussCov"
           glib:type-name="NcDataBaoDMrHr"
           glib:get-type="nc_data_bao_dmr_hr_get_type"
           glib:type-struct="DataBaoDMrHrClass">
      <constructor name="new_from_file"
                   c:identifier="nc_data_bao_dmr_hr_new_from_file">
        <doc xml:space="preserve">Creates a new #NcDataBaoDMrHr from @filename.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcDataBaoDMrHr.</doc>
          <type name="DataBaoDMrHr" c:type="NcDataBaoDMrHr*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">file containing a serialized #NcDataBaoDMrHr</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_id"
                   c:identifier="nc_data_bao_dmr_hr_new_from_id">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcDataBaoDMrHr</doc>
          <type name="DataBaoDMrHr" c:type="NcDataBaoDMrHr*"/>
        </return-value>
        <parameters>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataBaoId</doc>
            <type name="DataBaoId" c:type="NcDataBaoId"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_dist" c:identifier="nc_data_bao_dmr_hr_set_dist">
        <doc xml:space="preserve">Sets the distance object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dmh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataBaoDMrHr</doc>
            <type name="DataBaoDMrHr" c:type="NcDataBaoDMrHr*"/>
          </instance-parameter>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
        </parameters>
      </method>
      <property name="dist" writable="1" transfer-ownership="none">
        <type name="Distance"/>
      </property>
      <property name="rs-fiduc"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="z" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussCov" c:type="NcmDataGaussCov"/>
      </field>
      <field name="dist" readable="0" private="1">
        <type name="Distance" c:type="NcDistance*"/>
      </field>
      <field name="x" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="rs_fiduc" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="DataBaoDMrHrClass"
            c:type="NcDataBaoDMrHrClass"
            glib:is-gtype-struct-for="DataBaoDMrHr">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussCovClass"
              c:type="NcmDataGaussCovClass"/>
      </field>
    </record>
    <class name="DataBaoDV"
           c:symbol-prefix="data_bao_dv"
           c:type="NcDataBaoDV"
           parent="NumCosmoMath.DataGaussDiag"
           glib:type-name="NcDataBaoDV"
           glib:get-type="nc_data_bao_dv_get_type"
           glib:type-struct="DataBaoDVClass">
      <constructor name="new_from_file"
                   c:identifier="nc_data_bao_dv_new_from_file">
        <doc xml:space="preserve">Creates a new #NcDataBaoDV from @filename.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcDataBaoDV.</doc>
          <type name="DataBaoDV" c:type="NcDataBaoDV*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">file containing a serialized #NcDataBaoDV.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_id"
                   c:identifier="nc_data_bao_dv_new_from_id">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcDataBaoDV</doc>
          <type name="DataBaoDV" c:type="NcDataBaoDV*"/>
        </return-value>
        <parameters>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataBaoId</doc>
            <type name="DataBaoId" c:type="NcDataBaoId"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_dist" c:identifier="nc_data_bao_dv_set_dist">
        <doc xml:space="preserve">Sets the distance object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bao_dv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataBaoDV</doc>
            <type name="DataBaoDV" c:type="NcDataBaoDV*"/>
          </instance-parameter>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
        </parameters>
      </method>
      <property name="dist" writable="1" transfer-ownership="none">
        <type name="Distance"/>
      </property>
      <property name="z" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussDiag" c:type="NcmDataGaussDiag"/>
      </field>
      <field name="dist" readable="0" private="1">
        <type name="Distance" c:type="NcDistance*"/>
      </field>
      <field name="x" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
    </class>
    <record name="DataBaoDVClass"
            c:type="NcDataBaoDVClass"
            glib:is-gtype-struct-for="DataBaoDV">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussDiagClass"
              c:type="NcmDataGaussDiagClass"/>
      </field>
    </record>
    <class name="DataBaoDVDV"
           c:symbol-prefix="data_bao_dvdv"
           c:type="NcDataBaoDVDV"
           parent="NumCosmoMath.DataGaussDiag"
           glib:type-name="NcDataBaoDVDV"
           glib:get-type="nc_data_bao_dvdv_get_type"
           glib:type-struct="DataBaoDVDVClass">
      <constructor name="new_from_file"
                   c:identifier="nc_data_bao_dvdv_new_from_file">
        <doc xml:space="preserve">Creates a new #NcDataBaoDVDV from @filename.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcDataBaoDVDV.</doc>
          <type name="DataBaoDVDV" c:type="NcDataBaoDVDV*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">file containing a serialized #NcDataBaoDVDV.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_id"
                   c:identifier="nc_data_bao_dvdv_new_from_id">
        <return-value transfer-ownership="full">
          <type name="DataBaoDVDV" c:type="NcDataBaoDVDV*"/>
        </return-value>
        <parameters>
          <parameter name="dist" transfer-ownership="none">
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="DataBaoId" c:type="NcDataBaoId"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_dist" c:identifier="nc_data_bao_dvdv_set_dist">
        <doc xml:space="preserve">Sets the distance object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bao_dvdv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataBaoDVDV</doc>
            <type name="DataBaoDVDV" c:type="NcDataBaoDVDV*"/>
          </instance-parameter>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
        </parameters>
      </method>
      <property name="dist" writable="1" transfer-ownership="none">
        <type name="Distance"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussDiag" c:type="NcmDataGaussDiag"/>
      </field>
      <field name="dist" readable="0" private="1">
        <type name="Distance" c:type="NcDistance*"/>
      </field>
    </class>
    <record name="DataBaoDVDVClass"
            c:type="NcDataBaoDVDVClass"
            glib:is-gtype-struct-for="DataBaoDVDV">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussDiagClass"
              c:type="NcmDataGaussDiagClass"/>
      </field>
    </record>
    <class name="DataBaoEmpiricalFit"
           c:symbol-prefix="data_bao_empirical_fit"
           c:type="NcDataBaoEmpiricalFit"
           parent="NumCosmoMath.DataDist1d"
           glib:type-name="NcDataBaoEmpiricalFit"
           glib:get-type="nc_data_bao_empirical_fit_get_type"
           glib:type-struct="DataBaoEmpiricalFitClass">
      <constructor name="new" c:identifier="nc_data_bao_empirical_fit_new">
        <doc xml:space="preserve">Creates a new #NcDataBaoEmpiricalFit.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcDataBaoEmpiricalFit.</doc>
          <type name="DataBaoEmpiricalFit" c:type="NcDataBaoEmpiricalFit*"/>
        </return-value>
        <parameters>
          <parameter name="m2lnp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmSpline containing $-2\ln (p)$</doc>
            <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
          </parameter>
          <parameter name="Dv_fiduc" transfer-ownership="none">
            <doc xml:space="preserve">fiducial $D_V$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="rs_fiduc" transfer-ownership="none">
            <doc xml:space="preserve">fiducial $r_s$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">data redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="nc_data_bao_empirical_fit_new_from_file">
        <doc xml:space="preserve">Creates a new #NcDataBaoEmpiricalFit from @filename.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcDataBaoEmpiricalFit.</doc>
          <type name="DataBaoEmpiricalFit" c:type="NcDataBaoEmpiricalFit*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">file containing a serialized #NcDataBaoEmpiricalFit.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_id"
                   c:identifier="nc_data_bao_empirical_fit_new_from_id">
        <doc xml:space="preserve">Creates a new #NcDataBaoEmpiricalFit from @id.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcDataBaoEmpiricalFit.</doc>
          <type name="DataBaoEmpiricalFit" c:type="NcDataBaoEmpiricalFit*"/>
        </return-value>
        <parameters>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataBaoId</doc>
            <type name="DataBaoId" c:type="NcDataBaoId"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_alpha"
              c:identifier="nc_data_bao_empirical_fit_get_alpha">
        <doc xml:space="preserve">Calculates value of $\alpha$ given a #NcmMSet.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\alpha$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="bao_ef" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataBaoEmpiricalFit</doc>
            <type name="DataBaoEmpiricalFit" c:type="NcDataBaoEmpiricalFit*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="NumCosmoMath.MSet" c:type="NcmMSet*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mode"
              c:identifier="nc_data_bao_empirical_fit_get_mode">
        <doc xml:space="preserve">Calculates the mode of the empirical distribution.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the mode of the distribution.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="bao_ef" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataBaoEmpiricalFit</doc>
            <type name="DataBaoEmpiricalFit" c:type="NcDataBaoEmpiricalFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_dist"
              c:identifier="nc_data_bao_empirical_fit_set_dist">
        <doc xml:space="preserve">Sets the distance object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bao_ef" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataBaoEmpiricalFit</doc>
            <type name="DataBaoEmpiricalFit" c:type="NcDataBaoEmpiricalFit*"/>
          </instance-parameter>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
        </parameters>
      </method>
      <property name="Dv-fiduc"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="dist" writable="1" transfer-ownership="none">
        <type name="Distance"/>
      </property>
      <property name="m2lnp"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="NumCosmoMath.Spline"/>
      </property>
      <property name="rs-fiduc"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="z" writable="1" construct="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.DataDist1d" c:type="NcmDataDist1d"/>
      </field>
      <field name="Dv_fiduc" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="rs_fiduc" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="z" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="m2lnp" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="p" readable="0" private="1">
        <type name="NumCosmoMath.StatsDist1d" c:type="NcmStatsDist1d*"/>
      </field>
      <field name="p_mode" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="dist" readable="0" private="1">
        <type name="Distance" c:type="NcDistance*"/>
      </field>
    </class>
    <record name="DataBaoEmpiricalFitClass"
            c:type="NcDataBaoEmpiricalFitClass"
            glib:is-gtype-struct-for="DataBaoEmpiricalFit">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.DataDist1dClass" c:type="NcmDataDist1dClass"/>
      </field>
    </record>
    <enumeration name="DataBaoId"
                 glib:type-name="NcDataBaoId"
                 glib:get-type="nc_data_bao_id_get_type"
                 c:type="NcDataBaoId">
      <doc xml:space="preserve">FIXME</doc>
      <member name="a_eisenstein2005"
              value="0"
              c:identifier="NC_DATA_BAO_A_EISENSTEIN2005"
              glib:nick="a-eisenstein2005">
        <doc xml:space="preserve">[Eisenstein et al. (2005)][XEisenstein2005]</doc>
      </member>
      <member name="dv_eisenstein2005"
              value="1"
              c:identifier="NC_DATA_BAO_DV_EISENSTEIN2005"
              glib:nick="dv-eisenstein2005">
        <doc xml:space="preserve">[Eisenstein et al. (2005)][XEisenstein2005]</doc>
      </member>
      <member name="dvdv_percival2007"
              value="2"
              c:identifier="NC_DATA_BAO_DVDV_PERCIVAL2007"
              glib:nick="dvdv-percival2007">
        <doc xml:space="preserve">[Percival et al. (2007)][XPercival2007]</doc>
      </member>
      <member name="dvdv_percival2010"
              value="3"
              c:identifier="NC_DATA_BAO_DVDV_PERCIVAL2010"
              glib:nick="dvdv-percival2010">
        <doc xml:space="preserve">[Percival et al. (2010)][XPercival2010]</doc>
      </member>
      <member name="rdv_percival2007"
              value="4"
              c:identifier="NC_DATA_BAO_RDV_PERCIVAL2007"
              glib:nick="rdv-percival2007">
        <doc xml:space="preserve">[Percival et al. (2007)][XPercival2007]</doc>
      </member>
      <member name="rdv_percival2010"
              value="5"
              c:identifier="NC_DATA_BAO_RDV_PERCIVAL2010"
              glib:nick="rdv-percival2010">
        <doc xml:space="preserve">[Percival et al. (2010)][XPercival2010]</doc>
      </member>
      <member name="rdv_beutler2011"
              value="6"
              c:identifier="NC_DATA_BAO_RDV_BEUTLER2011"
              glib:nick="rdv-beutler2011">
        <doc xml:space="preserve">[Beutler et al. (2011)][XBeutler2011]</doc>
      </member>
      <member name="rdv_padmanabhan2012"
              value="7"
              c:identifier="NC_DATA_BAO_RDV_PADMANABHAN2012"
              glib:nick="rdv-padmanabhan2012">
        <doc xml:space="preserve">[Padmanabhan et al. (2012)][XPadmanabhan2012]</doc>
      </member>
      <member name="rdv_anderson2012"
              value="8"
              c:identifier="NC_DATA_BAO_RDV_ANDERSON2012"
              glib:nick="rdv-anderson2012">
        <doc xml:space="preserve">[Anderson et al. (2012)][XAnderson2012]</doc>
      </member>
      <member name="rdv_blake2012"
              value="9"
              c:identifier="NC_DATA_BAO_RDV_BLAKE2012"
              glib:nick="rdv-blake2012">
        <doc xml:space="preserve">[Blake et al. (2011)][XBlake2011]</doc>
      </member>
      <member name="rdv_kazin2014"
              value="10"
              c:identifier="NC_DATA_BAO_RDV_KAZIN2014"
              glib:nick="rdv-kazin2014">
        <doc xml:space="preserve">[Kazin et al. (2014)][XKazin2014]</doc>
      </member>
      <member name="empirical_fit_ross2015"
              value="11"
              c:identifier="NC_DATA_BAO_EMPIRICAL_FIT_ROSS2015"
              glib:nick="empirical-fit-ross2015">
        <doc xml:space="preserve">[Ross et al. (2015)][XRoss2014]</doc>
      </member>
      <member name="dhr_dar_sdss_dr11_2015"
              value="12"
              c:identifier="NC_DATA_BAO_DHR_DAR_SDSS_DR11_2015"
              glib:nick="dhr-dar-sdss-dr11-2015">
        <doc xml:space="preserve">[Delubac et al. (2015)][XDelubac2015]</doc>
      </member>
      <member name="dhr_dar_sdss_dr11_2015_lyaf_auto_cross"
              value="13"
              c:identifier="NC_DATA_BAO_DHR_DAR_SDSS_DR11_2015_LYAF_AUTO_CROSS"
              glib:nick="dhr-dar-sdss-dr11-2015-lyaf-auto-cross">
        <doc xml:space="preserve">[Aubourg et al. (2014)][XAubourg2014]</doc>
      </member>
      <member name="dmr_hr_sdss_dr12_2016"
              value="14"
              c:identifier="NC_DATA_BAO_DMR_HR_SDSS_DR12_2016"
              glib:nick="dmr-hr-sdss-dr12-2016">
        <doc xml:space="preserve">[Alam et al. (2016)][XAlam2016]</doc>
      </member>
    </enumeration>
    <class name="DataBaoRDV"
           c:symbol-prefix="data_bao_rdv"
           c:type="NcDataBaoRDV"
           parent="NumCosmoMath.DataGauss"
           glib:type-name="NcDataBaoRDV"
           glib:get-type="nc_data_bao_rdv_get_type"
           glib:type-struct="DataBaoRDVClass">
      <constructor name="new_from_file"
                   c:identifier="nc_data_bao_rdv_new_from_file">
        <doc xml:space="preserve">Creates a new #NcDataBaoRDV from @filename.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcDataBaoRDV.</doc>
          <type name="DataBaoRDV" c:type="NcDataBaoRDV*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">file containing a serialized #NcDataBaoRDV.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_id"
                   c:identifier="nc_data_bao_rdv_new_from_id">
        <return-value transfer-ownership="full">
          <type name="DataBaoRDV" c:type="NcDataBaoRDV*"/>
        </return-value>
        <parameters>
          <parameter name="dist" transfer-ownership="none">
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="DataBaoId" c:type="NcDataBaoId"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_dist" c:identifier="nc_data_bao_rdv_set_dist">
        <doc xml:space="preserve">Sets the distance object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bao_rdv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataBaoRDV</doc>
            <type name="DataBaoRDV" c:type="NcDataBaoRDV*"/>
          </instance-parameter>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
        </parameters>
      </method>
      <property name="dist" writable="1" transfer-ownership="none">
        <type name="Distance"/>
      </property>
      <property name="is-rDV"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="z" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.DataGauss" c:type="NcmDataGauss"/>
      </field>
      <field name="dist" readable="0" private="1">
        <type name="Distance" c:type="NcDistance*"/>
      </field>
      <field name="x" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="r_DV" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="DataBaoRDVClass"
            c:type="NcDataBaoRDVClass"
            glib:is-gtype-struct-for="DataBaoRDV">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussClass" c:type="NcmDataGaussClass"/>
      </field>
    </record>
    <bitfield name="DataCMBDataType"
              glib:type-name="NcDataCMBDataType"
              glib:get-type="nc_data_cmb_data_type_get_type"
              c:type="NcDataCMBDataType">
      <doc xml:space="preserve">FIXME</doc>
      <member name="tt"
              value="1"
              c:identifier="NC_DATA_CMB_TYPE_TT"
              glib:nick="tt">
        <doc xml:space="preserve">Temperature - Temperature correlation data</doc>
      </member>
      <member name="ee"
              value="2"
              c:identifier="NC_DATA_CMB_TYPE_EE"
              glib:nick="ee">
        <doc xml:space="preserve">Mode E - Mode E correlation data</doc>
      </member>
      <member name="bb"
              value="4"
              c:identifier="NC_DATA_CMB_TYPE_BB"
              glib:nick="bb">
        <doc xml:space="preserve">Mode B - Mode B correlation data</doc>
      </member>
      <member name="te"
              value="8"
              c:identifier="NC_DATA_CMB_TYPE_TE"
              glib:nick="te">
        <doc xml:space="preserve">Temperature - Mode E correlation data</doc>
      </member>
      <member name="tb"
              value="16"
              c:identifier="NC_DATA_CMB_TYPE_TB"
              glib:nick="tb">
        <doc xml:space="preserve">Temperature - Mode B correlation data</doc>
      </member>
      <member name="eb"
              value="32"
              c:identifier="NC_DATA_CMB_TYPE_EB"
              glib:nick="eb">
        <doc xml:space="preserve">Mode E - Mode B correlation data</doc>
      </member>
      <member name="phiphi"
              value="64"
              c:identifier="NC_DATA_CMB_TYPE_PHIPHI"
              glib:nick="phiphi">
        <doc xml:space="preserve">$\phi$ - $\phi$ correlation data</doc>
      </member>
      <member name="all"
              value="127"
              c:identifier="NC_DATA_CMB_TYPE_ALL"
              glib:nick="all">
        <doc xml:space="preserve">All types above</doc>
      </member>
    </bitfield>
    <class name="DataCMBDistPriors"
           c:symbol-prefix="data_cmb_dist_priors"
           c:type="NcDataCMBDistPriors"
           parent="NumCosmoMath.DataGauss"
           glib:type-name="NcDataCMBDistPriors"
           glib:get-type="nc_data_cmb_dist_priors_get_type"
           glib:type-struct="DataCMBDistPriorsClass">
      <constructor name="new" c:identifier="nc_data_cmb_dist_priors_new">
        <return-value transfer-ownership="full">
          <type name="NumCosmoMath.Data" c:type="NcmData*"/>
        </return-value>
        <parameters>
          <parameter name="dist" transfer-ownership="none">
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="DataCMBId" c:type="NcDataCMBId"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="nc_data_cmb_dist_priors_new_from_file">
        <doc xml:space="preserve">Creates a new #NcDataCMBDistPriors from @filename.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcDataCMBDistPriors.</doc>
          <type name="DataCMBDistPriors" c:type="NcDataCMBDistPriors*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">file containing a serialized #NcDataCMBDistPriors</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_id"
                   c:identifier="nc_data_cmb_dist_priors_new_from_id">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="DataCMBDistPriors" c:type="NcDataCMBDistPriors*"/>
        </return-value>
        <parameters>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataCMBId</doc>
            <type name="DataCMBId" c:type="NcDataCMBId"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_dist" c:identifier="nc_data_cmb_dist_priors_set_dist">
        <doc xml:space="preserve">Sets the distance object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cmb_dist_priors" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataCMBDistPriors</doc>
            <type name="DataCMBDistPriors" c:type="NcDataCMBDistPriors*"/>
          </instance-parameter>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
        </parameters>
      </method>
      <property name="dist"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="Distance"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.DataGauss" c:type="NcmDataGauss"/>
      </field>
      <field name="dist" readable="0" private="1">
        <type name="Distance" c:type="NcDistance*"/>
      </field>
    </class>
    <record name="DataCMBDistPriorsClass"
            c:type="NcDataCMBDistPriorsClass"
            glib:is-gtype-struct-for="DataCMBDistPriors">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussClass" c:type="NcmDataGaussClass"/>
      </field>
    </record>
    <enumeration name="DataCMBId"
                 glib:type-name="NcDataCMBId"
                 glib:get-type="nc_data_cmb_id_get_type"
                 c:type="NcDataCMBId">
      <doc xml:space="preserve">FIXME</doc>
      <member name="shift_param_wmap3"
              value="0"
              c:identifier="NC_DATA_CMB_SHIFT_PARAM_WMAP3"
              glib:nick="shift-param-wmap3">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="shift_param_wmap5"
              value="1"
              c:identifier="NC_DATA_CMB_SHIFT_PARAM_WMAP5"
              glib:nick="shift-param-wmap5">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="shift_param_wmap7"
              value="2"
              c:identifier="NC_DATA_CMB_SHIFT_PARAM_WMAP7"
              glib:nick="shift-param-wmap7">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="dist_priors_wmap5"
              value="3"
              c:identifier="NC_DATA_CMB_DIST_PRIORS_WMAP5"
              glib:nick="dist-priors-wmap5">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="dist_priors_wmap7"
              value="4"
              c:identifier="NC_DATA_CMB_DIST_PRIORS_WMAP7"
              glib:nick="dist-priors-wmap7">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="dist_priors_wmap9"
              value="5"
              c:identifier="NC_DATA_CMB_DIST_PRIORS_WMAP9"
              glib:nick="dist-priors-wmap9">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="DataCMBShiftParam"
           c:symbol-prefix="data_cmb_shift_param"
           c:type="NcDataCMBShiftParam"
           parent="NumCosmoMath.DataGaussDiag"
           glib:type-name="NcDataCMBShiftParam"
           glib:get-type="nc_data_cmb_shift_param_get_type"
           glib:type-struct="DataCMBShiftParamClass">
      <constructor name="new_empty"
                   c:identifier="nc_data_cmb_shift_param_new_empty">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="DataCMBShiftParam" c:type="NcDataCMBShiftParam*"/>
        </return-value>
        <parameters>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="nc_data_cmb_shift_param_new_from_file">
        <doc xml:space="preserve">Creates a new #NcDataCMBShiftParam from @filename.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcDataCMBShiftParam.</doc>
          <type name="DataCMBShiftParam" c:type="NcDataCMBShiftParam*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">file containing a serialized #NcDataCMBShiftParam.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_id"
                   c:identifier="nc_data_cmb_shift_param_new_from_id">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="DataCMBShiftParam" c:type="NcDataCMBShiftParam*"/>
        </return-value>
        <parameters>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="DataCMBId" c:type="NcDataCMBId"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_dist" c:identifier="nc_data_cmb_shift_param_set_dist">
        <doc xml:space="preserve">Sets the distance object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cmb_shift_param" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataCMBShiftParam</doc>
            <type name="DataCMBShiftParam" c:type="NcDataCMBShiftParam*"/>
          </instance-parameter>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
        </parameters>
      </method>
      <property name="dist" writable="1" transfer-ownership="none">
        <type name="Distance"/>
      </property>
      <property name="z" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussDiag" c:type="NcmDataGaussDiag"/>
      </field>
      <field name="dist" readable="0" private="1">
        <type name="Distance" c:type="NcDistance*"/>
      </field>
      <field name="x" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
    </class>
    <record name="DataCMBShiftParamClass"
            c:type="NcDataCMBShiftParamClass"
            glib:is-gtype-struct-for="DataCMBShiftParam">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussDiagClass"
              c:type="NcmDataGaussDiagClass"/>
      </field>
    </record>
    <enumeration name="DataClusterAbundanceId"
                 glib:type-name="NcDataClusterAbundanceId"
                 glib:get-type="nc_data_cluster_abundance_id_get_type"
                 c:type="NcDataClusterAbundanceId">
      <member name="fit"
              value="0"
              c:identifier="NC_DATA_CLUSTER_ABUNDANCE_FIT"
              glib:nick="fit">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="txt"
              value="1"
              c:identifier="NC_DATA_CLUSTER_ABUNDANCE_TXT"
              glib:nick="txt">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="sampling"
              value="2"
              c:identifier="NC_DATA_CLUSTER_ABUNDANCE_SAMPLING"
              glib:nick="sampling">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="DataClusterCountsBoxPoisson"
           c:symbol-prefix="data_cluster_counts_box_poisson"
           c:type="NcDataClusterCountsBoxPoisson"
           parent="NumCosmoMath.DataPoisson"
           glib:type-name="NcDataClusterCountsBoxPoisson"
           glib:get-type="nc_data_cluster_counts_box_poisson_get_type"
           glib:type-struct="DataClusterCountsBoxPoissonClass">
      <constructor name="new"
                   c:identifier="nc_data_cluster_counts_box_poisson_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="DataClusterCountsBoxPoisson"
                c:type="NcDataClusterCountsBoxPoisson*"/>
        </return-value>
        <parameters>
          <parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="init_from_sampling"
              c:identifier="nc_data_cluster_counts_box_poisson_init_from_sampling">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cpoisson" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterCountsBoxPoisson</doc>
            <type name="DataClusterCountsBoxPoisson"
                  c:type="NcDataClusterCountsBoxPoisson*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="NumCosmoMath.MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="mass_knots" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector containing the histogram knots</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="volume" transfer-ownership="none">
            <doc xml:space="preserve">box volume</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="redshift" transfer-ownership="none">
            <doc xml:space="preserve">box redshift</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="NumCosmoMath.RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <property name="mass-function"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="HaloMassFunction"/>
      </property>
      <property name="mass-knots" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="redshift"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="volume"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.DataPoisson" c:type="NcmDataPoisson"/>
      </field>
      <field name="mfp" readable="0" private="1">
        <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
      </field>
      <field name="mass_knots" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="redshift" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="volume" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="dndlog10M" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
    </class>
    <record name="DataClusterCountsBoxPoissonClass"
            c:type="NcDataClusterCountsBoxPoissonClass"
            glib:is-gtype-struct-for="DataClusterCountsBoxPoisson">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.DataPoissonClass"
              c:type="NcmDataPoissonClass"/>
      </field>
    </record>
    <class name="DataClusterNCount"
           c:symbol-prefix="data_cluster_ncount"
           c:type="NcDataClusterNCount"
           parent="NumCosmoMath.Data"
           glib:type-name="NcDataClusterNCount"
           glib:get-type="nc_data_cluster_ncount_get_type"
           glib:type-struct="DataClusterNCountClass">
      <constructor name="new" c:identifier="nc_data_cluster_ncount_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
        </return-value>
        <parameters>
          <parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_data_cluster_ncount_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount**"/>
          </parameter>
        </parameters>
      </function>
      <method name="catalog_load"
              c:identifier="nc_data_cluster_ncount_catalog_load">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount.</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">name of the file</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="catalog_save"
              c:identifier="nc_data_cluster_ncount_catalog_save">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount.</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">name of the file</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="overwrite" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_data_cluster_ncount_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_len" c:identifier="nc_data_cluster_ncount_get_len">
        <doc xml:space="preserve">Gets the total number of objects.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Number of objects in @ncount.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lnM_obs"
              c:identifier="nc_data_cluster_ncount_get_lnM_obs">
        <doc xml:space="preserve">Gets the matrix containing the mass observables.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">Mass observable #NcmMatrix.</doc>
          <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lnM_obs_params"
              c:identifier="nc_data_cluster_ncount_get_lnM_obs_params">
        <doc xml:space="preserve">Gets the matrix containing the mass observables parameters.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">Mass observable parameters #NcmMatrix.</doc>
          <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lnM_true"
              c:identifier="nc_data_cluster_ncount_get_lnM_true">
        <doc xml:space="preserve">Gets the vector containing the true values of the masses.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">True masses #NcmVector.</doc>
          <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_z_obs" c:identifier="nc_data_cluster_ncount_get_z_obs">
        <doc xml:space="preserve">Gets the matrix containing the redshift observables.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">Redshift observable #NcmMatrix.</doc>
          <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_z_obs_params"
              c:identifier="nc_data_cluster_ncount_get_z_obs_params">
        <doc xml:space="preserve">Gets the matrix containing the redshift observables parameters.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">Redshift observable parameters #NcmMatrix.</doc>
          <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_z_true"
              c:identifier="nc_data_cluster_ncount_get_z_true">
        <doc xml:space="preserve">Gets the vector containing the true values of the redshifts.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">True redshift #NcmVector.</doc>
          <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_lnM_true"
              c:identifier="nc_data_cluster_ncount_has_lnM_true">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if it contains the lnM truth table.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_z_true"
              c:identifier="nc_data_cluster_ncount_has_z_true">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if it contains the redshift truth table.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init_from_sampling"
              c:identifier="nc_data_cluster_ncount_init_from_sampling">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="NumCosmoMath.MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="area_survey" transfer-ownership="none">
            <doc xml:space="preserve">area in units of square degrees</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="NumCosmoMath.RNG" c:type="NcmRNG*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lnM_obs_len"
              c:identifier="nc_data_cluster_ncount_lnM_obs_len">
        <doc xml:space="preserve">Number of doubles to describe the observational data related to the mass
of each object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Length of each row describing the mass proxy.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lnM_obs_params_len"
              c:identifier="nc_data_cluster_ncount_lnM_obs_params_len">
        <doc xml:space="preserve">Number of doubles to describe the observational data parameters related
mass to each object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Length of each row describing the mass proxy, it can be zero.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="print" c:identifier="nc_data_cluster_ncount_print">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="out" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="header" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_data_cluster_ncount_ref">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_bin_by_minmax"
              c:identifier="nc_data_cluster_ncount_set_bin_by_minmax">
        <doc xml:space="preserve">Creates a uniform binning with @z_nbins and @lnM_nbins.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount.</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
          <parameter name="z_nbins" transfer-ownership="none">
            <doc xml:space="preserve">number of bins in z.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="lnM_nbins" transfer-ownership="none">
            <doc xml:space="preserve">number of bins in $\ln(M)$.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bin_by_nodes"
              c:identifier="nc_data_cluster_ncount_set_bin_by_nodes">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
          <parameter name="z_nodes" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="lnM_nodes" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bin_by_quantile"
              c:identifier="nc_data_cluster_ncount_set_bin_by_quantile">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount.</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
          <parameter name="z_quantiles" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="lnM_quantiles" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_binned"
              c:identifier="nc_data_cluster_ncount_set_binned">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount.</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
          <parameter name="on" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lnM_obs"
              c:identifier="nc_data_cluster_ncount_set_lnM_obs">
        <doc xml:space="preserve">Sets the matrix @m representing the cluster mass observables.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
          <parameter name="m" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="NumCosmoMath.Matrix" c:type="const NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lnM_obs_params"
              c:identifier="nc_data_cluster_ncount_set_lnM_obs_params">
        <doc xml:space="preserve">Sets the matrix @m representing the cluster mass-observable parameters.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
          <parameter name="m" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="NumCosmoMath.Matrix" c:type="const NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lnM_true"
              c:identifier="nc_data_cluster_ncount_set_lnM_true">
        <doc xml:space="preserve">Sets the vector @v containing the values of the clusters true masses.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
          <parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="const NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_n_M_obs"
              c:identifier="nc_data_cluster_ncount_set_n_M_obs">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
          <parameter name="n_M_obs" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_n_M_obs_params"
              c:identifier="nc_data_cluster_ncount_set_n_M_obs_params">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
          <parameter name="n_M_obs_params" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_n_z_obs"
              c:identifier="nc_data_cluster_ncount_set_n_z_obs">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
          <parameter name="n_z_obs" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_n_z_obs_params"
              c:identifier="nc_data_cluster_ncount_set_n_z_obs_params">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
          <parameter name="n_z_obs_params" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_z_obs" c:identifier="nc_data_cluster_ncount_set_z_obs">
        <doc xml:space="preserve">Sets the matrix @m representing the cluster redshift observables.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
          <parameter name="m" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="NumCosmoMath.Matrix" c:type="const NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_z_obs_params"
              c:identifier="nc_data_cluster_ncount_set_z_obs_params">
        <doc xml:space="preserve">Sets the matrix @m representing the cluster redshift observable parameters.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
          <parameter name="m" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="NumCosmoMath.Matrix" c:type="const NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_z_true"
              c:identifier="nc_data_cluster_ncount_set_z_true">
        <doc xml:space="preserve">Sets the vector @v containing the true redshift values of the clusters.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
          <parameter name="v" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="const NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="true_data" c:identifier="nc_data_cluster_ncount_true_data">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
          <parameter name="use_true_data" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="using_true_data"
              c:identifier="nc_data_cluster_ncount_using_true_data">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">if it is using true data.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="z_obs_len" c:identifier="nc_data_cluster_ncount_z_obs_len">
        <doc xml:space="preserve">Number of doubles to describe the observational data related to
the redshift of each object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Length of each row describing the mass proxy.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterNCount</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="z_obs_params_len"
              c:identifier="nc_data_cluster_ncount_z_obs_params_len">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="ncount" transfer-ownership="none">
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="area" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="binned" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="cluster-abundance"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="ClusterAbundance"/>
      </property>
      <property name="fiducial" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="lnM-nodes"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="lnM-obs" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Matrix"/>
      </property>
      <property name="lnM-obs-params" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Matrix"/>
      </property>
      <property name="lnM-true" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="n-M-obs"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="n-M-obs-params"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="n-z-obs"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="n-z-obs-params"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="rng-name" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="rng-seed" writable="1" transfer-ownership="none">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="use-true" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="z-nodes"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="z-obs" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Matrix"/>
      </property>
      <property name="z-obs-params" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Matrix"/>
      </property>
      <property name="z-true" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Data" c:type="NcmData"/>
      </field>
      <field name="cad" readable="0" private="1">
        <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
      </field>
      <field name="lnM_true" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="z_true" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="z_obs" readable="0" private="1">
        <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="z_obs_params" readable="0" private="1">
        <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="lnM_obs" readable="0" private="1">
        <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="lnM_obs_params" readable="0" private="1">
        <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="m2lnL_a" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="area_survey" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="np" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="n_z_obs" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="n_z_obs_params" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="n_M_obs" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="n_M_obs_params" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="log_np_fac" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="use_true_data" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="binned" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="z_nodes" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="lnM_nodes" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="purity" introspectable="0" readable="0" private="1">
        <type c:type="gsl_histogram2d*"/>
      </field>
      <field name="sd_lnM" introspectable="0" readable="0" private="1">
        <type c:type="gsl_histogram2d*"/>
      </field>
      <field name="z_lnM" introspectable="0" readable="0" private="1">
        <type c:type="gsl_histogram2d*"/>
      </field>
      <field name="fiducial" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="seed" readable="0" private="1">
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="rnd_name" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
    </class>
    <record name="DataClusterNCountClass"
            c:type="NcDataClusterNCountClass"
            glib:is-gtype-struct-for="DataClusterNCount">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.DataClass" c:type="NcmDataClass"/>
      </field>
    </record>
    <class name="DataClusterPoisson"
           c:symbol-prefix="data_cluster_poisson"
           c:type="NcDataClusterPoisson"
           parent="NumCosmoMath.DataPoisson"
           glib:type-name="NcDataClusterPoisson"
           glib:get-type="nc_data_cluster_poisson_get_type"
           glib:type-struct="DataClusterPoissonClass">
      <constructor name="new" c:identifier="nc_data_cluster_poisson_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="NumCosmoMath.Data" c:type="NcmData*"/>
        </return-value>
        <parameters>
          <parameter name="ncount" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance.</doc>
            <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_cad"
                   c:identifier="nc_data_cluster_poisson_new_cad">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="NumCosmoMath.Data" c:type="NcmData*"/>
        </return-value>
        <parameters>
          <parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance.</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="cluster-ncount"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="DataClusterNCount"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.DataPoisson" c:type="NcmDataPoisson"/>
      </field>
      <field name="ncount" readable="0" private="1">
        <type name="DataClusterNCount" c:type="NcDataClusterNCount*"/>
      </field>
    </class>
    <record name="DataClusterPoissonClass"
            c:type="NcDataClusterPoissonClass"
            glib:is-gtype-struct-for="DataClusterPoisson">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.DataPoissonClass"
              c:type="NcmDataPoissonClass"/>
      </field>
    </record>
    <class name="DataClusterPseudoCounts"
           c:symbol-prefix="data_cluster_pseudo_counts"
           c:type="NcDataClusterPseudoCounts"
           parent="NumCosmoMath.Data"
           glib:type-name="NcDataClusterPseudoCounts"
           glib:get-type="nc_data_cluster_pseudo_counts_get_type"
           glib:type-struct="DataClusterPseudoCountsClass">
      <constructor name="new" c:identifier="nc_data_cluster_pseudo_counts_new">
        <doc xml:space="preserve">Creates a new #NcDataClusterPseudoCounts.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcDataClusterPseudoCounts.</doc>
          <type name="DataClusterPseudoCounts"
                c:type="NcDataClusterPseudoCounts*"/>
        </return-value>
        <parameters>
          <parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="nc_data_cluster_pseudo_counts_new_from_file">
        <doc xml:space="preserve">Creates a new #NcDataClusterPseudoCounts from @filename.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcDataClusterPseudoCounts.</doc>
          <type name="DataClusterPseudoCounts"
                c:type="NcDataClusterPseudoCounts*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">file containing a serialized #NcDataClusterPseudoCounts</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear"
                c:identifier="nc_data_cluster_pseudo_counts_clear">
        <doc xml:space="preserve">The reference count of @dcpc is decreased and the pointer is set to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dcpc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterPseudoCounts</doc>
            <type name="DataClusterPseudoCounts"
                  c:type="NcDataClusterPseudoCounts**"/>
          </parameter>
        </parameters>
      </function>
      <method name="free" c:identifier="nc_data_cluster_pseudo_counts_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @dcpc by one. If the reference count drops to 0,
all memory allocated by @dcpc is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dcpc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterPseudoCounts</doc>
            <type name="DataClusterPseudoCounts"
                  c:type="NcDataClusterPseudoCounts*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_obs"
              c:identifier="nc_data_cluster_pseudo_counts_get_obs">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dcpc" transfer-ownership="none">
            <type name="DataClusterPseudoCounts"
                  c:type="NcDataClusterPseudoCounts*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init_from_sampling"
              c:identifier="nc_data_cluster_pseudo_counts_init_from_sampling">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dcpc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterPseudoCounts</doc>
            <type name="DataClusterPseudoCounts"
                  c:type="NcDataClusterPseudoCounts*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="NumCosmoMath.MSet" c:type="NcmMSet*"/>
          </parameter>
          <parameter name="rng" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmRNG</doc>
            <type name="NumCosmoMath.RNG" c:type="NcmRNG*"/>
          </parameter>
          <parameter name="np" transfer-ownership="none">
            <doc xml:space="preserve">number of clusters</doc>
            <type name="gint" c:type="const gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_data_cluster_pseudo_counts_ref">
        <doc xml:space="preserve">Increases the reference count of @dcpc by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@dcpc</doc>
          <type name="DataClusterPseudoCounts"
                c:type="NcDataClusterPseudoCounts*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dcpc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterPseudoCounts</doc>
            <type name="DataClusterPseudoCounts"
                  c:type="NcDataClusterPseudoCounts*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_cad"
              c:identifier="nc_data_cluster_pseudo_counts_set_cad">
        <doc xml:space="preserve">Sets the #NcClusterAbundance object @cad to be used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dcpc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterPseudoCounts</doc>
            <type name="DataClusterPseudoCounts"
                  c:type="NcDataClusterPseudoCounts*"/>
          </instance-parameter>
          <parameter name="cad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcClusterAbundance</doc>
            <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nclusters"
              c:identifier="nc_data_cluster_pseudo_counts_set_nclusters">
        <doc xml:space="preserve">Sets @np representing the total number of clusters.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dcpc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterPseudoCounts</doc>
            <type name="DataClusterPseudoCounts"
                  c:type="NcDataClusterPseudoCounts*"/>
          </instance-parameter>
          <parameter name="np" transfer-ownership="none">
            <doc xml:space="preserve">number of clusters</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_obs"
              c:identifier="nc_data_cluster_pseudo_counts_set_obs">
        <doc xml:space="preserve">Sets the matrix @m representing the cluster observables, e.g., observed redshift and
mass(es) and the parameters of the redshift and/or mass-observable distributions.

The function nc_data_cluster_pseudo_counts_set_nclusters must be called before this one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dcpc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterPseudoCounts</doc>
            <type name="DataClusterPseudoCounts"
                  c:type="NcDataClusterPseudoCounts*"/>
          </instance-parameter>
          <parameter name="m" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="NumCosmoMath.Matrix" c:type="const NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_true_data"
              c:identifier="nc_data_cluster_pseudo_counts_set_true_data">
        <doc xml:space="preserve">Sets the matrix @m representing the cluster (halo) true data, i.e., true redshift and
mass(es).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dcpc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataClusterPseudoCounts</doc>
            <type name="DataClusterPseudoCounts"
                  c:type="NcDataClusterPseudoCounts*"/>
          </instance-parameter>
          <parameter name="m" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="NumCosmoMath.Matrix" c:type="const NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <property name="M-z-flat-prior"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="cluster-abundance"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="ClusterAbundance"/>
      </property>
      <property name="np" writable="1" construct="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="obs" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Matrix"/>
      </property>
      <property name="true-data" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Matrix"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Data" c:type="NcmData"/>
      </field>
      <field name="cad" readable="0" private="1">
        <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
      </field>
      <field name="obs" readable="0" private="1">
        <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="true_data" readable="0" private="1">
        <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="np" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="M_Z_FlatPrior" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="rnd_name" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
    </class>
    <record name="DataClusterPseudoCountsClass"
            c:type="NcDataClusterPseudoCountsClass"
            glib:is-gtype-struct-for="DataClusterPseudoCounts">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.DataClass" c:type="NcmDataClass"/>
      </field>
    </record>
    <enumeration name="DataClusterPseudoCountsObs"
                 glib:type-name="NcDataClusterPseudoCountsObs"
                 glib:get-type="nc_data_cluster_pseudo_counts_obs_get_type"
                 c:type="NcDataClusterPseudoCountsObs">
      <member name="z"
              value="0"
              c:identifier="NC_DATA_CLUSTER_PSEUDO_COUNTS_Z"
              glib:nick="z">
        <doc xml:space="preserve">redshift</doc>
      </member>
      <member name="mpl"
              value="1"
              c:identifier="NC_DATA_CLUSTER_PSEUDO_COUNTS_MPL"
              glib:nick="mpl">
        <doc xml:space="preserve">Planck cluster mass</doc>
      </member>
      <member name="mcl"
              value="2"
              c:identifier="NC_DATA_CLUSTER_PSEUDO_COUNTS_MCL"
              glib:nick="mcl">
        <doc xml:space="preserve">CLASH cluster mass</doc>
      </member>
      <member name="sd_mpl"
              value="3"
              c:identifier="NC_DATA_CLUSTER_PSEUDO_COUNTS_SD_MPL"
              glib:nick="sd-mpl">
        <doc xml:space="preserve">Planck mass error</doc>
      </member>
      <member name="sd_mcl"
              value="4"
              c:identifier="NC_DATA_CLUSTER_PSEUDO_COUNTS_SD_MCL"
              glib:nick="sd-mcl">
        <doc xml:space="preserve">CLASH mass error</doc>
      </member>
    </enumeration>
    <class name="DataDistMu"
           c:symbol-prefix="data_dist_mu"
           c:type="NcDataDistMu"
           parent="NumCosmoMath.DataGaussDiag"
           glib:type-name="NcDataDistMu"
           glib:get-type="nc_data_dist_mu_get_type"
           glib:type-struct="DataDistMuClass">
      <constructor name="new_empty" c:identifier="nc_data_dist_mu_new_empty">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="DataDistMu" c:type="NcDataDistMu*"/>
        </return-value>
        <parameters>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="nc_data_dist_mu_new_from_file">
        <doc xml:space="preserve">Creates a new #NcDataDistMu from @filename.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcDataDistMu.</doc>
          <type name="DataDistMu" c:type="NcDataDistMu*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">file containing a serialized #NcDataDistMu</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_id"
                   c:identifier="nc_data_dist_mu_new_from_id">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="DataDistMu" c:type="NcDataDistMu*"/>
        </return-value>
        <parameters>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIAId</doc>
            <type name="DataSNIAId" c:type="NcDataSNIAId"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_dist" c:identifier="nc_data_dist_mu_set_dist">
        <doc xml:space="preserve">Sets the distance object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist_mu" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataDistMu</doc>
            <type name="DataDistMu" c:type="NcDataDistMu*"/>
          </instance-parameter>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
        </parameters>
      </method>
      <property name="dist" writable="1" transfer-ownership="none">
        <type name="Distance"/>
      </property>
      <property name="z" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussDiag" c:type="NcmDataGaussDiag"/>
      </field>
      <field name="dist" readable="0" private="1">
        <type name="Distance" c:type="NcDistance*"/>
      </field>
      <field name="x" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
    </class>
    <record name="DataDistMuClass"
            c:type="NcDataDistMuClass"
            glib:is-gtype-struct-for="DataDistMu">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussDiagClass"
              c:type="NcmDataGaussDiagClass"/>
      </field>
    </record>
    <class name="DataHubble"
           c:symbol-prefix="data_hubble"
           c:type="NcDataHubble"
           parent="NumCosmoMath.DataGaussDiag"
           glib:type-name="NcDataHubble"
           glib:get-type="nc_data_hubble_get_type"
           glib:type-struct="DataHubbleClass">
      <constructor name="new_empty" c:identifier="nc_data_hubble_new_empty">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="DataHubble" c:type="NcDataHubble*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="nc_data_hubble_new_from_file">
        <doc xml:space="preserve">Creates a new #NcDataHubble from @filename.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcDataHubble.</doc>
          <type name="DataHubble" c:type="NcDataHubble*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">file containing a serialized #NcDataHubble</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_id"
                   c:identifier="nc_data_hubble_new_from_id">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="DataHubble" c:type="NcDataHubble*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataHubbleId</doc>
            <type name="DataHubbleId" c:type="NcDataHubbleId"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_sample" c:identifier="nc_data_hubble_set_sample">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hubble" transfer-ownership="none">
            <type name="DataHubble" c:type="NcDataHubble*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="DataHubbleId" c:type="NcDataHubbleId"/>
          </parameter>
        </parameters>
      </method>
      <property name="z" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussDiag" c:type="NcmDataGaussDiag"/>
      </field>
      <field name="x" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
    </class>
    <class name="DataHubbleBao"
           c:symbol-prefix="data_hubble_bao"
           c:type="NcDataHubbleBao"
           parent="NumCosmoMath.DataGaussDiag"
           glib:type-name="NcDataHubbleBao"
           glib:get-type="nc_data_hubble_bao_get_type"
           glib:type-struct="DataHubbleBaoClass">
      <constructor name="new" c:identifier="nc_data_hubble_bao_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #NcmData</doc>
          <type name="NumCosmoMath.Data" c:type="NcmData*"/>
        </return-value>
        <parameters>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataHubbleBaoId</doc>
            <type name="DataHubbleBaoId" c:type="NcDataHubbleBaoId"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_sample" c:identifier="nc_data_hubble_bao_set_sample">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hubble_bao" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataHubbleBao.</doc>
            <type name="DataHubbleBao" c:type="NcDataHubbleBao*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataHubbleBaoId</doc>
            <type name="DataHubbleBaoId" c:type="NcDataHubbleBaoId"/>
          </parameter>
        </parameters>
      </method>
      <property name="dist"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="Distance"/>
      </property>
      <property name="z" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussDiag" c:type="NcmDataGaussDiag"/>
      </field>
      <field name="dist" readable="0" private="1">
        <type name="Distance" c:type="NcDistance*"/>
      </field>
      <field name="x" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
    </class>
    <record name="DataHubbleBaoClass"
            c:type="NcDataHubbleBaoClass"
            glib:is-gtype-struct-for="DataHubbleBao">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussDiagClass"
              c:type="NcmDataGaussDiagClass"/>
      </field>
    </record>
    <enumeration name="DataHubbleBaoId"
                 glib:type-name="NcDataHubbleBaoId"
                 glib:get-type="nc_data_hubble_bao_id_get_type"
                 c:type="NcDataHubbleBaoId">
      <doc xml:space="preserve">FIXME</doc>
      <member name="busca2013"
              value="0"
              c:identifier="NC_DATA_HUBBLE_BAO_BUSCA2013"
              glib:nick="busca2013">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <record name="DataHubbleClass"
            c:type="NcDataHubbleClass"
            glib:is-gtype-struct-for="DataHubble">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussDiagClass"
              c:type="NcmDataGaussDiagClass"/>
      </field>
    </record>
    <enumeration name="DataHubbleId"
                 glib:type-name="NcDataHubbleId"
                 glib:get-type="nc_data_hubble_id_get_type"
                 c:type="NcDataHubbleId">
      <doc xml:space="preserve">FIXME</doc>
      <member name="simon2005"
              value="0"
              c:identifier="NC_DATA_HUBBLE_SIMON2005"
              glib:nick="simon2005">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="cabre"
              value="1"
              c:identifier="NC_DATA_HUBBLE_CABRE"
              glib:nick="cabre">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="stern2009"
              value="2"
              c:identifier="NC_DATA_HUBBLE_STERN2009"
              glib:nick="stern2009">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="moresco2012_bc03"
              value="3"
              c:identifier="NC_DATA_HUBBLE_MORESCO2012_BC03"
              glib:nick="moresco2012-bc03">
        <doc xml:space="preserve">[Moresco et al. (2012)][XMoresco2012]</doc>
      </member>
      <member name="moresco2012_mastro"
              value="4"
              c:identifier="NC_DATA_HUBBLE_MORESCO2012_MASTRO"
              glib:nick="moresco2012-mastro">
        <doc xml:space="preserve">[Moresco et al. (2012)][XMoresco2012]</doc>
      </member>
      <member name="moresco2015"
              value="5"
              c:identifier="NC_DATA_HUBBLE_MORESCO2015"
              glib:nick="moresco2015">
        <doc xml:space="preserve">[Moresco (2015)][XMoresco2015]</doc>
      </member>
      <member name="moresco2016_dr9_bc03"
              value="6"
              c:identifier="NC_DATA_HUBBLE_MORESCO2016_DR9_BC03"
              glib:nick="moresco2016-dr9-bc03">
        <doc xml:space="preserve">[Moresco et al. (2016)][XMoresco2016]</doc>
      </member>
      <member name="moresco2016_dr9_mastro"
              value="7"
              c:identifier="NC_DATA_HUBBLE_MORESCO2016_DR9_MASTRO"
              glib:nick="moresco2016-dr9-mastro">
        <doc xml:space="preserve">[Moresco et al. (2016)][XMoresco2016]</doc>
      </member>
      <member name="busca2013_bao_wmap"
              value="8"
              c:identifier="NC_DATA_HUBBLE_BUSCA2013_BAO_WMAP"
              glib:nick="busca2013-bao-wmap">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="riess2008_hst"
              value="9"
              c:identifier="NC_DATA_HUBBLE_RIESS2008_HST"
              glib:nick="riess2008-hst">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="zhang2012"
              value="10"
              c:identifier="NC_DATA_HUBBLE_ZHANG2012"
              glib:nick="zhang2012">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="riess2016_hst_wfc3"
              value="11"
              c:identifier="NC_DATA_HUBBLE_RIESS2016_HST_WFC3"
              glib:nick="riess2016-hst-wfc3">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="DataPlanckLKL"
           c:symbol-prefix="data_planck_lkl"
           c:type="NcDataPlanckLKL"
           parent="NumCosmoMath.Data"
           glib:type-name="NcDataPlanckLKL"
           glib:get-type="nc_data_planck_lkl_get_type"
           glib:type-struct="DataPlanckLKLClass">
      <constructor name="full_new" c:identifier="nc_data_planck_lkl_full_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcDataPlanckLKL</doc>
          <type name="DataPlanckLKL" c:type="NcDataPlanckLKL*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">a Planck likelihood file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new" c:identifier="nc_data_planck_lkl_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcDataPlanckLKL</doc>
          <type name="DataPlanckLKL" c:type="NcDataPlanckLKL*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">a Planck likelihood file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_param_name"
              c:identifier="nc_data_planck_lkl_get_param_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a string constaining the param name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plik" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataPlanckLKL</doc>
            <type name="DataPlanckLKL" c:type="NcDataPlanckLKL*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">param index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_param_names"
              c:identifier="nc_data_planck_lkl_get_param_names">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of strings constaining the param names</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="plik" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataPlanckLKL</doc>
            <type name="DataPlanckLKL" c:type="NcDataPlanckLKL*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_hipert_boltzmann"
              c:identifier="nc_data_planck_lkl_set_hipert_boltzmann">
        <doc xml:space="preserve">Sets the #NcHIPertBoltzmann to be used in the likelihood calculation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plik" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataPlanckLKL</doc>
            <type name="DataPlanckLKL" c:type="NcDataPlanckLKL*"/>
          </instance-parameter>
          <parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </parameter>
        </parameters>
      </method>
      <property name="checksum" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="data-file"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hipert-boltzmann" writable="1" transfer-ownership="none">
        <type name="HIPertBoltzmann"/>
      </property>
      <property name="is-lensing" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="nparams" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Data" c:type="NcmData"/>
      </field>
      <field name="pb" readable="0" private="1">
        <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
      </field>
      <field name="filename" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="obj" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="is_lensing" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="nparams" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="ndata_entry" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="pnames" readable="0" private="1">
        <type name="utf8" c:type="gchar**"/>
      </field>
      <field name="chksum" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="cmb_data" readable="0" private="1">
        <type name="DataCMBDataType" c:type="NcDataCMBDataType"/>
      </field>
      <field name="data_params" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="check_data_params" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="data_TT" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="data_EE" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="data_BB" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="data_TE" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="data_TB" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="data_EB" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="data_PHIPHI" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="params" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="pfi_ctrl" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
      <field name="cosmo_ctrl" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
      <field name="cm2lnL" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="A_planck" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="param_map" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="DataPlanckLKLClass"
            c:type="NcDataPlanckLKLClass"
            glib:is-gtype-struct-for="DataPlanckLKL">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.DataClass" c:type="NcmDataClass"/>
      </field>
    </record>
    <class name="DataSNIACov"
           c:symbol-prefix="data_snia_cov"
           c:type="NcDataSNIACov"
           parent="NumCosmoMath.DataGaussCov"
           glib:type-name="NcDataSNIACov"
           glib:get-type="nc_data_snia_cov_get_type"
           glib:type-struct="DataSNIACovClass">
      <constructor name="new" c:identifier="nc_data_snia_cov_new">
        <doc xml:space="preserve">Creates a new empty #NcDataSNIACov object. If @use_norma is
true the object will use the correct Likelihood normalzation
when calculating $-2\ln(L)$</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created instance of #NcDataSNIACov.</doc>
          <type name="NumCosmoMath.Data" c:type="NcmData*"/>
        </return-value>
        <parameters>
          <parameter name="use_norma" transfer-ownership="none">
            <doc xml:space="preserve">Whether to use the correct Likelihood normalzation</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full" c:identifier="nc_data_snia_cov_new_full">
        <doc xml:space="preserve">Creates a new #NcDataSNIACov object and load with the catalog
in @filename. If @use_norma is true the object will use the
correct Likelihood normalzation when calculating $-2\ln(L)$</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created instance of #NcDataSNIACov.</doc>
          <type name="NumCosmoMath.Data" c:type="NcmData*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">catalog file name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="use_norma" transfer-ownership="none">
            <doc xml:space="preserve">Whether to use the correct Likelihood normalzation</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="estimate_width_colour"
              c:identifier="nc_data_snia_cov_estimate_width_colour">
        <doc xml:space="preserve">Estimate the values of width and colour from the catalog using the models in @mset
and fitting the width and colour as free parameters.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the chisq for the fit.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="NumCosmoMath.MSet" c:type="NcmMSet*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_estimated_colour"
              c:identifier="nc_data_snia_cov_get_estimated_colour">
        <doc xml:space="preserve">Estimate the values of width and colour from the catalog using the models in @mset
and fitting the width and colour as free parameters.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the colour vector.</doc>
          <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="NumCosmoMath.MSet" c:type="NcmMSet*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_estimated_mag"
              c:identifier="nc_data_snia_cov_get_estimated_mag">
        <doc xml:space="preserve">Estimate the values of width and colour from the catalog using the models in @mset
and fitting the width and colour as free parameters.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the magnitude vector.</doc>
          <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="NumCosmoMath.MSet" c:type="NcmMSet*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_estimated_width"
              c:identifier="nc_data_snia_cov_get_estimated_width">
        <doc xml:space="preserve">Estimate the values of width and colour from the catalog using the models in @mset
and fitting the width and colour as free parameters.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the width vector.</doc>
          <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="NumCosmoMath.MSet" c:type="NcmMSet*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="nc_data_snia_cov_load">
        <doc xml:space="preserve">Loads the catalog from @filename.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">file name of the catalog</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_txt" c:identifier="nc_data_snia_cov_load_txt">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_abs_mag_set"
              c:identifier="nc_data_snia_cov_peek_abs_mag_set">
        <doc xml:space="preserve">Gets the dataset array.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the dataset array</doc>
          <array zero-terminated="0" name="GLib.Array" c:type="GArray*">
            <type name="guint32"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_colour" c:identifier="nc_data_snia_cov_peek_colour">
        <doc xml:space="preserve">Gets the colour #NcmVector.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the colour #NcmVector</doc>
          <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_cov_full"
              c:identifier="nc_data_snia_cov_peek_cov_full">
        <doc xml:space="preserve">Gets the cov_full #NcmMatrix.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the cov_full #NcmMatrix</doc>
          <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_mag" c:identifier="nc_data_snia_cov_peek_mag">
        <doc xml:space="preserve">Gets the magnitude #NcmVector.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the magnitude #NcmVector</doc>
          <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_sigma_z" c:identifier="nc_data_snia_cov_peek_sigma_z">
        <doc xml:space="preserve">Gets the $\sigma_z$ #NcmVector.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the $\sigma_z$ #NcmVector</doc>
          <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_thirdpar"
              c:identifier="nc_data_snia_cov_peek_thirdpar">
        <doc xml:space="preserve">Gets the thirdpar #NcmVector.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the thirdpar #NcmVector</doc>
          <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_width" c:identifier="nc_data_snia_cov_peek_width">
        <doc xml:space="preserve">Gets the width #NcmVector.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the width #NcmVector</doc>
          <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_z_cmb" c:identifier="nc_data_snia_cov_peek_z_cmb">
        <doc xml:space="preserve">Gets the $z_\mathrm{cmb}$ #NcmVector.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the $z_\mathrm{cmb}$ #NcmVector</doc>
          <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_z_he" c:identifier="nc_data_snia_cov_peek_z_he">
        <doc xml:space="preserve">Gets the $z_\mathrm{he}$ #NcmVector.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the $z_\mathrm{he}$ #NcmVector</doc>
          <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save" c:identifier="nc_data_snia_cov_save">
        <doc xml:space="preserve">Saves the catalog in fits (cfitsio) format using @filename.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve">file name of the catalog</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="overwrite" transfer-ownership="none">
            <doc xml:space="preserve">whether to overwrite an already existing catalog</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_abs_mag_set"
              c:identifier="nc_data_snia_cov_set_abs_mag_set">
        <doc xml:space="preserve">Sets the array containing the indexes labeling to which set each SNIa
belongs.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
          <parameter name="abs_mag_set" transfer-ownership="none">
            <doc xml:space="preserve">the full convariance #NcmMatrix</doc>
            <array zero-terminated="0" name="GLib.Array" c:type="GArray*">
              <type name="guint32"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_colour" c:identifier="nc_data_snia_cov_set_colour">
        <doc xml:space="preserve">Sets the colour vector to @colour.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
          <parameter name="colour" transfer-ownership="none">
            <doc xml:space="preserve">the colour #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cov_full" c:identifier="nc_data_snia_cov_set_cov_full">
        <doc xml:space="preserve">Sets the full covariance for the system, the size of @cov_full,
must match the system size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
          <parameter name="cov_full" transfer-ownership="none">
            <doc xml:space="preserve">the full convariance #NcmMatrix</doc>
            <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mag" c:identifier="nc_data_snia_cov_set_mag">
        <doc xml:space="preserve">Sets the magnitude vector to @mag.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
          <parameter name="mag" transfer-ownership="none">
            <doc xml:space="preserve">the magnitude #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sigma_z" c:identifier="nc_data_snia_cov_set_sigma_z">
        <doc xml:space="preserve">Sets the $\sigma_z$ vector to @sigma_z.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
          <parameter name="sigma_z" transfer-ownership="none">
            <doc xml:space="preserve">the $\sigma_z$ #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_thirdpar" c:identifier="nc_data_snia_cov_set_thirdpar">
        <doc xml:space="preserve">Sets the thirdpar vector to @thirdpar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
          <parameter name="thirdpar" transfer-ownership="none">
            <doc xml:space="preserve">the thirdpar #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_width" c:identifier="nc_data_snia_cov_set_width">
        <doc xml:space="preserve">Sets the width vector to @width.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">the width #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_z_cmb" c:identifier="nc_data_snia_cov_set_z_cmb">
        <doc xml:space="preserve">Sets the $z_\mathrm{cmb}$ vector to @z_cmb.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
          <parameter name="z_cmb" transfer-ownership="none">
            <doc xml:space="preserve">the $z_\mathrm{cmb}$ #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_z_he" c:identifier="nc_data_snia_cov_set_z_he">
        <doc xml:space="preserve">Sets the $z_\mathrm{he}$ vector to @z_he.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
          <parameter name="z_he" transfer-ownership="none">
            <doc xml:space="preserve">the $z_\mathrm{he}$ #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sigma_int_len"
              c:identifier="nc_data_snia_cov_sigma_int_len">
        <doc xml:space="preserve">Gets the number of different intrinsic sigma parameters in the
catalog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of different sigma_int.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov.</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="absmag-set" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <property name="colour" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="cov-full" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Matrix"/>
      </property>
      <property name="has-complete-cov"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="magnitudes" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="sigma-thirdpar" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="sigma-z" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="thirdpar" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="width" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="z-He" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="z-cmb" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussCov" c:type="NcmDataGaussCov"/>
      </field>
      <field name="mu_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="uppertri_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="z_cmb" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="z_he" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="mag" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="width" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="colour" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="thirdpar" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="width_true" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="colour_true" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="mag_width_colour" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="sigma_z" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="sigma_thirdpar" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="cov_packed" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="cov_full" readable="0" private="1">
        <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="cov_full_diag" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="inv_cov_mm" readable="0" private="1">
        <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="inv_cov_mm_LU" readable="0" private="1">
        <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="has_complete_cov" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="cov_full_state" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="has_true_wc" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="dataset" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="dataset_size" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="dataset_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="data_init" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="cosmo_resample_ctrl" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
      <field name="dcov_resample_ctrl" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
      <field name="dcov_cov_full_ctrl" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
    </class>
    <record name="DataSNIACovClass"
            c:type="NcDataSNIACovClass"
            glib:is-gtype-struct-for="DataSNIACov">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussCovClass"
              c:type="NcmDataGaussCovClass"/>
      </field>
    </record>
    <enumeration name="DataSNIACovData"
                 glib:type-name="NcDataSNIACovData"
                 glib:get-type="nc_data_snia_cov_data_get_type"
                 c:type="NcDataSNIACovData">
      <doc xml:space="preserve">Data ordering of Version 0 (V0) data format.</doc>
      <member name="zcmb"
              value="0"
              c:identifier="NC_DATA_SNIA_COV_ZCMB"
              glib:nick="zcmb">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="zhe"
              value="1"
              c:identifier="NC_DATA_SNIA_COV_ZHE"
              glib:nick="zhe">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="sigma_z"
              value="2"
              c:identifier="NC_DATA_SNIA_COV_SIGMA_Z"
              glib:nick="sigma-z">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="mag"
              value="3"
              c:identifier="NC_DATA_SNIA_COV_MAG"
              glib:nick="mag">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="sigma_mag"
              value="4"
              c:identifier="NC_DATA_SNIA_COV_SIGMA_MAG"
              glib:nick="sigma-mag">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="width"
              value="5"
              c:identifier="NC_DATA_SNIA_COV_WIDTH"
              glib:nick="width">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="sigma_width"
              value="6"
              c:identifier="NC_DATA_SNIA_COV_SIGMA_WIDTH"
              glib:nick="sigma-width">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="colour"
              value="7"
              c:identifier="NC_DATA_SNIA_COV_COLOUR"
              glib:nick="colour">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="sigma_colour"
              value="8"
              c:identifier="NC_DATA_SNIA_COV_SIGMA_COLOUR"
              glib:nick="sigma-colour">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="thirdpar"
              value="9"
              c:identifier="NC_DATA_SNIA_COV_THIRDPAR"
              glib:nick="thirdpar">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="sigma_thirdpar"
              value="10"
              c:identifier="NC_DATA_SNIA_COV_SIGMA_THIRDPAR"
              glib:nick="sigma-thirdpar">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="diag_mag_width"
              value="11"
              c:identifier="NC_DATA_SNIA_COV_DIAG_MAG_WIDTH"
              glib:nick="diag-mag-width">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="diag_mag_colour"
              value="12"
              c:identifier="NC_DATA_SNIA_COV_DIAG_MAG_COLOUR"
              glib:nick="diag-mag-colour">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="diag_width_colour"
              value="13"
              c:identifier="NC_DATA_SNIA_COV_DIAG_WIDTH_COLOUR"
              glib:nick="diag-width-colour">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="absmag_set"
              value="14"
              c:identifier="NC_DATA_SNIA_COV_ABSMAG_SET"
              glib:nick="absmag-set">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="var_mag"
              value="15"
              c:identifier="NC_DATA_SNIA_COV_VAR_MAG"
              glib:nick="var-mag">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="var_width"
              value="16"
              c:identifier="NC_DATA_SNIA_COV_VAR_WIDTH"
              glib:nick="var-width">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="var_colour"
              value="17"
              c:identifier="NC_DATA_SNIA_COV_VAR_COLOUR"
              glib:nick="var-colour">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="var_mag_width"
              value="18"
              c:identifier="NC_DATA_SNIA_COV_VAR_MAG_WIDTH"
              glib:nick="var-mag-width">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="var_mag_colour"
              value="19"
              c:identifier="NC_DATA_SNIA_COV_VAR_MAG_COLOUR"
              glib:nick="var-mag-colour">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="var_width_colour"
              value="20"
              c:identifier="NC_DATA_SNIA_COV_VAR_WIDTH_COLOUR"
              glib:nick="var-width-colour">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <bitfield name="DataSNIACovDataInit"
              glib:type-name="NcDataSNIACovDataInit"
              glib:get-type="nc_data_snia_cov_data_init_get_type"
              c:type="NcDataSNIACovDataInit">
      <doc xml:space="preserve">Bitwise control of data initialization.</doc>
      <member name="zcmb"
              value="1"
              c:identifier="NC_DATA_SNIA_COV_INIT_ZCMB"
              glib:nick="zcmb">
        <doc xml:space="preserve">Redshift in the CMB frame.</doc>
      </member>
      <member name="zhe"
              value="2"
              c:identifier="NC_DATA_SNIA_COV_INIT_ZHE"
              glib:nick="zhe">
        <doc xml:space="preserve">Redshift in sun's frame.</doc>
      </member>
      <member name="sigma_z"
              value="4"
              c:identifier="NC_DATA_SNIA_COV_INIT_SIGMA_Z"
              glib:nick="sigma-z">
        <doc xml:space="preserve">Redshift error.</doc>
      </member>
      <member name="mag"
              value="8"
              c:identifier="NC_DATA_SNIA_COV_INIT_MAG"
              glib:nick="mag">
        <doc xml:space="preserve">Magnitude.</doc>
      </member>
      <member name="width"
              value="16"
              c:identifier="NC_DATA_SNIA_COV_INIT_WIDTH"
              glib:nick="width">
        <doc xml:space="preserve">Width (strecth).</doc>
      </member>
      <member name="colour"
              value="32"
              c:identifier="NC_DATA_SNIA_COV_INIT_COLOUR"
              glib:nick="colour">
        <doc xml:space="preserve">Colour.</doc>
      </member>
      <member name="thirdpar"
              value="64"
              c:identifier="NC_DATA_SNIA_COV_INIT_THIRDPAR"
              glib:nick="thirdpar">
        <doc xml:space="preserve">Third parameter.</doc>
      </member>
      <member name="absmag_set"
              value="128"
              c:identifier="NC_DATA_SNIA_COV_INIT_ABSMAG_SET"
              glib:nick="absmag-set">
        <doc xml:space="preserve">Data set index.</doc>
      </member>
      <member name="cov_full"
              value="256"
              c:identifier="NC_DATA_SNIA_COV_INIT_COV_FULL"
              glib:nick="cov-full">
        <doc xml:space="preserve">Full covariance matrix.</doc>
      </member>
    </bitfield>
    <enumeration name="DataSNIACovDataV1"
                 glib:type-name="NcDataSNIACovDataV1"
                 glib:get-type="nc_data_snia_cov_data_v1_get_type"
                 c:type="NcDataSNIACovDataV1">
      <doc xml:space="preserve">Data ordering of Version 1 (V1) data format.</doc>
      <member name="zcmb"
              value="0"
              c:identifier="NC_DATA_SNIA_COV_V1_ZCMB"
              glib:nick="zcmb">
        <doc xml:space="preserve">Redshift in the CMB frame.</doc>
      </member>
      <member name="zhe"
              value="1"
              c:identifier="NC_DATA_SNIA_COV_V1_ZHE"
              glib:nick="zhe">
        <doc xml:space="preserve">Redshift in sun's frame.</doc>
      </member>
      <member name="sigma_z"
              value="2"
              c:identifier="NC_DATA_SNIA_COV_V1_SIGMA_Z"
              glib:nick="sigma-z">
        <doc xml:space="preserve">Redshift error.</doc>
      </member>
      <member name="mag"
              value="3"
              c:identifier="NC_DATA_SNIA_COV_V1_MAG"
              glib:nick="mag">
        <doc xml:space="preserve">Magnitude.</doc>
      </member>
      <member name="width"
              value="4"
              c:identifier="NC_DATA_SNIA_COV_V1_WIDTH"
              glib:nick="width">
        <doc xml:space="preserve">Width (strecth).</doc>
      </member>
      <member name="colour"
              value="5"
              c:identifier="NC_DATA_SNIA_COV_V1_COLOUR"
              glib:nick="colour">
        <doc xml:space="preserve">Colour.</doc>
      </member>
      <member name="thirdpar"
              value="6"
              c:identifier="NC_DATA_SNIA_COV_V1_THIRDPAR"
              glib:nick="thirdpar">
        <doc xml:space="preserve">Third parameter.</doc>
      </member>
      <member name="sigma_thirdpar"
              value="7"
              c:identifier="NC_DATA_SNIA_COV_V1_SIGMA_THIRDPAR"
              glib:nick="sigma-thirdpar">
        <doc xml:space="preserve">Error on third parameter.</doc>
      </member>
      <member name="absmag_set"
              value="8"
              c:identifier="NC_DATA_SNIA_COV_V1_ABSMAG_SET"
              glib:nick="absmag-set">
        <doc xml:space="preserve">Data set index.</doc>
      </member>
      <member name="mag_mag"
              value="9"
              c:identifier="NC_DATA_SNIA_COV_V1_MAG_MAG"
              glib:nick="mag-mag">
        <doc xml:space="preserve">Covariance mag-mag.</doc>
      </member>
      <member name="mag_width"
              value="10"
              c:identifier="NC_DATA_SNIA_COV_V1_MAG_WIDTH"
              glib:nick="mag-width">
        <doc xml:space="preserve">Covariance mag-width.</doc>
      </member>
      <member name="mag_colour"
              value="11"
              c:identifier="NC_DATA_SNIA_COV_V1_MAG_COLOUR"
              glib:nick="mag-colour">
        <doc xml:space="preserve">Covariance mag-colour.</doc>
      </member>
      <member name="width_width"
              value="12"
              c:identifier="NC_DATA_SNIA_COV_V1_WIDTH_WIDTH"
              glib:nick="width-width">
        <doc xml:space="preserve">Covariance width-width.</doc>
      </member>
      <member name="width_colour"
              value="13"
              c:identifier="NC_DATA_SNIA_COV_V1_WIDTH_COLOUR"
              glib:nick="width-colour">
        <doc xml:space="preserve">Covariance width-colour.</doc>
      </member>
      <member name="colour_colour"
              value="14"
              c:identifier="NC_DATA_SNIA_COV_V1_COLOUR_COLOUR"
              glib:nick="colour-colour">
        <doc xml:space="preserve">Covariance colour-colour.</doc>
      </member>
    </enumeration>
    <enumeration name="DataSNIACovOrder"
                 glib:type-name="NcDataSNIACovOrder"
                 glib:get-type="nc_data_snia_cov_order_get_type"
                 c:type="NcDataSNIACovOrder">
      <doc xml:space="preserve">Data ordering for covariance.</doc>
      <member name="mag_mag"
              value="0"
              c:identifier="NC_DATA_SNIA_COV_ORDER_MAG_MAG"
              glib:nick="mag-mag">
        <doc xml:space="preserve">mag-mag.</doc>
      </member>
      <member name="mag_width"
              value="1"
              c:identifier="NC_DATA_SNIA_COV_ORDER_MAG_WIDTH"
              glib:nick="mag-width">
        <doc xml:space="preserve">mag-width.</doc>
      </member>
      <member name="mag_colour"
              value="2"
              c:identifier="NC_DATA_SNIA_COV_ORDER_MAG_COLOUR"
              glib:nick="mag-colour">
        <doc xml:space="preserve">mag-colour.</doc>
      </member>
      <member name="width_width"
              value="3"
              c:identifier="NC_DATA_SNIA_COV_ORDER_WIDTH_WIDTH"
              glib:nick="width-width">
        <doc xml:space="preserve">width-width.</doc>
      </member>
      <member name="width_colour"
              value="4"
              c:identifier="NC_DATA_SNIA_COV_ORDER_WIDTH_COLOUR"
              glib:nick="width-colour">
        <doc xml:space="preserve">width-colour.</doc>
      </member>
      <member name="colour_colour"
              value="5"
              c:identifier="NC_DATA_SNIA_COV_ORDER_COLOUR_COLOUR"
              glib:nick="colour-colour">
        <doc xml:space="preserve">colour-colour.</doc>
      </member>
    </enumeration>
    <enumeration name="DataSNIAId"
                 glib:type-name="NcDataSNIAId"
                 glib:get-type="nc_data_snia_id_get_type"
                 c:type="NcDataSNIAId">
      <doc xml:space="preserve">FIXME</doc>
      <member name="simple_gold_157"
              value="0"
              c:identifier="NC_DATA_SNIA_SIMPLE_GOLD_157"
              glib:nick="simple-gold-157">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="simple_gold_182"
              value="1"
              c:identifier="NC_DATA_SNIA_SIMPLE_GOLD_182"
              glib:nick="simple-gold-182">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="simple_gold_182_full"
              value="2"
              c:identifier="NC_DATA_SNIA_SIMPLE_GOLD_182_FULL"
              glib:nick="simple-gold-182-full">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="simple_essence"
              value="3"
              c:identifier="NC_DATA_SNIA_SIMPLE_ESSENCE"
              glib:nick="simple-essence">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="simple_legacy"
              value="4"
              c:identifier="NC_DATA_SNIA_SIMPLE_LEGACY"
              glib:nick="simple-legacy">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="simple_union"
              value="5"
              c:identifier="NC_DATA_SNIA_SIMPLE_UNION"
              glib:nick="simple-union">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="simple_cfa3"
              value="6"
              c:identifier="NC_DATA_SNIA_SIMPLE_CfA3"
              glib:nick="simple-cfa3">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="simple_union2"
              value="7"
              c:identifier="NC_DATA_SNIA_SIMPLE_UNION2"
              glib:nick="simple-union2">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="simple_union2_1"
              value="8"
              c:identifier="NC_DATA_SNIA_SIMPLE_UNION2_1"
              glib:nick="simple-union2-1">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="simple_sdss_emille"
              value="9"
              c:identifier="NC_DATA_SNIA_SIMPLE_SDSS_EMILLE"
              glib:nick="simple-sdss-emille">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="cov_snls3_sys_stat"
              value="10"
              c:identifier="NC_DATA_SNIA_COV_SNLS3_SYS_STAT"
              glib:nick="cov-snls3-sys-stat">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="cov_snls3_stat_only"
              value="11"
              c:identifier="NC_DATA_SNIA_COV_SNLS3_STAT_ONLY"
              glib:nick="cov-snls3-stat-only">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="cov_jla_snls3_sdss_sys_stat"
              value="12"
              c:identifier="NC_DATA_SNIA_COV_JLA_SNLS3_SDSS_SYS_STAT"
              glib:nick="cov-jla-snls3-sdss-sys-stat">
        <doc xml:space="preserve">JLA SNIa compilation, already includes intrisic, redshift and peculiar velocity variances.</doc>
      </member>
      <member name="cov_jla_snls3_sdss_sys_stat_cmpl"
              value="13"
              c:identifier="NC_DATA_SNIA_COV_JLA_SNLS3_SDSS_SYS_STAT_CMPL"
              glib:nick="cov-jla-snls3-sdss-sys-stat-cmpl">
        <doc xml:space="preserve">JLA SNIa compilation, complete covariance, does *not* include intrisic, redshift and peculiar velocity variances.</doc>
      </member>
    </enumeration>
    <class name="DataXcor"
           c:symbol-prefix="data_xcor"
           c:type="NcDataXcor"
           parent="NumCosmoMath.DataGaussCov"
           glib:type-name="NcDataXcor"
           glib:get-type="nc_data_xcor_get_type"
           glib:type-struct="DataXcorClass">
      <constructor name="new" c:identifier="nc_data_xcor_new">
        <return-value transfer-ownership="full">
          <type name="NumCosmoMath.Data" c:type="NcmData*"/>
        </return-value>
        <parameters>
          <parameter name="use_norma" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full" c:identifier="nc_data_xcor_new_full">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="DataXcor" c:type="NcDataXcor*"/>
        </return-value>
        <parameters>
          <parameter name="ell" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="nobs" transfer-ownership="none">
            <doc xml:space="preserve">a #guint</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="X_matrix_1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
          </parameter>
          <parameter name="X_matrix_2" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
          </parameter>
          <parameter name="mixing" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
          </parameter>
          <parameter name="xc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcor</doc>
            <type name="Xcor" c:type="NcXcor*"/>
          </parameter>
          <parameter name="Clobs" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="use_norma" transfer-ownership="none">
            <doc xml:space="preserve">a #gboolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="X-matrix-1" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Matrix"/>
      </property>
      <property name="X-matrix-2" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Matrix"/>
      </property>
      <property name="cldata" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="ell" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="mixing" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Matrix"/>
      </property>
      <property name="nobs" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="obs-pos" writable="1" transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="xc" writable="1" transfer-ownership="none">
        <type name="Xcor"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussCov" c:type="NcmDataGaussCov"/>
      </field>
      <field name="mu_len" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="nobs" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="nell" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="ell" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="cldata" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="clth" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="ncl" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="clorder" readable="0" private="1">
        <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="X_matrix_1" readable="0" private="1">
        <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="X_matrix_2" readable="0" private="1">
        <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="mixing" readable="0" private="1">
        <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
      </field>
      <field name="xc" readable="0" private="1">
        <type name="Xcor" c:type="NcXcor*"/>
      </field>
      <field name="cosmo_ctrl" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
      <field name="xcl_ctrl_array" readable="0" private="1">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="DataXcorClass"
            c:type="NcDataXcorClass"
            glib:is-gtype-struct-for="DataXcor">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.DataGaussCovClass"
              c:type="NcmDataGaussCovClass"/>
      </field>
    </record>
    <class name="DensityProfile"
           c:symbol-prefix="density_profile"
           c:type="NcDensityProfile"
           parent="GObject.Object"
           glib:type-name="NcDensityProfile"
           glib:get-type="nc_density_profile_get_type"
           glib:type-struct="DensityProfileClass">
      <constructor name="new_from_name"
                   c:identifier="nc_density_profile_new_from_name">
        <doc xml:space="preserve">This function returns a new #NcDensityProfile whose type is defined by @density_profile_name string.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcDensityProfile.</doc>
          <type name="DensityProfile" c:type="NcDensityProfile*"/>
        </return-value>
        <parameters>
          <parameter name="density_profile_name" transfer-ownership="none">
            <doc xml:space="preserve">"#NcDensityProfileNFW".</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_density_profile_clear">
        <doc xml:space="preserve">Atomically decrements the reference count of @dp by one. If the reference count drops to 0,
all memory allocated by @dp is released. Set the pointer to NULL;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDensityProfile.</doc>
            <type name="DensityProfile" c:type="NcDensityProfile**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="eval_fourier" invoker="eval_fourier">
        <doc xml:space="preserve">This function computes the density profile in the Fourier space.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of the density profile in the Fourier space.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDensityProfile</doc>
            <type name="DensityProfile" c:type="NcDensityProfile*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="M" transfer-ownership="none">
            <doc xml:space="preserve">mass</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="eval_fourier"
              c:identifier="nc_density_profile_eval_fourier">
        <doc xml:space="preserve">This function computes the density profile in the Fourier space.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of the density profile in the Fourier space.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDensityProfile</doc>
            <type name="DensityProfile" c:type="NcDensityProfile*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="M" transfer-ownership="none">
            <doc xml:space="preserve">mass</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_density_profile_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @dp by one. If the reference count drops to 0,
all memory allocated by @dp is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDensityProfile.</doc>
            <type name="DensityProfile" c:type="NcDensityProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DensityProfileClass"
            c:type="NcDensityProfileClass"
            glib:is-gtype-struct-for="DensityProfile">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="eval_fourier">
        <callback name="eval_fourier">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The value of the density profile in the Fourier space.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="dp" transfer-ownership="none">
              <doc xml:space="preserve">a #NcDensityProfile</doc>
              <type name="DensityProfile" c:type="NcDensityProfile*"/>
            </parameter>
            <parameter name="model" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHICosmo</doc>
              <type name="HICosmo" c:type="NcHICosmo*"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">mode</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="M" transfer-ownership="none">
              <doc xml:space="preserve">mass</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="z" transfer-ownership="none">
              <doc xml:space="preserve">redshift</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DensityProfileNFW"
           c:symbol-prefix="density_profile_nfw"
           c:type="NcDensityProfileNFW"
           parent="DensityProfile"
           glib:type-name="NcDensityProfileNFW"
           glib:get-type="nc_density_profile_nfw_get_type"
           glib:type-struct="DensityProfileNFWClass">
      <constructor name="new" c:identifier="nc_density_profile_nfw_new">
        <doc xml:space="preserve">This function returns a #NcDensityProfile with a #NcDensityProfileNFW implementation.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcDensityProfile.</doc>
          <type name="DensityProfile" c:type="NcDensityProfile*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="DensityProfile" c:type="NcDensityProfile"/>
      </field>
      <field name="Delta" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="DensityProfileNFWClass"
            c:type="NcDensityProfileNFWClass"
            glib:is-gtype-struct-for="DensityProfileNFW">
      <field name="parent_class" readable="0" private="1">
        <type name="DensityProfileClass" c:type="NcDensityProfileClass"/>
      </field>
    </record>
    <class name="Distance"
           c:symbol-prefix="distance"
           c:type="NcDistance"
           parent="GObject.Object"
           glib:type-name="NcDistance"
           glib:get-type="nc_distance_get_type"
           glib:type-struct="DistanceClass">
      <constructor name="new" c:identifier="nc_distance_new">
        <doc xml:space="preserve">Creates a new #NcDistance object optimized to perform distance calculations
to redshift up to $z_f$.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcDistance</doc>
          <type name="Distance" c:type="NcDistance*"/>
        </return-value>
        <parameters>
          <parameter name="zf" transfer-ownership="none">
            <doc xml:space="preserve">final redshift $z_f$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_distance_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance**"/>
          </parameter>
        </parameters>
      </function>
      <method name="DA_r" c:identifier="nc_distance_DA_r">
        <doc xml:space="preserve">$D_A(z) / (c r_{z_d})$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">the redshift $z$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="DH_r" c:identifier="nc_distance_DH_r">
        <doc xml:space="preserve">$H(z) / (c r_{z_d})$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">the redshift $z$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="Omega_k0" c:identifier="nc_distance_Omega_k0">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="acoustic_scale" c:identifier="nc_distance_acoustic_scale">
        <doc xml:space="preserve">Compute the acoustic scale $l_A (z_\star)$ at $z_\star$ [nc_distance_decoupling_redshift()],
\begin{equation}
l_A(z_\star) = \pi \frac{D_t (z_\star)}{r_s (z_\star)},
\end{equation}
where $D_t(z_\star)$ is the comoving transverse distance [nc_distance_transverse()]
and $r_s(z_\star)$ is the sound horizon [nc_distance_sound_horizon()] both
both computed at $z_\star$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$l_A(z_\star)$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="angular_diameter"
              c:identifier="nc_distance_angular_diameter">
        <doc xml:space="preserve">Compute the angular diameter $D_A(z)$  defined in Eq. $\eqref{eq:def:Dl}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$D_A(z)$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="angular_diameter_curvature_scale"
              c:identifier="nc_distance_angular_diameter_curvature_scale">
        <doc xml:space="preserve">We define the angular diameter curvature scale $D_a(z_\star)$ as
$$D_a(z_\star) = \frac{E(z_\star)}{1 + z_\star} D_t(z_\star),$$
where $z_\star$ is the decoupling redshift, given by [nc_distance_decoupling_redshift()],
$E(z_\star)$ is the normalized Hubble function [Eq. $\eqref{eq:def:Ez}$] and
$D_t(z_\star)$ is the transverse comoving distance [Eq. $\eqref{eq:def:Dt}$] both computed at $z_\star$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$D_a(z_\star)$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="bao_A_scale" c:identifier="nc_distance_bao_A_scale">
        <doc xml:space="preserve">Bao 'A' scale D_v(z) sqrt(Omega_m0) / z -- (arXiv:astro-ph/0501171)
The acoustic scale is defined as
$$ A \equiv D_V (z) \frac{\sqrt{\Omega_{m0} H_0^2}}{z c},$$
where $\Omega_{m0}$ is the matter density parameter [nc_hicosmo_Omega_m0()], $c$ is the speed of light [ncm_c_c()],
$H_0$ is the Hubble parameter [nc_hicosmo_H0()] and $D_V(z)$ is the dilation scale [nc_distance_dilation_scale()].
See Section 4.5 from [Eisenstein et al. (2005)][XEisenstein2005].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$A(z)$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">the redshift $z$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="bao_r_Dv" c:identifier="nc_distance_bao_r_Dv">
        <doc xml:space="preserve">$r(z_d) / D_V(z)$ -- (arXiv:0705.3323).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">the redshift $z$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="comoving" c:identifier="nc_distance_comoving">
        <doc xml:space="preserve">Calculate the comoving distance $D_c (z)$ as defined in Eq. $\eqref{eq:def:Dc}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$D_c(z)$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="comoving_lss" c:identifier="nc_distance_comoving_lss">
        <doc xml:space="preserve">Compute the comoving distance $D_c(z)$ [Eq. \eqref{eq:def:Dc}] at the
decoupling redshift $z_\star$ [nc_distance_decoupling_redshift()].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$D_c(z_\star)$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="conformal_lookback_time"
              c:identifier="nc_distance_conformal_lookback_time">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="conformal_time" c:identifier="nc_distance_conformal_time">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="cosmic_time" c:identifier="nc_distance_cosmic_time">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="decoupling_redshift"
              c:identifier="nc_distance_decoupling_redshift">
        <doc xml:space="preserve">The decoupling redshift $z_\star$ corresponds to the epoch of
the last scattering surface of the cosmic microwave background photons.

This function computes $z_\star$ using [nc_hicosmo_z_lss()], if @cosmo implements
it, or using Hu &amp; Sugiyama fitting formula [Hu (1996)][XHu1996],
$$ z_\star = 1048 \left(1 + 1.24 \times 10^{-3}  (\Omega_{b0} h^2)^{-0.738}\right) \left(1 + g_1 (\Omega_{m0} h^2)^{g_2}\right),$$
where $\Omega_{b0} h^2$ [nc_hicosmo_Omega_b0h2()] and $\Omega_{m0} h^2$ [nc_hicosmo_Omega_m0h2()]
are, respectively, the baryonic and matter density parameters times the square
of the dimensionless Hubble parameter $h$,  $H_0 = 100 \, h \, \text{km/s} \, \text{Mpc}^{-1}$.
The parameters $g_1$ and $g_2$ are given by
$$g_1 = \frac{0.0783 (\Omega_{b0} h^2)^{-0.238}}{(1 + 39.5 (\Omega_{b0} h^2)^{0.763})}
\; \text{and} \; g_2 = \frac{0.56}{\left(1 + 21.1 (\Omega_{b0} h^2)^{1.81}\right)}.$$</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$z_\star$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dilation_scale" c:identifier="nc_distance_dilation_scale">
        <doc xml:space="preserve">The dilation scale is the spherically averaged distance for perturbations along and
orthogonal to the line of sight,
$$D_V(z) = \left[D_{H_0}^2 D_t(z)^2 \frac{cz}{H(z)} \right]^{1/3},$$
where $D_t(z)$ is the transverse comoving distance [Eq. $\eqref{eq:def:Dt}$], $c$ is the speed of light
[ncm_c_c()] and $H(z)$ is the Hubble function [nc_hicosmo_H()].
See [Eisenstein et al. (2005)][XEisenstein2005].

This function computes the dimensionless dilation scale:
$$D_V^\star(z) = \left[D_t(z)^2 \frac{z}{E(z)} \right]^{1/3} = \frac{D_V(z)}{D_{H_0}},$$
where $E(z)$ is the normalized Hubble function [nc_hicosmo_E2()].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$D_V^\star(z)$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="dmodulus" c:identifier="nc_distance_dmodulus">
        <doc xml:space="preserve">Compute the distance modulus $\delta\mu(z)$ defined in Eq. $\eqref{eq:def:dmu}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\delta\mu(z)$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="dmodulus_hef" c:identifier="nc_distance_dmodulus_hef">
        <doc xml:space="preserve">Calculate the distance modulus [Eq. $\eqref{eq:def:dmu}$] using the frame corrected luminosity
distance [nc_distance_luminosity_hef()].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\delta\mu(z_{hef},z_{CMB})$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z_he" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z_{he}$ in our local frame</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z_cmb" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z_{CMB}$ in the CMB frame</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="drag_redshift" c:identifier="nc_distance_drag_redshift">
        <doc xml:space="preserve">Drag redshift is the epoch at which baryons were released from photons.

This function computes $z_d$ using the fitting formula given in
[Eisenstein &amp; Hu (1998)][XEisenstein1998],
$$z_d = \frac{1291 (\Omega_{m0} h^2)^{0.251}}{(1 + 0.659 (\Omega_{m0} h^2)^{0.828})}
\left(1 + b_1 (\Omega_{b0} h^2)^{b_2}\right),$$
where $\Omega_{b0} h^2$ [nc_hicosmo_Omega_b0h2()] and $\Omega_{m0} h^2$ [nc_hicosmo_Omega_m0h2()]
are, respectively, the baryonic and matter density parameters times the square
of the dimensionless Hubble parameter $h$,  $H_0 = 100 \, h \, \text{km/s} \, \text{Mpc}^{-1}$.
The parameters $b_1$ and $b_2$ are given by
$$b_1 = 0.313 (\Omega_{m0} h^2)^{-0.419} \left(1 + 0.607 (\Omega_{m0} h^2)^{0.674}\right) \;
\text{and} \; b_2 = 0.238 (\Omega_{m0} h^2)^{0.223}.$$</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$z_d$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dsound_horizon_dz"
              c:identifier="nc_distance_dsound_horizon_dz">
        <doc xml:space="preserve">Calculate the sound horizon [nc_distance_sound_horizon()] derivative with respect to $z$,
$$\frac{d r_s(z)}{dz} = - \frac{c_s(z)}{E(z)},$$
where $c_s(z) / E(z)$ is given by Eq. \eqref{eq:def:rs:integrand}.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\frac{d r_s(z)}{dz}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="dtransverse_dz" c:identifier="nc_distance_dtransverse_dz">
        <doc xml:space="preserve">Compute the derivative of $D_t(z)$ with respect to $z$ defined in
Eq. $\eqref{eq:def:Dt}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\frac{dD_t(z)}{dz}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_distance_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hubble" c:identifier="nc_distance_hubble">
        <doc xml:space="preserve">Calculate the curvature scale today as defined in Eq $\eqref{eq:def:DH}$ in
units of megaparsec (Mpc) [ncm_c_Mpc()].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$D_{H0}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookback_time" c:identifier="nc_distance_lookback_time">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="luminosity" c:identifier="nc_distance_luminosity">
        <doc xml:space="preserve">Compute the luminosity distance $D_l(z)$  defined in Eq. $\eqref{eq:def:Dl}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$D_l(z)$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="luminosity_hef" c:identifier="nc_distance_luminosity_hef">
        <doc xml:space="preserve">Calculate the luminosity distance $D_l$ corrected to our local frame.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$D_l(z_{hef},z_{CMB})$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z_he" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z_{he}$ in our local frame</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z_cmb" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z_{CMB}$ in the CMB frame</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="nc_distance_prepare">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_if_needed"
              c:identifier="nc_distance_prepare_if_needed">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="r_zd" c:identifier="nc_distance_r_zd">
        <doc xml:space="preserve">$r(z_d)$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_distance_ref">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Distance" c:type="NcDistance*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="require_zf" c:identifier="nc_distance_require_zf">
        <doc xml:space="preserve">Requires the final redshift of at least $z_f$ = @zf.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="zf" transfer-ownership="none">
            <doc xml:space="preserve">maximum redshift required</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="shift_parameter"
              c:identifier="nc_distance_shift_parameter">
        <doc xml:space="preserve">The shift parameter $R(z)$ is defined as
\begin{align}
R(z) &amp;=&amp; \frac{\sqrt{\Omega_{m0} H_0^2}}{c} (1 + z) D_A(z) \\
&amp;=&amp; \sqrt{\Omega_{m0}} D_t(z),
\end{align}
where $\Omega_{m0}$ is the matter density paremeter [nc_hicosmo_Omega_m0()],
$D_A(z) = D_{H_0} D_t(z) / (1 + z)$ is the angular diameter distance and
$D_t(z)$ is the tranverse comoving distance [Eq. $\eqref{eq:def:Dt}$].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$R(z)$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="shift_parameter_lss"
              c:identifier="nc_distance_shift_parameter_lss">
        <doc xml:space="preserve">Compute the shift parameter $R(z)$ [nc_distance_shift_parameter()] at the
decoupling redshift $z_\star$ [nc_distance_decoupling_redshift()].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$R(z_\star)$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sound_horizon" c:identifier="nc_distance_sound_horizon">
        <doc xml:space="preserve">Compute the sound horizon $r_s$,
\begin{equation}
r_s (z) = \int_{z}^\infty \frac{c_s(z^\prime)}{E(z^\prime)} dz^\prime,
\end{equation}
where $c^{b\gamma}_s$ is the baryon-photon plasma speed of sound
[nc_hicosmo_bgp_cs2()] and $E(z)$ is the normalized Hubble function
[nc_hicosmo_E()].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$r_s(z)$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="theta100CMB" c:identifier="nc_distance_theta100CMB">
        <doc xml:space="preserve">Compute the $100\theta_\mathrm{CMB}$ angle at $z_\star$ [nc_distance_decoupling_redshift()],
\begin{equation}
100\theta_\mathrm{CMB} = 100 \times \frac{r_s (z_\star)}{D_t (z_\star)},
\end{equation}
where $D_t(z_\star)$ is the comoving transverse distance [nc_distance_transverse()]
and $r_s(z_\star)$ is the sound horizon [nc_distance_sound_horizon()] both
both computed at $z_\star$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$100\theta_\mathrm{CMB}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="transverse" c:identifier="nc_distance_transverse">
        <doc xml:space="preserve">Compute the transverse comoving distance $D_t (z)$ defined in Eq. $\eqref{eq:def:Dt}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$D_t(z)$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="zf" writable="1" construct="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="comoving_distance_spline" readable="0" private="1">
        <type name="NumCosmoMath.OdeSpline" c:type="NcmOdeSpline*"/>
      </field>
      <field name="comoving_distance_cache" readable="0" private="1">
        <type name="NumCosmoMath.FunctionCache" c:type="NcmFunctionCache*"/>
      </field>
      <field name="time_cache" readable="0" private="1">
        <type name="NumCosmoMath.FunctionCache" c:type="NcmFunctionCache*"/>
      </field>
      <field name="lookback_time_cache" readable="0" private="1">
        <type name="NumCosmoMath.FunctionCache" c:type="NcmFunctionCache*"/>
      </field>
      <field name="conformal_time_cache" readable="0" private="1">
        <type name="NumCosmoMath.FunctionCache" c:type="NcmFunctionCache*"/>
      </field>
      <field name="sound_horizon_cache" readable="0" private="1">
        <type name="NumCosmoMath.FunctionCache" c:type="NcmFunctionCache*"/>
      </field>
      <field name="ctrl" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
      <field name="zf" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="use_cache" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="DistanceClass"
            c:type="NcDistanceClass"
            glib:is-gtype-struct-for="Distance">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="DistanceFunc" c:type="NcDistanceFunc">
      <field name="name" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="desc" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="f" writable="1">
        <type name="DistanceFunc0" c:type="NcDistanceFunc0"/>
      </field>
      <field name="impl" writable="1">
        <type name="HICosmoImpl" c:type="NcHICosmoImpl"/>
      </field>
    </record>
    <callback name="DistanceFunc0" c:type="NcDistanceFunc0">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="dist" transfer-ownership="none">
          <type name="Distance" c:type="NcDistance*"/>
        </parameter>
        <parameter name="cosmo" transfer-ownership="none">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="DistanceFunc1" c:type="NcDistanceFunc1">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="dist" transfer-ownership="none">
          <type name="Distance" c:type="NcDistance*"/>
        </parameter>
        <parameter name="cosmo" transfer-ownership="none">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
        <parameter name="z" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <record name="DistanceFuncZ" c:type="NcDistanceFuncZ">
      <field name="name" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="desc" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="f" writable="1">
        <type name="DistanceFunc1" c:type="NcDistanceFunc1"/>
      </field>
      <field name="impl" writable="1">
        <type name="HICosmoImpl" c:type="NcHICosmoImpl"/>
      </field>
    </record>
    <class name="GalaxyAcf"
           c:symbol-prefix="galaxy_acf"
           c:type="NcGalaxyAcf"
           parent="GObject.Object"
           glib:type-name="NcGalaxyAcf"
           glib:get-type="nc_galaxy_acf_get_type"
           glib:type-struct="GalaxyAcfClass">
      <constructor name="new" c:identifier="nc_galaxy_acf_new">
        <return-value transfer-ownership="full">
          <type name="GalaxyAcf" c:type="NcGalaxyAcf*"/>
        </return-value>
        <parameters>
          <parameter name="gf" transfer-ownership="none">
            <type name="GrowthFunc" c:type="NcGrowthFunc*"/>
          </parameter>
          <parameter name="dist" transfer-ownership="none">
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
          <parameter name="tf" transfer-ownership="none">
            <type name="TransferFunc" c:type="NcTransferFunc*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="prepare_psi" c:identifier="nc_galaxy_acf_prepare_psi">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="acf" transfer-ownership="none">
            <type name="GalaxyAcf" c:type="NcGalaxyAcf*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="l" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="psi" c:identifier="nc_galaxy_acf_psi">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="acf" transfer-ownership="none">
            <type name="GalaxyAcf" c:type="NcGalaxyAcf*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="l" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="gf" readable="0" private="1">
        <type name="GrowthFunc" c:type="NcGrowthFunc*"/>
      </field>
      <field name="dist" readable="0" private="1">
        <type name="Distance" c:type="NcDistance*"/>
      </field>
      <field name="tf" readable="0" private="1">
        <type name="TransferFunc" c:type="NcTransferFunc*"/>
      </field>
      <field name="s" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="b" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="GalaxyAcfClass"
            c:type="NcGalaxyAcfClass"
            glib:is-gtype-struct-for="GalaxyAcf">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="GrowthFunc"
           c:symbol-prefix="growth_func"
           c:type="NcGrowthFunc"
           parent="GObject.Object"
           glib:type-name="NcGrowthFunc"
           glib:get-type="nc_growth_func_get_type"
           glib:type-struct="GrowthFuncClass">
      <constructor name="new" c:identifier="nc_growth_func_new">
        <doc xml:space="preserve">This function allocates memory for a new #NcGrowthFunc object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcGrowthFunc.</doc>
          <type name="GrowthFunc" c:type="NcGrowthFunc*"/>
        </return-value>
      </constructor>
      <function name="clear" c:identifier="nc_growth_func_clear">
        <doc xml:space="preserve">Atomically decrements the reference count of @gf by one. If the reference count drops to 0,
all memory allocated by @gf is released. Set pointer to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="gf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcGrowthFunc</doc>
            <type name="GrowthFunc" c:type="NcGrowthFunc**"/>
          </parameter>
        </parameters>
      </function>
      <method name="eval" c:identifier="nc_growth_func_eval">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The normalized growth function at @z.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="gf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcGrowthFunc</doc>
            <type name="GrowthFunc" c:type="NcGrowthFunc*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_both" c:identifier="nc_growth_func_eval_both">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcGrowthFunc</doc>
            <type name="GrowthFunc" c:type="NcGrowthFunc*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="d"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Growth function</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="f"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Growth function derivative</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_deriv" c:identifier="nc_growth_func_eval_deriv">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="gf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcGrowthFunc</doc>
            <type name="GrowthFunc" c:type="NcGrowthFunc*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_growth_func_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @gf by one. If the reference count drops to 0,
all memory allocated by @gf is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcGrowthFunc</doc>
            <type name="GrowthFunc" c:type="NcGrowthFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dust_norma_Da0"
              c:identifier="nc_growth_func_get_dust_norma_Da0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="gf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcGrowthFunc</doc>
            <type name="GrowthFunc" c:type="NcGrowthFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="nc_growth_func_prepare">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcGrowthFunc</doc>
            <type name="GrowthFunc" c:type="NcGrowthFunc*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_if_needed"
              c:identifier="nc_growth_func_prepare_if_needed">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="gf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcGrowthFunc</doc>
            <type name="GrowthFunc" c:type="NcGrowthFunc*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_growth_func_ref">
        <doc xml:space="preserve">Increases the reference count of @gf atomically.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@gf.</doc>
          <type name="GrowthFunc" c:type="NcGrowthFunc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="gf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcGrowthFunc</doc>
            <type name="GrowthFunc" c:type="NcGrowthFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="s" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="cvode" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="yv" introspectable="0" readable="0" private="1">
        <type c:type="N_Vector"/>
      </field>
      <field name="yQ" introspectable="0" readable="0" private="1">
        <type c:type="N_Vector"/>
      </field>
      <field name="zf" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="Da0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="ctrl_cosmo" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
    </class>
    <record name="GrowthFuncClass"
            c:type="NcGrowthFuncClass"
            glib:is-gtype-struct-for="GrowthFunc">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <constant name="HICOSMO_DEFAULT_PARAMS_ABSTOL"
              value="0.000000"
              c:type="NC_HICOSMO_DEFAULT_PARAMS_ABSTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_DEFAULT_PARAMS_RELTOL"
              value="0.000000"
              c:type="NC_HICOSMO_DEFAULT_PARAMS_RELTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_DE_DEFAULT_ENNU"
              value="3.046000"
              c:type="NC_HICOSMO_DE_DEFAULT_ENNU">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_DE_DEFAULT_HE_YP"
              value="0.240000"
              c:type="NC_HICOSMO_DE_DEFAULT_HE_YP">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_DE_DEFAULT_NU_G"
              value="1.000000"
              c:type="NC_HICOSMO_DE_DEFAULT_NU_G">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_DE_DEFAULT_NU_MASS"
              value="0.000010"
              c:type="NC_HICOSMO_DE_DEFAULT_NU_MASS">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_DE_DEFAULT_NU_MU"
              value="0.000000"
              c:type="NC_HICOSMO_DE_DEFAULT_NU_MU">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_DE_DEFAULT_NU_T"
              value="0.716110"
              c:type="NC_HICOSMO_DE_DEFAULT_NU_T">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_DE_DEFAULT_OMEGA_B"
              value="0.043200"
              c:type="NC_HICOSMO_DE_DEFAULT_OMEGA_B">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_DE_DEFAULT_OMEGA_C"
              value="0.256800"
              c:type="NC_HICOSMO_DE_DEFAULT_OMEGA_C">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_DE_DEFAULT_OMEGA_X"
              value="0.700000"
              c:type="NC_HICOSMO_DE_DEFAULT_OMEGA_X">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_DE_DEFAULT_T_GAMMA0"
              value="2.724500"
              c:type="NC_HICOSMO_DE_DEFAULT_T_GAMMA0">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_DE_LINDER_DEFAULT_W0"
              value="1.000000"
              c:type="NC_HICOSMO_DE_LINDER_DEFAULT_W0">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_DE_LINDER_DEFAULT_W1"
              value="0.000000"
              c:type="NC_HICOSMO_DE_LINDER_DEFAULT_W1">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_DE_LINDER_N"
              value="1"
              c:type="NC_HICOSMO_DE_LINDER_N">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="HICOSMO_DE_PAD_DEFAULT_W0"
              value="1.000000"
              c:type="NC_HICOSMO_DE_PAD_DEFAULT_W0">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_DE_PAD_DEFAULT_W1"
              value="0.000000"
              c:type="NC_HICOSMO_DE_PAD_DEFAULT_W1">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_DE_QE_DEFAULT_W0"
              value="1.000000"
              c:type="NC_HICOSMO_DE_QE_DEFAULT_W0">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_DE_QE_DEFAULT_W1"
              value="0.000000"
              c:type="NC_HICOSMO_DE_QE_DEFAULT_W1">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_DE_QE_N" value="1" c:type="NC_HICOSMO_DE_QE_N">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="HICOSMO_DE_XCDM_DEFAULT_W0"
              value="1.000000"
              c:type="NC_HICOSMO_DE_XCDM_DEFAULT_W0">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_DE_XCDM_N" value="1" c:type="NC_HICOSMO_DE_XCDM_N">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="HICOSMO_GCG_DEFAULT_ENNU"
              value="3.046000"
              c:type="NC_HICOSMO_GCG_DEFAULT_ENNU">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_GCG_DEFAULT_GAMMA"
              value="0.000000"
              c:type="NC_HICOSMO_GCG_DEFAULT_GAMMA">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_GCG_DEFAULT_HE_YP"
              value="0.240000"
              c:type="NC_HICOSMO_GCG_DEFAULT_HE_YP">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_GCG_DEFAULT_NU_G"
              value="1.000000"
              c:type="NC_HICOSMO_GCG_DEFAULT_NU_G">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_GCG_DEFAULT_NU_MASS"
              value="0.000010"
              c:type="NC_HICOSMO_GCG_DEFAULT_NU_MASS">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_GCG_DEFAULT_NU_MU"
              value="0.000000"
              c:type="NC_HICOSMO_GCG_DEFAULT_NU_MU">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_GCG_DEFAULT_NU_T"
              value="0.716110"
              c:type="NC_HICOSMO_GCG_DEFAULT_NU_T">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_GCG_DEFAULT_OMEGA_B"
              value="0.043200"
              c:type="NC_HICOSMO_GCG_DEFAULT_OMEGA_B">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_GCG_DEFAULT_OMEGA_C"
              value="0.256800"
              c:type="NC_HICOSMO_GCG_DEFAULT_OMEGA_C">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_GCG_DEFAULT_OMEGA_X"
              value="0.700000"
              c:type="NC_HICOSMO_GCG_DEFAULT_OMEGA_X">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_GCG_DEFAULT_T_GAMMA0"
              value="2.724500"
              c:type="NC_HICOSMO_GCG_DEFAULT_T_GAMMA0">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_IDEM2_DEFAULT_ENNU"
              value="3.046000"
              c:type="NC_HICOSMO_IDEM2_DEFAULT_ENNU">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_IDEM2_DEFAULT_GAMMA"
              value="0.000000"
              c:type="NC_HICOSMO_IDEM2_DEFAULT_GAMMA">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_IDEM2_DEFAULT_HE_YP"
              value="0.240000"
              c:type="NC_HICOSMO_IDEM2_DEFAULT_HE_YP">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_IDEM2_DEFAULT_NU_G"
              value="1.000000"
              c:type="NC_HICOSMO_IDEM2_DEFAULT_NU_G">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_IDEM2_DEFAULT_NU_MASS"
              value="0.000010"
              c:type="NC_HICOSMO_IDEM2_DEFAULT_NU_MASS">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_IDEM2_DEFAULT_NU_MU"
              value="0.000000"
              c:type="NC_HICOSMO_IDEM2_DEFAULT_NU_MU">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_IDEM2_DEFAULT_NU_T"
              value="0.716110"
              c:type="NC_HICOSMO_IDEM2_DEFAULT_NU_T">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_IDEM2_DEFAULT_OMEGA_B"
              value="0.043200"
              c:type="NC_HICOSMO_IDEM2_DEFAULT_OMEGA_B">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_IDEM2_DEFAULT_OMEGA_C"
              value="0.256800"
              c:type="NC_HICOSMO_IDEM2_DEFAULT_OMEGA_C">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_IDEM2_DEFAULT_OMEGA_X"
              value="0.700000"
              c:type="NC_HICOSMO_IDEM2_DEFAULT_OMEGA_X">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_IDEM2_DEFAULT_T_GAMMA0"
              value="2.724500"
              c:type="NC_HICOSMO_IDEM2_DEFAULT_T_GAMMA0">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_QCONST_DEFAULT_CD"
              value="0.000000"
              c:type="NC_HICOSMO_QCONST_DEFAULT_CD">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_QCONST_DEFAULT_E"
              value="1.000000"
              c:type="NC_HICOSMO_QCONST_DEFAULT_E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_QCONST_DEFAULT_OMEGA_T"
              value="1.000000"
              c:type="NC_HICOSMO_QCONST_DEFAULT_OMEGA_T">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_QCONST_DEFAULT_Q"
              value="0.500000"
              c:type="NC_HICOSMO_QCONST_DEFAULT_Q">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_QCONST_DEFAULT_Z1"
              value="0.000000"
              c:type="NC_HICOSMO_QCONST_DEFAULT_Z1">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_QGRW_DEFAULT_OMEGA_R"
              value="1.0e-5"
              c:type="NC_HICOSMO_QGRW_DEFAULT_OMEGA_R">
      <doc xml:space="preserve">Default $\Omega_{r0}$.</doc>
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_QGRW_DEFAULT_OMEGA_W"
              value="0.99999"
              c:type="NC_HICOSMO_QGRW_DEFAULT_OMEGA_W">
      <doc xml:space="preserve">Default $\Omega_{w0}$.</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="HICOSMO_QGRW_DEFAULT_W"
              value="1.0e-12"
              c:type="NC_HICOSMO_QGRW_DEFAULT_W">
      <doc xml:space="preserve">Default $w$.</doc>
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_QGRW_DEFAULT_X_B"
              value="1000000000000000019884624838656.000000"
              c:type="NC_HICOSMO_QGRW_DEFAULT_X_B">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_QLINEAR_DEFAULT_CD"
              value="0.000000"
              c:type="NC_HICOSMO_QLINEAR_DEFAULT_CD">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_QLINEAR_DEFAULT_E"
              value="1.000000"
              c:type="NC_HICOSMO_QLINEAR_DEFAULT_E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_QLINEAR_DEFAULT_OMEGA_T"
              value="1.000000"
              c:type="NC_HICOSMO_QLINEAR_DEFAULT_OMEGA_T">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_QLINEAR_DEFAULT_Q"
              value="0.500000"
              c:type="NC_HICOSMO_QLINEAR_DEFAULT_Q">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_QLINEAR_DEFAULT_QP"
              value="1.000000"
              c:type="NC_HICOSMO_QLINEAR_DEFAULT_QP">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_QLINEAR_DEFAULT_Z1"
              value="0.000000"
              c:type="NC_HICOSMO_QLINEAR_DEFAULT_Z1">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_QSPLINE_CONT_PRIOR_ABSTOL"
              value="0"
              c:type="NC_HICOSMO_QSPLINE_CONT_PRIOR_ABSTOL">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="HICOSMO_QSPLINE_CONT_PRIOR_LNSIGMA"
              value="0"
              c:type="NC_HICOSMO_QSPLINE_CONT_PRIOR_LNSIGMA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="HICOSMO_QSPLINE_DEFAULT_AS_DRAG"
              value="0.035000"
              c:type="NC_HICOSMO_QSPLINE_DEFAULT_AS_DRAG">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_QSPLINE_DEFAULT_OMEGA_T"
              value="1.000000"
              c:type="NC_HICOSMO_QSPLINE_DEFAULT_OMEGA_T">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_QSPLINE_DEFAULT_Q"
              value="0.500000"
              c:type="NC_HICOSMO_QSPLINE_DEFAULT_Q">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_QSPLINE_DEFAULT_Q_LEN"
              value="3"
              c:type="NC_HICOSMO_QSPLINE_DEFAULT_Q_LEN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="HICOSMO_VEXP_DEFAULT_ALPHA_B"
              value="0.100000"
              c:type="NC_HICOSMO_VEXP_DEFAULT_ALPHA_B">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_VEXP_DEFAULT_D_PHI"
              value="0.300000"
              c:type="NC_HICOSMO_VEXP_DEFAULT_D_PHI">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_VEXP_DEFAULT_H0"
              value="70.000000"
              c:type="NC_HICOSMO_VEXP_DEFAULT_H0">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_VEXP_DEFAULT_OMEGA_C"
              value="0.250000"
              c:type="NC_HICOSMO_VEXP_DEFAULT_OMEGA_C">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_VEXP_DEFAULT_OMEGA_L"
              value="0.750000"
              c:type="NC_HICOSMO_VEXP_DEFAULT_OMEGA_L">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_VEXP_DEFAULT_SIGMA_PHI"
              value="0.400000"
              c:type="NC_HICOSMO_VEXP_DEFAULT_SIGMA_PHI">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HICOSMO_VEXP_DEFAULT_X_B"
              value="1000000000000000019884624838656.000000"
              c:type="NC_HICOSMO_VEXP_DEFAULT_X_B">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <class name="HICosmo"
           c:symbol-prefix="hicosmo"
           c:type="NcHICosmo"
           parent="NumCosmoMath.Model"
           abstract="1"
           glib:type-name="NcHICosmo"
           glib:get-type="nc_hicosmo_get_type"
           glib:type-struct="HICosmoClass">
      <doc xml:space="preserve">FIXME</doc>
      <constructor name="new_from_name"
                   c:identifier="nc_hicosmo_new_from_name">
        <doc xml:space="preserve">Creates a new instance of @cosmo_name,
asserting that it descends from @parent_type.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">newly created @cosmo_name object.</doc>
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </return-value>
        <parameters>
          <parameter name="parent_type" transfer-ownership="none">
            <doc xml:space="preserve">parent's #GType</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="cosmo_name" transfer-ownership="none">
            <doc xml:space="preserve">Cosmological model's name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="qg_new" c:identifier="nc_hicosmo_qg_new">
        <return-value transfer-ownership="full">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </return-value>
      </constructor>
      <function name="clear" c:identifier="nc_hicosmo_clear">
        <doc xml:space="preserve">The reference count of @cosmo is decreased and the pointer is set to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo**"/>
          </parameter>
        </parameters>
      </function>
      <function name="id" c:identifier="nc_hicosmo_id">
        <return-value transfer-ownership="none">
          <type name="gint32" c:type="gint32"/>
        </return-value>
      </function>
      <function name="log_all_models" c:identifier="nc_hicosmo_log_all_models">
        <doc xml:space="preserve">Logs all models descending from @parent.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve">#GType of the parent model</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
      <function name="priors_stub" c:identifier="nc_hicosmo_priors_stub">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="qg_R_to_h_matrix"
                c:identifier="nc_hicosmo_qg_R_to_h_matrix"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="T" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type c:type="gsl_matrix*"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_V" c:identifier="nc_hicosmo_qg_V">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_V_lambda" c:identifier="nc_hicosmo_qg_V_lambda">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="deriv" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_alphaprime2" c:identifier="nc_hicosmo_qg_alphaprime2">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_beta" c:identifier="nc_hicosmo_qg_beta">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_cs2" c:identifier="nc_hicosmo_qg_cs2">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_cs2_lambda" c:identifier="nc_hicosmo_qg_cs2_lambda">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="deriv" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_cs2_xxbar2" c:identifier="nc_hicosmo_qg_cs2_xxbar2">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_cs2zeta2_int_1_zeta2_lambda"
                c:identifier="nc_hicosmo_qg_cs2zeta2_int_1_zeta2_lambda">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="deriv" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_d2sqrtxxbarzeta_sqrtxxbarzeta"
                c:identifier="nc_hicosmo_qg_d2sqrtxxbarzeta_sqrtxxbarzeta">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_dalphaprime2_dalpha"
                c:identifier="nc_hicosmo_qg_dalphaprime2_dalpha">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_dcs2" c:identifier="nc_hicosmo_qg_dcs2">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_ddzeta_zeta" c:identifier="nc_hicosmo_qg_ddzeta_zeta">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_dxxbarzeta2_xxbarzeta2"
                c:identifier="nc_hicosmo_qg_dxxbarzeta2_xxbarzeta2">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_dzeta_zeta" c:identifier="nc_hicosmo_qg_dzeta_zeta">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_eta_lambda" c:identifier="nc_hicosmo_qg_eta_lambda">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="deriv" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_evolfunc"
                c:identifier="nc_hicosmo_qg_evolfunc"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
          <parameter name="x2d2sqrtxxbarzeta_sqrtxxbarzeta"
                     transfer-ownership="none">
            <type name="long double" c:type="long double*"/>
          </parameter>
          <parameter name="x2cs2_xxbar2" transfer-ownership="none">
            <type name="long double" c:type="long double*"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_gbar2" c:identifier="nc_hicosmo_qg_gbar2">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_gbar_lambda" c:identifier="nc_hicosmo_qg_gbar_lambda">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="deriv" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_gbarbar" c:identifier="nc_hicosmo_qg_gbarbar">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_gbarbar_lambda"
                c:identifier="nc_hicosmo_qg_gbarbar_lambda">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="deriv" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_get_eta_b" c:identifier="nc_hicosmo_qg_get_eta_b">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_get_lambda_d"
                c:identifier="nc_hicosmo_qg_get_lambda_d">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_get_lambda_f"
                c:identifier="nc_hicosmo_qg_get_lambda_f">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_get_lambda_i"
                c:identifier="nc_hicosmo_qg_get_lambda_i">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_h_to_R_matrix"
                c:identifier="nc_hicosmo_qg_h_to_R_matrix"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="T" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type c:type="gsl_matrix*"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_int_1_zeta2_lambda"
                c:identifier="nc_hicosmo_qg_int_1_zeta2_lambda">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="deriv" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_lambda_k_cross"
                c:identifier="nc_hicosmo_qg_lambda_k_cross">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="deriv" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_lambda_x" c:identifier="nc_hicosmo_qg_lambda_x">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_max_z" c:identifier="nc_hicosmo_qg_max_z">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="trans" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_modefunc"
                c:identifier="nc_hicosmo_qg_modefunc"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value>
          <doc xml:space="preserve">FIXME</doc>
          <type name="HICosmoQGMode" c:type="NcHICosmoQGMode*"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="long double" c:type="long double"/>
          </parameter>
          <parameter name="x0" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="long double" c:type="long double"/>
          </parameter>
          <parameter name="xf" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="long double" c:type="long double"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_modefunc_evolve"
                c:identifier="nc_hicosmo_qg_modefunc_evolve">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="qgmode" transfer-ownership="none">
            <type name="HICosmoQGMode" c:type="NcHICosmoQGMode*"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_modefunc_init"
                c:identifier="nc_hicosmo_qg_modefunc_init">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="qgmode" transfer-ownership="none">
            <type name="HICosmoQGMode" c:type="NcHICosmoQGMode*"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_modefunc_set_opts"
                c:identifier="nc_hicosmo_qg_modefunc_set_opts">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="qgmode" transfer-ownership="none">
            <type name="HICosmoQGMode" c:type="NcHICosmoQGMode*"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_modefunc_sol"
                c:identifier="nc_hicosmo_qg_modefunc_sol"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="qgmode" transfer-ownership="none">
            <type name="HICosmoQGMode" c:type="NcHICosmoQGMode*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
          <parameter name="x0" transfer-ownership="none">
            <type name="long double" c:type="long double"/>
          </parameter>
          <parameter name="Re_u" transfer-ownership="none">
            <type name="long double" c:type="long double*"/>
          </parameter>
          <parameter name="Im_u" transfer-ownership="none">
            <type name="long double" c:type="long double*"/>
          </parameter>
          <parameter name="Re_up" transfer-ownership="none">
            <type name="long double" c:type="long double*"/>
          </parameter>
          <parameter name="Im_up" transfer-ownership="none">
            <type name="long double" c:type="long double*"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_modefuncm_cvode_init"
                c:identifier="nc_hicosmo_qg_modefuncm_cvode_init">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="qgmode" transfer-ownership="none">
            <type name="HICosmoQGMode" c:type="NcHICosmoQGMode*"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_past_sol"
                c:identifier="nc_hicosmo_qg_past_sol"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="sol" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type c:type="gsl_matrix*"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_pert_R_to_h" c:identifier="nc_hicosmo_qg_pert_R_to_h">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="qgmode" transfer-ownership="none">
            <type name="HICosmoQGMode" c:type="NcHICosmoQGMode*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="R" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_pert_evolve" c:identifier="nc_hicosmo_qg_pert_evolve">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="qgmode" transfer-ownership="none">
            <type name="HICosmoQGMode" c:type="NcHICosmoQGMode*"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_pert_h_to_R" c:identifier="nc_hicosmo_qg_pert_h_to_R">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="qgmode" transfer-ownership="none">
            <type name="HICosmoQGMode" c:type="NcHICosmoQGMode*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="h" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_pert_init" c:identifier="nc_hicosmo_qg_pert_init">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="qgmode" transfer-ownership="none">
            <type name="HICosmoQGMode" c:type="NcHICosmoQGMode*"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_pert_new"
                c:identifier="nc_hicosmo_qg_pert_new"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value>
          <doc xml:space="preserve">FIXME</doc>
          <type name="HICosmoQGMode" c:type="NcHICosmoQGMode*"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="ax_i" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="x_i" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_pert_powerspectrum"
                c:identifier="nc_hicosmo_qg_pert_powerspectrum">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="qgmode" transfer-ownership="none">
            <type name="HICosmoQGMode" c:type="NcHICosmoQGMode*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="R" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_pert_prepare_pw_spline"
                c:identifier="nc_hicosmo_qg_pert_prepare_pw_spline">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="qgmode" transfer-ownership="none">
            <type name="HICosmoQGMode" c:type="NcHICosmoQGMode*"/>
          </parameter>
          <parameter name="verbose" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_pert_set_opts"
                c:identifier="nc_hicosmo_qg_pert_set_opts">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="qgmode" transfer-ownership="none">
            <type name="HICosmoQGMode" c:type="NcHICosmoQGMode*"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_x_lambda" c:identifier="nc_hicosmo_qg_x_lambda">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="deriv" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_xbar" c:identifier="nc_hicosmo_qg_xbar">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_xddzeta_zeta_mxdzeta_zeta2_dzeta_zeta"
                c:identifier="nc_hicosmo_qg_xddzeta_zeta_mxdzeta_zeta2_dzeta_zeta">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_xxbarzeta2" c:identifier="nc_hicosmo_qg_xxbarzeta2">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="qg_zeta" c:identifier="nc_hicosmo_qg_zeta">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_Dc_impl"
                c:identifier="nc_hicosmo_set_Dc_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_E2Omega_b_impl"
                c:identifier="nc_hicosmo_set_E2Omega_b_impl"
                introspectable="0">
        <doc xml:space="preserve">Baryonic density $E^2\Omega_{b} = \rho_b(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_E2Omega_c_impl"
                c:identifier="nc_hicosmo_set_E2Omega_c_impl"
                introspectable="0">
        <doc xml:space="preserve">Cold dark matter density $E^2\Omega_{c} = \rho_c(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_E2Omega_g_impl"
                c:identifier="nc_hicosmo_set_E2Omega_g_impl"
                introspectable="0">
        <doc xml:space="preserve">Photons density $E^2\Omega_{\gamma} = \rho_\gamma(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_E2Omega_m_impl"
                c:identifier="nc_hicosmo_set_E2Omega_m_impl"
                introspectable="0">
        <doc xml:space="preserve">Total matter density $E^2\Omega_{m} = \rho_m(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_E2Omega_mnu_impl"
                c:identifier="nc_hicosmo_set_E2Omega_mnu_impl"
                introspectable="0">
        <doc xml:space="preserve">Massive neutrinos density $E^2\Omega_{m\nu} = \rho_{m\nu}(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_E2Omega_mnu_n_impl"
                c:identifier="nc_hicosmo_set_E2Omega_mnu_n_impl"
                introspectable="0">
        <doc xml:space="preserve">Massive neutrinos density $E^2\Omega_{m\nu,n} = \rho_{m\nu,n}(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoVFunc1Z" c:type="NcHICosmoVFunc1Z"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_E2Omega_nu_impl"
                c:identifier="nc_hicosmo_set_E2Omega_nu_impl"
                introspectable="0">
        <doc xml:space="preserve">Ultra-relativistic neutrinos density $E^2\Omega_{\nu} = \rho_\nu(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_E2Omega_r_impl"
                c:identifier="nc_hicosmo_set_E2Omega_r_impl"
                introspectable="0">
        <doc xml:space="preserve">Total radiation density $\Omega_{r} = \rho_r(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_E2Omega_t_impl"
                c:identifier="nc_hicosmo_set_E2Omega_t_impl"
                introspectable="0">
        <doc xml:space="preserve">Total density $E2\Omega_{t0} = \rho_t(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_E2Press_mnu_impl"
                c:identifier="nc_hicosmo_set_E2Press_mnu_impl"
                introspectable="0">
        <doc xml:space="preserve">Massive neutrinos density $E^2P_{m\nu} = p_{m\nu}(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_E2Press_mnu_n_impl"
                c:identifier="nc_hicosmo_set_E2Press_mnu_n_impl"
                introspectable="0">
        <doc xml:space="preserve">Massive neutrinos density $E^2P_{m\nu,n} = p_{m\nu,n}(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoVFunc1Z" c:type="NcHICosmoVFunc1Z"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_E2_impl"
                c:identifier="nc_hicosmo_set_E2_impl"
                introspectable="0">
        <doc xml:space="preserve">Normalized Hubble function squared, $E^2(z)$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_H0_impl"
                c:identifier="nc_hicosmo_set_H0_impl"
                introspectable="0">
        <doc xml:space="preserve">Sets the implementation of H0 to @f.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">an implementation of H0.</doc>
            <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_MassNuInfo_impl"
                c:identifier="nc_hicosmo_set_MassNuInfo_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFuncMassNuInfo"
                  c:type="NcHICosmoFuncMassNuInfo"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_NMassNu_impl"
                c:identifier="nc_hicosmo_set_NMassNu_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFuncNMassNu" c:type="NcHICosmoFuncNMassNu"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_Omega_b0_impl"
                c:identifier="nc_hicosmo_set_Omega_b0_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_Omega_c0_impl"
                c:identifier="nc_hicosmo_set_Omega_c0_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_Omega_g0_impl"
                c:identifier="nc_hicosmo_set_Omega_g0_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_Omega_m0_impl"
                c:identifier="nc_hicosmo_set_Omega_m0_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_Omega_mnu0_impl"
                c:identifier="nc_hicosmo_set_Omega_mnu0_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_Omega_mnu0_n_impl"
                c:identifier="nc_hicosmo_set_Omega_mnu0_n_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoVFunc0" c:type="NcHICosmoVFunc0"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_Omega_nu0_impl"
                c:identifier="nc_hicosmo_set_Omega_nu0_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_Omega_r0_impl"
                c:identifier="nc_hicosmo_set_Omega_r0_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_Omega_t0_impl"
                c:identifier="nc_hicosmo_set_Omega_t0_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_Press_mnu0_impl"
                c:identifier="nc_hicosmo_set_Press_mnu0_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_Press_mnu0_n_impl"
                c:identifier="nc_hicosmo_set_Press_mnu0_n_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoVFunc0" c:type="NcHICosmoVFunc0"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_T_gamma0_impl"
                c:identifier="nc_hicosmo_set_T_gamma0_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_Yp_4He_impl"
                c:identifier="nc_hicosmo_set_Yp_4He_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_as_drag_impl"
                c:identifier="nc_hicosmo_set_as_drag_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_bgp_cs2_impl"
                c:identifier="nc_hicosmo_set_bgp_cs2_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_d2E2_dz2_impl"
                c:identifier="nc_hicosmo_set_d2E2_dz2_impl"
                introspectable="0">
        <doc xml:space="preserve">Second derivative with respect to the redshift of the normalized Hubble function squared, $\frac{d^2E^2(z)}{dz^2}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_dE2_dz_impl"
                c:identifier="nc_hicosmo_set_dE2_dz_impl"
                introspectable="0">
        <doc xml:space="preserve">First derivative with respect to the redshift of the normalized Hubble function squared, $\frac{dE^2(z)}{dz}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_xb_impl"
                c:identifier="nc_hicosmo_set_xb_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_z_lss_impl"
                c:identifier="nc_hicosmo_set_z_lss_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModelClass</doc>
            <type name="HICosmoClass" c:type="NcHICosmoClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="Dc" invoker="Dc">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="E2" invoker="E2">
        <doc xml:space="preserve">Normalized Hubble function squared.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="E2Omega_b" invoker="E2Omega_b">
        <doc xml:space="preserve">Baryonic density $E^2\Omega_{b} = \rho_b(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="E2Omega_c" invoker="E2Omega_c">
        <doc xml:space="preserve">Cold dark matter density $E^2\Omega_{c} = \rho_c(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="E2Omega_g" invoker="E2Omega_g">
        <doc xml:space="preserve">Photons density $E^2\Omega_{\gamma} = \rho_\gamma(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="E2Omega_m" invoker="E2Omega_m">
        <doc xml:space="preserve">Total matter density $E^2\Omega_{m} = \rho_m(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="E2Omega_mnu" invoker="E2Omega_mnu">
        <doc xml:space="preserve">Massive neutrinos density $E^2\Omega_{m\nu} = \rho_{m\nu}(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="E2Omega_mnu_n" invoker="E2Omega_mnu_n">
        <doc xml:space="preserve">The n-th massive neutrinos density $E^2\Omega_{m\nu,n} = \rho_{m\nu,n}(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$E^2\Omega_{m\nu,n}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">massive neutrino index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="E2Omega_nu" invoker="E2Omega_nu">
        <doc xml:space="preserve">Ultra-relativistic neutrinos density $E^2\Omega_{\nu} = \rho_\nu(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="E2Omega_r" invoker="E2Omega_r">
        <doc xml:space="preserve">Total radiation density $\Omega_{r} = \rho_r(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="E2Omega_t" invoker="E2Omega_t">
        <doc xml:space="preserve">Total density $E2\Omega_{t0} = \rho_t(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="E2Press_mnu" invoker="E2Press_mnu">
        <doc xml:space="preserve">Massive neutrinos density $E^2P_{m\nu} = p_{m\nu}(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="E2Press_mnu_n" invoker="E2Press_mnu_n">
        <doc xml:space="preserve">The n-th massive neutrinos pressure $E^2P_{m\nu,n} = p_{m\nu,n}(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$E^2\Omega_{m\nu,n}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">massive neutrino index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="H0" invoker="H0">
        <doc xml:space="preserve">The value of the Hubble constant in unit of $\mathrm{m}\,\mathrm{s}^{-1}\,\mathrm{kpc}^{-1}$,
see ncm_c_kpc().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="MassNuInfo" invoker="MassNuInfo">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="nu_i" transfer-ownership="none">
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="mass_eV" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="T_0" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="xi" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="g" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="NMassNu" invoker="NMassNu">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="Omega_b0" invoker="Omega_b0">
        <doc xml:space="preserve">Dimensionless baryon density today $\Omega_{b0} = \rho_{b0} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="Omega_c0" invoker="Omega_c0">
        <doc xml:space="preserve">Dimensionless cold dark matter density today $\Omega_{c0} = \rho_{c0} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="Omega_g0" invoker="Omega_g0">
        <doc xml:space="preserve">Dimensionless photon density today $\Omega_{\gamma0} = \rho_{\gamma0} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="Omega_m0" invoker="Omega_m0">
        <doc xml:space="preserve">Dimensionless total dust density today $\Omega_{m0} = \rho_{m0} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="Omega_mnu0" invoker="Omega_mnu0">
        <doc xml:space="preserve">Dimensionless massive neutrinos density today $\Omega_{m\nu0} = \rho_{m\nu0} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="Omega_mnu0_n" invoker="Omega_mnu0_n">
        <doc xml:space="preserve">The n-th dimensionless massive neutrinos density today $\Omega_{m\nu0,n} = \rho_{m\nu0,n} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$P_{m\nu0,n}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">massive neutrino index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="Omega_nu0" invoker="Omega_nu0">
        <doc xml:space="preserve">Dimensionless relativistic neutrinos density today $\Omega_{\nu0} = \rho_{\nu0} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="Omega_r0" invoker="Omega_r0">
        <doc xml:space="preserve">Dimensionless total radiation density today $\Omega_{r0} = \rho_{r0} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="Omega_t0" invoker="Omega_t0">
        <doc xml:space="preserve">Dimensionless total matter density today $\Omega_{t0} = \rho_{t0} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="Press_mnu0" invoker="Press_mnu0">
        <doc xml:space="preserve">Dimensionless massive neutrinos pressure today $P_{m\nu0} = p_{m\nu0} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="Press_mnu0_n" invoker="Press_mnu0_n">
        <doc xml:space="preserve">The n-th dimensionless massive neutrinos pressure today $P_{m\nu0,n} = p_{m\nu0,n} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$P_{m\nu0,n}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">massive neutrino index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="T_gamma0" invoker="T_gamma0">
        <doc xml:space="preserve">Gets the cosmic microwave background radiation temperature today.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="Yp_4He" invoker="Yp_4He">
        <doc xml:space="preserve">Gets the primordial Helium mass fraction, i.e.,
$$Y_p = \frac{m_\mathrm{He}n_\mathrm{He}}
{m_\mathrm{He}n_\mathrm{He} + m_\mathrm{H}n_\mathrm{H}},$$ where $m_\mathrm{He}$,
$n_\mathrm{He}$, $m_\mathrm{H}$ and $m_\mathrm{H}$ are respectively Helium-4 mass and
number density and Hydrogen-1 mass and number density.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="as_drag" invoker="as_drag">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="bgp_cs2" invoker="bgp_cs2">
        <doc xml:space="preserve">Baryon-photon plasma speed of sound squared,
$$c_s^{b\gamma2} = (\dot{\rho}_b + \dot{\rho}_\gamma) / (p_b + p_\gamma).$$</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="d2E2_dz2" invoker="d2E2_dz2">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dE2_dz" invoker="dE2_dz">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="xb" invoker="xb">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="z_lss" invoker="z_lss">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="Dc" c:identifier="nc_hicosmo_Dc">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="E" c:identifier="nc_hicosmo_E">
        <doc xml:space="preserve">This function computes the normalized Hubble function $E(z)$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$E(z)$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="E2" c:identifier="nc_hicosmo_E2">
        <doc xml:space="preserve">Normalized Hubble function squared.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$H^2 / H_0^2$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="E2Omega_b" c:identifier="nc_hicosmo_E2Omega_b">
        <doc xml:space="preserve">Baryonic density $E^2\Omega_{b} = \rho_b(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$E^2\Omega_b$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="E2Omega_c" c:identifier="nc_hicosmo_E2Omega_c">
        <doc xml:space="preserve">Cold dark matter density $E^2\Omega_{c} = \rho_c(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$E^2\Omega_c$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="E2Omega_g" c:identifier="nc_hicosmo_E2Omega_g">
        <doc xml:space="preserve">Photons density $E^2\Omega_{\gamma} = \rho_\gamma(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$E^2\Omega_\gamma$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="E2Omega_k" c:identifier="nc_hicosmo_E2Omega_k">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="E2Omega_m" c:identifier="nc_hicosmo_E2Omega_m">
        <doc xml:space="preserve">Total matter density $E^2\Omega_{m} = \rho_m(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$E^2\Omega_{m}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="E2Omega_mnu" c:identifier="nc_hicosmo_E2Omega_mnu">
        <doc xml:space="preserve">Massive neutrinos density $E^2\Omega_{m\nu} = \rho_{m\nu}(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$E^2\Omega_{m\nu}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="E2Omega_mnu_n" c:identifier="nc_hicosmo_E2Omega_mnu_n">
        <doc xml:space="preserve">The n-th massive neutrinos density $E^2\Omega_{m\nu,n} = \rho_{m\nu,n}(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$E^2\Omega_{m\nu,n}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">massive neutrino index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="E2Omega_nu" c:identifier="nc_hicosmo_E2Omega_nu">
        <doc xml:space="preserve">Ultra-relativistic neutrinos density $E^2\Omega_{\nu} = \rho_\nu(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$E^2\Omega_\nu$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="E2Omega_r" c:identifier="nc_hicosmo_E2Omega_r">
        <doc xml:space="preserve">Total radiation density $\Omega_{r} = \rho_r(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$E^2\Omega_{r}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="E2Omega_t" c:identifier="nc_hicosmo_E2Omega_t">
        <doc xml:space="preserve">Total density $E2\Omega_{t0} = \rho_t(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$E^2\Omega_{t}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="E2Press_mnu" c:identifier="nc_hicosmo_E2Press_mnu">
        <doc xml:space="preserve">Massive neutrinos density $E^2P_{m\nu} = p_{m\nu}(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$E^2\Omega_{m\nu}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="E2Press_mnu_n" c:identifier="nc_hicosmo_E2Press_mnu_n">
        <doc xml:space="preserve">The n-th massive neutrinos pressure $E^2P_{m\nu,n} = p_{m\nu,n}(z) / \rho_{\mathrm{crit}0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$E^2\Omega_{m\nu,n}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">massive neutrino index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="Em2" c:identifier="nc_hicosmo_Em2">
        <doc xml:space="preserve">This function computes the inverse of the square normalized Hubble function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$E(z)^{-2}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="H" c:identifier="nc_hicosmo_H">
        <doc xml:space="preserve">The value of the Hubble function in unity of $\mathrm{m}\,\mathrm{s}^{-1}\,\mathrm{kpc}^{-1}$,
see ncm_c_kpc().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$H(z) \left[\mathrm{m}\,\mathrm{s}^{-1}\,\mathrm{kpc}^{-1}\right]$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="H0" c:identifier="nc_hicosmo_H0">
        <doc xml:space="preserve">The value of the Hubble constant in unit of $\mathrm{m}\,\mathrm{s}^{-1}\,\mathrm{kpc}^{-1}$,
see ncm_c_kpc().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$H_0 \left[\mathrm{m}\,\mathrm{s}^{-1}\,\mathrm{kpc}^{-1}\right]$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="H_number_density"
              c:identifier="nc_hicosmo_H_number_density">
        <doc xml:space="preserve">Calculares the Hydrogen-1 number density $n_\mathrm{1H} = Y_{\mathrm{1H}p} n_{b0} / m_\mathrm{1H}$
using nc_hicosmo_Yp_1H() $\times$ nc_hicosmo_baryon_density() / ncm_c_rest_energy_1H().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The baryon density $n_\mathrm{1H}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="He_number_density"
              c:identifier="nc_hicosmo_He_number_density">
        <doc xml:space="preserve">Calculares the Helium-4 number density $n_\mathrm{4He} = Y_p n_{b0} / m_\mathrm{4He}$
using nc_hicosmo_Yp_4He() $\times$ nc_hicosmo_baryon_density() / ncm_c_rest_energy_4He().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The baryon density $n_\mathrm{4He}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="MassNuInfo" c:identifier="nc_hicosmo_MassNuInfo">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="nu_i" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="mass_eV" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="T_0" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="xi" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="g" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="NMassNu" c:identifier="nc_hicosmo_NMassNu">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Neff" c:identifier="nc_hicosmo_Neff">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Omega_b0" c:identifier="nc_hicosmo_Omega_b0">
        <doc xml:space="preserve">Dimensionless baryon density today $\Omega_{b0} = \rho_{b0} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\Omega_{b0}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Omega_b0h2" c:identifier="nc_hicosmo_Omega_b0h2">
        <doc xml:space="preserve">Dimensionless baryon density today [nc_hicosmo_Omega_b0()] times $h^2$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\Omega_{b0}h^2$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Omega_c0" c:identifier="nc_hicosmo_Omega_c0">
        <doc xml:space="preserve">Dimensionless cold dark matter density today $\Omega_{c0} = \rho_{c0} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\Omega_{c0}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Omega_c0h2" c:identifier="nc_hicosmo_Omega_c0h2">
        <doc xml:space="preserve">Dimensionless cold dark matter density today [nc_hicosmo_Omega_c0()] times $h^2$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\Omega_{c0}h^2$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Omega_g0" c:identifier="nc_hicosmo_Omega_g0">
        <doc xml:space="preserve">Dimensionless photon density today $\Omega_{\gamma0} = \rho_{\gamma0} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\Omega_{\gamma0}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Omega_g0h2" c:identifier="nc_hicosmo_Omega_g0h2">
        <doc xml:space="preserve">Dimensionless photon density today [nc_hicosmo_Omega_g0()] times $h^2$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\Omega_{\gamma0}h^2$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Omega_k0" c:identifier="nc_hicosmo_Omega_k0">
        <doc xml:space="preserve">The curvature parameter today, $\Omega_{k0}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\Omega_{k0}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Omega_m0" c:identifier="nc_hicosmo_Omega_m0">
        <doc xml:space="preserve">Dimensionless total dust density today $\Omega_{m0} = \rho_{m0} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\Omega_{m0}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Omega_m0h2" c:identifier="nc_hicosmo_Omega_m0h2">
        <doc xml:space="preserve">Dimensionless total dust density today [nc_hicosmo_Omega_m0()] times $h^2$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\Omega_{m0}h^2$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Omega_mnu0" c:identifier="nc_hicosmo_Omega_mnu0">
        <doc xml:space="preserve">Dimensionless massive neutrinos density today $\Omega_{m\nu0} = \rho_{m\nu0} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\Omega_{m\nu0}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Omega_mnu0_n" c:identifier="nc_hicosmo_Omega_mnu0_n">
        <doc xml:space="preserve">The n-th dimensionless massive neutrinos density today $\Omega_{m\nu0,n} = \rho_{m\nu0,n} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\Omega_{m\nu0,n}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">massive neutrino index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="Omega_mnu0h2" c:identifier="nc_hicosmo_Omega_mnu0h2">
        <doc xml:space="preserve">Dimensionless massive neutrinos density today [nc_hicosmo_Omega_mnu0()] times $h^2$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\Omega_{m\nu0}h^2$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Omega_nu0" c:identifier="nc_hicosmo_Omega_nu0">
        <doc xml:space="preserve">Dimensionless relativistic neutrinos density today $\Omega_{\nu0} = \rho_{\nu0} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\Omega_{\nu0}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Omega_nu0h2" c:identifier="nc_hicosmo_Omega_nu0h2">
        <doc xml:space="preserve">Dimensionless relativistic neutrinos density today [nc_hicosmo_Omega_nu0()] times $h^2$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\Omega_{\nu0}h^2$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Omega_r0" c:identifier="nc_hicosmo_Omega_r0">
        <doc xml:space="preserve">Dimensionless total radiation density today $\Omega_{r0} = \rho_{r0} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\Omega_{r0}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Omega_r0h2" c:identifier="nc_hicosmo_Omega_r0h2">
        <doc xml:space="preserve">Dimensionless total radiation density today [nc_hicosmo_Omega_r0()] times $h^2$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\Omega_{r0}h^2$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Omega_t0" c:identifier="nc_hicosmo_Omega_t0">
        <doc xml:space="preserve">Dimensionless total matter density today $\Omega_{t0} = \rho_{t0} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\Omega_{t0}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Press_mnu0" c:identifier="nc_hicosmo_Press_mnu0">
        <doc xml:space="preserve">Dimensionless massive neutrinos pressure today $P_{m\nu0} = p_{m\nu0} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$P_{m\nu0}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Press_mnu0_n" c:identifier="nc_hicosmo_Press_mnu0_n">
        <doc xml:space="preserve">The n-th dimensionless massive neutrinos pressure today $P_{m\nu0,n} = p_{m\nu0,n} / \rho_{\mathrm{crit}0}$,
see nc_hicosmo_crit_density().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$P_{m\nu0,n}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">massive neutrino index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="RH_Mpc" c:identifier="nc_hicosmo_RH_Mpc">
        <doc xml:space="preserve">Calculates the Hubble radius in unit of
Mpc, i.e., $R_H = (c / (H_0 \times 1\,\mathrm{Mpc}))$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$R_H \left[\mathrm{Mpc}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="RH_planck" c:identifier="nc_hicosmo_RH_planck">
        <doc xml:space="preserve">Calculates the Hubble radius in unit of
Mpc, i.e., $R_H = (c / (H_0 \times l_\mathrm{planck}))$.
See ncm_c_planck_length().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$R_H \left[l_\mathrm{planck}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="T_gamma0" c:identifier="nc_hicosmo_T_gamma0">
        <doc xml:space="preserve">Gets the cosmic microwave background radiation temperature today.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$T_{\gamma0} \left[\mathrm{K}\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="XHe" c:identifier="nc_hicosmo_XHe">
        <doc xml:space="preserve">The primordial Helium to Hydrogen ratio $$X_\text{He} =
\frac{n_\text{He}}{n_\text{H}} = \frac{m_\text{1H}}{m_\text{4He}}
\frac{Y_p}{Y_{\text{1H}p}},$$ see nc_hicosmo_Yp_1H() and nc_hicosmo_Yp_4He().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The primordial Helium to Hydrogen ratio $X_\text{He}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Yp_1H" c:identifier="nc_hicosmo_Yp_1H">
        <doc xml:space="preserve">The primordial hydrogen mass fraction $$Y_{\text{1H}p} = 1 - Y_p,$$
where $Y_p$ is the helium mass fraction, see nc_hicosmo_Yp_4He().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$Y_{\text{1H}p}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="Yp_4He" c:identifier="nc_hicosmo_Yp_4He">
        <doc xml:space="preserve">Gets the primordial Helium mass fraction, i.e.,
$$Y_p = \frac{m_\mathrm{He}n_\mathrm{He}}
{m_\mathrm{He}n_\mathrm{He} + m_\mathrm{H}n_\mathrm{H}},$$ where $m_\mathrm{He}$,
$n_\mathrm{He}$, $m_\mathrm{H}$ and $m_\mathrm{H}$ are respectively Helium-4 mass and
number density and Hydrogen-1 mass and number density.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$Y_p$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="abs_alpha" c:identifier="nc_hicosmo_abs_alpha">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">redshift variable $x = 1 + z$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="as_drag" c:identifier="nc_hicosmo_as_drag">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="baryon_density" c:identifier="nc_hicosmo_baryon_density">
        <doc xml:space="preserve">Calculares the baryon density $\rho_{b0} = \rho_{\mathrm{crit}0} \Omega_{b0}$
using nc_hicosmo_crit_density() $\times$ nc_hicosmo_Omega_b0().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The baryon density $\rho_{b0}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="bgp_cs2" c:identifier="nc_hicosmo_bgp_cs2">
        <doc xml:space="preserve">Baryon-photon plasma speed of sound squared,
$$c_s^{b\gamma2} = (\dot{\rho}_b + \dot{\rho}_\gamma) / (p_b + p_\gamma).$$</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$c_s^{b\gamma2}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="crit_density" c:identifier="nc_hicosmo_crit_density">
        <doc xml:space="preserve">Calculares the critical density $\rho_\mathrm{crit}$ using
ncm_c_crit_density_h2() $\times$ nc_hicosmo_h2().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The critical density $\rho_{\mathrm{crit}0}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="d2E2_dz2" c:identifier="nc_hicosmo_d2E2_dz2">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="dE2_dz" c:identifier="nc_hicosmo_dE2_dz">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="dH_dz" c:identifier="nc_hicosmo_dH_dz">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="dec" c:identifier="nc_hicosmo_dec">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_hicosmo_free">
        <doc xml:space="preserve">Decreases the reference count of @cosmo by one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="h" c:identifier="nc_hicosmo_h">
        <doc xml:space="preserve">Reduced Hubble constant, $h \equiv H_0 / (1\times\mathrm{m}\mathrm{s}^{-1}\mathrm{kpc}^{-1})$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$h$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="h2" c:identifier="nc_hicosmo_h2">
        <doc xml:space="preserve">Reduced Hubble constant [nc_hicosmo_h()] squared $h^2$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$h^2$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="j" c:identifier="nc_hicosmo_j">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="mqE2" c:identifier="nc_hicosmo_mqE2">
        <doc xml:space="preserve">Calculates $-q(z)E^2(z)$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$-q(z)E^2(z)$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="nec" c:identifier="nc_hicosmo_nec">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_prim" c:identifier="nc_hicosmo_peek_prim">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #NcHIPrim submodel.</doc>
          <type name="HIPrim" c:type="NcHIPrim*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_reion" c:identifier="nc_hicosmo_peek_reion">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #NcHIReion submodel.</doc>
          <type name="HIReion" c:type="NcHIReion*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="q" c:identifier="nc_hicosmo_q">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="qp" c:identifier="nc_hicosmo_qp">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_hicosmo_ref">
        <doc xml:space="preserve">Increases the reference count of @cosmo by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@cosmo.</doc>
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="sigma8" c:identifier="nc_hicosmo_sigma8">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="psf" transfer-ownership="none">
            <type name="NumCosmoMath.PowspecFilter"
                  c:type="NcmPowspecFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wec" c:identifier="nc_hicosmo_wec">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="x_alpha" c:identifier="nc_hicosmo_x_alpha">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">redshift $\alpha$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="xb" c:identifier="nc_hicosmo_xb">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="z_lss" c:identifier="nc_hicosmo_z_lss">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="zt" c:identifier="nc_hicosmo_zt">
        <doc xml:space="preserve">Computes the deceleration-acceleration transition redshift, $z_t$ (find
numerically the first root of $q(z)$ in the interval $[0,z_\mathrm{max}]$).
If $z_t$ is not found, i.e., $q(z) \neq 0$ in the entire redshift interval,
the function returns NAN.

Redshift interval: $[0.0, @z_max]$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the transition redshift $z_t$ or NAN if not found.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </instance-parameter>
          <parameter name="z_max" transfer-ownership="none">
            <doc xml:space="preserve">maximum redshift $z_\mathrm{max}$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Model" c:type="NcmModel"/>
      </field>
      <field name="is_eternal" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="prim" readable="0" private="1">
        <type name="HIPrim" c:type="NcHIPrim*"/>
      </field>
      <field name="reion" readable="0" private="1">
        <type name="HIReion" c:type="NcHIReion*"/>
      </field>
      <field name="T" introspectable="0" readable="0" private="1">
        <type c:type="const gsl_root_fsolver_type*"/>
      </field>
      <field name="s" introspectable="0" readable="0" private="1">
        <type c:type="gsl_root_fsolver*"/>
      </field>
    </class>
    <record name="HICosmoClass"
            c:type="NcHICosmoClass"
            glib:is-gtype-struct-for="HICosmo">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.ModelClass" c:type="NcmModelClass"/>
      </field>
      <field name="H0" readable="0" private="1">
        <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
      </field>
      <field name="Omega_b0" readable="0" private="1">
        <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
      </field>
      <field name="Omega_c0" readable="0" private="1">
        <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
      </field>
      <field name="Omega_g0" readable="0" private="1">
        <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
      </field>
      <field name="Omega_nu0" readable="0" private="1">
        <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
      </field>
      <field name="Omega_mnu0" readable="0" private="1">
        <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
      </field>
      <field name="Press_mnu0" readable="0" private="1">
        <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
      </field>
      <field name="Omega_m0" readable="0" private="1">
        <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
      </field>
      <field name="Omega_r0" readable="0" private="1">
        <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
      </field>
      <field name="Omega_t0" readable="0" private="1">
        <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
      </field>
      <field name="T_gamma0" readable="0" private="1">
        <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
      </field>
      <field name="Yp_4He" readable="0" private="1">
        <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
      </field>
      <field name="z_lss" readable="0" private="1">
        <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
      </field>
      <field name="as_drag" readable="0" private="1">
        <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
      </field>
      <field name="xb" readable="0" private="1">
        <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
      </field>
      <field name="Omega_mnu0_n" readable="0" private="1">
        <type name="HICosmoVFunc0" c:type="NcHICosmoVFunc0"/>
      </field>
      <field name="Press_mnu0_n" readable="0" private="1">
        <type name="HICosmoVFunc0" c:type="NcHICosmoVFunc0"/>
      </field>
      <field name="E2Omega_b" readable="0" private="1">
        <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
      </field>
      <field name="E2Omega_c" readable="0" private="1">
        <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
      </field>
      <field name="E2Omega_g" readable="0" private="1">
        <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
      </field>
      <field name="E2Omega_nu" readable="0" private="1">
        <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
      </field>
      <field name="E2Omega_mnu" readable="0" private="1">
        <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
      </field>
      <field name="E2Press_mnu" readable="0" private="1">
        <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
      </field>
      <field name="E2Omega_m" readable="0" private="1">
        <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
      </field>
      <field name="E2Omega_r" readable="0" private="1">
        <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
      </field>
      <field name="E2Omega_t" readable="0" private="1">
        <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
      </field>
      <field name="E2" readable="0" private="1">
        <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
      </field>
      <field name="dE2_dz" readable="0" private="1">
        <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
      </field>
      <field name="d2E2_dz2" readable="0" private="1">
        <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
      </field>
      <field name="bgp_cs2" readable="0" private="1">
        <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
      </field>
      <field name="Dc" readable="0" private="1">
        <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
      </field>
      <field name="E2Omega_mnu_n" readable="0" private="1">
        <type name="HICosmoVFunc1Z" c:type="NcHICosmoVFunc1Z"/>
      </field>
      <field name="E2Press_mnu_n" readable="0" private="1">
        <type name="HICosmoVFunc1Z" c:type="NcHICosmoVFunc1Z"/>
      </field>
      <field name="NMassNu" readable="0" private="1">
        <type name="HICosmoFuncNMassNu" c:type="NcHICosmoFuncNMassNu"/>
      </field>
      <field name="MassNuInfo" readable="0" private="1">
        <type name="HICosmoFuncMassNuInfo" c:type="NcHICosmoFuncMassNuInfo"/>
      </field>
    </record>
    <class name="HICosmoDE"
           c:symbol-prefix="hicosmo_de"
           c:type="NcHICosmoDE"
           parent="HICosmo"
           abstract="1"
           glib:type-name="NcHICosmoDE"
           glib:get-type="nc_hicosmo_de_get_type"
           glib:type-struct="HICosmoDEClass">
      <function name="new_add_bbn" c:identifier="nc_hicosmo_de_new_add_bbn">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="NumCosmoMath.Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_E2Omega_de_impl"
                c:identifier="nc_hicosmo_de_set_E2Omega_de_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cosmo_de_class" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoDEClass" c:type="NcHICosmoDEClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoDEFunc1" c:type="NcHICosmoDEFunc1"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_d2E2Omega_de_dz2_impl"
                c:identifier="nc_hicosmo_de_set_d2E2Omega_de_dz2_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cosmo_de_class" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoDEClass" c:type="NcHICosmoDEClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoDEFunc1" c:type="NcHICosmoDEFunc1"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_dE2Omega_de_dz_impl"
                c:identifier="nc_hicosmo_de_set_dE2Omega_de_dz_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cosmo_de_class" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoDEClass" c:type="NcHICosmoDEClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoDEFunc1" c:type="NcHICosmoDEFunc1"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_w_de_impl"
                c:identifier="nc_hicosmo_de_set_w_de_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cosmo_de_class" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoDEClass" c:type="NcHICosmoDEClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoDEFunc1" c:type="NcHICosmoDEFunc1"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="E2Omega_de" invoker="E2Omega_de">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo_de" transfer-ownership="none">
            <type name="HICosmoDE" c:type="NcHICosmoDE*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="d2E2Omega_de_dz2" invoker="d2E2Omega_de_dz2">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo_de" transfer-ownership="none">
            <type name="HICosmoDE" c:type="NcHICosmoDE*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dE2Omega_de_dz" invoker="dE2Omega_de_dz">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo_de" transfer-ownership="none">
            <type name="HICosmoDE" c:type="NcHICosmoDE*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="w_de" invoker="w_de">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo_de" transfer-ownership="none">
            <type name="HICosmoDE" c:type="NcHICosmoDE*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="E2Omega_de" c:identifier="nc_hicosmo_de_E2Omega_de">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo_de" transfer-ownership="none">
            <type name="HICosmoDE" c:type="NcHICosmoDE*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="E2Omega_de_onepw"
              c:identifier="nc_hicosmo_de_E2Omega_de_onepw">
        <doc xml:space="preserve">$E^2\Omega_\mathrm{de}(1+w)$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo_de" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmoDE</doc>
            <type name="HICosmoDE" c:type="NcHICosmoDE*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="cmb_params" c:identifier="nc_hicosmo_de_cmb_params">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo_de" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmoDE</doc>
            <type name="HICosmoDE" c:type="NcHICosmoDE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="d2E2Omega_de_dz2"
              c:identifier="nc_hicosmo_de_d2E2Omega_de_dz2">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo_de" transfer-ownership="none">
            <type name="HICosmoDE" c:type="NcHICosmoDE*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="dE2Omega_de_dz"
              c:identifier="nc_hicosmo_de_dE2Omega_de_dz">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo_de" transfer-ownership="none">
            <type name="HICosmoDE" c:type="NcHICosmoDE*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="omega_x2omega_k"
              c:identifier="nc_hicosmo_de_omega_x2omega_k">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo_de" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmoDE</doc>
            <type name="HICosmoDE" c:type="NcHICosmoDE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_wmap5_params"
              c:identifier="nc_hicosmo_de_set_wmap5_params">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo_de" transfer-ownership="none">
            <type name="HICosmoDE" c:type="NcHICosmoDE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="w_de" c:identifier="nc_hicosmo_de_w_de">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo_de" transfer-ownership="none">
            <type name="HICosmoDE" c:type="NcHICosmoDE*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="ENnu" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="ENnu-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="H0" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="H0-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Omegab" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Omegab-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Omegac" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Omegac-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Omegax" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Omegax-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Tgamma0" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Tgamma0-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Tnu" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="Tnu-fit" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <property name="Tnu-length"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="Yp" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Yp-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="gnu" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="gnu-fit" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <property name="gnu-length"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="massnu" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="massnu-fit" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <property name="massnu-length"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="munu" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="munu-fit" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <property name="munu-length"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HICosmo" c:type="NcHICosmo"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="HICosmoDEPrivate" c:type="NcHICosmoDEPrivate*"/>
      </field>
    </class>
    <record name="HICosmoDEClass"
            c:type="NcHICosmoDEClass"
            glib:is-gtype-struct-for="HICosmoDE">
      <field name="parent_class" readable="0" private="1">
        <type name="HICosmoClass" c:type="NcHICosmoClass"/>
      </field>
      <field name="E2Omega_de" readable="0" private="1">
        <type name="HICosmoDEFunc1" c:type="NcHICosmoDEFunc1"/>
      </field>
      <field name="dE2Omega_de_dz" readable="0" private="1">
        <type name="HICosmoDEFunc1" c:type="NcHICosmoDEFunc1"/>
      </field>
      <field name="d2E2Omega_de_dz2" readable="0" private="1">
        <type name="HICosmoDEFunc1" c:type="NcHICosmoDEFunc1"/>
      </field>
      <field name="w_de" readable="0" private="1">
        <type name="HICosmoDEFunc1" c:type="NcHICosmoDEFunc1"/>
      </field>
    </record>
    <callback name="HICosmoDEFunc1" c:type="NcHICosmoDEFunc1">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="cosmo_de" transfer-ownership="none">
          <type name="HICosmoDE" c:type="NcHICosmoDE*"/>
        </parameter>
        <parameter name="z" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="HICosmoDEImpl"
                 glib:type-name="NcHICosmoDEImpl"
                 glib:get-type="nc_hi_cosmo_de_impl_get_type"
                 c:type="NcHICosmoDEImpl">
      <doc xml:space="preserve">FIXME</doc>
      <member name="e2omega_de"
              value="35"
              c:identifier="NC_HICOSMO_DE_IMPL_E2Omega_de"
              glib:nick="e2omega-de">
        <doc xml:space="preserve">dark energy (DE) component of the normalized Hubble function (squared) $E^2(z)$</doc>
      </member>
      <member name="de2omega_de_dz"
              value="36"
              c:identifier="NC_HICOSMO_DE_IMPL_dE2Omega_de_dz"
              glib:nick="de2omega-de-dz">
        <doc xml:space="preserve">DE component of the first derivative of $E^2(z)$ with respect to the redshift $z$</doc>
      </member>
      <member name="d2e2omega_de_dz2"
              value="37"
              c:identifier="NC_HICOSMO_DE_IMPL_d2E2Omega_de_dz2"
              glib:nick="d2e2omega-de-dz2">
        <doc xml:space="preserve">DE component of the second derivative of $E^2(z)$ with respect to $z$</doc>
      </member>
      <member name="w_de"
              value="38"
              c:identifier="NC_HICOSMO_DE_IMPL_w_de"
              glib:nick="w-de">
        <doc xml:space="preserve">DE equation of state</doc>
      </member>
    </enumeration>
    <class name="HICosmoDELinder"
           c:symbol-prefix="hicosmo_de_linder"
           c:type="NcHICosmoDELinder"
           parent="HICosmoDE"
           glib:type-name="NcHICosmoDELinder"
           glib:get-type="nc_hicosmo_de_linder_get_type"
           glib:type-struct="HICosmoDELinderClass">
      <constructor name="new" c:identifier="nc_hicosmo_de_linder_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="HICosmoDELinder" c:type="NcHICosmoDELinder*"/>
        </return-value>
      </constructor>
      <property name="w0" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="w0-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="w1" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="w1-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HICosmoDE" c:type="NcHICosmoDE"/>
      </field>
    </class>
    <record name="HICosmoDELinderClass"
            c:type="NcHICosmoDELinderClass"
            glib:is-gtype-struct-for="HICosmoDELinder">
      <field name="parent_class" readable="0" private="1">
        <type name="HICosmoDEClass" c:type="NcHICosmoDEClass"/>
      </field>
    </record>
    <enumeration name="HICosmoDELinderParams"
                 glib:type-name="NcHICosmoDELinderParams"
                 glib:get-type="nc_hi_cosmo_de_linder_params_get_type"
                 c:type="NcHICosmoDELinderParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="w0"
              value="7"
              c:identifier="NC_HICOSMO_DE_LINDER_W0"
              glib:nick="w0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="w1"
              value="8"
              c:identifier="NC_HICOSMO_DE_LINDER_W1"
              glib:nick="w1">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="HICosmoDEPad"
           c:symbol-prefix="hicosmo_de_pad"
           c:type="NcHICosmoDEPad"
           parent="HICosmoDE"
           glib:type-name="NcHICosmoDEPad"
           glib:get-type="nc_hicosmo_de_pad_get_type"
           glib:type-struct="HICosmoDEPadClass">
      <constructor name="new" c:identifier="nc_hicosmo_de_pad_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="HICosmoDEPad" c:type="NcHICosmoDEPad*"/>
        </return-value>
      </constructor>
      <property name="w0" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="w0-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="w1" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="w1-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HICosmoDE" c:type="NcHICosmoDE"/>
      </field>
    </class>
    <record name="HICosmoDEPadClass"
            c:type="NcHICosmoDEPadClass"
            glib:is-gtype-struct-for="HICosmoDEPad">
      <field name="parent_class" readable="0" private="1">
        <type name="HICosmoDEClass" c:type="NcHICosmoDEClass"/>
      </field>
    </record>
    <enumeration name="HICosmoDEPadParams"
                 glib:type-name="NcHICosmoDEPadParams"
                 glib:get-type="nc_hi_cosmo_de_pad_params_get_type"
                 c:type="NcHICosmoDEPadParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="w0"
              value="7"
              c:identifier="NC_HICOSMO_DE_PAD_W0"
              glib:nick="w0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="w1"
              value="8"
              c:identifier="NC_HICOSMO_DE_PAD_W1"
              glib:nick="w1">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <enumeration name="HICosmoDEParams"
                 glib:type-name="NcHICosmoDEParams"
                 glib:get-type="nc_hi_cosmo_de_params_get_type"
                 c:type="NcHICosmoDEParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="h0"
              value="0"
              c:identifier="NC_HICOSMO_DE_H0"
              glib:nick="h0">
        <doc xml:space="preserve">Hubble constant [km/(s Mpc)]</doc>
      </member>
      <member name="omega_c"
              value="1"
              c:identifier="NC_HICOSMO_DE_OMEGA_C"
              glib:nick="omega-c">
        <doc xml:space="preserve">cold dark matter density parameter</doc>
      </member>
      <member name="omega_x"
              value="2"
              c:identifier="NC_HICOSMO_DE_OMEGA_X"
              glib:nick="omega-x">
        <doc xml:space="preserve">dark energy density parameter</doc>
      </member>
      <member name="t_gamma0"
              value="3"
              c:identifier="NC_HICOSMO_DE_T_GAMMA0"
              glib:nick="t-gamma0">
        <doc xml:space="preserve">CMB temperature today</doc>
      </member>
      <member name="he_yp"
              value="4"
              c:identifier="NC_HICOSMO_DE_HE_YP"
              glib:nick="he-yp">
        <doc xml:space="preserve">primordial helium abundance</doc>
      </member>
      <member name="ennu"
              value="5"
              c:identifier="NC_HICOSMO_DE_ENNU"
              glib:nick="ennu">
        <doc xml:space="preserve">effective number of neutrinos</doc>
      </member>
      <member name="omega_b"
              value="6"
              c:identifier="NC_HICOSMO_DE_OMEGA_B"
              glib:nick="omega-b">
        <doc xml:space="preserve">baryon density parameter</doc>
      </member>
    </enumeration>
    <record name="HICosmoDEPrivate" c:type="NcHICosmoDEPrivate" disguised="1">
    </record>
    <enumeration name="HICosmoDEQEParams"
                 glib:type-name="NcHICosmoDEQEParams"
                 glib:get-type="nc_hi_cosmo_deqe_params_get_type"
                 c:type="NcHICosmoDEQEParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="w0"
              value="7"
              c:identifier="NC_HICOSMO_DE_QE_W0"
              glib:nick="w0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="w1"
              value="8"
              c:identifier="NC_HICOSMO_DE_QE_W1"
              glib:nick="w1">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="HICosmoDEQe"
           c:symbol-prefix="hicosmo_de_qe"
           c:type="NcHICosmoDEQe"
           parent="HICosmoDE"
           glib:type-name="NcHICosmoDEQe"
           glib:get-type="nc_hicosmo_de_qe_get_type"
           glib:type-struct="HICosmoDEQeClass">
      <constructor name="new" c:identifier="nc_hicosmo_de_qe_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="HICosmoDEQe" c:type="NcHICosmoDEQe*"/>
        </return-value>
      </constructor>
      <property name="w0" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="w0-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="w1" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="w1-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HICosmoDE" c:type="NcHICosmoDE"/>
      </field>
    </class>
    <record name="HICosmoDEQeClass"
            c:type="NcHICosmoDEQeClass"
            glib:is-gtype-struct-for="HICosmoDEQe">
      <field name="parent_class" readable="0" private="1">
        <type name="HICosmoDEClass" c:type="NcHICosmoDEClass"/>
      </field>
    </record>
    <class name="HICosmoDEReparamCMB"
           c:symbol-prefix="hicosmo_de_reparam_cmb"
           c:type="NcHICosmoDEReparamCMB"
           parent="NumCosmoMath.Reparam"
           glib:type-name="NcHICosmoDEReparamCMB"
           glib:get-type="nc_hicosmo_de_reparam_cmb_get_type"
           glib:type-struct="HICosmoDEReparamCMBClass">
      <constructor name="new" c:identifier="nc_hicosmo_de_reparam_cmb_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcHICosmoDEReparamCMB</doc>
          <type name="HICosmoDEReparamCMB" c:type="NcHICosmoDEReparamCMB*"/>
        </return-value>
        <parameters>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve">number of parameters</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Reparam" c:type="NcmReparam"/>
      </field>
    </class>
    <record name="HICosmoDEReparamCMBClass"
            c:type="NcHICosmoDEReparamCMBClass"
            glib:is-gtype-struct-for="HICosmoDEReparamCMB">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.ReparamClass" c:type="NcmReparamClass"/>
      </field>
    </record>
    <class name="HICosmoDEReparamOk"
           c:symbol-prefix="hicosmo_de_reparam_ok"
           c:type="NcHICosmoDEReparamOk"
           parent="NumCosmoMath.Reparam"
           glib:type-name="NcHICosmoDEReparamOk"
           glib:get-type="nc_hicosmo_de_reparam_ok_get_type"
           glib:type-struct="HICosmoDEReparamOkClass">
      <constructor name="new" c:identifier="nc_hicosmo_de_reparam_ok_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcHICosmoDEReparamOk</doc>
          <type name="HICosmoDEReparamOk" c:type="NcHICosmoDEReparamOk*"/>
        </return-value>
        <parameters>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve">number of parameters</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Reparam" c:type="NcmReparam"/>
      </field>
    </class>
    <record name="HICosmoDEReparamOkClass"
            c:type="NcHICosmoDEReparamOkClass"
            glib:is-gtype-struct-for="HICosmoDEReparamOk">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.ReparamClass" c:type="NcmReparamClass"/>
      </field>
    </record>
    <enumeration name="HICosmoDEVParams"
                 glib:type-name="NcHICosmoDEVParams"
                 glib:get-type="nc_hi_cosmo_dev_params_get_type"
                 c:type="NcHICosmoDEVParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="m"
              value="0"
              c:identifier="NC_HICOSMO_DE_MASSNU_M"
              glib:nick="m">
        <doc xml:space="preserve">neutrino masses</doc>
      </member>
      <member name="t"
              value="1"
              c:identifier="NC_HICOSMO_DE_MASSNU_T"
              glib:nick="t">
        <doc xml:space="preserve">massive neutrino temperatures</doc>
      </member>
      <member name="mu"
              value="2"
              c:identifier="NC_HICOSMO_DE_MASSNU_MU"
              glib:nick="mu">
        <doc xml:space="preserve">massive neutrino chemical potentials</doc>
      </member>
      <member name="g"
              value="3"
              c:identifier="NC_HICOSMO_DE_MASSNU_G"
              glib:nick="g">
        <doc xml:space="preserve">massive neutrino degeneracy factors</doc>
      </member>
    </enumeration>
    <enumeration name="HICosmoDEXCDMParams"
                 glib:type-name="NcHICosmoDEXCDMParams"
                 glib:get-type="nc_hi_cosmo_dexcdm_params_get_type"
                 c:type="NcHICosmoDEXCDMParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="w"
              value="7"
              c:identifier="NC_HICOSMO_DE_XCDM_W"
              glib:nick="w">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="HICosmoDEXcdm"
           c:symbol-prefix="hicosmo_de_xcdm"
           c:type="NcHICosmoDEXcdm"
           parent="HICosmoDE"
           glib:type-name="NcHICosmoDEXcdm"
           glib:get-type="nc_hicosmo_de_xcdm_get_type"
           glib:type-struct="HICosmoDEXcdmClass">
      <constructor name="new" c:identifier="nc_hicosmo_de_xcdm_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="HICosmoDEXcdm" c:type="NcHICosmoDEXcdm*"/>
        </return-value>
      </constructor>
      <property name="w" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="w-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HICosmoDE" c:type="NcHICosmoDE"/>
      </field>
    </class>
    <record name="HICosmoDEXcdmClass"
            c:type="NcHICosmoDEXcdmClass"
            glib:is-gtype-struct-for="HICosmoDEXcdm">
      <field name="parent_class" readable="0" private="1">
        <type name="HICosmoDEClass" c:type="NcHICosmoDEClass"/>
      </field>
    </record>
    <record name="HICosmoFunc" c:type="NcHICosmoFunc">
      <field name="name" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="desc" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="f" writable="1">
        <type name="HICosmoFunc0" c:type="NcHICosmoFunc0"/>
      </field>
      <field name="impl" writable="1">
        <type name="HICosmoImpl" c:type="NcHICosmoImpl"/>
      </field>
    </record>
    <callback name="HICosmoFunc0" c:type="NcHICosmoFunc0">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="cosmo" transfer-ownership="none">
          <doc xml:space="preserve">a #NcHICosmo</doc>
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="HICosmoFunc1K" c:type="NcHICosmoFunc1K">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="cosmo" transfer-ownership="none">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
        <parameter name="k" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="cosmo" transfer-ownership="none">
          <doc xml:space="preserve">a #NcHICosmo</doc>
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
        <parameter name="z" transfer-ownership="none">
          <doc xml:space="preserve">redshift $z$</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="HICosmoFuncMassNuInfo" c:type="NcHICosmoFuncMassNuInfo">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cosmo" transfer-ownership="none">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
        <parameter name="nu_i" transfer-ownership="none">
          <type name="guint" c:type="const guint"/>
        </parameter>
        <parameter name="mass_eV" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="T_0" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="xi" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="g" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="HICosmoFuncNMassNu" c:type="NcHICosmoFuncNMassNu">
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="cosmo" transfer-ownership="none">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="HICosmoFuncZ" c:type="NcHICosmoFuncZ">
      <field name="name" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="desc" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="f" writable="1">
        <type name="HICosmoFunc1Z" c:type="NcHICosmoFunc1Z"/>
      </field>
      <field name="impl" writable="1">
        <type name="HICosmoImpl" c:type="NcHICosmoImpl"/>
      </field>
    </record>
    <class name="HICosmoGCG"
           c:symbol-prefix="hicosmo_gcg"
           c:type="NcHICosmoGCG"
           parent="HICosmo"
           glib:type-name="NcHICosmoGCG"
           glib:get-type="nc_hicosmo_gcg_get_type"
           glib:type-struct="HICosmoGCGClass">
      <method name="cmb_params" c:identifier="nc_hicosmo_gcg_cmb_params">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo_gcg" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmoGCG</doc>
            <type name="HICosmoGCG" c:type="NcHICosmoGCG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="omega_x2omega_k"
              c:identifier="nc_hicosmo_gcg_omega_x2omega_k">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo_gcg" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmoGCG</doc>
            <type name="HICosmoGCG" c:type="NcHICosmoGCG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="ENnu" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="ENnu-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="H0" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="H0-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Omegab" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Omegab-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Omegac" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Omegac-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Omegax" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Omegax-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Tgamma0" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Tgamma0-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Tnu" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="Tnu-fit" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <property name="Tnu-length"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="Yp" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Yp-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="gamma" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="gamma-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="gnu" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="gnu-fit" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <property name="gnu-length"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="massnu" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="massnu-fit" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <property name="massnu-length"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="munu" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="munu-fit" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <property name="munu-length"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HICosmo" c:type="NcHICosmo"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="HICosmoGCGPrivate" c:type="NcHICosmoGCGPrivate*"/>
      </field>
    </class>
    <record name="HICosmoGCGClass"
            c:type="NcHICosmoGCGClass"
            glib:is-gtype-struct-for="HICosmoGCG">
      <field name="parent_class" readable="0" private="1">
        <type name="HICosmoClass" c:type="NcHICosmoClass"/>
      </field>
    </record>
    <callback name="HICosmoGCGFunc1" c:type="NcHICosmoGCGFunc1">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="cosmo_gcg" transfer-ownership="none">
          <type name="HICosmoGCG" c:type="NcHICosmoGCG*"/>
        </parameter>
        <parameter name="z" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="HICosmoGCGParams"
                 glib:type-name="NcHICosmoGCGParams"
                 glib:get-type="nc_hi_cosmo_gcg_params_get_type"
                 c:type="NcHICosmoGCGParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="h0"
              value="0"
              c:identifier="NC_HICOSMO_GCG_H0"
              glib:nick="h0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="omega_c"
              value="1"
              c:identifier="NC_HICOSMO_GCG_OMEGA_C"
              glib:nick="omega-c">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="omega_x"
              value="2"
              c:identifier="NC_HICOSMO_GCG_OMEGA_X"
              glib:nick="omega-x">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="t_gamma0"
              value="3"
              c:identifier="NC_HICOSMO_GCG_T_GAMMA0"
              glib:nick="t-gamma0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="he_yp"
              value="4"
              c:identifier="NC_HICOSMO_GCG_HE_YP"
              glib:nick="he-yp">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="ennu"
              value="5"
              c:identifier="NC_HICOSMO_GCG_ENNU"
              glib:nick="ennu">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="omega_b"
              value="6"
              c:identifier="NC_HICOSMO_GCG_OMEGA_B"
              glib:nick="omega-b">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="gamma"
              value="7"
              c:identifier="NC_HICOSMO_GCG_GAMMA"
              glib:nick="gamma">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <record name="HICosmoGCGPrivate"
            c:type="NcHICosmoGCGPrivate"
            disguised="1">
    </record>
    <class name="HICosmoGCGReparamCMB"
           c:symbol-prefix="hicosmo_gcg_reparam_cmb"
           c:type="NcHICosmoGCGReparamCMB"
           parent="NumCosmoMath.Reparam"
           glib:type-name="NcHICosmoGCGReparamCMB"
           glib:get-type="nc_hicosmo_gcg_reparam_cmb_get_type"
           glib:type-struct="HICosmoGCGReparamCMBClass">
      <constructor name="new" c:identifier="nc_hicosmo_gcg_reparam_cmb_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcHICosmoGCGReparamCMB</doc>
          <type name="HICosmoGCGReparamCMB" c:type="NcHICosmoGCGReparamCMB*"/>
        </return-value>
        <parameters>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve">number of parameters</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Reparam" c:type="NcmReparam"/>
      </field>
    </class>
    <record name="HICosmoGCGReparamCMBClass"
            c:type="NcHICosmoGCGReparamCMBClass"
            glib:is-gtype-struct-for="HICosmoGCGReparamCMB">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.ReparamClass" c:type="NcmReparamClass"/>
      </field>
    </record>
    <class name="HICosmoGCGReparamOk"
           c:symbol-prefix="hicosmo_gcg_reparam_ok"
           c:type="NcHICosmoGCGReparamOk"
           parent="NumCosmoMath.Reparam"
           glib:type-name="NcHICosmoGCGReparamOk"
           glib:get-type="nc_hicosmo_gcg_reparam_ok_get_type"
           glib:type-struct="HICosmoGCGReparamOkClass">
      <constructor name="new" c:identifier="nc_hicosmo_gcg_reparam_ok_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcHICosmoGCGReparamOk</doc>
          <type name="HICosmoGCGReparamOk" c:type="NcHICosmoGCGReparamOk*"/>
        </return-value>
        <parameters>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve">number of parameters</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Reparam" c:type="NcmReparam"/>
      </field>
    </class>
    <record name="HICosmoGCGReparamOkClass"
            c:type="NcHICosmoGCGReparamOkClass"
            glib:is-gtype-struct-for="HICosmoGCGReparamOk">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.ReparamClass" c:type="NcmReparamClass"/>
      </field>
    </record>
    <enumeration name="HICosmoGCGVParams"
                 glib:type-name="NcHICosmoGCGVParams"
                 glib:get-type="nc_hi_cosmo_gcgv_params_get_type"
                 c:type="NcHICosmoGCGVParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="m"
              value="0"
              c:identifier="NC_HICOSMO_GCG_MASSNU_M"
              glib:nick="m">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="t"
              value="1"
              c:identifier="NC_HICOSMO_GCG_MASSNU_T"
              glib:nick="t">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="mu"
              value="2"
              c:identifier="NC_HICOSMO_GCG_MASSNU_MU"
              glib:nick="mu">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="g"
              value="3"
              c:identifier="NC_HICOSMO_GCG_MASSNU_G"
              glib:nick="g">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="HICosmoIDEM2"
           c:symbol-prefix="hicosmo_idem2"
           c:type="NcHICosmoIDEM2"
           parent="HICosmo"
           glib:type-name="NcHICosmoIDEM2"
           glib:get-type="nc_hicosmo_idem2_get_type"
           glib:type-struct="HICosmoIDEM2Class">
      <method name="cmb_params" c:identifier="nc_hicosmo_idem2_cmb_params">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo_idem2" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmoIDEM2</doc>
            <type name="HICosmoIDEM2" c:type="NcHICosmoIDEM2*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="omega_x2omega_k"
              c:identifier="nc_hicosmo_idem2_omega_x2omega_k">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cosmo_idem2" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmoIDEM2</doc>
            <type name="HICosmoIDEM2" c:type="NcHICosmoIDEM2*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="ENnu" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="ENnu-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="H0" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="H0-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Omegab" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Omegab-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Omegac" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Omegac-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Omegax" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Omegax-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Tgamma0" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Tgamma0-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Tnu" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="Tnu-fit" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <property name="Tnu-length"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="Yp" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Yp-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="gamma" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="gamma-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="gnu" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="gnu-fit" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <property name="gnu-length"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="massnu" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="massnu-fit" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <property name="massnu-length"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="munu" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="munu-fit" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <property name="munu-length"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HICosmo" c:type="NcHICosmo"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="HICosmoIDEM2Private" c:type="NcHICosmoIDEM2Private*"/>
      </field>
    </class>
    <record name="HICosmoIDEM2Class"
            c:type="NcHICosmoIDEM2Class"
            glib:is-gtype-struct-for="HICosmoIDEM2">
      <field name="parent_class" readable="0" private="1">
        <type name="HICosmoClass" c:type="NcHICosmoClass"/>
      </field>
    </record>
    <callback name="HICosmoIDEM2Func1" c:type="NcHICosmoIDEM2Func1">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="cosmo_idem2" transfer-ownership="none">
          <type name="HICosmoIDEM2" c:type="NcHICosmoIDEM2*"/>
        </parameter>
        <parameter name="z" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="HICosmoIDEM2Params"
                 glib:type-name="NcHICosmoIDEM2Params"
                 glib:get-type="nc_hi_cosmo_ide_m2_params_get_type"
                 c:type="NcHICosmoIDEM2Params">
      <doc xml:space="preserve">FIXME</doc>
      <member name="h0"
              value="0"
              c:identifier="NC_HICOSMO_IDEM2_H0"
              glib:nick="h0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="omega_c"
              value="1"
              c:identifier="NC_HICOSMO_IDEM2_OMEGA_C"
              glib:nick="omega-c">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="omega_x"
              value="2"
              c:identifier="NC_HICOSMO_IDEM2_OMEGA_X"
              glib:nick="omega-x">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="t_gamma0"
              value="3"
              c:identifier="NC_HICOSMO_IDEM2_T_GAMMA0"
              glib:nick="t-gamma0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="he_yp"
              value="4"
              c:identifier="NC_HICOSMO_IDEM2_HE_YP"
              glib:nick="he-yp">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="ennu"
              value="5"
              c:identifier="NC_HICOSMO_IDEM2_ENNU"
              glib:nick="ennu">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="omega_b"
              value="6"
              c:identifier="NC_HICOSMO_IDEM2_OMEGA_B"
              glib:nick="omega-b">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="gamma"
              value="7"
              c:identifier="NC_HICOSMO_IDEM2_GAMMA"
              glib:nick="gamma">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <record name="HICosmoIDEM2Private"
            c:type="NcHICosmoIDEM2Private"
            disguised="1">
    </record>
    <class name="HICosmoIDEM2ReparamCMB"
           c:symbol-prefix="hicosmo_idem2_reparam_cmb"
           c:type="NcHICosmoIDEM2ReparamCMB"
           parent="NumCosmoMath.Reparam"
           glib:type-name="NcHICosmoIDEM2ReparamCMB"
           glib:get-type="nc_hicosmo_idem2_reparam_cmb_get_type"
           glib:type-struct="HICosmoIDEM2ReparamCMBClass">
      <constructor name="new" c:identifier="nc_hicosmo_idem2_reparam_cmb_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcHICosmoIDEM2ReparamCMB</doc>
          <type name="HICosmoIDEM2ReparamCMB"
                c:type="NcHICosmoIDEM2ReparamCMB*"/>
        </return-value>
        <parameters>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve">number of parameters</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Reparam" c:type="NcmReparam"/>
      </field>
    </class>
    <record name="HICosmoIDEM2ReparamCMBClass"
            c:type="NcHICosmoIDEM2ReparamCMBClass"
            glib:is-gtype-struct-for="HICosmoIDEM2ReparamCMB">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.ReparamClass" c:type="NcmReparamClass"/>
      </field>
    </record>
    <class name="HICosmoIDEM2ReparamOk"
           c:symbol-prefix="hicosmo_idem2_reparam_ok"
           c:type="NcHICosmoIDEM2ReparamOk"
           parent="NumCosmoMath.Reparam"
           glib:type-name="NcHICosmoIDEM2ReparamOk"
           glib:get-type="nc_hicosmo_idem2_reparam_ok_get_type"
           glib:type-struct="HICosmoIDEM2ReparamOkClass">
      <constructor name="new" c:identifier="nc_hicosmo_idem2_reparam_ok_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcHICosmoIDEM2ReparamOk</doc>
          <type name="HICosmoIDEM2ReparamOk"
                c:type="NcHICosmoIDEM2ReparamOk*"/>
        </return-value>
        <parameters>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve">number of parameters</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Reparam" c:type="NcmReparam"/>
      </field>
    </class>
    <record name="HICosmoIDEM2ReparamOkClass"
            c:type="NcHICosmoIDEM2ReparamOkClass"
            glib:is-gtype-struct-for="HICosmoIDEM2ReparamOk">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.ReparamClass" c:type="NcmReparamClass"/>
      </field>
    </record>
    <enumeration name="HICosmoIDEM2VParams"
                 glib:type-name="NcHICosmoIDEM2VParams"
                 glib:get-type="nc_hi_cosmo_ide_m2_vparams_get_type"
                 c:type="NcHICosmoIDEM2VParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="m"
              value="0"
              c:identifier="NC_HICOSMO_IDEM2_MASSNU_M"
              glib:nick="m">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="t"
              value="1"
              c:identifier="NC_HICOSMO_IDEM2_MASSNU_T"
              glib:nick="t">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="mu"
              value="2"
              c:identifier="NC_HICOSMO_IDEM2_MASSNU_MU"
              glib:nick="mu">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="g"
              value="3"
              c:identifier="NC_HICOSMO_IDEM2_MASSNU_G"
              glib:nick="g">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <enumeration name="HICosmoImpl"
                 glib:type-name="NcHICosmoImpl"
                 glib:get-type="nc_hi_cosmo_impl_get_type"
                 c:type="NcHICosmoImpl">
      <doc xml:space="preserve">Flags defining the implementation options of the NcHICosmo abstract object.</doc>
      <member name="h0"
              value="0"
              c:identifier="NC_HICOSMO_IMPL_H0"
              glib:nick="h0">
        <doc xml:space="preserve">Hubble constant</doc>
      </member>
      <member name="omega_b0"
              value="1"
              c:identifier="NC_HICOSMO_IMPL_Omega_b0"
              glib:nick="omega-b0">
        <doc xml:space="preserve">Baryonic density today $\Omega_{b0} = \rho_{b0} / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="omega_c0"
              value="2"
              c:identifier="NC_HICOSMO_IMPL_Omega_c0"
              glib:nick="omega-c0">
        <doc xml:space="preserve">Cold dark matter density today $\Omega_{c0} = \rho_{c0} / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="omega_g0"
              value="3"
              c:identifier="NC_HICOSMO_IMPL_Omega_g0"
              glib:nick="omega-g0">
        <doc xml:space="preserve">Photons density today $\Omega_{\gamma0} = \rho_{\gamma0} / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="omega_nu0"
              value="4"
              c:identifier="NC_HICOSMO_IMPL_Omega_nu0"
              glib:nick="omega-nu0">
        <doc xml:space="preserve">Ultra-relativistic neutrinos density today $\Omega_{\nu0} = \rho_{\nu0} / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="omega_mnu0"
              value="5"
              c:identifier="NC_HICOSMO_IMPL_Omega_mnu0"
              glib:nick="omega-mnu0">
        <doc xml:space="preserve">Massive neutrinos density today $\Omega_{m\nu0} = \rho_{m\nu0} / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="press_mnu0"
              value="6"
              c:identifier="NC_HICOSMO_IMPL_Press_mnu0"
              glib:nick="press-mnu0">
        <doc xml:space="preserve">Massive neutrinos dimensionless pressure today $P_{m\nu0} = p_{m\nu0} / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="omega_mnu0_n"
              value="7"
              c:identifier="NC_HICOSMO_IMPL_Omega_mnu0_n"
              glib:nick="omega-mnu0-n">
        <doc xml:space="preserve">The n-th massive neutrinos density today $\Omega_{m\nu0,n} = \rho_{m\nu0,n} / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="press_mnu0_n"
              value="8"
              c:identifier="NC_HICOSMO_IMPL_Press_mnu0_n"
              glib:nick="press-mnu0-n">
        <doc xml:space="preserve">The n-th massive neutrinos dimensionless pressure today $P_{m\nu0,n} = p_{m\nu0,n} / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="omega_m0"
              value="9"
              c:identifier="NC_HICOSMO_IMPL_Omega_m0"
              glib:nick="omega-m0">
        <doc xml:space="preserve">Total matter density today $\Omega_{m0} = \rho_{m0} / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="omega_r0"
              value="10"
              c:identifier="NC_HICOSMO_IMPL_Omega_r0"
              glib:nick="omega-r0">
        <doc xml:space="preserve">Total radiation density today $\Omega_{r0} = \rho_{r0} / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="omega_t0"
              value="11"
              c:identifier="NC_HICOSMO_IMPL_Omega_t0"
              glib:nick="omega-t0">
        <doc xml:space="preserve">Total density today $\Omega_{t0}$</doc>
      </member>
      <member name="t_gamma0"
              value="12"
              c:identifier="NC_HICOSMO_IMPL_T_gamma0"
              glib:nick="t-gamma0">
        <doc xml:space="preserve">Radiation temperature today</doc>
      </member>
      <member name="yp_4he"
              value="13"
              c:identifier="NC_HICOSMO_IMPL_Yp_4He"
              glib:nick="yp-4he">
        <doc xml:space="preserve">Primordial Helium mass fraction</doc>
      </member>
      <member name="z_lss"
              value="14"
              c:identifier="NC_HICOSMO_IMPL_z_lss"
              glib:nick="z-lss">
        <doc xml:space="preserve">Redshift of the last scatering surface</doc>
      </member>
      <member name="as_drag"
              value="15"
              c:identifier="NC_HICOSMO_IMPL_as_drag"
              glib:nick="as-drag">
        <doc xml:space="preserve">Acoustic Scale at drag redshift</doc>
      </member>
      <member name="xb"
              value="16"
              c:identifier="NC_HICOSMO_IMPL_xb"
              glib:nick="xb">
        <doc xml:space="preserve">Maximum redshift</doc>
      </member>
      <member name="e2omega_b"
              value="17"
              c:identifier="NC_HICOSMO_IMPL_E2Omega_b"
              glib:nick="e2omega-b">
        <doc xml:space="preserve">Baryonic density $E^2\Omega_{b} = \rho_b(z) / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="e2omega_c"
              value="18"
              c:identifier="NC_HICOSMO_IMPL_E2Omega_c"
              glib:nick="e2omega-c">
        <doc xml:space="preserve">Cold dark matter density $E^2\Omega_{c} = \rho_c(z) / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="e2omega_g"
              value="19"
              c:identifier="NC_HICOSMO_IMPL_E2Omega_g"
              glib:nick="e2omega-g">
        <doc xml:space="preserve">Photons density $E^2\Omega_{\gamma} = \rho_\gamma(z) / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="e2omega_nu"
              value="20"
              c:identifier="NC_HICOSMO_IMPL_E2Omega_nu"
              glib:nick="e2omega-nu">
        <doc xml:space="preserve">Ultra-relativistic neutrinos density $E^2\Omega_{\nu} = \rho_\nu(z) / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="e2omega_mnu"
              value="21"
              c:identifier="NC_HICOSMO_IMPL_E2Omega_mnu"
              glib:nick="e2omega-mnu">
        <doc xml:space="preserve">Massive neutrinos density $E^2\Omega_{m\nu} = \rho_{m\nu}(z) / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="e2press_mnu"
              value="22"
              c:identifier="NC_HICOSMO_IMPL_E2Press_mnu"
              glib:nick="e2press-mnu">
        <doc xml:space="preserve">Massive neutrinos pressure $E^2P_{m\nu} = p_{m\nu}(z) / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="e2omega_mnu_n"
              value="23"
              c:identifier="NC_HICOSMO_IMPL_E2Omega_mnu_n"
              glib:nick="e2omega-mnu-n">
        <doc xml:space="preserve">The n-th Massive neutrinos density $E^2\Omega_{m\nu,n} = \rho_{m\nu,n}(z) / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="e2press_mnu_n"
              value="24"
              c:identifier="NC_HICOSMO_IMPL_E2Press_mnu_n"
              glib:nick="e2press-mnu-n">
        <doc xml:space="preserve">The n-th Massive neutrinos pressure $E^2P_{m\nu,n} = p_{m\nu,n}(z) / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="e2omega_m"
              value="25"
              c:identifier="NC_HICOSMO_IMPL_E2Omega_m"
              glib:nick="e2omega-m">
        <doc xml:space="preserve">Total matter density $E^2\Omega_{m} = \rho_m(z) / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="e2omega_r"
              value="26"
              c:identifier="NC_HICOSMO_IMPL_E2Omega_r"
              glib:nick="e2omega-r">
        <doc xml:space="preserve">Total radiation density $\Omega_{r} = \rho_r(z) / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="e2omega_t"
              value="27"
              c:identifier="NC_HICOSMO_IMPL_E2Omega_t"
              glib:nick="e2omega-t">
        <doc xml:space="preserve">Total density $E2\Omega_{t0} = \rho_t(z) / \rho_{\mathrm{crit}0}$</doc>
      </member>
      <member name="e2"
              value="28"
              c:identifier="NC_HICOSMO_IMPL_E2"
              glib:nick="e2">
        <doc xml:space="preserve">Dimensionless Hubble function squared $H^2(z) / H_0^2$</doc>
      </member>
      <member name="de2_dz"
              value="29"
              c:identifier="NC_HICOSMO_IMPL_dE2_dz"
              glib:nick="de2-dz">
        <doc xml:space="preserve">Derivative of the dimensionless Hubble function squared.</doc>
      </member>
      <member name="d2e2_dz2"
              value="30"
              c:identifier="NC_HICOSMO_IMPL_d2E2_dz2"
              glib:nick="d2e2-dz2">
        <doc xml:space="preserve">Second derivative of the dimensionless Hubble function squared.</doc>
      </member>
      <member name="bgp_cs2"
              value="31"
              c:identifier="NC_HICOSMO_IMPL_bgp_cs2"
              glib:nick="bgp-cs2">
        <doc xml:space="preserve">Baryon-photon plasma speed of sound squared $c_s^2$.</doc>
      </member>
      <member name="dc"
              value="32"
              c:identifier="NC_HICOSMO_IMPL_Dc"
              glib:nick="dc">
        <doc xml:space="preserve">Comoving distance</doc>
      </member>
      <member name="nmassnu"
              value="33"
              c:identifier="NC_HICOSMO_IMPL_NMassNu"
              glib:nick="nmassnu">
        <doc xml:space="preserve">Number of massive neutrinos</doc>
      </member>
      <member name="massnuinfo"
              value="34"
              c:identifier="NC_HICOSMO_IMPL_MassNuInfo"
              glib:nick="massnuinfo">
        <doc xml:space="preserve">Massive neutrino info</doc>
      </member>
    </enumeration>
    <class name="HICosmoLCDM"
           c:symbol-prefix="hicosmo_lcdm"
           c:type="NcHICosmoLCDM"
           parent="HICosmo"
           glib:type-name="NcHICosmoLCDM"
           glib:get-type="nc_hicosmo_lcdm_get_type"
           glib:type-struct="HICosmoLCDMClass">
      <constructor name="new" c:identifier="nc_hicosmo_lcdm_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="HICosmoLCDM" c:type="NcHICosmoLCDM*"/>
        </return-value>
      </constructor>
      <property name="ENnu" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="ENnu-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="H0" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="H0-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Omegab" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Omegab-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Omegac" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Omegac-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Omegax" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Omegax-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Tgamma0" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Tgamma0-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Yp" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Yp-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HICosmo" c:type="NcHICosmo"/>
      </field>
    </class>
    <record name="HICosmoLCDMClass"
            c:type="NcHICosmoLCDMClass"
            glib:is-gtype-struct-for="HICosmoLCDM">
      <field name="parent_class" readable="0" private="1">
        <type name="HICosmoClass" c:type="NcHICosmoClass"/>
      </field>
    </record>
    <class name="HICosmoQConst"
           c:symbol-prefix="hicosmo_qconst"
           c:type="NcHICosmoQConst"
           parent="HICosmo"
           glib:type-name="NcHICosmoQConst"
           glib:get-type="nc_hicosmo_qconst_get_type"
           glib:type-struct="HICosmoQConstClass">
      <constructor name="new" c:identifier="nc_hicosmo_qconst_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="HICosmoQConst" c:type="NcHICosmoQConst*"/>
        </return-value>
      </constructor>
      <property name="Dc" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Dc-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="E" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="E-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="H0" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="H0-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Omegat" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Omegat-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="q" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="q-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="zs" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="zs-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HICosmo" c:type="NcHICosmo"/>
      </field>
    </class>
    <record name="HICosmoQConstClass"
            c:type="NcHICosmoQConstClass"
            glib:is-gtype-struct-for="HICosmoQConst">
      <field name="parent_class" readable="0" private="1">
        <type name="HICosmoClass" c:type="NcHICosmoClass"/>
      </field>
    </record>
    <enumeration name="HICosmoQConstParams"
                 glib:type-name="NcHICosmoQConstParams"
                 glib:get-type="nc_hi_cosmo_qconst_params_get_type"
                 c:type="NcHICosmoQConstParams">
      <member name="h0"
              value="0"
              c:identifier="NC_HICOSMO_QCONST_H0"
              glib:nick="h0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="omega_t"
              value="1"
              c:identifier="NC_HICOSMO_QCONST_OMEGA_T"
              glib:nick="omega-t">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="cd"
              value="2"
              c:identifier="NC_HICOSMO_QCONST_CD"
              glib:nick="cd">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="e"
              value="3"
              c:identifier="NC_HICOSMO_QCONST_E"
              glib:nick="e">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="q"
              value="4"
              c:identifier="NC_HICOSMO_QCONST_Q"
              glib:nick="q">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="z1"
              value="5"
              c:identifier="NC_HICOSMO_QCONST_Z1"
              glib:nick="z1">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <record name="HICosmoQGMode" c:type="NcHICosmoQGMode">
      <doc xml:space="preserve">FIXME</doc>
      <field name="model" readable="0" private="1">
        <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
      </field>
      <field name="type" readable="0" private="1">
        <type name="HICosmoQGPertType" c:type="NcHICosmoQGPertType"/>
      </field>
      <field name="cvode" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="cvode_R" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="cvode_h" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="init_R" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="init_h" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="initialized" readable="0" private="1">
        <type name="gboolean" c:type="gboolean*"/>
      </field>
      <field name="jac" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="f" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="y" introspectable="0" readable="0" private="1">
        <type c:type="N_Vector"/>
      </field>
      <field name="yQ" introspectable="0" readable="0" private="1">
        <type c:type="N_Vector"/>
      </field>
      <field name="reltol" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="abstol" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="ax_i" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="x_i" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="t_i" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="t" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="k" readable="0" private="1">
        <type name="glong" c:type="long"/>
      </field>
      <field name="alpha0" readable="0" private="1">
        <type name="glong" c:type="long"/>
      </field>
      <field name="alphai" readable="0" private="1">
        <type name="glong" c:type="long"/>
      </field>
      <field name="alphaf" readable="0" private="1">
        <type name="glong" c:type="long"/>
      </field>
      <field name="pw_spline" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
    </record>
    <enumeration name="HICosmoQGPertType"
                 glib:type-name="NcHICosmoQGPertType"
                 glib:get-type="nc_hi_cosmo_qg_pert_type_get_type"
                 c:type="NcHICosmoQGPertType">
      <doc xml:space="preserve">FIXME</doc>
      <member name="curvature"
              value="0"
              c:identifier="NC_HICOSMO_QG_PERT_CURVATURE"
              glib:nick="curvature">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="h"
              value="1"
              c:identifier="NC_HICOSMO_QG_PERT_H"
              glib:nick="h">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="HICosmoQGRW"
           c:symbol-prefix="hicosmo_qgrw"
           c:type="NcHICosmoQGRW"
           parent="HICosmo"
           glib:type-name="NcHICosmoQGRW"
           glib:get-type="nc_hicosmo_qgrw_get_type"
           glib:type-struct="HICosmoQGRWClass">
      <implements name="HIPertITwoFluids"/>
      <constructor name="new" c:identifier="nc_hicosmo_qgrw_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="HICosmoQGRW" c:type="NcHICosmoQGRW*"/>
        </return-value>
      </constructor>
      <property name="H0" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="H0-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Omegar" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Omegar-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Omegaw" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Omegaw-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="w" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="w-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="xb" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="xb-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="HICosmo" c:type="NcHICosmo"/>
      </field>
      <field name="eom_two_fluids" readable="0" private="1">
        <type name="HIPertITwoFluidsEOM" c:type="NcHIPertITwoFluidsEOM"/>
      </field>
      <field name="tv_two_fluids" readable="0" private="1">
        <type name="HIPertITwoFluidsTV" c:type="NcHIPertITwoFluidsTV"/>
      </field>
    </class>
    <record name="HICosmoQGRWClass"
            c:type="NcHICosmoQGRWClass"
            glib:is-gtype-struct-for="HICosmoQGRW">
      <field name="parent_class">
        <type name="HICosmoClass" c:type="NcHICosmoClass"/>
      </field>
    </record>
    <enumeration name="HICosmoQGRWParams"
                 glib:type-name="NcHICosmoQGRWParams"
                 glib:get-type="nc_hi_cosmo_qgrw_params_get_type"
                 c:type="NcHICosmoQGRWParams">
      <doc xml:space="preserve">Parameter of the Quantum Gravity Radiation W model.</doc>
      <member name="h0"
              value="0"
              c:identifier="NC_HICOSMO_QGRW_H0"
              glib:nick="h0">
        <doc xml:space="preserve">Hubble constant.</doc>
      </member>
      <member name="omega_r"
              value="1"
              c:identifier="NC_HICOSMO_QGRW_OMEGA_R"
              glib:nick="omega-r">
        <doc xml:space="preserve">Radiation density at $a_0$.</doc>
      </member>
      <member name="omega_w"
              value="2"
              c:identifier="NC_HICOSMO_QGRW_OMEGA_W"
              glib:nick="omega-w">
        <doc xml:space="preserve">$w$-fluid density at $a_0$.</doc>
      </member>
      <member name="w"
              value="3"
              c:identifier="NC_HICOSMO_QGRW_W"
              glib:nick="w">
        <doc xml:space="preserve">$w$-fluid equation of state.</doc>
      </member>
      <member name="x_b"
              value="4"
              c:identifier="NC_HICOSMO_QGRW_X_B"
              glib:nick="x-b">
        <doc xml:space="preserve">Redshift at the bounce.</doc>
      </member>
    </enumeration>
    <class name="HICosmoQLinear"
           c:symbol-prefix="hicosmo_qlinear"
           c:type="NcHICosmoQLinear"
           parent="HICosmo"
           glib:type-name="NcHICosmoQLinear"
           glib:get-type="nc_hicosmo_qlinear_get_type"
           glib:type-struct="HICosmoQLinearClass">
      <constructor name="new" c:identifier="nc_hicosmo_qlinear_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="HICosmoQLinear" c:type="NcHICosmoQLinear*"/>
        </return-value>
      </constructor>
      <function name="dE" c:identifier="nc_hicosmo_qlinear_dE">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="z2" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z1" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="qp" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </function>
      <property name="Dc" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Dc-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="E" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="E-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="H0" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="H0-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Omegat" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Omegat-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="q" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="q-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="qp" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="qp-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="zs" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="zs-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HICosmo" c:type="NcHICosmo"/>
      </field>
    </class>
    <record name="HICosmoQLinearClass"
            c:type="NcHICosmoQLinearClass"
            glib:is-gtype-struct-for="HICosmoQLinear">
      <field name="parent_class" readable="0" private="1">
        <type name="HICosmoClass" c:type="NcHICosmoClass"/>
      </field>
    </record>
    <enumeration name="HICosmoQLinearParams"
                 glib:type-name="NcHICosmoQLinearParams"
                 glib:get-type="nc_hi_cosmo_qlinear_params_get_type"
                 c:type="NcHICosmoQLinearParams">
      <member name="h0"
              value="0"
              c:identifier="NC_HICOSMO_QLINEAR_H0"
              glib:nick="h0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="omega_t"
              value="1"
              c:identifier="NC_HICOSMO_QLINEAR_OMEGA_T"
              glib:nick="omega-t">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="cd"
              value="2"
              c:identifier="NC_HICOSMO_QLINEAR_CD"
              glib:nick="cd">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="e"
              value="3"
              c:identifier="NC_HICOSMO_QLINEAR_E"
              glib:nick="e">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="q"
              value="4"
              c:identifier="NC_HICOSMO_QLINEAR_Q"
              glib:nick="q">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="qp"
              value="5"
              c:identifier="NC_HICOSMO_QLINEAR_QP"
              glib:nick="qp">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="z1"
              value="6"
              c:identifier="NC_HICOSMO_QLINEAR_Z1"
              glib:nick="z1">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="HICosmoQSpline"
           c:symbol-prefix="hicosmo_qspline"
           c:type="NcHICosmoQSpline"
           parent="HICosmo"
           glib:type-name="NcHICosmoQSpline"
           glib:get-type="nc_hicosmo_qspline_get_type"
           glib:type-struct="HICosmoQSplineClass">
      <constructor name="new" c:identifier="nc_hicosmo_qspline_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="HICosmoQSpline" c:type="NcHICosmoQSpline*"/>
        </return-value>
        <parameters>
          <parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
          </parameter>
          <parameter name="np" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="z_f" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_continuity_priors"
              c:identifier="nc_hicosmo_qspline_add_continuity_priors">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="HICosmoQSplineContPrior"
                c:type="NcHICosmoQSplineContPrior*"/>
        </return-value>
        <parameters>
          <instance-parameter name="qspline" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmoQSpline</doc>
            <type name="HICosmoQSpline" c:type="NcHICosmoQSpline*"/>
          </instance-parameter>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="NumCosmoMath.Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="sigma" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="H0" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Hubble parameter today (z = 0).</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="H0-fit" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Omegat" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Omegat-fit" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="asdrag" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="asdrag-fit" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="qparam" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="qparam-fit" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="qparam-length"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="spline"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="NumCosmoMath.Spline"/>
      </property>
      <property name="zf"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HICosmo" c:type="NcHICosmo"/>
      </field>
      <field name="nknots" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="size" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="z_f" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="q_z" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="E2_z" readable="0" private="1">
        <type name="NumCosmoMath.OdeSpline" c:type="NcmOdeSpline*"/>
      </field>
    </class>
    <record name="HICosmoQSplineClass"
            c:type="NcHICosmoQSplineClass"
            glib:is-gtype-struct-for="HICosmoQSpline">
      <field name="parent_class" readable="0" private="1">
        <type name="HICosmoClass" c:type="NcHICosmoClass"/>
      </field>
    </record>
    <class name="HICosmoQSplineContPrior"
           c:symbol-prefix="hicosmo_qspline_cont_prior"
           c:type="NcHICosmoQSplineContPrior"
           parent="NumCosmoMath.Model"
           glib:type-name="NcHICosmoQSplineContPrior"
           glib:get-type="nc_hicosmo_qspline_cont_prior_get_type"
           glib:type-struct="HICosmoQSplineContPriorClass">
      <constructor name="new" c:identifier="nc_hicosmo_qspline_cont_prior_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="HICosmoQSplineContPrior"
                c:type="NcHICosmoQSplineContPrior*"/>
        </return-value>
        <parameters>
          <parameter name="npriors" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="id" c:identifier="nc_hicosmo_qspline_cont_prior_id">
        <return-value transfer-ownership="none">
          <type name="gint32" c:type="gint32"/>
        </return-value>
      </function>
      <method name="free" c:identifier="nc_hicosmo_qspline_cont_prior_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="qspline_cp" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoQSplineContPrior"
                  c:type="NcHICosmoQSplineContPrior*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_abstol"
              c:identifier="nc_hicosmo_qspline_cont_prior_get_abstol">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="qspline_cp" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoQSplineContPrior"
                  c:type="NcHICosmoQSplineContPrior*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lnsigma"
              c:identifier="nc_hicosmo_qspline_cont_prior_get_lnsigma">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="qspline_cp" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoQSplineContPrior"
                  c:type="NcHICosmoQSplineContPrior*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_hicosmo_qspline_cont_prior_ref">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="HICosmoQSplineContPrior"
                c:type="NcHICosmoQSplineContPrior*"/>
        </return-value>
        <parameters>
          <instance-parameter name="qspline_cp" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoQSplineContPrior"
                  c:type="NcHICosmoQSplineContPrior*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_abstol"
              c:identifier="nc_hicosmo_qspline_cont_prior_set_abstol">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="qspline_cp" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoQSplineContPrior"
                  c:type="NcHICosmoQSplineContPrior*"/>
          </instance-parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_all_lnsigma"
              c:identifier="nc_hicosmo_qspline_cont_prior_set_all_lnsigma">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="qspline_cp" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoQSplineContPrior"
                  c:type="NcHICosmoQSplineContPrior*"/>
          </instance-parameter>
          <parameter name="ln_sigma" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lnsigma"
              c:identifier="nc_hicosmo_qspline_cont_prior_set_lnsigma">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="qspline_cp" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmoQSplineContPrior"
                  c:type="NcHICosmoQSplineContPrior*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="ln_sigma" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="abstol" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="abstol-fit" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="lnsigma" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="lnsigma-fit" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="lnsigma-length"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Model" c:type="NcmModel"/>
      </field>
    </class>
    <record name="HICosmoQSplineContPriorClass"
            c:type="NcHICosmoQSplineContPriorClass"
            glib:is-gtype-struct-for="HICosmoQSplineContPrior">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.ModelClass" c:type="NcmModelClass"/>
      </field>
    </record>
    <enumeration name="HICosmoQSplineSParams"
                 glib:type-name="NcHICosmoQSplineSParams"
                 glib:get-type="nc_hi_cosmo_qspline_sparams_get_type"
                 c:type="NcHICosmoQSplineSParams">
      <member name="h0"
              value="0"
              c:identifier="NC_HICOSMO_QSPLINE_H0"
              glib:nick="h0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="omega_t"
              value="1"
              c:identifier="NC_HICOSMO_QSPLINE_OMEGA_T"
              glib:nick="omega-t">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="as_drag"
              value="2"
              c:identifier="NC_HICOSMO_QSPLINE_AS_DRAG"
              glib:nick="as-drag">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <enumeration name="HICosmoQSplineVParams"
                 glib:type-name="NcHICosmoQSplineVParams"
                 glib:get-type="nc_hi_cosmo_qspline_vparams_get_type"
                 c:type="NcHICosmoQSplineVParams">
      <member name="q"
              value="0"
              c:identifier="NC_HICOSMO_QSPLINE_Q"
              glib:nick="q">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <callback name="HICosmoVFunc0" c:type="NcHICosmoVFunc0">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">$P_{m\nu0,n}$</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="cosmo" transfer-ownership="none">
          <doc xml:space="preserve">a #NcHICosmo</doc>
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">massive neutrino index</doc>
          <type name="guint" c:type="const guint"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="HICosmoVFunc1K" c:type="NcHICosmoVFunc1K">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="cosmo" transfer-ownership="none">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="guint" c:type="const guint"/>
        </parameter>
        <parameter name="k" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="HICosmoVFunc1Z" c:type="NcHICosmoVFunc1Z">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">$E^2\Omega_{m\nu,n}$.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="cosmo" transfer-ownership="none">
          <doc xml:space="preserve">a #NcHICosmo</doc>
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve">massive neutrino index</doc>
          <type name="guint" c:type="const guint"/>
        </parameter>
        <parameter name="z" transfer-ownership="none">
          <doc xml:space="preserve">redshift $z$</doc>
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <class name="HICosmoVexp"
           c:symbol-prefix="hicosmo_Vexp"
           c:type="NcHICosmoVexp"
           parent="HICosmo"
           glib:type-name="NcHICosmoVexp"
           glib:get-type="nc_hicosmo_Vexp_get_type"
           glib:type-struct="HICosmoVexpClass">
      <implements name="HIPertIAdiab"/>
      <implements name="HIPertIGW"/>
      <constructor name="new" c:identifier="nc_hicosmo_Vexp_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="HICosmoVexp" c:type="NcHICosmoVexp*"/>
        </return-value>
      </constructor>
      <method name="tau_max" c:identifier="nc_hicosmo_Vexp_tau_max">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="Vexp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmoVexp</doc>
            <type name="HICosmoVexp" c:type="NcHICosmoVexp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="tau_min" c:identifier="nc_hicosmo_Vexp_tau_min">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="Vexp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmoVexp</doc>
            <type name="HICosmoVexp" c:type="NcHICosmoVexp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="tau_qt_c" c:identifier="nc_hicosmo_Vexp_tau_qt_c">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="Vexp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmoVexp</doc>
            <type name="HICosmoVexp" c:type="NcHICosmoVexp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="tau_qt_e" c:identifier="nc_hicosmo_Vexp_tau_qt_e">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="Vexp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmoVexp</doc>
            <type name="HICosmoVexp" c:type="NcHICosmoVexp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="tau_xc" c:identifier="nc_hicosmo_Vexp_tau_xc">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\tau$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="Vexp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmoVexp</doc>
            <type name="HICosmoVexp" c:type="NcHICosmoVexp*"/>
          </instance-parameter>
          <parameter name="xc" transfer-ownership="none">
            <doc xml:space="preserve">$x_c$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="tau_xe" c:identifier="nc_hicosmo_Vexp_tau_xe">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\tau$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="Vexp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmoVexp</doc>
            <type name="HICosmoVexp" c:type="NcHICosmoVexp*"/>
          </instance-parameter>
          <parameter name="xe" transfer-ownership="none">
            <doc xml:space="preserve">$x_e$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="x_tau" c:identifier="nc_hicosmo_Vexp_x_tau">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$x$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="Vexp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmoVexp</doc>
            <type name="HICosmoVexp" c:type="NcHICosmoVexp*"/>
          </instance-parameter>
          <parameter name="tau" transfer-ownership="none">
            <doc xml:space="preserve">$\tau$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="xbe" c:identifier="nc_hicosmo_Vexp_xbe">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="Vexp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmoVexp</doc>
            <type name="HICosmoVexp" c:type="NcHICosmoVexp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="H0" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="H0-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="OmegaL" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="OmegaL-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="Omegac" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Omegac-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="alphab" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="alphab-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="dphi" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="dphi-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="sigmaphi" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="sigmaphi-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="xb" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="xb-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HICosmo" c:type="NcHICosmo"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="HICosmoVexpPrivate" c:type="NcHICosmoVexpPrivate*"/>
      </field>
    </class>
    <record name="HICosmoVexpClass"
            c:type="NcHICosmoVexpClass"
            glib:is-gtype-struct-for="HICosmoVexp">
      <field name="parent_class" readable="0" private="1">
        <type name="HICosmoClass" c:type="NcHICosmoClass"/>
      </field>
    </record>
    <enumeration name="HICosmoVexpParams"
                 glib:type-name="NcHICosmoVexpParams"
                 glib:get-type="nc_hi_cosmo_vexp_params_get_type"
                 c:type="NcHICosmoVexpParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="h0"
              value="0"
              c:identifier="NC_HICOSMO_VEXP_H0"
              glib:nick="h0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="omega_c"
              value="1"
              c:identifier="NC_HICOSMO_VEXP_OMEGA_C"
              glib:nick="omega-c">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="omega_l"
              value="2"
              c:identifier="NC_HICOSMO_VEXP_OMEGA_L"
              glib:nick="omega-l">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="sigma_phi"
              value="3"
              c:identifier="NC_HICOSMO_VEXP_SIGMA_PHI"
              glib:nick="sigma-phi">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="d_phi"
              value="4"
              c:identifier="NC_HICOSMO_VEXP_D_PHI"
              glib:nick="d-phi">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="alpha_b"
              value="5"
              c:identifier="NC_HICOSMO_VEXP_ALPHA_B"
              glib:nick="alpha-b">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="x_b"
              value="6"
              c:identifier="NC_HICOSMO_VEXP_X_B"
              glib:nick="x-b">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <record name="HICosmoVexpPrivate"
            c:type="NcHICosmoVexpPrivate"
            disguised="1">
    </record>
    <constant name="HIPERT_BOLTZMANN_BASE_SIZE"
              value="1"
              c:type="NC_HIPERT_BOLTZMANN_BASE_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="HIPRIM_ATAN_DEFAULT_C2"
              value="0.500000"
              c:type="NC_HIPRIM_ATAN_DEFAULT_C2">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_ATAN_DEFAULT_C3"
              value="1.000000"
              c:type="NC_HIPRIM_ATAN_DEFAULT_C3">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_ATAN_DEFAULT_LAMBDA"
              value="1.000000"
              c:type="NC_HIPRIM_ATAN_DEFAULT_LAMBDA">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_ATAN_DEFAULT_LN10E10ASA"
              value="3.179000"
              c:type="NC_HIPRIM_ATAN_DEFAULT_LN10E10ASA">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_ATAN_DEFAULT_LNKC"
              value="5.300000"
              c:type="NC_HIPRIM_ATAN_DEFAULT_LNKC">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_ATAN_DEFAULT_N_SA"
              value="0.974200"
              c:type="NC_HIPRIM_ATAN_DEFAULT_N_SA">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_BPL_DEFAULT_DELTA"
              value="1.140000"
              c:type="NC_HIPRIM_BPL_DEFAULT_DELTA">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_BPL_DEFAULT_LN10E10ASA"
              value="3.179000"
              c:type="NC_HIPRIM_BPL_DEFAULT_LN10E10ASA">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_BPL_DEFAULT_LNKB"
              value="7.550000"
              c:type="NC_HIPRIM_BPL_DEFAULT_LNKB">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_BPL_DEFAULT_N_SA"
              value="0.974200"
              c:type="NC_HIPRIM_BPL_DEFAULT_N_SA">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_DEFAULT_K_PIVOT"
              value="0.050000"
              c:type="NC_HIPRIM_DEFAULT_K_PIVOT">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_DEFAULT_PARAMS_ABSTOL"
              value="0.000000"
              c:type="NC_HIPRIM_DEFAULT_PARAMS_ABSTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_DEFAULT_PARAMS_RELTOL"
              value="0.000000"
              c:type="NC_HIPRIM_DEFAULT_PARAMS_RELTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_EXPC_DEFAULT_C"
              value="0.500000"
              c:type="NC_HIPRIM_EXPC_DEFAULT_C">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_EXPC_DEFAULT_LAMBDAC"
              value="0.500000"
              c:type="NC_HIPRIM_EXPC_DEFAULT_LAMBDAC">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_EXPC_DEFAULT_LN10E10ASA"
              value="3.179000"
              c:type="NC_HIPRIM_EXPC_DEFAULT_LN10E10ASA">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_EXPC_DEFAULT_LNKC"
              value="7.980000"
              c:type="NC_HIPRIM_EXPC_DEFAULT_LNKC">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_EXPC_DEFAULT_N_SA"
              value="0.974200"
              c:type="NC_HIPRIM_EXPC_DEFAULT_N_SA">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_POWER_LAW_DEFAULT_LN10E10ASA"
              value="3.179000"
              c:type="NC_HIPRIM_POWER_LAW_DEFAULT_LN10E10ASA">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_POWER_LAW_DEFAULT_N_SA"
              value="0.974200"
              c:type="NC_HIPRIM_POWER_LAW_DEFAULT_N_SA">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_POWER_LAW_DEFAULT_N_T"
              value="0.000000"
              c:type="NC_HIPRIM_POWER_LAW_DEFAULT_N_T">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIPRIM_POWER_LAW_DEFAULT_T_SA_RATIO"
              value="0.200000"
              c:type="NC_HIPRIM_POWER_LAW_DEFAULT_T_SA_RATIO">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <class name="HIPert"
           c:symbol-prefix="hipert"
           c:type="NcHIPert"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NcHIPert"
           glib:get-type="nc_hipert_get_type"
           glib:type-struct="HIPertClass">
      <virtual-method name="set_abstol" invoker="set_abstol">
        <doc xml:space="preserve">Sets the value of the absolute tolerance.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pert" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPert.</doc>
            <type name="HIPert" c:type="NcHIPert*"/>
          </instance-parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">the absolute tolarance.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_mode_k" invoker="set_mode_k">
        <doc xml:space="preserve">Sets the value of the mode to be computed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pert" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPert.</doc>
            <type name="HIPert" c:type="NcHIPert*"/>
          </instance-parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">the mode value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_reltol" invoker="set_reltol">
        <doc xml:space="preserve">Sets the value of the relative tolerance.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pert" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPert.</doc>
            <type name="HIPert" c:type="NcHIPert*"/>
          </instance-parameter>
          <parameter name="reltol" transfer-ownership="none">
            <doc xml:space="preserve">the relative tolarance.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_abstol" c:identifier="nc_hipert_get_abstol">
        <doc xml:space="preserve">Gets the value of the relative tolerance.</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="pert" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPert.</doc>
            <type name="HIPert" c:type="NcHIPert*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reltol" c:identifier="nc_hipert_get_reltol">
        <doc xml:space="preserve">Gets the value of the relative tolerance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">reltol</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="pert" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPert.</doc>
            <type name="HIPert" c:type="NcHIPert*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset_solver" c:identifier="nc_hipert_reset_solver">
        <doc xml:space="preserve">Destroy and recreates the solver.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pert" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPert</doc>
            <type name="HIPert" c:type="NcHIPert*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_abstol" c:identifier="nc_hipert_set_abstol">
        <doc xml:space="preserve">Sets the value of the absolute tolerance.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pert" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPert.</doc>
            <type name="HIPert" c:type="NcHIPert*"/>
          </instance-parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">the absolute tolarance.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mode_k" c:identifier="nc_hipert_set_mode_k">
        <doc xml:space="preserve">Sets the value of the mode to be computed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pert" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPert.</doc>
            <type name="HIPert" c:type="NcHIPert*"/>
          </instance-parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">the mode value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reltol" c:identifier="nc_hipert_set_reltol">
        <doc xml:space="preserve">Sets the value of the relative tolerance.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pert" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPert.</doc>
            <type name="HIPert" c:type="NcHIPert*"/>
          </instance-parameter>
          <parameter name="reltol" transfer-ownership="none">
            <doc xml:space="preserve">the relative tolarance.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stiff_solver"
              c:identifier="nc_hipert_set_stiff_solver">
        <doc xml:space="preserve">Sets the ode algorithm to use.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pert" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPert.</doc>
            <type name="HIPert" c:type="NcHIPert*"/>
          </instance-parameter>
          <parameter name="stiff" transfer-ownership="none">
            <doc xml:space="preserve">whenever to enable or disable a stiff solver.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sys_size" c:identifier="nc_hipert_set_sys_size">
        <doc xml:space="preserve">Sets the system size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pert" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPert.</doc>
            <type name="HIPert" c:type="NcHIPert*"/>
          </instance-parameter>
          <parameter name="sys_size" transfer-ownership="none">
            <doc xml:space="preserve">the system size.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="abstol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="alphai" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="k" writable="1" construct="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="reltol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="sys-size" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="alpha0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y" introspectable="0" readable="0" private="1">
        <type c:type="N_Vector"/>
      </field>
      <field name="sys_size" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="cvode" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="cvode_init" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="cvode_stiff" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="reltol" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="abstol" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="vec_abstol" introspectable="0" readable="0" private="1">
        <type c:type="N_Vector"/>
      </field>
      <field name="k" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="prepared" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <class name="HIPertAdiab"
           c:symbol-prefix="hipert_adiab"
           c:type="NcHIPertAdiab"
           parent="NumCosmoMath.HOAA"
           glib:type-name="NcHIPertAdiab"
           glib:get-type="nc_hipert_adiab_get_type"
           glib:type-struct="HIPertAdiabClass">
      <constructor name="new" c:identifier="nc_hipert_adiab_new">
        <doc xml:space="preserve">Creates a new #NcHIPertAdiab object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcHIPertAdiab.</doc>
          <type name="HIPertAdiab" c:type="NcHIPertAdiab*"/>
        </return-value>
      </constructor>
      <function name="clear" c:identifier="nc_hipert_adiab_clear">
        <doc xml:space="preserve">Decreases the reference count of *@pa and sets *@pa to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertAdiab.</doc>
            <type name="HIPertAdiab" c:type="NcHIPertAdiab**"/>
          </parameter>
        </parameters>
      </function>
      <method name="free" c:identifier="nc_hipert_adiab_free">
        <doc xml:space="preserve">Decreases the reference count of @pa.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertAdiab.</doc>
            <type name="HIPertAdiab" c:type="NcHIPertAdiab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_hipert_adiab_ref">
        <doc xml:space="preserve">Increases the reference count of @pa.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@pa.</doc>
          <type name="HIPertAdiab" c:type="NcHIPertAdiab*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertAdiab.</doc>
            <type name="HIPertAdiab" c:type="NcHIPertAdiab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.HOAA" c:type="NcmHOAA"/>
      </field>
    </class>
    <record name="HIPertAdiabClass"
            c:type="NcHIPertAdiabClass"
            glib:is-gtype-struct-for="HIPertAdiab">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.HOAAClass" c:type="NcmHOAAClass"/>
      </field>
    </record>
    <enumeration name="HIPertAdiabVars"
                 glib:type-name="NcHIPertAdiabVars"
                 glib:get-type="nc_hi_pert_adiab_vars_get_type"
                 c:type="NcHIPertAdiabVars">
      <doc xml:space="preserve">Perturbation variables enumerator.</doc>
      <member name="re_zeta"
              value="0"
              c:identifier="NC_HIPERT_ADIAB_RE_ZETA"
              glib:nick="re-zeta">
        <doc xml:space="preserve">$\text{Re}(\zeta)$</doc>
      </member>
      <member name="im_zeta"
              value="1"
              c:identifier="NC_HIPERT_ADIAB_IM_ZETA"
              glib:nick="im-zeta">
        <doc xml:space="preserve">$\text{Im}(\zeta)$</doc>
      </member>
      <member name="re_pzeta"
              value="2"
              c:identifier="NC_HIPERT_ADIAB_RE_PZETA"
              glib:nick="re-pzeta">
        <doc xml:space="preserve">$\text{Re}(P_\zeta)$</doc>
      </member>
      <member name="im_pzeta"
              value="3"
              c:identifier="NC_HIPERT_ADIAB_IM_PZETA"
              glib:nick="im-pzeta">
        <doc xml:space="preserve">$\text{Im}(P_\zeta)$</doc>
      </member>
    </enumeration>
    <class name="HIPertBoltzmann"
           c:symbol-prefix="hipert_boltzmann"
           c:type="NcHIPertBoltzmann"
           parent="HIPert"
           abstract="1"
           glib:type-name="NcHIPertBoltzmann"
           glib:get-type="nc_hipert_boltzmann_get_type"
           glib:type-struct="HIPertBoltzmannClass">
      <function name="clear" c:identifier="nc_hipert_boltzmann_clear">
        <doc xml:space="preserve">Decreases the reference count of *@pb and sets *@pb to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="evol">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="g" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="evol_step">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="g" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_BB_Cls" invoker="get_BB_Cls">
        <doc xml:space="preserve">Prepares the #NcHIPertBoltzmann object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="Cls" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_EB_Cls" invoker="get_EB_Cls">
        <doc xml:space="preserve">Prepares the #NcHIPertBoltzmann object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="Cls" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_EE_Cls" invoker="get_EE_Cls">
        <doc xml:space="preserve">Prepares the #NcHIPertBoltzmann object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="Cls" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_TB_Cls" invoker="get_TB_Cls">
        <doc xml:space="preserve">Prepares the #NcHIPertBoltzmann object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="Cls" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_TE_Cls" invoker="get_TE_Cls">
        <doc xml:space="preserve">Prepares the #NcHIPertBoltzmann object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="Cls" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_TT_Cls" invoker="get_TT_Cls">
        <doc xml:space="preserve">Prepares the #NcHIPertBoltzmann object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="Cls" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_b0">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_b1">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_c0">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_c1">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_los_theta">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_phi">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sources">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="S0" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="S1" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="S2" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_theta">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_theta_p">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_z">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="init">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare" invoker="prepare">
        <doc xml:space="preserve">Prepares the #NcHIPertBoltzmann object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_if_needed" invoker="prepare_if_needed">
        <doc xml:space="preserve">Prepares the #NcHIPertBoltzmann object if not prepared for @cosmo.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="print_all">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="print_stats">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reset">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_opts">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="append_target_Cls"
              c:identifier="nc_hipert_boltzmann_append_target_Cls">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="tCls" transfer-ownership="none">
            <doc xml:space="preserve">Cls targets</doc>
            <type name="DataCMBDataType" c:type="NcDataCMBDataType"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_hipert_boltzmann_free">
        <doc xml:space="preserve">Decreases the reference count of @pb.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_BB_Cls" c:identifier="nc_hipert_boltzmann_get_BB_Cls">
        <doc xml:space="preserve">Prepares the #NcHIPertBoltzmann object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="Cls" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_BB_lmax"
              c:identifier="nc_hipert_boltzmann_get_BB_lmax">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_EB_Cls" c:identifier="nc_hipert_boltzmann_get_EB_Cls">
        <doc xml:space="preserve">Prepares the #NcHIPertBoltzmann object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="Cls" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_EB_lmax"
              c:identifier="nc_hipert_boltzmann_get_EB_lmax">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_EE_Cls" c:identifier="nc_hipert_boltzmann_get_EE_Cls">
        <doc xml:space="preserve">Prepares the #NcHIPertBoltzmann object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="Cls" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_EE_lmax"
              c:identifier="nc_hipert_boltzmann_get_EE_lmax">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_TB_Cls" c:identifier="nc_hipert_boltzmann_get_TB_Cls">
        <doc xml:space="preserve">Prepares the #NcHIPertBoltzmann object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="Cls" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_TB_lmax"
              c:identifier="nc_hipert_boltzmann_get_TB_lmax">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_TE_Cls" c:identifier="nc_hipert_boltzmann_get_TE_Cls">
        <doc xml:space="preserve">Prepares the #NcHIPertBoltzmann object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="Cls" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_TE_lmax"
              c:identifier="nc_hipert_boltzmann_get_TE_lmax">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_TT_Cls" c:identifier="nc_hipert_boltzmann_get_TT_Cls">
        <doc xml:space="preserve">Prepares the #NcHIPertBoltzmann object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="Cls" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_TT_lmax"
              c:identifier="nc_hipert_boltzmann_get_TT_lmax">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_calc_transfer"
              c:identifier="nc_hipert_boltzmann_get_calc_transfer">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_target_Cls"
              c:identifier="nc_hipert_boltzmann_get_target_Cls">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="DataCMBDataType" c:type="NcDataCMBDataType"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lensed_Cls" c:identifier="nc_hipert_boltzmann_lensed_Cls">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="nc_hipert_boltzmann_prepare">
        <doc xml:space="preserve">Prepares the #NcHIPertBoltzmann object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_if_needed"
              c:identifier="nc_hipert_boltzmann_prepare_if_needed">
        <doc xml:space="preserve">Prepares the #NcHIPertBoltzmann object if not prepared for @cosmo.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_hipert_boltzmann_ref">
        <doc xml:space="preserve">Increases the reference count of @pb.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@pb.</doc>
          <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_BB_lmax"
              c:identifier="nc_hipert_boltzmann_set_BB_lmax">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="lmax" transfer-ownership="none">
            <doc xml:space="preserve">last mutipole.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_EB_lmax"
              c:identifier="nc_hipert_boltzmann_set_EB_lmax">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="lmax" transfer-ownership="none">
            <doc xml:space="preserve">last mutipole.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_EE_lmax"
              c:identifier="nc_hipert_boltzmann_set_EE_lmax">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="lmax" transfer-ownership="none">
            <doc xml:space="preserve">last mutipole.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_TB_lmax"
              c:identifier="nc_hipert_boltzmann_set_TB_lmax">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="lmax" transfer-ownership="none">
            <doc xml:space="preserve">last mutipole.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_TE_lmax"
              c:identifier="nc_hipert_boltzmann_set_TE_lmax">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="lmax" transfer-ownership="none">
            <doc xml:space="preserve">last mutipole.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_TT_lmax"
              c:identifier="nc_hipert_boltzmann_set_TT_lmax">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="lmax" transfer-ownership="none">
            <doc xml:space="preserve">last mutipole.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_calc_transfer"
              c:identifier="nc_hipert_boltzmann_set_calc_transfer">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="calc_transfer" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lensed_Cls"
              c:identifier="nc_hipert_boltzmann_set_lensed_Cls">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="use_lensed_Cls" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_recomb" c:identifier="nc_hipert_boltzmann_set_recomb">
        <doc xml:space="preserve">Sets the #NcRecomb object to be used in the Boltzmann evolution.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_target_Cls"
              c:identifier="nc_hipert_boltzmann_set_target_Cls">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="tCls" transfer-ownership="none">
            <doc xml:space="preserve">Cls targets</doc>
            <type name="DataCMBDataType" c:type="NcDataCMBDataType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tensor" c:identifier="nc_hipert_boltzmann_set_tensor">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
          <parameter name="use_tensor" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="tensor" c:identifier="nc_hipert_boltzmann_tensor">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmann.</doc>
            <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="BB-l-max"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="EB-l-max"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="EE-l-max"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="TB-l-max"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="TE-l-max"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="TT-l-max"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="calc-transfer"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="recomb" writable="1" transfer-ownership="none">
        <type name="Recomb"/>
      </property>
      <property name="target-Cls"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="DataCMBDataType"/>
      </property>
      <property name="use-lensed-Cls"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="use-tensor"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HIPert" c:type="NcHIPert"/>
      </field>
      <field name="recomb" readable="0" private="1">
        <type name="Recomb" c:type="NcRecomb*"/>
      </field>
      <field name="cosmo" readable="0" private="1">
        <type name="HICosmo" c:type="NcHICosmo*"/>
      </field>
      <field name="a" readable="0" private="1">
        <type name="Scalefactor" c:type="NcScalefactor*"/>
      </field>
      <field name="eta0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lambdai" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lambdaf" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lambda_opt_cutoff" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lambda_rec" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lambda_rec_10m2_max" readable="0" private="1">
        <array zero-terminated="0" c:type="gdouble" fixed-size="2">
          <type name="gdouble" c:type="gdouble"/>
        </array>
      </field>
      <field name="lambda" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="target_Cls" readable="0" private="1">
        <type name="DataCMBDataType" c:type="NcDataCMBDataType"/>
      </field>
      <field name="calc_transfer" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="use_lensed_Cls" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="use_tensor" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="TT_lmax" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="EE_lmax" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="BB_lmax" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="TE_lmax" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="TB_lmax" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="EB_lmax" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="tight_coupling" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="ctrl_cosmo" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
      <field name="ctrl_prim" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
    </class>
    <class name="HIPertBoltzmannCBE"
           c:symbol-prefix="hipert_boltzmann_cbe"
           c:type="NcHIPertBoltzmannCBE"
           parent="HIPertBoltzmann"
           glib:type-name="NcHIPertBoltzmannCBE"
           glib:get-type="nc_hipert_boltzmann_cbe_get_type"
           glib:type-struct="HIPertBoltzmannCBEClass">
      <constructor name="full_new"
                   c:identifier="nc_hipert_boltzmann_cbe_full_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcHIPertBoltzmannCBE.</doc>
          <type name="HIPertBoltzmannCBE" c:type="NcHIPertBoltzmannCBE*"/>
        </return-value>
        <parameters>
          <parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE.</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new" c:identifier="nc_hipert_boltzmann_cbe_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcCBEPrecision.</doc>
          <type name="HIPertBoltzmannCBE" c:type="NcHIPertBoltzmannCBE*"/>
        </return-value>
      </constructor>
      <function name="clear" c:identifier="nc_hipert_boltzmann_cbe_clear">
        <doc xml:space="preserve">Decreases the reference count of *@boltzmann_cbe and sets *@boltzmann_cbe to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="boltzmann_cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmannCBE.</doc>
            <type name="HIPertBoltzmannCBE" c:type="NcHIPertBoltzmannCBE**"/>
          </parameter>
        </parameters>
      </function>
      <method name="free" c:identifier="nc_hipert_boltzmann_cbe_free">
        <doc xml:space="preserve">Decreases the reference count of @boltzmann_cbe.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="boltzmann_cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmannCBE.</doc>
            <type name="HIPertBoltzmannCBE" c:type="NcHIPertBoltzmannCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_hipert_boltzmann_cbe_ref">
        <doc xml:space="preserve">Increases the reference count of @boltzmann_cbe.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@boltzmann_cbe.</doc>
          <type name="HIPertBoltzmannCBE" c:type="NcHIPertBoltzmannCBE*"/>
        </return-value>
        <parameters>
          <instance-parameter name="boltzmann_cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertBoltzmannCBE.</doc>
            <type name="HIPertBoltzmannCBE" c:type="NcHIPertBoltzmannCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="cbe"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="CBE"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann"/>
      </field>
      <field name="cbe" readable="0" private="1">
        <type name="CBE" c:type="NcCBE*"/>
      </field>
      <field name="TT_Cls" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="EE_Cls" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="BB_Cls" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="TE_Cls" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="TB_Cls" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="EB_Cls" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
    </class>
    <record name="HIPertBoltzmannCBEClass"
            c:type="NcHIPertBoltzmannCBEClass"
            glib:is-gtype-struct-for="HIPertBoltzmannCBE">
      <field name="parent_class" readable="0" private="1">
        <type name="HIPertBoltzmannClass" c:type="NcHIPertBoltzmannClass"/>
      </field>
    </record>
    <record name="HIPertBoltzmannClass"
            c:type="NcHIPertBoltzmannClass"
            glib:is-gtype-struct-for="HIPertBoltzmann">
      <field name="parent_class" readable="0" private="1">
        <type name="HIPertClass" c:type="NcHIPertClass"/>
      </field>
      <field name="init" readable="0" private="1">
        <type name="HIPertBoltzmannCreate" c:type="NcHIPertBoltzmannCreate"/>
      </field>
      <field name="set_opts" readable="0" private="1">
        <type name="HIPertBoltzmannConf" c:type="NcHIPertBoltzmannConf"/>
      </field>
      <field name="reset" readable="0" private="1">
        <type name="HIPertBoltzmannConf" c:type="NcHIPertBoltzmannConf"/>
      </field>
      <field name="evol_step" readable="0" private="1">
        <type name="HIPertBoltzmannEvol" c:type="NcHIPertBoltzmannEvol"/>
      </field>
      <field name="evol" readable="0" private="1">
        <type name="HIPertBoltzmannEvol" c:type="NcHIPertBoltzmannEvol"/>
      </field>
      <field name="prepare" readable="0" private="1">
        <type name="HIPertBoltzmannPrepare" c:type="NcHIPertBoltzmannPrepare"/>
      </field>
      <field name="prepare_if_needed" readable="0" private="1">
        <type name="HIPertBoltzmannPrepare" c:type="NcHIPertBoltzmannPrepare"/>
      </field>
      <field name="get_sources" readable="0" private="1">
        <type name="HIPertBoltzmannSources" c:type="NcHIPertBoltzmannSources"/>
      </field>
      <field name="print_stats" readable="0" private="1">
        <type name="HIPertBoltzmannConf" c:type="NcHIPertBoltzmannConf"/>
      </field>
      <field name="get_z" readable="0" private="1">
        <type name="HIPertBoltzmannGet" c:type="NcHIPertBoltzmannGet"/>
      </field>
      <field name="get_phi" readable="0" private="1">
        <type name="HIPertBoltzmannGet" c:type="NcHIPertBoltzmannGet"/>
      </field>
      <field name="get_c0" readable="0" private="1">
        <type name="HIPertBoltzmannGet" c:type="NcHIPertBoltzmannGet"/>
      </field>
      <field name="get_b0" readable="0" private="1">
        <type name="HIPertBoltzmannGet" c:type="NcHIPertBoltzmannGet"/>
      </field>
      <field name="get_c1" readable="0" private="1">
        <type name="HIPertBoltzmannGet" c:type="NcHIPertBoltzmannGet"/>
      </field>
      <field name="get_b1" readable="0" private="1">
        <type name="HIPertBoltzmannGet" c:type="NcHIPertBoltzmannGet"/>
      </field>
      <field name="get" readable="0" private="1">
        <type name="HIPertBoltzmannGetN" c:type="NcHIPertBoltzmannGetN"/>
      </field>
      <field name="get_theta" readable="0" private="1">
        <type name="HIPertBoltzmannGetN" c:type="NcHIPertBoltzmannGetN"/>
      </field>
      <field name="get_theta_p" readable="0" private="1">
        <type name="HIPertBoltzmannGetN" c:type="NcHIPertBoltzmannGetN"/>
      </field>
      <field name="get_los_theta" readable="0" private="1">
        <type name="HIPertBoltzmannGetN" c:type="NcHIPertBoltzmannGetN"/>
      </field>
      <field name="get_TT_Cls" readable="0" private="1">
        <type name="HIPertBoltzmannGetCl" c:type="NcHIPertBoltzmannGetCl"/>
      </field>
      <field name="get_EE_Cls" readable="0" private="1">
        <type name="HIPertBoltzmannGetCl" c:type="NcHIPertBoltzmannGetCl"/>
      </field>
      <field name="get_BB_Cls" readable="0" private="1">
        <type name="HIPertBoltzmannGetCl" c:type="NcHIPertBoltzmannGetCl"/>
      </field>
      <field name="get_TE_Cls" readable="0" private="1">
        <type name="HIPertBoltzmannGetCl" c:type="NcHIPertBoltzmannGetCl"/>
      </field>
      <field name="get_TB_Cls" readable="0" private="1">
        <type name="HIPertBoltzmannGetCl" c:type="NcHIPertBoltzmannGetCl"/>
      </field>
      <field name="get_EB_Cls" readable="0" private="1">
        <type name="HIPertBoltzmannGetCl" c:type="NcHIPertBoltzmannGetCl"/>
      </field>
      <field name="print_all" readable="0" private="1">
        <type name="HIPertBoltzmannConf" c:type="NcHIPertBoltzmannConf"/>
      </field>
      <field name="data" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <callback name="HIPertBoltzmannConf" c:type="NcHIPertBoltzmannConf">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pb" transfer-ownership="none">
          <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="HIPertBoltzmannCreate" c:type="NcHIPertBoltzmannCreate">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pb" transfer-ownership="none">
          <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
        </parameter>
        <parameter name="cosmo" transfer-ownership="none">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="HIPertBoltzmannEvol" c:type="NcHIPertBoltzmannEvol">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pb" transfer-ownership="none">
          <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
        </parameter>
        <parameter name="g" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="HIPertBoltzmannGet" c:type="NcHIPertBoltzmannGet">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="pb" transfer-ownership="none">
          <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="HIPertBoltzmannGetCl" c:type="NcHIPertBoltzmannGetCl">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pb" transfer-ownership="none">
          <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
          <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
        </parameter>
        <parameter name="Cls" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmVector</doc>
          <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="HIPertBoltzmannGetN" c:type="NcHIPertBoltzmannGetN">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="pb" transfer-ownership="none">
          <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="HIPertBoltzmannPrepare" c:type="NcHIPertBoltzmannPrepare">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pb" transfer-ownership="none">
          <doc xml:space="preserve">a #NcHIPertBoltzmann</doc>
          <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
        </parameter>
        <parameter name="cosmo" transfer-ownership="none">
          <doc xml:space="preserve">a #NcHICosmo</doc>
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="HIPertBoltzmannSources" c:type="NcHIPertBoltzmannSources">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pb" transfer-ownership="none">
          <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
        </parameter>
        <parameter name="S0" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="S1" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="S2" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="HIPertBoltzmannStd"
           c:symbol-prefix="hipert_boltzmann_std"
           c:type="NcHIPertBoltzmannStd"
           parent="HIPertBoltzmann"
           glib:type-name="NcHIPertBoltzmannStd"
           glib:get-type="nc_hipert_boltzmann_std_get_type"
           glib:type-struct="HIPertBoltzmannStdClass">
      <constructor name="new" c:identifier="nc_hipert_boltzmann_std_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcHIPertBoltzmannStd object.</doc>
          <type name="HIPertBoltzmannStd" c:type="NcHIPertBoltzmannStd*"/>
        </return-value>
        <parameters>
          <parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </parameter>
          <parameter name="lmax" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="l-maxa"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann"/>
      </field>
    </class>
    <record name="HIPertBoltzmannStdClass"
            c:type="NcHIPertBoltzmannStdClass"
            glib:is-gtype-struct-for="HIPertBoltzmannStd">
      <field name="parent_class" readable="0" private="1">
        <type name="HIPertBoltzmannClass" c:type="NcHIPertBoltzmannClass"/>
      </field>
    </record>
    <callback name="HIPertBoltzmannTest" c:type="NcHIPertBoltzmannTest">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pb" transfer-ownership="none">
          <type name="HIPertBoltzmann" c:type="NcHIPertBoltzmann*"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="HIPertBoltzmannVars"
                 glib:type-name="NcHIPertBoltzmannVars"
                 glib:get-type="nc_hi_pert_boltzmann_vars_get_type"
                 c:type="NcHIPertBoltzmannVars">
      <doc xml:space="preserve">FIXME</doc>
      <member name="b0"
              value="0"
              c:identifier="NC_HIPERT_BOLTZMANN_B0"
              glib:nick="b0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="theta0"
              value="1"
              c:identifier="NC_HIPERT_BOLTZMANN_THETA0"
              glib:nick="theta0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="c0"
              value="2"
              c:identifier="NC_HIPERT_BOLTZMANN_C0"
              glib:nick="c0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="phi"
              value="3"
              c:identifier="NC_HIPERT_BOLTZMANN_PHI"
              glib:nick="phi">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="b1"
              value="4"
              c:identifier="NC_HIPERT_BOLTZMANN_B1"
              glib:nick="b1">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="theta1"
              value="5"
              c:identifier="NC_HIPERT_BOLTZMANN_THETA1"
              glib:nick="theta1">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="c1"
              value="6"
              c:identifier="NC_HIPERT_BOLTZMANN_C1"
              glib:nick="c1">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="theta2"
              value="7"
              c:identifier="NC_HIPERT_BOLTZMANN_THETA2"
              glib:nick="theta2">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="theta_p0"
              value="8"
              c:identifier="NC_HIPERT_BOLTZMANN_THETA_P0"
              glib:nick="theta-p0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="theta_p1"
              value="9"
              c:identifier="NC_HIPERT_BOLTZMANN_THETA_P1"
              glib:nick="theta-p1">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="theta_p2"
              value="10"
              c:identifier="NC_HIPERT_BOLTZMANN_THETA_P2"
              glib:nick="theta-p2">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <record name="HIPertClass"
            c:type="NcHIPertClass"
            glib:is-gtype-struct-for="HIPert">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="set_mode_k">
        <callback name="set_mode_k">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="pert" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHIPert.</doc>
              <type name="HIPert" c:type="NcHIPert*"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">the mode value.</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_reltol">
        <callback name="set_reltol">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="pert" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHIPert.</doc>
              <type name="HIPert" c:type="NcHIPert*"/>
            </parameter>
            <parameter name="reltol" transfer-ownership="none">
              <doc xml:space="preserve">the relative tolarance.</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_abstol">
        <callback name="set_abstol">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="pert" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHIPert.</doc>
              <type name="HIPert" c:type="NcHIPert*"/>
            </parameter>
            <parameter name="abstol" transfer-ownership="none">
              <doc xml:space="preserve">the absolute tolarance.</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="HIPertGW"
           c:symbol-prefix="hipert_gw"
           c:type="NcHIPertGW"
           parent="NumCosmoMath.HOAA"
           glib:type-name="NcHIPertGW"
           glib:get-type="nc_hipert_gw_get_type"
           glib:type-struct="HIPertGWClass">
      <constructor name="new" c:identifier="nc_hipert_gw_new">
        <doc xml:space="preserve">Creates a new #NcHIPertGW object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcHIPertGW.</doc>
          <type name="HIPertGW" c:type="NcHIPertGW*"/>
        </return-value>
      </constructor>
      <function name="clear" c:identifier="nc_hipert_gw_clear">
        <doc xml:space="preserve">Decreases the reference count of *@pa and sets *@pa to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertGW.</doc>
            <type name="HIPertGW" c:type="NcHIPertGW**"/>
          </parameter>
        </parameters>
      </function>
      <method name="free" c:identifier="nc_hipert_gw_free">
        <doc xml:space="preserve">Decreases the reference count of @pa.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertGW.</doc>
            <type name="HIPertGW" c:type="NcHIPertGW*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_hipert_gw_ref">
        <doc xml:space="preserve">Increases the reference count of @pa.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@pa.</doc>
          <type name="HIPertGW" c:type="NcHIPertGW*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pa" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertGW.</doc>
            <type name="HIPertGW" c:type="NcHIPertGW*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.HOAA" c:type="NcmHOAA"/>
      </field>
    </class>
    <record name="HIPertGWClass"
            c:type="NcHIPertGWClass"
            glib:is-gtype-struct-for="HIPertGW">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.HOAAClass" c:type="NcmHOAAClass"/>
      </field>
    </record>
    <enumeration name="HIPertGWVars"
                 glib:type-name="NcHIPertGWVars"
                 glib:get-type="nc_hi_pert_gw_vars_get_type"
                 c:type="NcHIPertGWVars">
      <doc xml:space="preserve">Perturbation variables enumerator.</doc>
      <member name="re_zeta"
              value="0"
              c:identifier="NC_HIPERT_GW_RE_ZETA"
              glib:nick="re-zeta">
        <doc xml:space="preserve">$\text{Re}(\zeta)$</doc>
      </member>
      <member name="im_zeta"
              value="1"
              c:identifier="NC_HIPERT_GW_IM_ZETA"
              glib:nick="im-zeta">
        <doc xml:space="preserve">$\text{Im}(\zeta)$</doc>
      </member>
      <member name="re_pzeta"
              value="2"
              c:identifier="NC_HIPERT_GW_RE_PZETA"
              glib:nick="re-pzeta">
        <doc xml:space="preserve">$\text{Re}(P_\zeta)$</doc>
      </member>
      <member name="im_pzeta"
              value="3"
              c:identifier="NC_HIPERT_GW_IM_PZETA"
              glib:nick="im-pzeta">
        <doc xml:space="preserve">$\text{Im}(P_\zeta)$</doc>
      </member>
    </enumeration>
    <interface name="HIPertIAdiab"
               c:symbol-prefix="hipert_iadiab"
               c:type="NcHIPertIAdiab"
               glib:type-name="NcHIPertIAdiab"
               glib:get-type="nc_hipert_iadiab_get_type"
               glib:type-struct="HIPertIAdiabInterface">
      <virtual-method name="eval_dlnmnu" invoker="eval_dlnmnu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="iad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
            <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
          </instance-parameter>
          <parameter name="tau" transfer-ownership="none">
            <doc xml:space="preserve">$\tau$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_mnu" invoker="eval_mnu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="iad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
            <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
          </instance-parameter>
          <parameter name="tau" transfer-ownership="none">
            <doc xml:space="preserve">$\tau$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_nu" invoker="eval_nu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="iad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
            <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
          </instance-parameter>
          <parameter name="tau" transfer-ownership="none">
            <doc xml:space="preserve">$\tau$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_powspec_factor" invoker="eval_powspec_factor">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="iad" transfer-ownership="none">
            <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_sing_dlnmnu" invoker="eval_sing_dlnmnu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="iad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
            <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
          </instance-parameter>
          <parameter name="tau_m_taus" transfer-ownership="none">
            <doc xml:space="preserve">$\tau - \tau_s$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_sing_mnu" invoker="eval_sing_mnu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="iad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
            <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
          </instance-parameter>
          <parameter name="tau_m_taus" transfer-ownership="none">
            <doc xml:space="preserve">$\tau - \tau_s$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_sing_system" invoker="eval_sing_system">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
            <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
          </instance-parameter>
          <parameter name="tau_m_taus" transfer-ownership="none">
            <doc xml:space="preserve">$\tau - \tau_s$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="nu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dlnmnu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_system" invoker="eval_system">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
            <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
          </instance-parameter>
          <parameter name="tau" transfer-ownership="none">
            <doc xml:space="preserve">$\tau$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="nu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\nu$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dlnmnu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sing_info" invoker="get_sing_info">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iad" transfer-ownership="none">
            <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
          </instance-parameter>
          <parameter name="k" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="ts" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dts_i" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dts_f" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="st" transfer-ownership="none">
            <type name="NumCosmoMath.HOAASingType" c:type="NcmHOAASingType*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="nsing" invoker="nsing">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="iad" transfer-ownership="none">
            <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
          </instance-parameter>
          <parameter name="k" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="eval_dlnmnu" c:identifier="nc_hipert_iadiab_eval_dlnmnu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="iad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
            <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
          </instance-parameter>
          <parameter name="tau" transfer-ownership="none">
            <doc xml:space="preserve">$\tau$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_mnu" c:identifier="nc_hipert_iadiab_eval_mnu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="iad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
            <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
          </instance-parameter>
          <parameter name="tau" transfer-ownership="none">
            <doc xml:space="preserve">$\tau$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_nu" c:identifier="nc_hipert_iadiab_eval_nu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="iad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
            <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
          </instance-parameter>
          <parameter name="tau" transfer-ownership="none">
            <doc xml:space="preserve">$\tau$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_powspec_factor"
              c:identifier="nc_hipert_iadiab_eval_powspec_factor">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="iad" transfer-ownership="none">
            <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="eval_sing_dlnmnu"
              c:identifier="nc_hipert_iadiab_eval_sing_dlnmnu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="iad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
            <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
          </instance-parameter>
          <parameter name="tau_m_taus" transfer-ownership="none">
            <doc xml:space="preserve">$\tau - \tau_s$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_sing_mnu"
              c:identifier="nc_hipert_iadiab_eval_sing_mnu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="iad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
            <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
          </instance-parameter>
          <parameter name="tau_m_taus" transfer-ownership="none">
            <doc xml:space="preserve">$\tau - \tau_s$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_sing_system"
              c:identifier="nc_hipert_iadiab_eval_sing_system">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
            <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
          </instance-parameter>
          <parameter name="tau_m_taus" transfer-ownership="none">
            <doc xml:space="preserve">$\tau - \tau_s$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="nu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dlnmnu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_system" c:identifier="nc_hipert_iadiab_eval_system">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iad" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
            <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
          </instance-parameter>
          <parameter name="tau" transfer-ownership="none">
            <doc xml:space="preserve">$\tau$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="nu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\nu$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dlnmnu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sing_info"
              c:identifier="nc_hipert_iadiab_get_sing_info">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iad" transfer-ownership="none">
            <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
          </instance-parameter>
          <parameter name="k" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="ts" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dts_i" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dts_f" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="st" transfer-ownership="none">
            <type name="NumCosmoMath.HOAASingType" c:type="NcmHOAASingType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="nsing" c:identifier="nc_hipert_iadiab_nsing">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="iad" transfer-ownership="none">
            <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
          </instance-parameter>
          <parameter name="k" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="HIPertIAdiabInterface"
            c:type="NcHIPertIAdiabInterface"
            glib:is-gtype-struct-for="HIPertIAdiab">
      <field name="parent" readable="0" private="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="eval_mnu">
        <callback name="eval_mnu">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">FIXME.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="iad" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
              <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
            </parameter>
            <parameter name="tau" transfer-ownership="none">
              <doc xml:space="preserve">$\tau$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">$k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_nu">
        <callback name="eval_nu">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">FIXME.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="iad" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
              <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
            </parameter>
            <parameter name="tau" transfer-ownership="none">
              <doc xml:space="preserve">$\tau$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">$k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_dlnmnu">
        <callback name="eval_dlnmnu">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">FIXME.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="iad" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
              <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
            </parameter>
            <parameter name="tau" transfer-ownership="none">
              <doc xml:space="preserve">$\tau$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">$k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_system">
        <callback name="eval_system">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="iad" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
              <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
            </parameter>
            <parameter name="tau" transfer-ownership="none">
              <doc xml:space="preserve">$\tau$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">$k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="nu"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">$\nu$</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="dlnmnu"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">FIXME</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="nsing">
        <callback name="nsing">
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="iad" transfer-ownership="none">
              <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sing_info">
        <callback name="get_sing_info">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="iad" transfer-ownership="none">
              <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="sing" transfer-ownership="none">
              <type name="guint" c:type="const guint"/>
            </parameter>
            <parameter name="ts" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="dts_i" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="dts_f" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="st" transfer-ownership="none">
              <type name="NumCosmoMath.HOAASingType"
                    c:type="NcmHOAASingType*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_sing_mnu">
        <callback name="eval_sing_mnu">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">FIXME.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="iad" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
              <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
            </parameter>
            <parameter name="tau_m_taus" transfer-ownership="none">
              <doc xml:space="preserve">$\tau - \tau_s$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">$k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="sing" transfer-ownership="none">
              <doc xml:space="preserve">singularity index</doc>
              <type name="guint" c:type="const guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_sing_dlnmnu">
        <callback name="eval_sing_dlnmnu">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">FIXME.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="iad" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
              <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
            </parameter>
            <parameter name="tau_m_taus" transfer-ownership="none">
              <doc xml:space="preserve">$\tau - \tau_s$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">$k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="sing" transfer-ownership="none">
              <doc xml:space="preserve">singularity index</doc>
              <type name="guint" c:type="const guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_sing_system">
        <callback name="eval_sing_system">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="iad" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHIPertIAdiab</doc>
              <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
            </parameter>
            <parameter name="tau_m_taus" transfer-ownership="none">
              <doc xml:space="preserve">$\tau - \tau_s$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">$k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="sing" transfer-ownership="none">
              <doc xml:space="preserve">singularity index</doc>
              <type name="guint" c:type="const guint"/>
            </parameter>
            <parameter name="nu"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">FIXME</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="dlnmnu"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">FIXME</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_powspec_factor">
        <callback name="eval_powspec_factor">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="iad" transfer-ownership="none">
              <type name="HIPertIAdiab" c:type="NcHIPertIAdiab*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="HIPertIGW"
               c:symbol-prefix="hipert_igw"
               c:type="NcHIPertIGW"
               glib:type-name="NcHIPertIGW"
               glib:get-type="nc_hipert_igw_get_type"
               glib:type-struct="HIPertIGWInterface">
      <virtual-method name="eval_dlnmnu" invoker="eval_dlnmnu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="igw" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIGW</doc>
            <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
          </instance-parameter>
          <parameter name="tau" transfer-ownership="none">
            <doc xml:space="preserve">$\tau$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_mnu" invoker="eval_mnu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="igw" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIGW</doc>
            <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
          </instance-parameter>
          <parameter name="tau" transfer-ownership="none">
            <doc xml:space="preserve">$\tau$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_nu" invoker="eval_nu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="igw" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIGW</doc>
            <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
          </instance-parameter>
          <parameter name="tau" transfer-ownership="none">
            <doc xml:space="preserve">$\tau$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_powspec_factor" invoker="eval_powspec_factor">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="igw" transfer-ownership="none">
            <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_sing_dlnmnu" invoker="eval_sing_dlnmnu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="igw" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIGW</doc>
            <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
          </instance-parameter>
          <parameter name="tau_m_taus" transfer-ownership="none">
            <doc xml:space="preserve">$\tau - \tau_s$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_sing_mnu" invoker="eval_sing_mnu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="igw" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIGW</doc>
            <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
          </instance-parameter>
          <parameter name="tau_m_taus" transfer-ownership="none">
            <doc xml:space="preserve">$\tau - \tau_s$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_sing_system" invoker="eval_sing_system">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="igw" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIGW</doc>
            <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
          </instance-parameter>
          <parameter name="tau_m_taus" transfer-ownership="none">
            <doc xml:space="preserve">$\tau - \tau_s$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="nu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dlnmnu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_system" invoker="eval_system">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="igw" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIGW</doc>
            <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
          </instance-parameter>
          <parameter name="tau" transfer-ownership="none">
            <doc xml:space="preserve">$\tau$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="nu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\nu$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dlnmnu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sing_info" invoker="get_sing_info">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="igw" transfer-ownership="none">
            <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
          </instance-parameter>
          <parameter name="k" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="ts" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dts_i" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dts_f" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="st" transfer-ownership="none">
            <type name="NumCosmoMath.HOAASingType" c:type="NcmHOAASingType*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="nsing" invoker="nsing">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="igw" transfer-ownership="none">
            <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
          </instance-parameter>
          <parameter name="k" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="eval_dlnmnu" c:identifier="nc_hipert_igw_eval_dlnmnu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="igw" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIGW</doc>
            <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
          </instance-parameter>
          <parameter name="tau" transfer-ownership="none">
            <doc xml:space="preserve">$\tau$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_mnu" c:identifier="nc_hipert_igw_eval_mnu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="igw" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIGW</doc>
            <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
          </instance-parameter>
          <parameter name="tau" transfer-ownership="none">
            <doc xml:space="preserve">$\tau$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_nu" c:identifier="nc_hipert_igw_eval_nu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="igw" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIGW</doc>
            <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
          </instance-parameter>
          <parameter name="tau" transfer-ownership="none">
            <doc xml:space="preserve">$\tau$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_powspec_factor"
              c:identifier="nc_hipert_igw_eval_powspec_factor">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="igw" transfer-ownership="none">
            <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="eval_sing_dlnmnu"
              c:identifier="nc_hipert_igw_eval_sing_dlnmnu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="igw" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIGW</doc>
            <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
          </instance-parameter>
          <parameter name="tau_m_taus" transfer-ownership="none">
            <doc xml:space="preserve">$\tau - \tau_s$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_sing_mnu" c:identifier="nc_hipert_igw_eval_sing_mnu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="igw" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIGW</doc>
            <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
          </instance-parameter>
          <parameter name="tau_m_taus" transfer-ownership="none">
            <doc xml:space="preserve">$\tau - \tau_s$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_sing_system"
              c:identifier="nc_hipert_igw_eval_sing_system">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="igw" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIGW</doc>
            <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
          </instance-parameter>
          <parameter name="tau_m_taus" transfer-ownership="none">
            <doc xml:space="preserve">$\tau - \tau_s$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <doc xml:space="preserve">singularity index</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="nu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dlnmnu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_system" c:identifier="nc_hipert_igw_eval_system">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="igw" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertIGW</doc>
            <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
          </instance-parameter>
          <parameter name="tau" transfer-ownership="none">
            <doc xml:space="preserve">$\tau$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="nu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\nu$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dlnmnu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sing_info" c:identifier="nc_hipert_igw_get_sing_info">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="igw" transfer-ownership="none">
            <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
          </instance-parameter>
          <parameter name="k" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="sing" transfer-ownership="none">
            <type name="guint" c:type="const guint"/>
          </parameter>
          <parameter name="ts" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dts_i" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dts_f" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="st" transfer-ownership="none">
            <type name="NumCosmoMath.HOAASingType" c:type="NcmHOAASingType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="nsing" c:identifier="nc_hipert_igw_nsing">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="igw" transfer-ownership="none">
            <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
          </instance-parameter>
          <parameter name="k" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="HIPertIGWInterface"
            c:type="NcHIPertIGWInterface"
            glib:is-gtype-struct-for="HIPertIGW">
      <field name="parent" readable="0" private="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="eval_mnu">
        <callback name="eval_mnu">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">FIXME.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="igw" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHIPertIGW</doc>
              <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
            </parameter>
            <parameter name="tau" transfer-ownership="none">
              <doc xml:space="preserve">$\tau$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">$k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_nu">
        <callback name="eval_nu">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">FIXME.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="igw" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHIPertIGW</doc>
              <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
            </parameter>
            <parameter name="tau" transfer-ownership="none">
              <doc xml:space="preserve">$\tau$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">$k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_dlnmnu">
        <callback name="eval_dlnmnu">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">FIXME.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="igw" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHIPertIGW</doc>
              <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
            </parameter>
            <parameter name="tau" transfer-ownership="none">
              <doc xml:space="preserve">$\tau$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">$k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_system">
        <callback name="eval_system">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="igw" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHIPertIGW</doc>
              <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
            </parameter>
            <parameter name="tau" transfer-ownership="none">
              <doc xml:space="preserve">$\tau$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">$k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="nu"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">$\nu$</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="dlnmnu"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">FIXME</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="nsing">
        <callback name="nsing">
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="igw" transfer-ownership="none">
              <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sing_info">
        <callback name="get_sing_info">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="igw" transfer-ownership="none">
              <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="sing" transfer-ownership="none">
              <type name="guint" c:type="const guint"/>
            </parameter>
            <parameter name="ts" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="dts_i" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="dts_f" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="st" transfer-ownership="none">
              <type name="NumCosmoMath.HOAASingType"
                    c:type="NcmHOAASingType*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_sing_mnu">
        <callback name="eval_sing_mnu">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">FIXME.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="igw" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHIPertIGW</doc>
              <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
            </parameter>
            <parameter name="tau_m_taus" transfer-ownership="none">
              <doc xml:space="preserve">$\tau - \tau_s$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">$k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="sing" transfer-ownership="none">
              <doc xml:space="preserve">singularity index</doc>
              <type name="guint" c:type="const guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_sing_dlnmnu">
        <callback name="eval_sing_dlnmnu">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">FIXME.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="igw" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHIPertIGW</doc>
              <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
            </parameter>
            <parameter name="tau_m_taus" transfer-ownership="none">
              <doc xml:space="preserve">$\tau - \tau_s$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">$k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="sing" transfer-ownership="none">
              <doc xml:space="preserve">singularity index</doc>
              <type name="guint" c:type="const guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_sing_system">
        <callback name="eval_sing_system">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="igw" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHIPertIGW</doc>
              <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
            </parameter>
            <parameter name="tau_m_taus" transfer-ownership="none">
              <doc xml:space="preserve">$\tau - \tau_s$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">$k$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="sing" transfer-ownership="none">
              <doc xml:space="preserve">singularity index</doc>
              <type name="guint" c:type="const guint"/>
            </parameter>
            <parameter name="nu"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">FIXME</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
            <parameter name="dlnmnu"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">FIXME</doc>
              <type name="gdouble" c:type="gdouble*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_powspec_factor">
        <callback name="eval_powspec_factor">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="igw" transfer-ownership="none">
              <type name="HIPertIGW" c:type="NcHIPertIGW*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="HIPertITwoFluids"
               c:symbol-prefix="hipert_itwo_fluids"
               c:type="NcHIPertITwoFluids"
               glib:type-name="NcHIPertITwoFluids"
               glib:get-type="nc_hipert_itwo_fluids_get_type"
               glib:type-struct="HIPertITwoFluidsInterface">
      <virtual-method name="eom">
        <return-value transfer-ownership="full">
          <type name="HIPertITwoFluidsEOM" c:type="NcHIPertITwoFluidsEOM*"/>
        </return-value>
        <parameters>
          <instance-parameter name="itf" transfer-ownership="none">
            <type name="HIPertITwoFluids" c:type="NcHIPertITwoFluids*"/>
          </instance-parameter>
          <parameter name="alpha" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="tv">
        <return-value transfer-ownership="full">
          <type name="HIPertITwoFluidsTV" c:type="NcHIPertITwoFluidsTV*"/>
        </return-value>
        <parameters>
          <instance-parameter name="itf" transfer-ownership="none">
            <type name="HIPertITwoFluids" c:type="NcHIPertITwoFluids*"/>
          </instance-parameter>
          <parameter name="alpha" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="eom_eval" c:identifier="nc_hipert_itwo_fluids_eom_eval">
        <return-value transfer-ownership="full">
          <type name="HIPertITwoFluidsEOM" c:type="NcHIPertITwoFluidsEOM*"/>
        </return-value>
        <parameters>
          <instance-parameter name="itf" transfer-ownership="none">
            <type name="HIPertITwoFluids" c:type="NcHIPertITwoFluids*"/>
          </instance-parameter>
          <parameter name="alpha" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="tv_eval" c:identifier="nc_hipert_itwo_fluids_tv_eval">
        <return-value transfer-ownership="full">
          <type name="HIPertITwoFluidsTV" c:type="NcHIPertITwoFluidsTV*"/>
        </return-value>
        <parameters>
          <instance-parameter name="itf" transfer-ownership="none">
            <type name="HIPertITwoFluids" c:type="NcHIPertITwoFluids*"/>
          </instance-parameter>
          <parameter name="alpha" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="HIPertITwoFluidsEOM"
            c:type="NcHIPertITwoFluidsEOM"
            glib:type-name="NcHIPertITwoFluidsEOM"
            glib:get-type="nc_hipert_itwo_fluids_eom_get_type"
            c:symbol-prefix="hipert_itwo_fluids_eom">
      <doc xml:space="preserve">FIXME</doc>
      <field name="skey" readable="0" private="1">
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="alpha" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="k" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="nu1" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="nu2" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="gammabar11" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="gammabar22" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="gammabar12" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="taubar" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="m_zeta" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="m_s" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="mnu2_zeta" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="mnu2_s" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <method name="dup" c:identifier="nc_hipert_itwo_fluids_eom_dup">
        <doc xml:space="preserve">Duplicates @tf_eom.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a copy of @tf_eom.</doc>
          <type name="HIPertITwoFluidsEOM" c:type="NcHIPertITwoFluidsEOM*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tf_eom" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertITwoFluidsEOM.</doc>
            <type name="HIPertITwoFluidsEOM" c:type="NcHIPertITwoFluidsEOM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_hipert_itwo_fluids_eom_free">
        <doc xml:space="preserve">Frees @tf_eom.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tf_eom" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertITwoFluidsEOM.</doc>
            <type name="HIPertITwoFluidsEOM" c:type="NcHIPertITwoFluidsEOM*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <callback name="HIPertITwoFluidsFuncEOM"
              c:type="NcHIPertITwoFluidsFuncEOM">
      <return-value transfer-ownership="full">
        <type name="HIPertITwoFluidsEOM" c:type="NcHIPertITwoFluidsEOM*"/>
      </return-value>
      <parameters>
        <parameter name="itf" transfer-ownership="none">
          <type name="HIPertITwoFluids" c:type="NcHIPertITwoFluids*"/>
        </parameter>
        <parameter name="alpha" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="k" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="HIPertITwoFluidsFuncTV" c:type="NcHIPertITwoFluidsFuncTV">
      <return-value transfer-ownership="full">
        <type name="HIPertITwoFluidsTV" c:type="NcHIPertITwoFluidsTV*"/>
      </return-value>
      <parameters>
        <parameter name="itf" transfer-ownership="none">
          <type name="HIPertITwoFluids" c:type="NcHIPertITwoFluids*"/>
        </parameter>
        <parameter name="alpha" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="k" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <record name="HIPertITwoFluidsInterface"
            c:type="NcHIPertITwoFluidsInterface"
            glib:is-gtype-struct-for="HIPertITwoFluids">
      <field name="parent" readable="0" private="1">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="eom" readable="0" private="1">
        <type name="HIPertITwoFluidsFuncEOM"
              c:type="NcHIPertITwoFluidsFuncEOM"/>
      </field>
      <field name="tv" readable="0" private="1">
        <type name="HIPertITwoFluidsFuncTV" c:type="NcHIPertITwoFluidsFuncTV"/>
      </field>
    </record>
    <record name="HIPertITwoFluidsTV"
            c:type="NcHIPertITwoFluidsTV"
            glib:type-name="NcHIPertITwoFluidsTV"
            glib:get-type="nc_hipert_itwo_fluids_tv_get_type"
            c:symbol-prefix="hipert_itwo_fluids_tv">
      <doc xml:space="preserve">FIXME</doc>
      <field name="skey" readable="0" private="1">
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="alpha" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="k" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="zeta" readable="0" private="1">
        <array zero-terminated="0" c:type="gdouble" fixed-size="4">
          <type name="gdouble" c:type="gdouble"/>
        </array>
      </field>
      <field name="s" readable="0" private="1">
        <array zero-terminated="0" c:type="gdouble" fixed-size="4">
          <type name="gdouble" c:type="gdouble"/>
        </array>
      </field>
      <field name="Pzeta" readable="0" private="1">
        <array zero-terminated="0" c:type="gdouble" fixed-size="4">
          <type name="gdouble" c:type="gdouble"/>
        </array>
      </field>
      <field name="Ps" readable="0" private="1">
        <array zero-terminated="0" c:type="gdouble" fixed-size="4">
          <type name="gdouble" c:type="gdouble"/>
        </array>
      </field>
      <method name="dup" c:identifier="nc_hipert_itwo_fluids_tv_dup">
        <doc xml:space="preserve">Duplicates @tf_tv.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a copy of @tf_tv.</doc>
          <type name="HIPertITwoFluidsTV" c:type="NcHIPertITwoFluidsTV*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tf_tv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertITwoFluidsTV</doc>
            <type name="HIPertITwoFluidsTV" c:type="NcHIPertITwoFluidsTV*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_hipert_itwo_fluids_tv_free">
        <doc xml:space="preserve">Frees @tf_tv.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tf_tv" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertITwoFluidsTV.</doc>
            <type name="HIPertITwoFluidsTV" c:type="NcHIPertITwoFluidsTV*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="HIPertITwoFluidsVars"
                 glib:type-name="NcHIPertITwoFluidsVars"
                 glib:get-type="nc_hi_pert_itwo_fluids_vars_get_type"
                 c:type="NcHIPertITwoFluidsVars">
      <doc xml:space="preserve">FIXME</doc>
      <member name="zeta_r"
              value="0"
              c:identifier="NC_HIPERT_ITWO_FLUIDS_VARS_ZETA_R"
              glib:nick="zeta-r">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="s_r"
              value="1"
              c:identifier="NC_HIPERT_ITWO_FLUIDS_VARS_S_R"
              glib:nick="s-r">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="pzeta_r"
              value="2"
              c:identifier="NC_HIPERT_ITWO_FLUIDS_VARS_PZETA_R"
              glib:nick="pzeta-r">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="ps_r"
              value="3"
              c:identifier="NC_HIPERT_ITWO_FLUIDS_VARS_PS_R"
              glib:nick="ps-r">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="zeta_i"
              value="4"
              c:identifier="NC_HIPERT_ITWO_FLUIDS_VARS_ZETA_I"
              glib:nick="zeta-i">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="s_i"
              value="5"
              c:identifier="NC_HIPERT_ITWO_FLUIDS_VARS_S_I"
              glib:nick="s-i">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="pzeta_i"
              value="6"
              c:identifier="NC_HIPERT_ITWO_FLUIDS_VARS_PZETA_I"
              glib:nick="pzeta-i">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="ps_i"
              value="7"
              c:identifier="NC_HIPERT_ITWO_FLUIDS_VARS_PS_I"
              glib:nick="ps-i">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="HIPertTwoFluids"
           c:symbol-prefix="hipert_two_fluids"
           c:type="NcHIPertTwoFluids"
           parent="HIPert"
           glib:type-name="NcHIPertTwoFluids"
           glib:get-type="nc_hipert_two_fluids_get_type"
           glib:type-struct="HIPertTwoFluidsClass">
      <constructor name="new" c:identifier="nc_hipert_two_fluids_new">
        <doc xml:space="preserve">Creates a new #NcHIPertTwoFluids object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcHIPertTwoFluids.</doc>
          <type name="HIPertTwoFluids" c:type="NcHIPertTwoFluids*"/>
        </return-value>
      </constructor>
      <function name="clear" c:identifier="nc_hipert_two_fluids_clear">
        <doc xml:space="preserve">Decreases the reference count of *@ptf and sets *@ptf to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ptf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertTwoFluids.</doc>
            <type name="HIPertTwoFluids" c:type="NcHIPertTwoFluids**"/>
          </parameter>
        </parameters>
      </function>
      <method name="eom" c:identifier="nc_hipert_two_fluids_eom">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ptf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertTwoFluids.</doc>
            <type name="HIPertTwoFluids" c:type="NcHIPertTwoFluids*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">log-redshift time.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="eom"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve">Equation of motion variables.</doc>
            <type name="HIPertITwoFluidsEOM" c:type="NcHIPertITwoFluidsEOM**"/>
          </parameter>
        </parameters>
      </method>
      <method name="evolve" c:identifier="nc_hipert_two_fluids_evolve">
        <doc xml:space="preserve">Evolve the system until @alphaf.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ptf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertTwoFluids.</doc>
            <type name="HIPertTwoFluids" c:type="NcHIPertTwoFluids*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="alphaf" transfer-ownership="none">
            <doc xml:space="preserve">the final log-redshift time.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="evolve_mode1sub"
              c:identifier="nc_hipert_two_fluids_evolve_mode1sub">
        <doc xml:space="preserve">Evolve the system until @alphaf.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ptf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertTwoFluids.</doc>
            <type name="HIPertTwoFluids" c:type="NcHIPertTwoFluids*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="alphaf" transfer-ownership="none">
            <doc xml:space="preserve">the final log-redshift time.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_hipert_two_fluids_free">
        <doc xml:space="preserve">Decreases the reference count of @ptf.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ptf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertTwoFluids.</doc>
            <type name="HIPertTwoFluids" c:type="NcHIPertTwoFluids*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cross_time"
              c:identifier="nc_hipert_two_fluids_get_cross_time">
        <doc xml:space="preserve">Get the initial time where the approximate solution is valid
within precision @prec.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">initial time $\alpha_i$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="ptf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertTwoFluids</doc>
            <type name="HIPertTwoFluids" c:type="NcHIPertTwoFluids*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="cross" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertTwoFluidsCross</doc>
            <type name="HIPertTwoFluidsCross" c:type="NcHIPertTwoFluidsCross"/>
          </parameter>
          <parameter name="alpha_i" transfer-ownership="none">
            <doc xml:space="preserve">initial try</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="prec" transfer-ownership="none">
            <doc xml:space="preserve">precision</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_init_cond_QP"
              c:identifier="nc_hipert_two_fluids_get_init_cond_QP">
        <doc xml:space="preserve">Calculates the initial condition for the $(Q,\,P)$ system with initial phase
for the R solution $\beta_R = $  @beta_R. The variable @main_mode chooses
which mode is excited (1 or 2).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ptf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertTwoFluids</doc>
            <type name="HIPertTwoFluids" c:type="NcHIPertTwoFluids*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">the log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="main_mode" transfer-ownership="none">
            <doc xml:space="preserve">main mode</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="beta_R" transfer-ownership="none">
            <doc xml:space="preserve">mode $R$ initial phase</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="init_cond" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector (size &gt;= 8) where to put the initial conditions</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_init_cond_zetaS"
              c:identifier="nc_hipert_two_fluids_get_init_cond_zetaS">
        <doc xml:space="preserve">Calculates the initial condition for the $\zeta{}S$ system with initial phase
for the R solution $\beta_R = $ @beta_R. The variable @main_mode chooses
which mode is excited (1 or 2).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ptf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertTwoFluids</doc>
            <type name="HIPertTwoFluids" c:type="NcHIPertTwoFluids*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">the log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="main_mode" transfer-ownership="none">
            <doc xml:space="preserve">main mode</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="beta_R" transfer-ownership="none">
            <doc xml:space="preserve">mode $R$ initial phase</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="init_cond" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector (size &gt;= 8) where to put the initial conditions</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_state_mod"
              c:identifier="nc_hipert_two_fluids_get_state_mod">
        <doc xml:space="preserve">Get the current module for the solution.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">state module.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="ptf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertTwoFluids</doc>
            <type name="HIPertTwoFluids" c:type="NcHIPertTwoFluids*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_state" c:identifier="nc_hipert_two_fluids_peek_state">
        <doc xml:space="preserve">Get the current time and values of the numerical solution.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">current solution state.</doc>
          <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ptf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertTwoFluids</doc>
            <type name="HIPertTwoFluids" c:type="NcHIPertTwoFluids*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="alpha"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">current time</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_hipert_two_fluids_ref">
        <doc xml:space="preserve">Increases the reference count of @ptf.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@ptf.</doc>
          <type name="HIPertTwoFluids" c:type="NcHIPertTwoFluids*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ptf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertTwoFluids.</doc>
            <type name="HIPertTwoFluids" c:type="NcHIPertTwoFluids*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_init_cond"
              c:identifier="nc_hipert_two_fluids_set_init_cond">
        <doc xml:space="preserve">Sets the initial conditions for the two fluids system evolution.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ptf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertTwoFluids</doc>
            <type name="HIPertTwoFluids" c:type="NcHIPertTwoFluids*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">the log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="main_mode" transfer-ownership="none">
            <doc xml:space="preserve">main mode</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="useQP" transfer-ownership="none">
            <doc xml:space="preserve">whether to use the $(Q,\,P)$ system</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="init_cond" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector (size &gt;= 8) containing the initial conditions</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_init_cond_mode1sub"
              c:identifier="nc_hipert_two_fluids_set_init_cond_mode1sub">
        <doc xml:space="preserve">Sets the initial conditions for the two fluids system evolution.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ptf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertTwoFluids</doc>
            <type name="HIPertTwoFluids" c:type="NcHIPertTwoFluids*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">the log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="init_cond" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector (size &gt;= 4) containing the initial conditions</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_zeta_s" c:identifier="nc_hipert_two_fluids_to_zeta_s">
        <doc xml:space="preserve">Transform in-place the variables @init_cond from $(Q,\,P)$ to $(\zeta,\,S)$, assuming
they are calculated at $\alpha$ = @alpha.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ptf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertTwoFluids</doc>
            <type name="HIPertTwoFluids" c:type="NcHIPertTwoFluids*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">the log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector (size &gt;= 8) current state in $(Q,\,P)$ variables</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="HIPert" c:type="NcHIPert"/>
      </field>
      <field name="wkb_zeta" readable="0" private="1">
        <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
      </field>
      <field name="wkb_S" readable="0" private="1">
        <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
      </field>
      <field name="abstol" introspectable="0" readable="0" private="1">
        <type c:type="N_Vector"/>
      </field>
      <field name="useQP" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="state" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="arg" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="arkode" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="HIPertTwoFluidsClass"
            c:type="NcHIPertTwoFluidsClass"
            glib:is-gtype-struct-for="HIPertTwoFluids">
      <field name="parent_class" readable="0" private="1">
        <type name="HIPertClass" c:type="NcHIPertClass"/>
      </field>
    </record>
    <enumeration name="HIPertTwoFluidsCross"
                 glib:type-name="NcHIPertTwoFluidsCross"
                 glib:get-type="nc_hi_pert_two_fluids_cross_get_type"
                 c:type="NcHIPertTwoFluidsCross">
      <doc xml:space="preserve">FIXME</doc>
      <member name="mode1main"
              value="0"
              c:identifier="NC_HIPERT_TWO_FLUIDS_CROSS_MODE1MAIN"
              glib:nick="mode1main">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="mode2main"
              value="1"
              c:identifier="NC_HIPERT_TWO_FLUIDS_CROSS_MODE2MAIN"
              glib:nick="mode2main">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="mode1sub"
              value="2"
              c:identifier="NC_HIPERT_TWO_FLUIDS_CROSS_MODE1SUB"
              glib:nick="mode1sub">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="mode2sub"
              value="3"
              c:identifier="NC_HIPERT_TWO_FLUIDS_CROSS_MODE2SUB"
              glib:nick="mode2sub">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="HIPertWKB"
           c:symbol-prefix="hipert_wkb"
           c:type="NcHIPertWKB"
           parent="HIPert"
           abstract="1"
           glib:type-name="NcHIPertWKB"
           glib:get-type="nc_hipert_wkb_get_type"
           glib:type-struct="HIPertWKBClass">
      <constructor name="new_by_name" c:identifier="nc_hipert_wkb_new_by_name">
        <return-value transfer-ownership="full">
          <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
        </return-value>
        <parameters>
          <parameter name="wkb_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_hipert_wkb_clear">
        <doc xml:space="preserve">Decreases the reference count of *@wkb and sets *@wkb to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB.</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_dVnu2" invoker="get_dVnu2">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">derivative of the WKB potential $\mathrm{d}(V/\nu^2)/\mathrm{d}\alpha$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_m" invoker="get_m">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">derivative of the WKB potential $\mathrm{d}(V/\nu^2)/\mathrm{d}\alpha$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_mnu_dmnu" invoker="get_mnu_dmnu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="mnu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">mass-frequency $m\nu$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dmnu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">mass-frequency derivative $\mathrm{d}m\nu/\mathrm{d}\alpha$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_nu2" invoker="get_nu2">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">derivative of the WKB potential $\mathrm{d}(V/\nu^2)/\mathrm{d}\alpha$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_nu_V" invoker="get_nu_V">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="nu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">frequency $\nu$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="V"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">WKB potential</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="free" c:identifier="nc_hipert_wkb_free">
        <doc xml:space="preserve">Decreases the reference count of @wkb.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB.</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dVnu2" c:identifier="nc_hipert_wkb_get_dVnu2">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">derivative of the WKB potential $\mathrm{d}(V/\nu^2)/\mathrm{d}\alpha$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_m" c:identifier="nc_hipert_wkb_get_m">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">mass $m$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mnu_dmnu" c:identifier="nc_hipert_wkb_get_mnu_dmnu">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="mnu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">mass-frequency $m\nu$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dmnu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">mass-frequency derivative $\mathrm{d}m\nu/\mathrm{d}\alpha$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_nu2" c:identifier="nc_hipert_wkb_get_nu2">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">frequency squared $m^2$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_nu_V" c:identifier="nc_hipert_wkb_get_nu_V">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode $k$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="nu"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">frequency $\nu$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="V"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">WKB potential</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="maxtime" c:identifier="nc_hipert_wkb_maxtime">
        <doc xml:space="preserve">Search for the root of $\nu_A^2$ between $\alpha_0$ and $\alpha_1$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the root of $\nu_A^2$ between $\alpha_0$ and $\alpha_1$ or NaN if not found.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="alpha0" transfer-ownership="none">
            <doc xml:space="preserve">the initial log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="alpha1" transfer-ownership="none">
            <doc xml:space="preserve">the final log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="maxtime_prec" c:identifier="nc_hipert_wkb_maxtime_prec">
        <doc xml:space="preserve">Search for the instant at which the WKB approximation starts to fails within the asked precision.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the instant $\alpha$ between $\alpha_0$ and $\alpha_1$ or NaN if not found.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="cmp" transfer-ownership="none">
            <doc xml:space="preserve">Comparison type</doc>
            <type name="HIPertWKBCmp" c:type="NcHIPertWKBCmp"/>
          </parameter>
          <parameter name="alpha0" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="alpha1" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="nuA" c:identifier="nc_hipert_wkb_nuA">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">the log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="phase" c:identifier="nc_hipert_wkb_phase">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">the log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="nc_hipert_wkb_prepare">
        <doc xml:space="preserve">Prepare the object for WKB calculations using the model @model. It uses the wkb
approximation until @wkb-&gt;reltol is reached and then it solves the non-linear equation of motion
for $\nu_A$ for the rest of the interval.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="q" c:identifier="nc_hipert_wkb_q">
        <doc xml:space="preserve">Computes the WKB solution $q_\text{WKB}$ for the mode $k$ at the time $\alpha$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">the log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="Re_q"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">Real part of the wkb solution</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="Im_q"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">Imaginary part of the wkb solution</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="q_p" c:identifier="nc_hipert_wkb_q_p">
        <doc xml:space="preserve">Computes the WKB solution $q_\text{WKB}$ and its momentum for the mode $k$ at the time $\alpha$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB.</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmModel</doc>
            <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">the log-redshift time.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="Re_q"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">Real part of the wkb solution.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="Im_q"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">Imaginary part of the wkb solution.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="Re_p"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">Real part of the wkb solution momentum.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="Im_p"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">Imaginary part of the wkb solution momentum.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_hipert_wkb_ref">
        <doc xml:space="preserve">Increases the reference count of @wkb.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@wkb.</doc>
          <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
        </return-value>
        <parameters>
          <instance-parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB.</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_interval" c:identifier="nc_hipert_wkb_set_interval">
        <doc xml:space="preserve">Sets the interval to calculate the WKB modes to $(\alpha_i,\,\alpha_f)$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wkb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPertWKB</doc>
            <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
          </instance-parameter>
          <parameter name="alpha_i" transfer-ownership="none">
            <doc xml:space="preserve">initial log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="alpha_f" transfer-ownership="none">
            <doc xml:space="preserve">final log-redshift time</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="HIPert" c:type="NcHIPert"/>
      </field>
      <field name="nuA" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="lnF" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="dlnF" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="alpha_phase" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="cur_phase" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="alpha_i" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="alpha_f" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="alpha_p" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="HIPertWKBClass"
            c:type="NcHIPertWKBClass"
            glib:is-gtype-struct-for="HIPertWKB">
      <field name="parent_class" readable="0" private="1">
        <type name="HIPertClass" c:type="NcHIPertClass"/>
      </field>
      <field name="get_nu_V" readable="0" private="1">
        <type name="HIPertWKBGetNuV" c:type="NcHIPertWKBGetNuV"/>
      </field>
      <field name="get_mnu_dmnu" readable="0" private="1">
        <type name="HIPertWKBGetMnuDmnu" c:type="NcHIPertWKBGetMnuDmnu"/>
      </field>
      <field name="get_m" readable="0" private="1">
        <type name="HIPertWKBGetVal" c:type="NcHIPertWKBGetVal"/>
      </field>
      <field name="get_nu2" readable="0" private="1">
        <type name="HIPertWKBGetVal" c:type="NcHIPertWKBGetVal"/>
      </field>
      <field name="get_dVnu2" readable="0" private="1">
        <type name="HIPertWKBGetVal" c:type="NcHIPertWKBGetVal"/>
      </field>
    </record>
    <enumeration name="HIPertWKBCmp"
                 glib:type-name="NcHIPertWKBCmp"
                 glib:get-type="nc_hi_pert_wkb_cmp_get_type"
                 c:type="NcHIPertWKBCmp">
      <doc xml:space="preserve">FIXME</doc>
      <member name="potential"
              value="0"
              c:identifier="NC_HIPERT_WKB_CMP_POTENTIAL"
              glib:nick="potential">
        <doc xml:space="preserve">Compare with the potential.</doc>
      </member>
      <member name="alpha2"
              value="1"
              c:identifier="NC_HIPERT_WKB_CMP_ALPHA2"
              glib:nick="alpha2">
        <doc xml:space="preserve">Compare with $\alpha^2$.</doc>
      </member>
    </enumeration>
    <callback name="HIPertWKBGetMnuDmnu" c:type="NcHIPertWKBGetMnuDmnu">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="wkb" transfer-ownership="none">
          <doc xml:space="preserve">a #NcHIPertWKB</doc>
          <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
        </parameter>
        <parameter name="model" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmModel</doc>
          <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="alpha" transfer-ownership="none">
          <doc xml:space="preserve">log-redshift time</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="k" transfer-ownership="none">
          <doc xml:space="preserve">mode $k$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="mnu"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">mass-frequency $m\nu$</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="dmnu"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">mass-frequency derivative $\mathrm{d}m\nu/\mathrm{d}\alpha$</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="HIPertWKBGetNuV" c:type="NcHIPertWKBGetNuV">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="wkb" transfer-ownership="none">
          <doc xml:space="preserve">a #NcHIPertWKB</doc>
          <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
        </parameter>
        <parameter name="model" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmModel</doc>
          <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="alpha" transfer-ownership="none">
          <doc xml:space="preserve">log-redshift time</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="k" transfer-ownership="none">
          <doc xml:space="preserve">mode $k$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="nu"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">frequency $\nu$</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="V"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">WKB potential</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="HIPertWKBGetVal" c:type="NcHIPertWKBGetVal">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">derivative of the WKB potential $\mathrm{d}(V/\nu^2)/\mathrm{d}\alpha$.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="wkb" transfer-ownership="none">
          <doc xml:space="preserve">a #NcHIPertWKB</doc>
          <type name="HIPertWKB" c:type="NcHIPertWKB*"/>
        </parameter>
        <parameter name="model" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmModel</doc>
          <type name="NumCosmoMath.Model" c:type="NcmModel*"/>
        </parameter>
        <parameter name="alpha" transfer-ownership="none">
          <doc xml:space="preserve">log-redshift time</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="k" transfer-ownership="none">
          <doc xml:space="preserve">mode $k$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <class name="HIPertWKBQgrwZeta"
           c:symbol-prefix="hipert_wkb_qgrw_zeta"
           parent="HIPertWKB"
           glib:type-name="NcHIPertWKBQgrwZeta"
           glib:get-type="nc_hipert_wkb_qgrw_zeta_get_type">
    </class>
    <enumeration name="HIPertWKBVars"
                 glib:type-name="NcHIPertWKBVars"
                 glib:get-type="nc_hi_pert_wkb_vars_get_type"
                 c:type="NcHIPertWKBVars">
      <doc xml:space="preserve">Perturbation variables enumerator.</doc>
      <member name="re_q"
              value="0"
              c:identifier="NC_HIPERT_WKB_RE_Q"
              glib:nick="re-q">
        <doc xml:space="preserve">$\text{Re}(q)$</doc>
      </member>
      <member name="im_q"
              value="1"
              c:identifier="NC_HIPERT_WKB_IM_Q"
              glib:nick="im-q">
        <doc xml:space="preserve">$\text{Im}(q)$</doc>
      </member>
      <member name="re_p"
              value="2"
              c:identifier="NC_HIPERT_WKB_RE_P"
              glib:nick="re-p">
        <doc xml:space="preserve">$\text{Re}(p)$</doc>
      </member>
      <member name="im_p"
              value="3"
              c:identifier="NC_HIPERT_WKB_IM_P"
              glib:nick="im-p">
        <doc xml:space="preserve">$\text{Im}(p)$</doc>
      </member>
    </enumeration>
    <class name="HIPrim"
           c:symbol-prefix="hiprim"
           c:type="NcHIPrim"
           parent="NumCosmoMath.Model"
           glib:type-name="NcHIPrim"
           glib:get-type="nc_hiprim_get_type"
           glib:type-struct="HIPrimClass">
      <constructor name="new_from_name" c:identifier="nc_hiprim_new_from_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="HIPrim" c:type="NcHIPrim*"/>
        </return-value>
        <parameters>
          <parameter name="parent_type" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="prim_name" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_hiprim_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="prim" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPrim</doc>
            <type name="HIPrim" c:type="NcHIPrim**"/>
          </parameter>
        </parameters>
      </function>
      <function name="id" c:identifier="nc_hiprim_id">
        <return-value transfer-ownership="none">
          <type name="gint32" c:type="gint32"/>
        </return-value>
      </function>
      <function name="log_all_models" c:identifier="nc_hiprim_log_all_models">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve">a #GType</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_lnSA_powspec_lnk_impl"
                c:identifier="nc_hiprim_set_lnSA_powspec_lnk_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HIPrimClass" c:type="NcHIPrimClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none" scope="notified">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HIPrimFunc1" c:type="NcHIPrimFunc1"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_lnT_powspec_lnk_impl"
                c:identifier="nc_hiprim_set_lnT_powspec_lnk_impl"
                introspectable="0">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model_class" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HIPrimClass" c:type="NcHIPrimClass*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none" scope="notified">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HIPrimFunc1" c:type="NcHIPrimFunc1"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="lnSA_powspec_lnk" invoker="lnSA_powspec_lnk">
        <doc xml:space="preserve">Gets the natural logarithm of the scalar adiabatic power spectrum as a
function of $\ln(k\mathrm{Mpc})$</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\log(P_{T})$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="prim" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPrim</doc>
            <type name="HIPrim" c:type="NcHIPrim*"/>
          </instance-parameter>
          <parameter name="lnk" transfer-ownership="none">
            <doc xml:space="preserve">$\ln(k\mathrm{Mpc})$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="lnT_powspec_lnk" invoker="lnT_powspec_lnk">
        <doc xml:space="preserve">Gets the natural logarithm of the tensor power spectrum as a
function of $\ln(k\mathrm{Mpc})$</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\log(P_{T})$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="prim" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPrim</doc>
            <type name="HIPrim" c:type="NcHIPrim*"/>
          </instance-parameter>
          <parameter name="lnk" transfer-ownership="none">
            <doc xml:space="preserve">$\ln(k\mathrm{Mpc})$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="testee">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="prim" transfer-ownership="none">
            <type name="HIPrim" c:type="NcHIPrim*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="SA_Ampl" c:identifier="nc_hiprim_SA_Ampl">
        <doc xml:space="preserve">Gets the scalar adiabatic power spectrum amplitude,
i.e., $P_{SA}(k_\mathrm{pivot})$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$P_{SA}(k_\mathrm{pivot})$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="prim" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPrim</doc>
            <type name="HIPrim" c:type="NcHIPrim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="SA_powspec_k" c:identifier="nc_hiprim_SA_powspec_k">
        <doc xml:space="preserve">Gets the scalar adiabatic power spectrum as a function of $k$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$P_{SA}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="prim" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPrim</doc>
            <type name="HIPrim" c:type="NcHIPrim*"/>
          </instance-parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$ in units of $1/\mathrm{Mpc}$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="T_Ampl" c:identifier="nc_hiprim_T_Ampl">
        <doc xml:space="preserve">Gets the tensor power spectrum amplitude,
i.e., $P_{T}(k_\mathrm{pivot})$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$P_{T}(k_\mathrm{pivot})$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="prim" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPrim</doc>
            <type name="HIPrim" c:type="NcHIPrim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="T_SA_ratio" c:identifier="nc_hiprim_T_SA_ratio">
        <doc xml:space="preserve">Gets the tensor-to-scalar ratio.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$P_{T}(k_\mathrm{pivot})/P_{SA}(k_\mathrm{pivot})$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="prim" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPrim</doc>
            <type name="HIPrim" c:type="NcHIPrim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="T_powspec_k" c:identifier="nc_hiprim_T_powspec_k">
        <doc xml:space="preserve">Gets the tensor power spectrum as a function of $k$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$P_{T}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="prim" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPrim</doc>
            <type name="HIPrim" c:type="NcHIPrim*"/>
          </instance-parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">$k$ in units of $1/\mathrm{Mpc}$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_hiprim_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="prim" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPrim</doc>
            <type name="HIPrim" c:type="NcHIPrim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_k_pivot" c:identifier="nc_hiprim_get_k_pivot">
        <doc xml:space="preserve">Gets the value of the pivotal $k$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">pivotal $k$ in units of $1/\mathrm{Mpc}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="prim" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPrim</doc>
            <type name="HIPrim" c:type="NcHIPrim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lnk_pivot" c:identifier="nc_hiprim_get_lnk_pivot">
        <doc xml:space="preserve">Gets the value of the pivotal $k$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\ln(k_\mathrm{pivot}\mathrm{Mpc})$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="prim" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPrim</doc>
            <type name="HIPrim" c:type="NcHIPrim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lnSA_powspec_lnk"
              c:identifier="nc_hiprim_lnSA_powspec_lnk">
        <doc xml:space="preserve">Gets the natural logarithm of the scalar adiabatic power spectrum as a
function of $\ln(k\mathrm{Mpc})$</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\log(P_{SA})$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="prim" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPrim</doc>
            <type name="HIPrim" c:type="NcHIPrim*"/>
          </instance-parameter>
          <parameter name="lnk" transfer-ownership="none">
            <doc xml:space="preserve">$\ln(k\mathrm{Mpc})$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="lnT_powspec_lnk" c:identifier="nc_hiprim_lnT_powspec_lnk">
        <doc xml:space="preserve">Gets the natural logarithm of the tensor power spectrum as a
function of $\ln(k\mathrm{Mpc})$</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\log(P_{T})$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="prim" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPrim</doc>
            <type name="HIPrim" c:type="NcHIPrim*"/>
          </instance-parameter>
          <parameter name="lnk" transfer-ownership="none">
            <doc xml:space="preserve">$\ln(k\mathrm{Mpc})$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_hiprim_ref">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="HIPrim" c:type="NcHIPrim*"/>
        </return-value>
        <parameters>
          <instance-parameter name="prim" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPrim</doc>
            <type name="HIPrim" c:type="NcHIPrim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_k_pivot" c:identifier="nc_hiprim_set_k_pivot">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="prim" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIPrim</doc>
            <type name="HIPrim" c:type="NcHIPrim*"/>
          </instance-parameter>
          <parameter name="k_pivot" transfer-ownership="none">
            <doc xml:space="preserve">pivotal $k$ in units of $1/\mathrm{Mpc}$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="k-pivot"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Model" c:type="NcmModel"/>
      </field>
      <field name="k_pivot" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lnk_pivot" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <class name="HIPrimAtan"
           c:symbol-prefix="hiprim_atan"
           c:type="NcHIPrimAtan"
           parent="HIPrim"
           glib:type-name="NcHIPrimAtan"
           glib:get-type="nc_hiprim_atan_get_type"
           glib:type-struct="HIPrimAtanClass">
      <constructor name="new" c:identifier="nc_hiprim_atan_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="HIPrimAtan" c:type="NcHIPrimAtan*"/>
        </return-value>
      </constructor>
      <property name="c2" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="c2-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="c3" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="c3-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="lambda" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="lambda-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ln10e10ASA" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="ln10e10ASA-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="lnkc" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="lnkc-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="n-SA" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="n-SA-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HIPrim" c:type="NcHIPrim"/>
      </field>
    </class>
    <record name="HIPrimAtanClass"
            c:type="NcHIPrimAtanClass"
            glib:is-gtype-struct-for="HIPrimAtan">
      <field name="parent_class" readable="0" private="1">
        <type name="HIPrimClass" c:type="NcHIPrimClass"/>
      </field>
    </record>
    <enumeration name="HIPrimAtanParams"
                 glib:type-name="NcHIPrimAtanParams"
                 glib:get-type="nc_hi_prim_atan_params_get_type"
                 c:type="NcHIPrimAtanParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="ln10e10asa"
              value="0"
              c:identifier="NC_HIPRIM_ATAN_LN10E10ASA"
              glib:nick="ln10e10asa">
        <doc xml:space="preserve">Amplitude of the adiabatic scalar mode $\ln(10^10A_{SA})$</doc>
      </member>
      <member name="n_sa"
              value="1"
              c:identifier="NC_HIPRIM_ATAN_N_SA"
              glib:nick="n-sa">
        <doc xml:space="preserve">Adiabatic scalar spectral index</doc>
      </member>
      <member name="lnkc"
              value="2"
              c:identifier="NC_HIPRIM_ATAN_LNKC"
              glib:nick="lnkc">
        <doc xml:space="preserve">Arctan parameter $\ln(k_c)$</doc>
      </member>
      <member name="c2"
              value="3"
              c:identifier="NC_HIPRIM_ATAN_C2"
              glib:nick="c2">
        <doc xml:space="preserve">Arctan parameter $c_2$</doc>
      </member>
      <member name="c3"
              value="4"
              c:identifier="NC_HIPRIM_ATAN_C3"
              glib:nick="c3">
        <doc xml:space="preserve">Arctan parameter $c_3$</doc>
      </member>
      <member name="lambda"
              value="5"
              c:identifier="NC_HIPRIM_ATAN_LAMBDA"
              glib:nick="lambda">
        <doc xml:space="preserve">Arctan parameter $\lambda$</doc>
      </member>
    </enumeration>
    <class name="HIPrimBPL"
           c:symbol-prefix="hiprim_bpl"
           c:type="NcHIPrimBPL"
           parent="HIPrim"
           glib:type-name="NcHIPrimBPL"
           glib:get-type="nc_hiprim_bpl_get_type"
           glib:type-struct="HIPrimBPLClass">
      <constructor name="new" c:identifier="nc_hiprim_bpl_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="HIPrimBPL" c:type="NcHIPrimBPL*"/>
        </return-value>
      </constructor>
      <property name="delta" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="delta-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ln10e10ASA" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="ln10e10ASA-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="lnkb" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="lnkb-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="n-SA" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="n-SA-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HIPrim" c:type="NcHIPrim"/>
      </field>
    </class>
    <record name="HIPrimBPLClass"
            c:type="NcHIPrimBPLClass"
            glib:is-gtype-struct-for="HIPrimBPL">
      <field name="parent_class" readable="0" private="1">
        <type name="HIPrimClass" c:type="NcHIPrimClass"/>
      </field>
    </record>
    <enumeration name="HIPrimBPLParams"
                 glib:type-name="NcHIPrimBPLParams"
                 glib:get-type="nc_hi_prim_bpl_params_get_type"
                 c:type="NcHIPrimBPLParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="ln10e10asa"
              value="0"
              c:identifier="NC_HIPRIM_BPL_LN10E10ASA"
              glib:nick="ln10e10asa">
        <doc xml:space="preserve">Amplitude of the adiabatic scalar mode $\ln(10^10A_{SA})$</doc>
      </member>
      <member name="n_sa"
              value="1"
              c:identifier="NC_HIPRIM_BPL_N_SA"
              glib:nick="n-sa">
        <doc xml:space="preserve">Adiabatic scalar spectral index</doc>
      </member>
      <member name="delta"
              value="2"
              c:identifier="NC_HIPRIM_BPL_DELTA"
              glib:nick="delta">
        <doc xml:space="preserve">Exp parameter $\delta$</doc>
      </member>
      <member name="lnkb"
              value="3"
              c:identifier="NC_HIPRIM_BPL_LNKB"
              glib:nick="lnkb">
        <doc xml:space="preserve">Exp parameter $\ln(k_b)$</doc>
      </member>
    </enumeration>
    <record name="HIPrimClass"
            c:type="NcHIPrimClass"
            glib:is-gtype-struct-for="HIPrim">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.ModelClass" c:type="NcmModelClass"/>
      </field>
      <field name="lnSA_powspec_lnk" readable="0" private="1">
        <type name="HIPrimFunc1" c:type="NcHIPrimFunc1"/>
      </field>
      <field name="lnT_powspec_lnk" readable="0" private="1">
        <type name="HIPrimFunc1" c:type="NcHIPrimFunc1"/>
      </field>
      <field name="testee">
        <callback name="testee">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="prim" transfer-ownership="none">
              <type name="HIPrim" c:type="NcHIPrim*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="HIPrimExpc"
           c:symbol-prefix="hiprim_expc"
           c:type="NcHIPrimExpc"
           parent="HIPrim"
           glib:type-name="NcHIPrimExpc"
           glib:get-type="nc_hiprim_expc_get_type"
           glib:type-struct="HIPrimExpcClass">
      <constructor name="new" c:identifier="nc_hiprim_expc_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="HIPrimExpc" c:type="NcHIPrimExpc*"/>
        </return-value>
      </constructor>
      <property name="c" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="c-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="lambdac" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="lambdac-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ln10e10ASA" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="ln10e10ASA-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="lnkc" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="lnkc-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="n-SA" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="n-SA-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HIPrim" c:type="NcHIPrim"/>
      </field>
    </class>
    <record name="HIPrimExpcClass"
            c:type="NcHIPrimExpcClass"
            glib:is-gtype-struct-for="HIPrimExpc">
      <field name="parent_class" readable="0" private="1">
        <type name="HIPrimClass" c:type="NcHIPrimClass"/>
      </field>
    </record>
    <enumeration name="HIPrimExpcParams"
                 glib:type-name="NcHIPrimExpcParams"
                 glib:get-type="nc_hi_prim_expc_params_get_type"
                 c:type="NcHIPrimExpcParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="ln10e10asa"
              value="0"
              c:identifier="NC_HIPRIM_EXPC_LN10E10ASA"
              glib:nick="ln10e10asa">
        <doc xml:space="preserve">Amplitude of the adiabatic scalar mode $\ln(10^10A_{SA})$</doc>
      </member>
      <member name="n_sa"
              value="1"
              c:identifier="NC_HIPRIM_EXPC_N_SA"
              glib:nick="n-sa">
        <doc xml:space="preserve">Adiabatic scalar spectral index</doc>
      </member>
      <member name="lambdac"
              value="2"
              c:identifier="NC_HIPRIM_EXPC_LAMBDAC"
              glib:nick="lambdac">
        <doc xml:space="preserve">Exp parameter $\lambda_c$</doc>
      </member>
      <member name="lnkc"
              value="3"
              c:identifier="NC_HIPRIM_EXPC_LNKC"
              glib:nick="lnkc">
        <doc xml:space="preserve">Exp parameter $\ln(k_c)$</doc>
      </member>
      <member name="c" value="4" c:identifier="NC_HIPRIM_EXPC_C" glib:nick="c">
        <doc xml:space="preserve">Exp cut parameter $c$</doc>
      </member>
    </enumeration>
    <callback name="HIPrimFunc1" c:type="NcHIPrimFunc1">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">$\log(P_{T})$</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="prim" transfer-ownership="none">
          <doc xml:space="preserve">a #NcHIPrim</doc>
          <type name="HIPrim" c:type="NcHIPrim*"/>
        </parameter>
        <parameter name="lnk" transfer-ownership="none">
          <doc xml:space="preserve">$\ln(k\mathrm{Mpc})$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <bitfield name="HIPrimImpl"
              glib:type-name="NcHIPrimImpl"
              glib:get-type="nc_hi_prim_impl_get_type"
              c:type="NcHIPrimImpl">
      <doc xml:space="preserve">FIXME</doc>
      <member name="lnsa_powspec_lnk"
              value="1"
              c:identifier="NC_HIPRIM_IMPL_lnSA_powspec_lnk"
              glib:nick="lnsa-powspec-lnk">
        <doc xml:space="preserve">Logarithm of the Scalar Adiabatic power spectrum as a function of $\ln(k\mathrm{Mpc})$</doc>
      </member>
      <member name="lnt_powspec_lnk"
              value="2"
              c:identifier="NC_HIPRIM_IMPL_lnT_powspec_lnk"
              glib:nick="lnt-powspec-lnk">
        <doc xml:space="preserve">Logarithm of the Tensor power spectrum as a function of $\ln(k\mathrm{Mpc})$</doc>
      </member>
    </bitfield>
    <class name="HIPrimPowerLaw"
           c:symbol-prefix="hiprim_power_law"
           c:type="NcHIPrimPowerLaw"
           parent="HIPrim"
           glib:type-name="NcHIPrimPowerLaw"
           glib:get-type="nc_hiprim_power_law_get_type"
           glib:type-struct="HIPrimPowerLawClass">
      <constructor name="new" c:identifier="nc_hiprim_power_law_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="HIPrimPowerLaw" c:type="NcHIPrimPowerLaw*"/>
        </return-value>
      </constructor>
      <property name="T-SA-ratio" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="T-SA-ratio-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ln10e10ASA" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="ln10e10ASA-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="n-SA" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="n-SA-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="n-T" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="n-T-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HIPrim" c:type="NcHIPrim"/>
      </field>
    </class>
    <record name="HIPrimPowerLawClass"
            c:type="NcHIPrimPowerLawClass"
            glib:is-gtype-struct-for="HIPrimPowerLaw">
      <field name="parent_class" readable="0" private="1">
        <type name="HIPrimClass" c:type="NcHIPrimClass"/>
      </field>
    </record>
    <enumeration name="HIPrimPowerLawParams"
                 glib:type-name="NcHIPrimPowerLawParams"
                 glib:get-type="nc_hi_prim_power_law_params_get_type"
                 c:type="NcHIPrimPowerLawParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="ln10e10asa"
              value="0"
              c:identifier="NC_HIPRIM_POWER_LAW_LN10E10ASA"
              glib:nick="ln10e10asa">
        <doc xml:space="preserve">Amplitude of the adiabatic scalar mode $\ln(10^10A_{SA})$</doc>
      </member>
      <member name="t_sa_ratio"
              value="1"
              c:identifier="NC_HIPRIM_POWER_LAW_T_SA_RATIO"
              glib:nick="t-sa-ratio">
        <doc xml:space="preserve">Tensor-to-scalar ratio</doc>
      </member>
      <member name="n_sa"
              value="2"
              c:identifier="NC_HIPRIM_POWER_LAW_N_SA"
              glib:nick="n-sa">
        <doc xml:space="preserve">Adiabatic scalar spectral index</doc>
      </member>
      <member name="n_t"
              value="3"
              c:identifier="NC_HIPRIM_POWER_LAW_N_T"
              glib:nick="n-t">
        <doc xml:space="preserve">Tensor spectral index</doc>
      </member>
    </enumeration>
    <constant name="HIREION_CAMB_DEFAULT_HEIII_REION_DELTA"
              value="0.500000"
              c:type="NC_HIREION_CAMB_DEFAULT_HEIII_REION_DELTA">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIREION_CAMB_DEFAULT_HEIII_Z"
              value="3.500000"
              c:type="NC_HIREION_CAMB_DEFAULT_HEIII_Z">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIREION_CAMB_DEFAULT_HII_HEII_REION_DELTA"
              value="0.500000"
              c:type="NC_HIREION_CAMB_DEFAULT_HII_HEII_REION_DELTA">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIREION_CAMB_DEFAULT_HII_HEII_REION_EXPO"
              value="1.500000"
              c:type="NC_HIREION_CAMB_DEFAULT_HII_HEII_REION_EXPO">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIREION_CAMB_DEFAULT_HII_HEII_Z"
              value="13.000000"
              c:type="NC_HIREION_CAMB_DEFAULT_HII_HEII_Z">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="HIREION_DEFAULT_PARAMS_ABSTOL"
              value="0.000000"
              c:type="NC_HIREION_DEFAULT_PARAMS_ABSTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <class name="HIReion"
           c:symbol-prefix="hireion"
           c:type="NcHIReion"
           parent="NumCosmoMath.Model"
           abstract="1"
           glib:type-name="NcHIReion"
           glib:get-type="nc_hireion_get_type"
           glib:type-struct="HIReionClass">
      <constructor name="new_from_name"
                   c:identifier="nc_hireion_new_from_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="HIReion" c:type="NcHIReion*"/>
        </return-value>
        <parameters>
          <parameter name="parent_type" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="reion_name" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_hireion_clear">
        <doc xml:space="preserve">If @reion is different from NULL, decreses the reference
count of *@reion by one and sets *reion to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="reion" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIReion</doc>
            <type name="HIReion" c:type="NcHIReion**"/>
          </parameter>
        </parameters>
      </function>
      <function name="id" c:identifier="nc_hireion_id">
        <return-value transfer-ownership="none">
          <type name="gint32" c:type="gint32"/>
        </return-value>
      </function>
      <virtual-method name="get_Xe" invoker="get_Xe">
        <doc xml:space="preserve">Gets the electron fraction from reionization $X_\e$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$X_\e$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="reion" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIReion</doc>
            <type name="HIReion" c:type="NcHIReion*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <doc xml:space="preserve">redshift time</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="Xe_recomb" transfer-ownership="none">
            <doc xml:space="preserve">recombination value for $X_\e$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_init_x" invoker="get_init_x">
        <doc xml:space="preserve">Gets the redshift ($x = 1 + z$) where the reionization begins.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$x_\mathrm{init}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="reion" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIReion</doc>
            <type name="HIReion" c:type="NcHIReion*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_tau" invoker="get_tau">
        <doc xml:space="preserve">Calculates the reionization optical depth $\tau_\mathrm{reion}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\tau_\mathrm{reion}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="reion" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIReion</doc>
            <type name="HIReion" c:type="NcHIReion*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="free" c:identifier="nc_hireion_free">
        <doc xml:space="preserve">Decreases the reference count of @reion by one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reion" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIReion</doc>
            <type name="HIReion" c:type="NcHIReion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_Xe" c:identifier="nc_hireion_get_Xe">
        <doc xml:space="preserve">Gets the electron fraction from reionization $X_\e$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$X_\e$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="reion" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIReion</doc>
            <type name="HIReion" c:type="NcHIReion*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <doc xml:space="preserve">redshift time</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="Xe_recomb" transfer-ownership="none">
            <doc xml:space="preserve">recombination value for $X_\e$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_init_x" c:identifier="nc_hireion_get_init_x">
        <doc xml:space="preserve">Gets the redshift ($x = 1 + z$) where the reionization begins.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$x_\mathrm{init}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="reion" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIReion</doc>
            <type name="HIReion" c:type="NcHIReion*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tau" c:identifier="nc_hireion_get_tau">
        <doc xml:space="preserve">Calculates the reionization optical depth $\tau_\mathrm{reion}$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\tau_\mathrm{reion}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="reion" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIReion</doc>
            <type name="HIReion" c:type="NcHIReion*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_hireion_ref">
        <doc xml:space="preserve">Increses the reference count of @reion by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@reion.</doc>
          <type name="HIReion" c:type="NcHIReion*"/>
        </return-value>
        <parameters>
          <instance-parameter name="reion" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIReion</doc>
            <type name="HIReion" c:type="NcHIReion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="prec"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Model" c:type="NcmModel"/>
      </field>
      <field name="prec" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <class name="HIReionCamb"
           c:symbol-prefix="hireion_camb"
           c:type="NcHIReionCamb"
           parent="HIReion"
           glib:type-name="NcHIReionCamb"
           glib:get-type="nc_hireion_camb_get_type"
           glib:type-struct="HIReionCambClass">
      <constructor name="new" c:identifier="nc_hireion_camb_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a newly created #NcHIReionCamb.</doc>
          <type name="HIReionCamb" c:type="NcHIReionCamb*"/>
        </return-value>
      </constructor>
      <method name="calc_z_from_tau"
              c:identifier="nc_hireion_camb_calc_z_from_tau">
        <doc xml:space="preserve">Calculates the reionization redshift from the value of the reionization
optical depth and the cosmological model @cosmo.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$z_\mathrm{reion}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="reion_camb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIReionCamb</doc>
            <type name="HIReionCamb" c:type="NcHIReionCamb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="tau" transfer-ownership="none">
            <doc xml:space="preserve">reionization optical depth</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_z_from_tau"
              c:identifier="nc_hireion_camb_set_z_from_tau">
        <doc xml:space="preserve">Sets the reionization redshift from the value of the reionization
optical depth and the cosmological model @cosmo.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reion_camb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIReionCamb</doc>
            <type name="HIReionCamb" c:type="NcHIReionCamb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="tau" transfer-ownership="none">
            <doc xml:space="preserve">reionization optical depth</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="z_to_tau" c:identifier="nc_hireion_camb_z_to_tau">
        <doc xml:space="preserve">Changes the parametrization to use $\tau_\mathrm{reion}$ instead of $z_\mathrm{reion}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reion_camb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHIReionCamb</doc>
            <type name="HIReionCamb" c:type="NcHIReionCamb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <property name="HII-HeII-reion-delta"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="HII-HeII-reion-exponent"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="HeII-reionized"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="HeIII-reion-delta"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="z-He-re" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="z-He-re-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="z-re" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="z-re-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HIReion" c:type="NcHIReion"/>
      </field>
      <field name="HII_HeII_reion_delta" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="HeIII_reion_delta" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="HII_HeII_reion_expo" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="HII_HeII_reion_delta_eff" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="HII_HeII_reion_x_pow_expo" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="HEII_reionized" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="fsol" introspectable="0" readable="0" private="1">
        <type c:type="gsl_root_fsolver*"/>
      </field>
      <field name="tau_ctrl" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
    </class>
    <record name="HIReionCambClass"
            c:type="NcHIReionCambClass"
            glib:is-gtype-struct-for="HIReionCamb">
      <field name="parent_class" readable="0" private="1">
        <type name="HIReionClass" c:type="NcHIReionClass"/>
      </field>
    </record>
    <enumeration name="HIReionCambParams"
                 glib:type-name="NcHIReionCambParams"
                 glib:get-type="nc_hi_reion_camb_params_get_type"
                 c:type="NcHIReionCambParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="hii_heii_z"
              value="0"
              c:identifier="NC_HIREION_CAMB_HII_HEII_Z"
              glib:nick="hii-heii-z">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="heiii_z"
              value="1"
              c:identifier="NC_HIREION_CAMB_HEIII_Z"
              glib:nick="heiii-z">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="HIReionCambReparamTau"
           c:symbol-prefix="hireion_camb_reparam_tau"
           c:type="NcHIReionCambReparamTau"
           parent="NumCosmoMath.Reparam"
           glib:type-name="NcHIReionCambReparamTau"
           glib:get-type="nc_hireion_camb_reparam_tau_get_type"
           glib:type-struct="HIReionCambReparamTauClass">
      <constructor name="new" c:identifier="nc_hireion_camb_reparam_tau_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcHIReionCambReparamTau</doc>
          <type name="HIReionCambReparamTau"
                c:type="NcHIReionCambReparamTau*"/>
        </return-value>
        <parameters>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve">number of parameters</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="cosmo"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="HICosmo"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Reparam" c:type="NcmReparam"/>
      </field>
      <field name="ctrl" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
    </class>
    <record name="HIReionCambReparamTauClass"
            c:type="NcHIReionCambReparamTauClass"
            glib:is-gtype-struct-for="HIReionCambReparamTau">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.ReparamClass" c:type="NcmReparamClass"/>
      </field>
    </record>
    <record name="HIReionClass"
            c:type="NcHIReionClass"
            glib:is-gtype-struct-for="HIReion">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.ModelClass" c:type="NcmModelClass"/>
      </field>
      <field name="get_init_x">
        <callback name="get_init_x">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">$x_\mathrm{init}$.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="reion" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHIReion</doc>
              <type name="HIReion" c:type="NcHIReion*"/>
            </parameter>
            <parameter name="cosmo" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHICosmo</doc>
              <type name="HICosmo" c:type="NcHICosmo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_Xe">
        <callback name="get_Xe">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">$X_\e$.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="reion" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHIReion</doc>
              <type name="HIReion" c:type="NcHIReion*"/>
            </parameter>
            <parameter name="cosmo" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHICosmo</doc>
              <type name="HICosmo" c:type="NcHICosmo*"/>
            </parameter>
            <parameter name="lambda" transfer-ownership="none">
              <doc xml:space="preserve">redshift time</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="Xe_recomb" transfer-ownership="none">
              <doc xml:space="preserve">recombination value for $X_\e$</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_tau">
        <callback name="get_tau">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">$\tau_\mathrm{reion}$.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="reion" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHIReion</doc>
              <type name="HIReion" c:type="NcHIReion*"/>
            </parameter>
            <parameter name="cosmo" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHICosmo</doc>
              <type name="HICosmo" c:type="NcHICosmo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="HaloBiasFunc"
           c:symbol-prefix="halo_bias_func"
           c:type="NcHaloBiasFunc"
           parent="GObject.Object"
           glib:type-name="NcHaloBiasFunc"
           glib:get-type="nc_halo_bias_func_get_type"
           glib:type-struct="HaloBiasFuncClass">
      <constructor name="new" c:identifier="nc_halo_bias_func_new">
        <doc xml:space="preserve">This function allocates memory for a new #NcHaloBiasFunc object and sets its properties to the values from
the input arguments.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcHaloBiasFunc.</doc>
          <type name="HaloBiasFunc" c:type="NcHaloBiasFunc*"/>
        </return-value>
        <parameters>
          <parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction.</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </parameter>
          <parameter name="biasf"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #NcHaloBiasType.</doc>
            <type name="HaloBiasType" c:type="NcHaloBiasType*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_halo_bias_func_clear">
        <doc xml:space="preserve">Atomically decrements the reference count of @mbiasf by one. If the reference count drops to 0,
all memory allocated by @mbiasf is released. Set pointer to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mbiasf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasFunc.</doc>
            <type name="HaloBiasFunc" c:type="NcHaloBiasFunc**"/>
          </parameter>
        </parameters>
      </function>
      <method name="copy" c:identifier="nc_halo_bias_func_copy">
        <doc xml:space="preserve">Duplicates the #NcHaloBiasFunc object setting the same values of the original propertities.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcHaloBiasFunc.</doc>
          <type name="HaloBiasFunc" c:type="NcHaloBiasFunc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mbiasf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasFunc.</doc>
            <type name="HaloBiasFunc" c:type="NcHaloBiasFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_halo_bias_func_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @mbiasf by one. If the reference count drops to 0,
all memory allocated by @mbiasf is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mbiasf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasFunc.</doc>
            <type name="HaloBiasFunc" c:type="NcHaloBiasFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="integrand" c:identifier="nc_halo_bias_func_integrand">
        <doc xml:space="preserve">This function is the integrand of the mean bias, i.e., the product of the mass function with the bias function.
As both functions depend on the standard deviation of the matter density contrast, we implement this function to
compute \f$ \sigma (M, z) \f$ just once.

It is worth noting that the multiplicity function must be compatible with the bias function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a double which corresponds to the mean bias integrand for lnM and at redshift z.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mbiasf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasFunc.</doc>
            <type name="HaloBiasFunc" c:type="NcHaloBiasFunc*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnM" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the mass.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="bias-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="HaloBiasType"/>
      </property>
      <property name="mass-function"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">This property keeps the mass function object.</doc>
        <type name="HaloMassFunction"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="mfp" readable="0" private="1">
        <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
      </field>
      <field name="biasf" readable="0" private="1">
        <type name="HaloBiasType" c:type="NcHaloBiasType*"/>
      </field>
    </class>
    <record name="HaloBiasFuncClass"
            c:type="NcHaloBiasFuncClass"
            glib:is-gtype-struct-for="HaloBiasFunc">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="HaloBiasType"
           c:symbol-prefix="halo_bias_type"
           c:type="NcHaloBiasType"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NcHaloBiasType"
           glib:get-type="nc_halo_bias_type_get_type"
           glib:type-struct="HaloBiasTypeClass">
      <constructor name="new_from_name"
                   c:identifier="nc_halo_bias_type_new_from_name">
        <doc xml:space="preserve">This function returns a new #NcMultiplicityFunc whose type is defined by @multiplicity_name.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcHaloBiasType.</doc>
          <type name="HaloBiasType" c:type="NcHaloBiasType*"/>
        </return-value>
        <parameters>
          <parameter name="bias_name" transfer-ownership="none">
            <doc xml:space="preserve">string which specifies the multiplicity function type.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_halo_bias_type_clear">
        <doc xml:space="preserve">Atomically decrements the reference count of @biasf by one. If the reference count drops to 0,
all memory allocated by @biasf is released. Set pointer to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="biasf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasType.</doc>
            <type name="HaloBiasType" c:type="NcHaloBiasType**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="eval" invoker="eval">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasType.</doc>
            <type name="HaloBiasType" c:type="NcHaloBiasType*"/>
          </instance-parameter>
          <parameter name="sigma" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="eval" c:identifier="nc_halo_bias_type_eval">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasType.</doc>
            <type name="HaloBiasType" c:type="NcHaloBiasType*"/>
          </instance-parameter>
          <parameter name="sigma" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_halo_bias_type_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @biasf by one. If the reference count drops to 0,
all memory allocated by @biasf is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasType.</doc>
            <type name="HaloBiasType" c:type="NcHaloBiasType*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="HaloBiasTypeClass"
            c:type="NcHaloBiasTypeClass"
            glib:is-gtype-struct-for="HaloBiasType">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="eval">
        <callback name="eval">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="biasf" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHaloBiasType.</doc>
              <type name="HaloBiasType" c:type="NcHaloBiasType*"/>
            </parameter>
            <parameter name="sigma" transfer-ownership="none">
              <doc xml:space="preserve">FIXME</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="z" transfer-ownership="none">
              <doc xml:space="preserve">redshift.</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="HaloBiasTypePS"
           c:symbol-prefix="halo_bias_type_ps"
           c:type="NcHaloBiasTypePS"
           parent="HaloBiasType"
           glib:type-name="NcHaloBiasTypePS"
           glib:get-type="nc_halo_bias_type_ps_get_type"
           glib:type-struct="HaloBiasTypePSClass">
      <constructor name="new" c:identifier="nc_halo_bias_type_ps_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcHaloBiasType.</doc>
          <type name="HaloBiasType" c:type="NcHaloBiasType*"/>
        </return-value>
        <parameters>
          <parameter name="delta_c" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_delta_c"
              c:identifier="nc_halo_bias_type_ps_get_delta_c">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcHaloBiasTypePS:critical_delta property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_ps" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypePS.</doc>
            <type name="HaloBiasTypePS" c:type="const NcHaloBiasTypePS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_delta_c"
              c:identifier="nc_halo_bias_type_ps_set_delta_c">
        <doc xml:space="preserve">Sets the value @delta_c to the #NcHaloBiasTypePS:critical-delta property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_ps" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypePS.</doc>
            <type name="HaloBiasTypePS" c:type="NcHaloBiasTypePS*"/>
          </instance-parameter>
          <parameter name="delta_c" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcHaloBiasTypePS:critical-delta.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="critical-delta"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HaloBiasType" c:type="NcHaloBiasType"/>
      </field>
      <field name="delta_c" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="HaloBiasTypePSClass"
            c:type="NcHaloBiasTypePSClass"
            glib:is-gtype-struct-for="HaloBiasTypePS">
      <field name="parent_class" readable="0" private="1">
        <type name="HaloBiasTypeClass" c:type="NcHaloBiasTypeClass"/>
      </field>
    </record>
    <class name="HaloBiasTypeSTEllip"
           c:symbol-prefix="halo_bias_type_st_ellip"
           c:type="NcHaloBiasTypeSTEllip"
           parent="HaloBiasType"
           glib:type-name="NcHaloBiasTypeSTEllip"
           glib:get-type="nc_halo_bias_type_st_ellip_get_type"
           glib:type-struct="HaloBiasTypeSTEllipClass">
      <constructor name="new" c:identifier="nc_halo_bias_type_st_ellip_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcHaloBiasType.</doc>
          <type name="HaloBiasType" c:type="NcHaloBiasType*"/>
        </return-value>
        <parameters>
          <parameter name="delta_c" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="c" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_a" c:identifier="nc_halo_bias_type_st_ellip_get_a">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcHaloBiasTypeSTEllip:a property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_st_ellip" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeSTEllip.</doc>
            <type name="HaloBiasTypeSTEllip"
                  c:type="const NcHaloBiasTypeSTEllip*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_b" c:identifier="nc_halo_bias_type_st_ellip_get_b">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcHaloBiasTypeSTEllip:b property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_st_ellip" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeSTEllip.</doc>
            <type name="HaloBiasTypeSTEllip"
                  c:type="const NcHaloBiasTypeSTEllip*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_c" c:identifier="nc_halo_bias_type_st_ellip_get_c">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcHaloBiasTypeSTEllip:c property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_st_ellip" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeSTEllip.</doc>
            <type name="HaloBiasTypeSTEllip"
                  c:type="const NcHaloBiasTypeSTEllip*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_delta_c"
              c:identifier="nc_halo_bias_type_st_ellip_get_delta_c">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcHaloBiasTypeSTEllip:critical_delta property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_st_ellip" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeSTEllip.</doc>
            <type name="HaloBiasTypeSTEllip"
                  c:type="const NcHaloBiasTypeSTEllip*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_a" c:identifier="nc_halo_bias_type_st_ellip_set_a">
        <doc xml:space="preserve">Sets the value @a to the #NcHaloBiasTypeSTEllip:a property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_st_ellip" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeSTEllip.</doc>
            <type name="HaloBiasTypeSTEllip" c:type="NcHaloBiasTypeSTEllip*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcHaloBiasTypeSTEllip:a.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_b" c:identifier="nc_halo_bias_type_st_ellip_set_b">
        <doc xml:space="preserve">Sets the value @b to the #NcHaloBiasTypeSTEllip:b property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_st_ellip" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeSTEllip.</doc>
            <type name="HaloBiasTypeSTEllip" c:type="NcHaloBiasTypeSTEllip*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcHaloBiasTypeSTEllip:b.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_c" c:identifier="nc_halo_bias_type_st_ellip_set_c">
        <doc xml:space="preserve">Sets the value @c to the #NcHaloBiasTypeSTEllip:c property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_st_ellip" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeSTEllip.</doc>
            <type name="HaloBiasTypeSTEllip" c:type="NcHaloBiasTypeSTEllip*"/>
          </instance-parameter>
          <parameter name="c" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcHaloBiasTypeSTEllip:c.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_delta_c"
              c:identifier="nc_halo_bias_type_st_ellip_set_delta_c">
        <doc xml:space="preserve">Sets the value @delta_c to the #NcHaloBiasTypeSTEllip:critical-delta property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_st_ellip" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeSTEllip.</doc>
            <type name="HaloBiasTypeSTEllip" c:type="NcHaloBiasTypeSTEllip*"/>
          </instance-parameter>
          <parameter name="delta_c" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcHaloBiasTypeSTEllip:critical-delta.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="a"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME (check limits values)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="b"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME (check limits values)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="c"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME (check limits values)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="critical-delta"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HaloBiasType" c:type="NcHaloBiasType"/>
      </field>
      <field name="delta_c" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="a" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="b" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="c" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="HaloBiasTypeSTEllipClass"
            c:type="NcHaloBiasTypeSTEllipClass"
            glib:is-gtype-struct-for="HaloBiasTypeSTEllip">
      <field name="parent_class" readable="0" private="1">
        <type name="HaloBiasTypeClass" c:type="NcHaloBiasTypeClass"/>
      </field>
    </record>
    <class name="HaloBiasTypeSTSpher"
           c:symbol-prefix="halo_bias_type_st_spher"
           c:type="NcHaloBiasTypeSTSpher"
           parent="HaloBiasType"
           glib:type-name="NcHaloBiasTypeSTSpher"
           glib:get-type="nc_halo_bias_type_st_spher_get_type"
           glib:type-struct="HaloBiasTypeSTSpherClass">
      <constructor name="new" c:identifier="nc_halo_bias_type_st_spher_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcHaloBiasType.</doc>
          <type name="HaloBiasType" c:type="NcHaloBiasType*"/>
        </return-value>
        <parameters>
          <parameter name="delta_c" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_a" c:identifier="nc_halo_bias_type_st_spher_get_a">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcHaloBiasTypeSTSpher:a property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_st_spher" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeSTSpher.</doc>
            <type name="HaloBiasTypeSTSpher"
                  c:type="const NcHaloBiasTypeSTSpher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_delta_c"
              c:identifier="nc_halo_bias_type_st_spher_get_delta_c">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcHaloBiasTypeSTSpher:critical_delta property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_st_spher" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeSTSpher.</doc>
            <type name="HaloBiasTypeSTSpher"
                  c:type="const NcHaloBiasTypeSTSpher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_p" c:identifier="nc_halo_bias_type_st_spher_get_p">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcHaloBiasTypeSTSpher:p property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_st_spher" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeSTSpher.</doc>
            <type name="HaloBiasTypeSTSpher"
                  c:type="const NcHaloBiasTypeSTSpher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_a" c:identifier="nc_halo_bias_type_st_spher_set_a">
        <doc xml:space="preserve">Sets the value @a to the #NcHaloBiasTypeSTSpher:a property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_st_spher" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeSTSpher.</doc>
            <type name="HaloBiasTypeSTSpher" c:type="NcHaloBiasTypeSTSpher*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcHaloBiasTypeSTSpher:a.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_delta_c"
              c:identifier="nc_halo_bias_type_st_spher_set_delta_c">
        <doc xml:space="preserve">Sets the value @delta_c to the #NcHaloBiasTypeSTSpher:critical-delta property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_st_spher" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeSTSpher.</doc>
            <type name="HaloBiasTypeSTSpher" c:type="NcHaloBiasTypeSTSpher*"/>
          </instance-parameter>
          <parameter name="delta_c" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcHaloBiasTypeSTSpher:critical-delta.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_p" c:identifier="nc_halo_bias_type_st_spher_set_p">
        <doc xml:space="preserve">Sets the value @p to the #NcHaloBiasTypeSTSpher:p property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_st_spher" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeSTSpher.</doc>
            <type name="HaloBiasTypeSTSpher" c:type="NcHaloBiasTypeSTSpher*"/>
          </instance-parameter>
          <parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcHaloBiasTypeSTSpher:p.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="a"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME (check limits values)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="critical-delta"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="p"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME (check limits values)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HaloBiasType" c:type="NcHaloBiasType"/>
      </field>
      <field name="delta_c" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="a" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="p" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="HaloBiasTypeSTSpherClass"
            c:type="NcHaloBiasTypeSTSpherClass"
            glib:is-gtype-struct-for="HaloBiasTypeSTSpher">
      <field name="parent_class" readable="0" private="1">
        <type name="HaloBiasTypeClass" c:type="NcHaloBiasTypeClass"/>
      </field>
    </record>
    <class name="HaloBiasTypeTinker"
           c:symbol-prefix="halo_bias_type_tinker"
           c:type="NcHaloBiasTypeTinker"
           parent="HaloBiasType"
           glib:type-name="NcHaloBiasTypeTinker"
           glib:get-type="nc_halo_bias_type_tinker_get_type"
           glib:type-struct="HaloBiasTypeTinkerClass">
      <constructor name="new" c:identifier="nc_halo_bias_type_tinker_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcHaloBiasType.</doc>
          <type name="HaloBiasType" c:type="NcHaloBiasType*"/>
        </return-value>
        <parameters>
          <parameter name="delta_c" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="B" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="c" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="Delta" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_B" c:identifier="nc_halo_bias_type_tinker_get_B">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcHaloBiasTypeTinker:B property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_tinker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeTinker.</doc>
            <type name="HaloBiasTypeTinker"
                  c:type="const NcHaloBiasTypeTinker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_Delta"
              c:identifier="nc_halo_bias_type_tinker_get_Delta">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcHaloBiasTypeTinker:Delta property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_tinker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeTinker.</doc>
            <type name="HaloBiasTypeTinker"
                  c:type="const NcHaloBiasTypeTinker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_b" c:identifier="nc_halo_bias_type_tinker_get_b">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcHaloBiasTypeTinker:b property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_tinker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeTinker.</doc>
            <type name="HaloBiasTypeTinker"
                  c:type="const NcHaloBiasTypeTinker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_c" c:identifier="nc_halo_bias_type_tinker_get_c">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcHaloBiasTypeTinker:c property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_tinker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeTinker.</doc>
            <type name="HaloBiasTypeTinker"
                  c:type="const NcHaloBiasTypeTinker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_delta_c"
              c:identifier="nc_halo_bias_type_tinker_get_delta_c">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcHaloBiasTypeTinker:critical_delta property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_tinker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeTinker.</doc>
            <type name="HaloBiasTypeTinker"
                  c:type="const NcHaloBiasTypeTinker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_B" c:identifier="nc_halo_bias_type_tinker_set_B">
        <doc xml:space="preserve">Sets the value @B to the #NcHaloBiasTypeTinker:B property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_tinker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeTinker.</doc>
            <type name="HaloBiasTypeTinker" c:type="NcHaloBiasTypeTinker*"/>
          </instance-parameter>
          <parameter name="B" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcHaloBiasTypeTinker:B.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_Delta"
              c:identifier="nc_halo_bias_type_tinker_set_Delta">
        <doc xml:space="preserve">Sets the value @Delta to the #NcHaloBiasTypeTinker:Delta property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_tinker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeTinker.</doc>
            <type name="HaloBiasTypeTinker" c:type="NcHaloBiasTypeTinker*"/>
          </instance-parameter>
          <parameter name="Delta" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcHaloBiasTypeTinker:Delta.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_b" c:identifier="nc_halo_bias_type_tinker_set_b">
        <doc xml:space="preserve">Sets the value @b to the #NcHaloBiasTypeTinker:b property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_tinker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeTinker.</doc>
            <type name="HaloBiasTypeTinker" c:type="NcHaloBiasTypeTinker*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcHaloBiasTypeTinker:b.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_c" c:identifier="nc_halo_bias_type_tinker_set_c">
        <doc xml:space="preserve">Sets the value @c to the #NcHaloBiasTypeTinker:c property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_tinker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeTinker.</doc>
            <type name="HaloBiasTypeTinker" c:type="NcHaloBiasTypeTinker*"/>
          </instance-parameter>
          <parameter name="c" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcHaloBiasTypeTinker:c.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_delta_c"
              c:identifier="nc_halo_bias_type_tinker_set_delta_c">
        <doc xml:space="preserve">Sets the value @delta_c to the #NcHaloBiasTypeTinker:critical-delta property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="biasf_tinker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloBiasTypeTinker.</doc>
            <type name="HaloBiasTypeTinker" c:type="NcHaloBiasTypeTinker*"/>
          </instance-parameter>
          <parameter name="delta_c" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcHaloBiasTypeTinker:critical-delta.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="B"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME (check limits values)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Delta"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME (check limits values)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="b"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME (check limits values)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="c"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME (check limits values)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="critical-delta"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="HaloBiasType" c:type="NcHaloBiasType"/>
      </field>
      <field name="delta_c" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="B" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="b" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="c" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="Delta" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="HaloBiasTypeTinkerClass"
            c:type="NcHaloBiasTypeTinkerClass"
            glib:is-gtype-struct-for="HaloBiasTypeTinker">
      <field name="parent_class" readable="0" private="1">
        <type name="HaloBiasTypeClass" c:type="NcHaloBiasTypeClass"/>
      </field>
    </record>
    <class name="HaloMassFunction"
           c:symbol-prefix="halo_mass_function"
           c:type="NcHaloMassFunction"
           parent="GObject.Object"
           glib:type-name="NcHaloMassFunction"
           glib:get-type="nc_halo_mass_function_get_type"
           glib:type-struct="HaloMassFunctionClass">
      <constructor name="new" c:identifier="nc_halo_mass_function_new">
        <doc xml:space="preserve">This function allocates memory for a new #NcHaloMassFunction object and sets its properties to the values from
the input arguments.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcHaloMassFunction.</doc>
          <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
        </return-value>
        <parameters>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance sets to #NcHaloMassFunction:distance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
          <parameter name="psf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmPowspecFilter sets to #NcHaloMassFunction:powerspectrum-filtered</doc>
            <type name="NumCosmoMath.PowspecFilter"
                  c:type="NcmPowspecFilter*"/>
          </parameter>
          <parameter name="mulf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFunc sets to #NcHaloMassFunction:multiplicity</doc>
            <type name="MultiplicityFunc" c:type="NcMultiplicityFunc*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_halo_mass_function_clear">
        <doc xml:space="preserve">Atomically decrements the reference count of @mfp by one. If the reference count drops to 0,
all memory allocated by @mfp is released. Set pointer to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction**"/>
          </parameter>
        </parameters>
      </function>
      <method name="d2n_dzdlnM"
              c:identifier="nc_halo_mass_function_d2n_dzdlnM">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnM" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="dn_dlnM" c:identifier="nc_halo_mass_function_dn_dlnM">
        <doc xml:space="preserve">This function computes the comoving number density of dark matter halos at redshift @z and
mass M.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\frac{\mathrm{d}n}{\mathrm{d}\ln(M)}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnM" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="dn_dlnM_sigma"
              c:identifier="nc_halo_mass_function_dn_dlnM_sigma">
        <doc xml:space="preserve">This function computes the comoving number density of dark matter halos at redshift @z and
mass M.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnM" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="sigma_ptr"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">matter variance for $\ln(M)$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dn_dlnM_ptr"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\frac{\mathrm{d}n}{\mathrm{d}\ln(M)}$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dn_dlnR" c:identifier="nc_halo_mass_function_dn_dlnR">
        <doc xml:space="preserve">This function computes the comoving number density of dark matter halos per redshift @z and
volume with ln-radius @lnR.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\frac{\mathrm{d}n}{\mathrm{d}\ln(R)}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnR" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the radius $R$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="dn_dlnR_sigma"
              c:identifier="nc_halo_mass_function_dn_dlnR_sigma">
        <doc xml:space="preserve">This function computes the comoving number density of dark matter halos per redshift @z and
volume with ln-radius @lnR.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnR" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of the radius $R$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="sigma_ptr"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">matter variance for $\ln(R)$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="dn_dlnR_ptr"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\frac{\mathrm{d}n}{\mathrm{d}\ln(R)}$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dn_dz" c:identifier="nc_halo_mass_function_dn_dz">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnMl" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of mass, lower threshold</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="lnMu" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of mass, upper threshold</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="spline" transfer-ownership="none">
            <doc xml:space="preserve">whenever to create an intermediary spline of the mass integration</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="dv_dzdomega"
              c:identifier="nc_halo_mass_function_dv_dzdomega">
        <doc xml:space="preserve">This function computes the comoving volume (flat universe) element per unit solid angle $d\Omega$
given @z, namely, $$\frac{\mathrm{d}^2V}{\mathrm{d}z\mathrm{d}\Omega} = \frac{c}{H(z)} D_c^2(z),$$
where $H(z)$ is the Hubble function and $D_c$ is the comoving distance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">comoving volume element $\frac{\mathrm{d}^2V}{\mathrm{d}z\mathrm{d}\Omega} \,\left[\mathrm{Mpc}^3\right]$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_halo_mass_function_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @mfp by one. If the reference count drops to 0,
all memory allocated by @mfp is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lnM_to_lnR"
              c:identifier="nc_halo_mass_function_lnM_to_lnR">
        <doc xml:space="preserve">This function computes the ln-radius of related to the ln-mass $\ln(M / M_\odot)$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\ln(R / 1 \text{Mpc})$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnM" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base $e$ of the mass enclosed in the filter volume</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="lnR_to_lnM"
              c:identifier="nc_halo_mass_function_lnR_to_lnM">
        <doc xml:space="preserve">This function computes the ln-mass of the mass enclosed in the filter volume.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\ln(M / 1 M_\odot)$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnR" transfer-ownership="none">
            <doc xml:space="preserve">ln-radius of the related volume</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="n" c:identifier="nc_halo_mass_function_n">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnMl" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of mass, lower threshold</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="lnMu" transfer-ownership="none">
            <doc xml:space="preserve">logarithm base e of mass, upper threshold</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="zl" transfer-ownership="none">
            <doc xml:space="preserve">minimum redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="zu" transfer-ownership="none">
            <doc xml:space="preserve">maximum redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="spline" transfer-ownership="none">
            <doc xml:space="preserve">whenever to create an intermediary spline of the integration</doc>
            <type name="HaloMassFunctionSplineOptimize"
                  c:type="NcHaloMassFunctionSplineOptimize"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="nc_halo_mass_function_prepare">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_if_needed"
              c:identifier="nc_halo_mass_function_prepare_if_needed">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_area" c:identifier="nc_halo_mass_function_set_area">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </instance-parameter>
          <parameter name="area" transfer-ownership="none">
            <doc xml:space="preserve">area in steradian</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_area_sd"
              c:identifier="nc_halo_mass_function_set_area_sd">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </instance-parameter>
          <parameter name="area_sd" transfer-ownership="none">
            <doc xml:space="preserve">area in square degree</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_eval_limits"
              c:identifier="nc_halo_mass_function_set_eval_limits">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lnMi" transfer-ownership="none">
            <doc xml:space="preserve">minimum logarithm base e of mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="lnMf" transfer-ownership="none">
            <doc xml:space="preserve">maximum logarithm base e of mass</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="zi" transfer-ownership="none">
            <doc xml:space="preserve">minimum redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="zf" transfer-ownership="none">
            <doc xml:space="preserve">maximum redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_prec" c:identifier="nc_halo_mass_function_set_prec">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mfp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHaloMassFunction</doc>
            <type name="HaloMassFunction" c:type="NcHaloMassFunction*"/>
          </instance-parameter>
          <parameter name="prec" transfer-ownership="none">
            <doc xml:space="preserve">precision</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="area"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">This property sets the angular area in steradian.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="distance"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">This property keeps the distance object.</doc>
        <type name="Distance"/>
      </property>
      <property name="multiplicity"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">This property keeps the multiplicity function object.</doc>
        <type name="MultiplicityFunc"/>
      </property>
      <property name="powerspectrum-filtered"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">This property keeps the filtered powerspectrum.</doc>
        <type name="NumCosmoMath.PowspecFilter"/>
      </property>
      <property name="prec"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">This property sets the precision.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="dist" readable="0" private="1">
        <type name="Distance" c:type="NcDistance*"/>
      </field>
      <field name="mulf" readable="0" private="1">
        <type name="MultiplicityFunc" c:type="NcMultiplicityFunc*"/>
      </field>
      <field name="psf" readable="0" private="1">
        <type name="NumCosmoMath.PowspecFilter" c:type="NcmPowspecFilter*"/>
      </field>
      <field name="area_survey" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="d2NdzdlnM" readable="0" private="1">
        <type name="NumCosmoMath.Spline2d" c:type="NcmSpline2d*"/>
      </field>
      <field name="lnMi" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lnMf" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="zi" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="zf" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="prec" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="ctrl_cosmo" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
      <field name="ctrl_reion" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
    </class>
    <record name="HaloMassFunctionClass"
            c:type="NcHaloMassFunctionClass"
            glib:is-gtype-struct-for="HaloMassFunction">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="HaloMassFunctionSplineOptimize"
                 glib:type-name="NcHaloMassFunctionSplineOptimize"
                 glib:get-type="nc_halo_mass_function_spline_optimize_get_type"
                 c:type="NcHaloMassFunctionSplineOptimize">
      <doc xml:space="preserve">FIXME</doc>
      <member name="none"
              value="0"
              c:identifier="NC_HALO_MASS_FUNCTION_SPLINE_NONE"
              glib:nick="none">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="lnm"
              value="1"
              c:identifier="NC_HALO_MASS_FUNCTION_SPLINE_LNM"
              glib:nick="lnm">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="z"
              value="2"
              c:identifier="NC_HALO_MASS_FUNCTION_SPLINE_Z"
              glib:nick="z">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <constant name="LINEAR_PERTURBATIONS_SPLINE_ALL"
              value="-1"
              c:type="NC_LINEAR_PERTURBATIONS_SPLINE_ALL">
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="LinearPert" c:type="NcLinearPert">
      <doc xml:space="preserve">FIXME</doc>
      <field name="cosmo" readable="0" private="1">
        <type name="HICosmo" c:type="NcHICosmo*"/>
      </field>
      <field name="recomb" readable="0" private="1">
        <type name="Recomb" c:type="NcRecomb*"/>
      </field>
      <field name="a" readable="0" private="1">
        <type name="Scalefactor" c:type="NcScalefactor*"/>
      </field>
      <field name="solver" writable="1">
        <type name="gpointer" c:type="_NcLinearPertOdeSolver*"/>
      </field>
      <field name="pws" writable="1">
        <type name="LinearPertWorkSpace" c:type="NcLinearPertWorkSpace*"/>
      </field>
      <field name="eta0" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lambdai" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lambdaf" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lambda_opt_cutoff" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lambda_rec" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lambda_rec_10m2_max" writable="1">
        <array zero-terminated="0" c:type="gdouble" fixed-size="2">
          <type name="gdouble" c:type="gdouble"/>
        </array>
      </field>
      <field name="abstol" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="reltol" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="tc_abstol" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="tc_reltol" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lmax" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="sys_size" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <callback name="LinearPertConf" c:type="NcLinearPertConf">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pert" transfer-ownership="none">
          <type name="LinearPert" c:type="NcLinearPert*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LinearPertCreate" c:type="NcLinearPertCreate">
      <return-value transfer-ownership="none" nullable="1">
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="pert" transfer-ownership="none">
          <type name="LinearPert" c:type="NcLinearPert*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LinearPertEvol" c:type="NcLinearPertEvol">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pert" transfer-ownership="none">
          <type name="LinearPert" c:type="NcLinearPert*"/>
        </parameter>
        <parameter name="g" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LinearPertGet" c:type="NcLinearPertGet">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="pert" transfer-ownership="none">
          <type name="LinearPert" c:type="NcLinearPert*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="LinearPertGetN" c:type="NcLinearPertGetN">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="pert" transfer-ownership="none">
          <type name="LinearPert" c:type="NcLinearPert*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </callback>
    <record name="LinearPertOdeSolver" c:type="NcLinearPertOdeSolver">
      <doc xml:space="preserve">FIXME</doc>
      <field name="create" readable="0" private="1">
        <type name="LinearPertCreate" c:type="NcLinearPertCreate"/>
      </field>
      <field name="init" readable="0" private="1">
        <type name="LinearPertConf" c:type="NcLinearPertConf"/>
      </field>
      <field name="set_opts" readable="0" private="1">
        <type name="LinearPertConf" c:type="NcLinearPertConf"/>
      </field>
      <field name="reset" readable="0" private="1">
        <type name="LinearPertConf" c:type="NcLinearPertConf"/>
      </field>
      <field name="evol_step" readable="0" private="1">
        <type name="LinearPertEvol" c:type="NcLinearPertEvol"/>
      </field>
      <field name="evol" readable="0" private="1">
        <type name="LinearPertEvol" c:type="NcLinearPertEvol"/>
      </field>
      <field name="update_los" readable="0" private="1">
        <type name="LinearPertTest" c:type="NcLinearPertTest"/>
      </field>
      <field name="get_sources" readable="0" private="1">
        <type name="LinearPertSources" c:type="NcLinearPertSources"/>
      </field>
      <field name="free" readable="0" private="1">
        <type name="LinearPertConf" c:type="NcLinearPertConf"/>
      </field>
      <field name="print_stats" readable="0" private="1">
        <type name="LinearPertConf" c:type="NcLinearPertConf"/>
      </field>
      <field name="get_z" readable="0" private="1">
        <type name="LinearPertGet" c:type="NcLinearPertGet"/>
      </field>
      <field name="get_phi" readable="0" private="1">
        <type name="LinearPertGet" c:type="NcLinearPertGet"/>
      </field>
      <field name="get_c0" readable="0" private="1">
        <type name="LinearPertGet" c:type="NcLinearPertGet"/>
      </field>
      <field name="get_b0" readable="0" private="1">
        <type name="LinearPertGet" c:type="NcLinearPertGet"/>
      </field>
      <field name="get_c1" readable="0" private="1">
        <type name="LinearPertGet" c:type="NcLinearPertGet"/>
      </field>
      <field name="get_b1" readable="0" private="1">
        <type name="LinearPertGet" c:type="NcLinearPertGet"/>
      </field>
      <field name="get" readable="0" private="1">
        <type name="LinearPertGetN" c:type="NcLinearPertGetN"/>
      </field>
      <field name="get_theta" readable="0" private="1">
        <type name="LinearPertGetN" c:type="NcLinearPertGetN"/>
      </field>
      <field name="get_theta_p" readable="0" private="1">
        <type name="LinearPertGetN" c:type="NcLinearPertGetN"/>
      </field>
      <field name="get_los_theta" readable="0" private="1">
        <type name="LinearPertGetN" c:type="NcLinearPertGetN"/>
      </field>
      <field name="print_all" readable="0" private="1">
        <type name="LinearPertConf" c:type="NcLinearPertConf"/>
      </field>
      <field name="data" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <callback name="LinearPertSources" c:type="NcLinearPertSources">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pert" transfer-ownership="none">
          <type name="LinearPert" c:type="NcLinearPert*"/>
        </parameter>
        <parameter name="S0" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="S1" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="S2" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </callback>
    <bitfield name="LinearPertSplineTypes"
              glib:type-name="NcLinearPertSplineTypes"
              glib:get-type="nc_linear_pert_spline_types_get_type"
              c:type="NcLinearPertSplineTypes">
      <doc xml:space="preserve">FIXME</doc>
      <member name="sources"
              value="256"
              c:identifier="NC_LINEAR_PERTURBATIONS_SPLINE_SOURCES"
              glib:nick="sources">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="phi"
              value="8"
              c:identifier="NC_LINEAR_PERTURBATIONS_SPLINE_PHI"
              glib:nick="phi">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="theta0"
              value="2"
              c:identifier="NC_LINEAR_PERTURBATIONS_SPLINE_THETA0"
              glib:nick="theta0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="c0"
              value="4"
              c:identifier="NC_LINEAR_PERTURBATIONS_SPLINE_C0"
              glib:nick="c0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="b0"
              value="1"
              c:identifier="NC_LINEAR_PERTURBATIONS_SPLINE_B0"
              glib:nick="b0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="theta1"
              value="32"
              c:identifier="NC_LINEAR_PERTURBATIONS_SPLINE_THETA1"
              glib:nick="theta1">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="c1"
              value="64"
              c:identifier="NC_LINEAR_PERTURBATIONS_SPLINE_C1"
              glib:nick="c1">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="b1"
              value="16"
              c:identifier="NC_LINEAR_PERTURBATIONS_SPLINE_B1"
              glib:nick="b1">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="theta2"
              value="128"
              c:identifier="NC_LINEAR_PERTURBATIONS_SPLINE_THETA2"
              glib:nick="theta2">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </bitfield>
    <record name="LinearPertSplines" c:type="NcLinearPertSplines">
      <field name="pert" readable="0" private="1">
        <type name="LinearPert" c:type="NcLinearPert*"/>
      </field>
      <field name="n_deta" readable="0" private="1">
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="n_evol" readable="0" private="1">
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="k0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="k1" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="types" readable="0" private="1">
        <type name="LinearPertSplineTypes" c:type="NcLinearPertSplineTypes"/>
      </field>
      <field name="ga" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="Sg_data" readable="0" private="1">
        <array zero-terminated="0" c:type="NcmVector" fixed-size="3">
          <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
        </array>
      </field>
      <field name="ka" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="Sk_data" readable="0" private="1">
        <array zero-terminated="0" c:type="NcmMatrix" fixed-size="3">
          <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
        </array>
      </field>
      <field name="sdata" readable="0" private="1">
        <array zero-terminated="0" c:type="NcmVector" fixed-size="8">
          <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
        </array>
      </field>
      <field name="Sk" readable="0" private="1">
        <array zero-terminated="0" c:type="NcmSpline*" fixed-size="3">
          <type name="NumCosmoMath.Spline" c:type="NcmSpline**"/>
        </array>
      </field>
      <field name="Sg" readable="0" private="1">
        <array zero-terminated="0" c:type="NcmSpline" fixed-size="3">
          <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
        </array>
      </field>
      <field name="s" readable="0" private="1">
        <array zero-terminated="0" c:type="NcmSpline" fixed-size="8">
          <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
        </array>
      </field>
      <field name="Nc" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
    </record>
    <record name="LinearPertTF" c:type="NcLinearPertTF">
      <doc xml:space="preserve">FIXME</doc>
      <field name="pert" readable="0" private="1">
        <type name="LinearPert" c:type="NcLinearPert*"/>
      </field>
      <field name="logk0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="logk1" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="np" readable="0" private="1">
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="logPhi_logk" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
    </record>
    <callback name="LinearPertTest" c:type="NcLinearPertTest">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pert" transfer-ownership="none">
          <type name="LinearPert" c:type="NcLinearPert*"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="LinearPertVars"
                 glib:type-name="NcLinearPertVars"
                 glib:get-type="nc_linear_pert_vars_get_type"
                 c:type="NcLinearPertVars">
      <doc xml:space="preserve">FIXME</doc>
      <member name="b0" value="0" c:identifier="NC_PERT_B0" glib:nick="b0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="theta0"
              value="1"
              c:identifier="NC_PERT_THETA0"
              glib:nick="theta0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="c0" value="2" c:identifier="NC_PERT_C0" glib:nick="c0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="phi" value="3" c:identifier="NC_PERT_PHI" glib:nick="phi">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="b1" value="4" c:identifier="NC_PERT_B1" glib:nick="b1">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="theta1"
              value="5"
              c:identifier="NC_PERT_THETA1"
              glib:nick="theta1">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="c1" value="6" c:identifier="NC_PERT_C1" glib:nick="c1">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="theta2"
              value="7"
              c:identifier="NC_PERT_THETA2"
              glib:nick="theta2">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="theta_p0"
              value="8"
              c:identifier="NC_PERT_THETA_P0"
              glib:nick="theta-p0">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="theta_p1"
              value="9"
              c:identifier="NC_PERT_THETA_P1"
              glib:nick="theta-p1">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="theta_p2"
              value="10"
              c:identifier="NC_PERT_THETA_P2"
              glib:nick="theta-p2">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <record name="LinearPertWorkSpace" c:type="NcLinearPertWorkSpace">
      <field name="pert" writable="1">
        <type name="gpointer" c:type="_NcLinearPert*"/>
      </field>
      <field name="tight_coupling" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="tight_coupling_end" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="lambda_int" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lambda" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="dlambda" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="k" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </record>
    <class name="MultiplicityFunc"
           c:symbol-prefix="multiplicity_func"
           c:type="NcMultiplicityFunc"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NcMultiplicityFunc"
           glib:get-type="nc_multiplicity_func_get_type"
           glib:type-struct="MultiplicityFuncClass">
      <constructor name="new_from_name"
                   c:identifier="nc_multiplicity_func_new_from_name">
        <doc xml:space="preserve">This function returns a new #NcMultiplicityFunc whose type is defined by @multiplicity_name.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcMultiplicityFunc.</doc>
          <type name="MultiplicityFunc" c:type="NcMultiplicityFunc*"/>
        </return-value>
        <parameters>
          <parameter name="multiplicity_name" transfer-ownership="none">
            <doc xml:space="preserve">string which specifies the multiplicity function type.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_multiplicity_func_clear">
        <doc xml:space="preserve">Atomically decrements the reference count of @mulf by one. If the reference count drops to 0,
all memory allocated by @mulf is released. Set pointer to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mulf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFunc.</doc>
            <type name="MultiplicityFunc" c:type="NcMultiplicityFunc**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="eval" invoker="eval">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFunc.</doc>
            <type name="MultiplicityFunc" c:type="NcMultiplicityFunc*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="sigma" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="eval" c:identifier="nc_multiplicity_func_eval">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFunc.</doc>
            <type name="MultiplicityFunc" c:type="NcMultiplicityFunc*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="sigma" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_multiplicity_func_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @mulf by one. If the reference count drops to 0,
all memory allocated by @mulf is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFunc.</doc>
            <type name="MultiplicityFunc" c:type="NcMultiplicityFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="MultiplicityFuncClass"
            c:type="NcMultiplicityFuncClass"
            glib:is-gtype-struct-for="MultiplicityFunc">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="eval">
        <callback name="eval">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="mulf" transfer-ownership="none">
              <doc xml:space="preserve">a #NcMultiplicityFunc.</doc>
              <type name="MultiplicityFunc" c:type="NcMultiplicityFunc*"/>
            </parameter>
            <parameter name="cosmo" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHICosmo.</doc>
              <type name="HICosmo" c:type="NcHICosmo*"/>
            </parameter>
            <parameter name="sigma" transfer-ownership="none">
              <doc xml:space="preserve">FIXME</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="z" transfer-ownership="none">
              <doc xml:space="preserve">redshift.</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="MultiplicityFuncCrocce"
           c:symbol-prefix="multiplicity_func_crocce"
           c:type="NcMultiplicityFuncCrocce"
           parent="MultiplicityFunc"
           glib:type-name="NcMultiplicityFuncCrocce"
           glib:get-type="nc_multiplicity_func_crocce_get_type"
           glib:type-struct="MultiplicityFuncCrocceClass">
      <constructor name="new" c:identifier="nc_multiplicity_func_crocce_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcMultiplicityFunc.</doc>
          <type name="MultiplicityFunc" c:type="NcMultiplicityFunc*"/>
        </return-value>
        <parameters>
          <parameter name="A0" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="a0" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="b0" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="c0" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_A0" c:identifier="nc_multiplicity_func_crocce_get_A0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncCrocce:A0 property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_crocce" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncCrocce.</doc>
            <type name="MultiplicityFuncCrocce"
                  c:type="const NcMultiplicityFuncCrocce*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_a0" c:identifier="nc_multiplicity_func_crocce_get_a0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncCrocce:a0 property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_crocce" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncCrocce.</doc>
            <type name="MultiplicityFuncCrocce"
                  c:type="const NcMultiplicityFuncCrocce*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_b0" c:identifier="nc_multiplicity_func_crocce_get_b0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncCrocce:b0 property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_crocce" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncCrocce.</doc>
            <type name="MultiplicityFuncCrocce"
                  c:type="const NcMultiplicityFuncCrocce*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_c0" c:identifier="nc_multiplicity_func_crocce_get_c0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncCrocce:c0 property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_crocce" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncCrocce.</doc>
            <type name="MultiplicityFuncCrocce"
                  c:type="const NcMultiplicityFuncCrocce*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_A0" c:identifier="nc_multiplicity_func_crocce_set_A0">
        <doc xml:space="preserve">Sets the value @A0 to the #NcMultiplicityFuncCrocce:A0 property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_crocce" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncCrocce.</doc>
            <type name="MultiplicityFuncCrocce"
                  c:type="NcMultiplicityFuncCrocce*"/>
          </instance-parameter>
          <parameter name="A0" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncCrocce:A0.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_a0" c:identifier="nc_multiplicity_func_crocce_set_a0">
        <doc xml:space="preserve">Sets the value @a0 to the #NcMultiplicityFuncCrocce:a0 property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_crocce" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncCrocce.</doc>
            <type name="MultiplicityFuncCrocce"
                  c:type="NcMultiplicityFuncCrocce*"/>
          </instance-parameter>
          <parameter name="a0" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncCrocce:a0.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_b0" c:identifier="nc_multiplicity_func_crocce_set_b0">
        <doc xml:space="preserve">Sets the value @b0 to the #NcMultiplicityFuncCrocce:b0 property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_crocce" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncCrocce.</doc>
            <type name="MultiplicityFuncCrocce"
                  c:type="NcMultiplicityFuncCrocce*"/>
          </instance-parameter>
          <parameter name="b0" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncCrocce:b0.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_c0" c:identifier="nc_multiplicity_func_crocce_set_c0">
        <doc xml:space="preserve">Sets the value @c0 to the #NcMultiplicityFuncCrocce:c0 property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_crocce" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncCrocce.</doc>
            <type name="MultiplicityFuncCrocce"
                  c:type="NcMultiplicityFuncCrocce*"/>
          </instance-parameter>
          <parameter name="c0" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncCrocce:c0.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="A0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="a0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="b0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="c0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="MultiplicityFunc" c:type="NcMultiplicityFunc"/>
      </field>
      <field name="A0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="a0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="b0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="c0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="MultiplicityFuncCrocceClass"
            c:type="NcMultiplicityFuncCrocceClass"
            glib:is-gtype-struct-for="MultiplicityFuncCrocce">
      <field name="parent_class" readable="0" private="1">
        <type name="MultiplicityFuncClass" c:type="NcMultiplicityFuncClass"/>
      </field>
    </record>
    <class name="MultiplicityFuncJenkins"
           c:symbol-prefix="multiplicity_func_jenkins"
           c:type="NcMultiplicityFuncJenkins"
           parent="MultiplicityFunc"
           glib:type-name="NcMultiplicityFuncJenkins"
           glib:get-type="nc_multiplicity_func_jenkins_get_type"
           glib:type-struct="MultiplicityFuncJenkinsClass">
      <constructor name="new" c:identifier="nc_multiplicity_func_jenkins_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcMultiplicityFunc.</doc>
          <type name="MultiplicityFunc" c:type="NcMultiplicityFunc*"/>
        </return-value>
        <parameters>
          <parameter name="A" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="A_tCDM" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="B" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="B_tCDM" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="epsilon" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="epsilon_tCDM" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_A" c:identifier="nc_multiplicity_func_jenkins_get_A">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncJenkins:A property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_jenkins" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncJenkins.</doc>
            <type name="MultiplicityFuncJenkins"
                  c:type="const NcMultiplicityFuncJenkins*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_A_tCDM"
              c:identifier="nc_multiplicity_func_jenkins_get_A_tCDM">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncJenkins:A-tCDM property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_jenkins" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncJenkins.</doc>
            <type name="MultiplicityFuncJenkins"
                  c:type="const NcMultiplicityFuncJenkins*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_B" c:identifier="nc_multiplicity_func_jenkins_get_B">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncJenkins:B property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_jenkins" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncJenkins.</doc>
            <type name="MultiplicityFuncJenkins"
                  c:type="const NcMultiplicityFuncJenkins*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_B_tCDM"
              c:identifier="nc_multiplicity_func_jenkins_get_B_tCDM">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncJenkins:B-tCDM property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_jenkins" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncJenkins.</doc>
            <type name="MultiplicityFuncJenkins"
                  c:type="const NcMultiplicityFuncJenkins*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_epsilon"
              c:identifier="nc_multiplicity_func_jenkins_get_epsilon">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncJenkins:epsilon property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_jenkins" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncJenkins.</doc>
            <type name="MultiplicityFuncJenkins"
                  c:type="const NcMultiplicityFuncJenkins*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_epsilon_tCDM"
              c:identifier="nc_multiplicity_func_jenkins_get_epsilon_tCDM">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncJenkins:epsilon-tCDM property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_jenkins" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncJenkins.</doc>
            <type name="MultiplicityFuncJenkins"
                  c:type="const NcMultiplicityFuncJenkins*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_A" c:identifier="nc_multiplicity_func_jenkins_set_A">
        <doc xml:space="preserve">Sets the value @A to the #NcMultiplicityFuncJenkins:A property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_jenkins" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncJenkins.</doc>
            <type name="MultiplicityFuncJenkins"
                  c:type="NcMultiplicityFuncJenkins*"/>
          </instance-parameter>
          <parameter name="A" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncJenkins:A.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_A_tCDM"
              c:identifier="nc_multiplicity_func_jenkins_set_A_tCDM">
        <doc xml:space="preserve">Sets the value @A_tCDM to the #NcMultiplicityFuncJenkins:A-tCDM property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_jenkins" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncJenkins.</doc>
            <type name="MultiplicityFuncJenkins"
                  c:type="NcMultiplicityFuncJenkins*"/>
          </instance-parameter>
          <parameter name="A_tCDM" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncJenkins:A-tCDM.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_B" c:identifier="nc_multiplicity_func_jenkins_set_B">
        <doc xml:space="preserve">Sets the value @B to the #NcMultiplicityFuncJenkins:B property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_jenkins" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncJenkins.</doc>
            <type name="MultiplicityFuncJenkins"
                  c:type="NcMultiplicityFuncJenkins*"/>
          </instance-parameter>
          <parameter name="B" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncJenkins:B.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_B_tCDM"
              c:identifier="nc_multiplicity_func_jenkins_set_B_tCDM">
        <doc xml:space="preserve">Sets the value @B_tCDM to the #NcMultiplicityFuncJenkins:B-tCDM property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_jenkins" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncJenkins.</doc>
            <type name="MultiplicityFuncJenkins"
                  c:type="NcMultiplicityFuncJenkins*"/>
          </instance-parameter>
          <parameter name="B_tCDM" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncJenkins:B-tCDM.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_epsilon"
              c:identifier="nc_multiplicity_func_jenkins_set_epsilon">
        <doc xml:space="preserve">Sets the value @epsilon to the #NcMultiplicityFuncJenkins:epsilon property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_jenkins" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncJenkins.</doc>
            <type name="MultiplicityFuncJenkins"
                  c:type="NcMultiplicityFuncJenkins*"/>
          </instance-parameter>
          <parameter name="epsilon" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncJenkins:epsilon.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_epsilon_tCDM"
              c:identifier="nc_multiplicity_func_jenkins_set_epsilon_tCDM">
        <doc xml:space="preserve">Sets the value @epsilon_tCDM to the #NcMultiplicityFuncJenkins:epsilon-tCDM property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_jenkins" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncJenkins.</doc>
            <type name="MultiplicityFuncJenkins"
                  c:type="NcMultiplicityFuncJenkins*"/>
          </instance-parameter>
          <parameter name="epsilon_tCDM" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncJenkins:epsilon-tCDM.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="A"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="A-tCDM"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="B"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="B-tCDM"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="epsilon"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="epsilon-tCDM"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="MultiplicityFunc" c:type="NcMultiplicityFunc"/>
      </field>
      <field name="A" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="A_tCDM" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="B" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="B_tCDM" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="epsilon" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="epsilon_tCDM" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="MultiplicityFuncJenkinsClass"
            c:type="NcMultiplicityFuncJenkinsClass"
            glib:is-gtype-struct-for="MultiplicityFuncJenkins">
      <field name="parent_class" readable="0" private="1">
        <type name="MultiplicityFuncClass" c:type="NcMultiplicityFuncClass"/>
      </field>
    </record>
    <class name="MultiplicityFuncPS"
           c:symbol-prefix="multiplicity_func_ps"
           c:type="NcMultiplicityFuncPS"
           parent="MultiplicityFunc"
           glib:type-name="NcMultiplicityFuncPS"
           glib:get-type="nc_multiplicity_func_ps_get_type"
           glib:type-struct="MultiplicityFuncPSClass">
      <constructor name="new" c:identifier="nc_multiplicity_func_ps_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcMultiplicityFunc.</doc>
          <type name="MultiplicityFunc" c:type="NcMultiplicityFunc*"/>
        </return-value>
        <parameters>
          <parameter name="delta_c" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_delta_c"
              c:identifier="nc_multiplicity_func_ps_get_delta_c">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncPS:critical_delta property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_ps" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncPS.</doc>
            <type name="MultiplicityFuncPS"
                  c:type="const NcMultiplicityFuncPS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_delta_c"
              c:identifier="nc_multiplicity_func_ps_set_delta_c">
        <doc xml:space="preserve">Sets the value @delta_c to the #NcMultiplicityFuncPS:critical-delta property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_ps" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncPS.</doc>
            <type name="MultiplicityFuncPS" c:type="NcMultiplicityFuncPS*"/>
          </instance-parameter>
          <parameter name="delta_c" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncPS:critical-delta.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="critical-delta"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="MultiplicityFunc" c:type="NcMultiplicityFunc"/>
      </field>
      <field name="delta_c" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="MultiplicityFuncPSClass"
            c:type="NcMultiplicityFuncPSClass"
            glib:is-gtype-struct-for="MultiplicityFuncPS">
      <field name="parent_class" readable="0" private="1">
        <type name="MultiplicityFuncClass" c:type="NcMultiplicityFuncClass"/>
      </field>
    </record>
    <class name="MultiplicityFuncST"
           c:symbol-prefix="multiplicity_func_st"
           c:type="NcMultiplicityFuncST"
           parent="MultiplicityFunc"
           glib:type-name="NcMultiplicityFuncST"
           glib:get-type="nc_multiplicity_func_st_get_type"
           glib:type-struct="MultiplicityFuncSTClass">
      <constructor name="new" c:identifier="nc_multiplicity_func_st_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcMultiplicityFunc.</doc>
          <type name="MultiplicityFunc" c:type="NcMultiplicityFunc*"/>
        </return-value>
        <parameters>
          <parameter name="A" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="delta_c" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_A" c:identifier="nc_multiplicity_func_st_get_A">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncST:A property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_st" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncST.</doc>
            <type name="MultiplicityFuncST"
                  c:type="const NcMultiplicityFuncST*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_b" c:identifier="nc_multiplicity_func_st_get_b">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncST:b property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_st" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncST.</doc>
            <type name="MultiplicityFuncST"
                  c:type="const NcMultiplicityFuncST*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_delta_c"
              c:identifier="nc_multiplicity_func_st_get_delta_c">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncST:critical_delta property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_st" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncST.</doc>
            <type name="MultiplicityFuncST"
                  c:type="const NcMultiplicityFuncST*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_p" c:identifier="nc_multiplicity_func_st_get_p">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncST:p property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_st" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncST.</doc>
            <type name="MultiplicityFuncST"
                  c:type="const NcMultiplicityFuncST*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_A" c:identifier="nc_multiplicity_func_st_set_A">
        <doc xml:space="preserve">Sets the value @A to the #NcMultiplicityFuncST:A property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_st" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncST.</doc>
            <type name="MultiplicityFuncST" c:type="NcMultiplicityFuncST*"/>
          </instance-parameter>
          <parameter name="A" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncST:A.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_b" c:identifier="nc_multiplicity_func_st_set_b">
        <doc xml:space="preserve">Sets the value @b to the #NcMultiplicityFuncST:b property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_st" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncST.</doc>
            <type name="MultiplicityFuncST" c:type="NcMultiplicityFuncST*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncST:b.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_delta_c"
              c:identifier="nc_multiplicity_func_st_set_delta_c">
        <doc xml:space="preserve">Sets the value @delta_c to the #NcMultiplicityFuncST:critical-delta property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_st" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncST.</doc>
            <type name="MultiplicityFuncST" c:type="NcMultiplicityFuncST*"/>
          </instance-parameter>
          <parameter name="delta_c" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncST:critical-delta.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_p" c:identifier="nc_multiplicity_func_st_set_p">
        <doc xml:space="preserve">Sets the value @p to the #NcMultiplicityFuncST:p property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_st" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncST.</doc>
            <type name="MultiplicityFuncST" c:type="NcMultiplicityFuncST*"/>
          </instance-parameter>
          <parameter name="p" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncST:p.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="A"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="b"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="critical-delta"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="p"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="MultiplicityFunc" c:type="NcMultiplicityFunc"/>
      </field>
      <field name="A" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="b" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="p" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="delta_c" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="MultiplicityFuncSTClass"
            c:type="NcMultiplicityFuncSTClass"
            glib:is-gtype-struct-for="MultiplicityFuncST">
      <field name="parent_class" readable="0" private="1">
        <type name="MultiplicityFuncClass" c:type="NcMultiplicityFuncClass"/>
      </field>
    </record>
    <class name="MultiplicityFuncTinker"
           c:symbol-prefix="multiplicity_func_tinker"
           c:type="NcMultiplicityFuncTinker"
           parent="MultiplicityFunc"
           glib:type-name="NcMultiplicityFuncTinker"
           glib:get-type="nc_multiplicity_func_tinker_get_type"
           glib:type-struct="MultiplicityFuncTinkerClass">
      <constructor name="new" c:identifier="nc_multiplicity_func_tinker_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcMultiplicityFunc.</doc>
          <type name="MultiplicityFunc" c:type="NcMultiplicityFunc*"/>
        </return-value>
        <parameters>
          <parameter name="A0" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="a0" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="b0" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="c" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="Delta" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_A0" c:identifier="nc_multiplicity_func_tinker_get_A0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncTinker:A0 property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_tinker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncTinker.</doc>
            <type name="MultiplicityFuncTinker"
                  c:type="const NcMultiplicityFuncTinker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_Delta"
              c:identifier="nc_multiplicity_func_tinker_get_Delta">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncTinker:Delta property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_tinker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncTinker.</doc>
            <type name="MultiplicityFuncTinker"
                  c:type="const NcMultiplicityFuncTinker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_a0" c:identifier="nc_multiplicity_func_tinker_get_a0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncTinker:a0 property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_tinker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncTinker.</doc>
            <type name="MultiplicityFuncTinker"
                  c:type="const NcMultiplicityFuncTinker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_b0" c:identifier="nc_multiplicity_func_tinker_get_b0">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncTinker:b0 property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_tinker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncTinker.</doc>
            <type name="MultiplicityFuncTinker"
                  c:type="const NcMultiplicityFuncTinker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_c" c:identifier="nc_multiplicity_func_tinker_get_c">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncTinker:c property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_tinker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncTinker.</doc>
            <type name="MultiplicityFuncTinker"
                  c:type="const NcMultiplicityFuncTinker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_A0" c:identifier="nc_multiplicity_func_tinker_set_A0">
        <doc xml:space="preserve">Sets the value @A0 to the #NcMultiplicityFuncTinker:A0 property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_tinker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncTinker.</doc>
            <type name="MultiplicityFuncTinker"
                  c:type="NcMultiplicityFuncTinker*"/>
          </instance-parameter>
          <parameter name="A0" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncTinker:A0.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_Delta"
              c:identifier="nc_multiplicity_func_tinker_set_Delta">
        <doc xml:space="preserve">Sets the value @Delta to the #NcMultiplicityFuncTinker:Delta property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_tinker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncTinker.</doc>
            <type name="MultiplicityFuncTinker"
                  c:type="NcMultiplicityFuncTinker*"/>
          </instance-parameter>
          <parameter name="Delta" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncTinker:Delta.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_a0" c:identifier="nc_multiplicity_func_tinker_set_a0">
        <doc xml:space="preserve">Sets the value @a0 to the #NcMultiplicityFuncTinker:a0 property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_tinker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncTinker.</doc>
            <type name="MultiplicityFuncTinker"
                  c:type="NcMultiplicityFuncTinker*"/>
          </instance-parameter>
          <parameter name="a0" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncTinker:a0.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_b0" c:identifier="nc_multiplicity_func_tinker_set_b0">
        <doc xml:space="preserve">Sets the value @b0 to the #NcMultiplicityFuncTinker:b0 property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_tinker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncTinker.</doc>
            <type name="MultiplicityFuncTinker"
                  c:type="NcMultiplicityFuncTinker*"/>
          </instance-parameter>
          <parameter name="b0" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncTinker:b0.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_c" c:identifier="nc_multiplicity_func_tinker_set_c">
        <doc xml:space="preserve">Sets the value @c to the #NcMultiplicityFuncTinker:c property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_tinker" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncTinker.</doc>
            <type name="MultiplicityFuncTinker"
                  c:type="NcMultiplicityFuncTinker*"/>
          </instance-parameter>
          <parameter name="c" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncTinker:c.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="A0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="Delta"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="a0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="b0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="c"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="MultiplicityFunc" c:type="NcMultiplicityFunc"/>
      </field>
      <field name="A0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="a0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="b0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="c" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="Delta" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="MultiplicityFuncTinkerClass"
            c:type="NcMultiplicityFuncTinkerClass"
            glib:is-gtype-struct-for="MultiplicityFuncTinker">
      <field name="parent_class" readable="0" private="1">
        <type name="MultiplicityFuncClass" c:type="NcMultiplicityFuncClass"/>
      </field>
    </record>
    <class name="MultiplicityFuncTinkerCrit"
           c:symbol-prefix="multiplicity_func_tinker_crit"
           c:type="NcMultiplicityFuncTinkerCrit"
           parent="MultiplicityFunc"
           glib:type-name="NcMultiplicityFuncTinkerCrit"
           glib:get-type="nc_multiplicity_func_tinker_crit_get_type"
           glib:type-struct="MultiplicityFuncTinkerCritClass">
      <constructor name="new"
                   c:identifier="nc_multiplicity_func_tinker_crit_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcMultiplicityFunc.</doc>
          <type name="MultiplicityFunc" c:type="NcMultiplicityFunc*"/>
        </return-value>
        <parameters>
          <parameter name="Delta" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_Delta"
              c:identifier="nc_multiplicity_func_tinker_crit_get_Delta">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncTinkerCrit:Delta property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_tinker_crit"
                              transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncTinkerCrit.</doc>
            <type name="MultiplicityFuncTinkerCrit"
                  c:type="const NcMultiplicityFuncTinkerCrit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_Delta"
              c:identifier="nc_multiplicity_func_tinker_crit_set_Delta">
        <doc xml:space="preserve">Sets the value @Delta to the #NcMultiplicityFuncTinkerCrit:Delta property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_tinker_crit"
                              transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncTinkerCrit.</doc>
            <type name="MultiplicityFuncTinkerCrit"
                  c:type="NcMultiplicityFuncTinkerCrit*"/>
          </instance-parameter>
          <parameter name="Delta" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncTinkerCrit:Delta.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="Delta"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="MultiplicityFunc" c:type="NcMultiplicityFunc"/>
      </field>
      <field name="Delta" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="MultiplicityFuncTinkerCritClass"
            c:type="NcMultiplicityFuncTinkerCritClass"
            glib:is-gtype-struct-for="MultiplicityFuncTinkerCrit">
      <field name="parent_class" readable="0" private="1">
        <type name="MultiplicityFuncClass" c:type="NcMultiplicityFuncClass"/>
      </field>
    </record>
    <class name="MultiplicityFuncTinkerMean"
           c:symbol-prefix="multiplicity_func_tinker_mean"
           c:type="NcMultiplicityFuncTinkerMean"
           parent="MultiplicityFunc"
           glib:type-name="NcMultiplicityFuncTinkerMean"
           glib:get-type="nc_multiplicity_func_tinker_mean_get_type"
           glib:type-struct="MultiplicityFuncTinkerMeanClass">
      <constructor name="new"
                   c:identifier="nc_multiplicity_func_tinker_mean_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcMultiplicityFunc.</doc>
          <type name="MultiplicityFunc" c:type="NcMultiplicityFunc*"/>
        </return-value>
        <parameters>
          <parameter name="Delta" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_Delta"
              c:identifier="nc_multiplicity_func_tinker_mean_get_Delta">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncTinkerMean:Delta property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_tinker_mean"
                              transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncTinkerMean.</doc>
            <type name="MultiplicityFuncTinkerMean"
                  c:type="const NcMultiplicityFuncTinkerMean*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_Delta"
              c:identifier="nc_multiplicity_func_tinker_mean_set_Delta">
        <doc xml:space="preserve">Sets the value @Delta to the #NcMultiplicityFuncTinkerMean:Delta property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_tinker_mean"
                              transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncTinkerMean.</doc>
            <type name="MultiplicityFuncTinkerMean"
                  c:type="NcMultiplicityFuncTinkerMean*"/>
          </instance-parameter>
          <parameter name="Delta" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncTinkerMean:Delta.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="Delta"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="MultiplicityFunc" c:type="NcMultiplicityFunc"/>
      </field>
      <field name="Delta" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="MultiplicityFuncTinkerMeanClass"
            c:type="NcMultiplicityFuncTinkerMeanClass"
            glib:is-gtype-struct-for="MultiplicityFuncTinkerMean">
      <field name="parent_class" readable="0" private="1">
        <type name="MultiplicityFuncClass" c:type="NcMultiplicityFuncClass"/>
      </field>
    </record>
    <class name="MultiplicityFuncTinkerMeanNormalized"
           c:symbol-prefix="multiplicity_func_tinker_mean_normalized"
           c:type="NcMultiplicityFuncTinkerMeanNormalized"
           parent="MultiplicityFunc"
           glib:type-name="NcMultiplicityFuncTinkerMeanNormalized"
           glib:get-type="nc_multiplicity_func_tinker_mean_normalized_get_type"
           glib:type-struct="MultiplicityFuncTinkerMeanNormalizedClass">
      <constructor name="new"
                   c:identifier="nc_multiplicity_func_tinker_mean_normalized_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcMultiplicityFunc.</doc>
          <type name="MultiplicityFunc" c:type="NcMultiplicityFunc*"/>
        </return-value>
        <parameters>
          <parameter name="Delta" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_Delta"
              c:identifier="nc_multiplicity_func_tinker_mean_normalized_get_Delta">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncTinkerMeanNormalized:Delta property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mtmn" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncTinkerMeanNormalized.</doc>
            <type name="MultiplicityFuncTinkerMeanNormalized"
                  c:type="const NcMultiplicityFuncTinkerMeanNormalized*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_Delta"
              c:identifier="nc_multiplicity_func_tinker_mean_normalized_set_Delta">
        <doc xml:space="preserve">Sets the value @Delta to the #NcMultiplicityFuncTinkerMeanNormalized:Delta property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mtmn" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncTinkerMeanNormalized.</doc>
            <type name="MultiplicityFuncTinkerMeanNormalized"
                  c:type="NcMultiplicityFuncTinkerMeanNormalized*"/>
          </instance-parameter>
          <parameter name="Delta" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncTinkerMeanNormalized:Delta.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="Delta"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="MultiplicityFunc" c:type="NcMultiplicityFunc"/>
      </field>
      <field name="Delta" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="int_Delta" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="alpha" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="beta" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="phi" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="eta" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="gamma" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="MultiplicityFuncTinkerMeanNormalizedClass"
            c:type="NcMultiplicityFuncTinkerMeanNormalizedClass"
            glib:is-gtype-struct-for="MultiplicityFuncTinkerMeanNormalized">
      <field name="parent_class" readable="0" private="1">
        <type name="MultiplicityFuncClass" c:type="NcMultiplicityFuncClass"/>
      </field>
    </record>
    <class name="MultiplicityFuncWarren"
           c:symbol-prefix="multiplicity_func_warren"
           c:type="NcMultiplicityFuncWarren"
           parent="MultiplicityFunc"
           glib:type-name="NcMultiplicityFuncWarren"
           glib:get-type="nc_multiplicity_func_warren_get_type"
           glib:type-struct="MultiplicityFuncWarrenClass">
      <constructor name="new" c:identifier="nc_multiplicity_func_warren_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcMultiplicityFunc.</doc>
          <type name="MultiplicityFunc" c:type="NcMultiplicityFunc*"/>
        </return-value>
        <parameters>
          <parameter name="A" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="c" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_A" c:identifier="nc_multiplicity_func_warren_get_A">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncWarren:A property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_warren" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncWarren.</doc>
            <type name="MultiplicityFuncWarren"
                  c:type="const NcMultiplicityFuncWarren*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_a" c:identifier="nc_multiplicity_func_warren_get_a">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncWarren:a property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_warren" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncWarren.</doc>
            <type name="MultiplicityFuncWarren"
                  c:type="const NcMultiplicityFuncWarren*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_b" c:identifier="nc_multiplicity_func_warren_get_b">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncWarren:b property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_warren" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncWarren.</doc>
            <type name="MultiplicityFuncWarren"
                  c:type="const NcMultiplicityFuncWarren*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_c" c:identifier="nc_multiplicity_func_warren_get_c">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of #NcMultiplicityFuncWarren:c property.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_warren" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncWarren.</doc>
            <type name="MultiplicityFuncWarren"
                  c:type="const NcMultiplicityFuncWarren*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_A" c:identifier="nc_multiplicity_func_warren_set_A">
        <doc xml:space="preserve">Sets the value @A to the #NcMultiplicityFuncWarren:A property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_warren" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncWarren.</doc>
            <type name="MultiplicityFuncWarren"
                  c:type="NcMultiplicityFuncWarren*"/>
          </instance-parameter>
          <parameter name="A" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncWarren:A.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_a" c:identifier="nc_multiplicity_func_warren_set_a">
        <doc xml:space="preserve">Sets the value @a to the #NcMultiplicityFuncWarren:a property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_warren" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncWarren.</doc>
            <type name="MultiplicityFuncWarren"
                  c:type="NcMultiplicityFuncWarren*"/>
          </instance-parameter>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncWarren:a.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_b" c:identifier="nc_multiplicity_func_warren_set_b">
        <doc xml:space="preserve">Sets the value @b to the #NcMultiplicityFuncWarren:b property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_warren" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncWarren.</doc>
            <type name="MultiplicityFuncWarren"
                  c:type="NcMultiplicityFuncWarren*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncWarren:b.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_c" c:identifier="nc_multiplicity_func_warren_set_c">
        <doc xml:space="preserve">Sets the value @c to the #NcMultiplicityFuncWarren:c property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mulf_warren" transfer-ownership="none">
            <doc xml:space="preserve">a #NcMultiplicityFuncWarren.</doc>
            <type name="MultiplicityFuncWarren"
                  c:type="NcMultiplicityFuncWarren*"/>
          </instance-parameter>
          <parameter name="c" transfer-ownership="none">
            <doc xml:space="preserve">value of #NcMultiplicityFuncWarren:c.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="A"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="a"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="b"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="c"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="MultiplicityFunc" c:type="NcMultiplicityFunc"/>
      </field>
      <field name="A" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="a" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="b" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="c" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="MultiplicityFuncWarrenClass"
            c:type="NcMultiplicityFuncWarrenClass"
            glib:is-gtype-struct-for="MultiplicityFuncWarren">
      <field name="parent_class" readable="0" private="1">
        <type name="MultiplicityFuncClass" c:type="NcMultiplicityFuncClass"/>
      </field>
    </record>
    <constant name="PERTURBATION_BASE_SIZE"
              value="1"
              c:type="NC_PERTURBATION_BASE_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PERTURBATION_START_X"
              value="1000000000000.000000"
              c:type="NC_PERTURBATION_START_X">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_A_pol"
              value="1.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_A_pol">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_0E_0E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_0E_0E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_0E_1E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_0E_1E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_0E_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_0E_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_0T_0E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_0T_0E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_0T_1E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_0T_1E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_0T_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_0T_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_1E_1E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_1E_1E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_1E_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_1E_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_1T_1E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_1T_1E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_1T_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_1T_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_2E_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_2E_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_2T_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_0_2T_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_0E_0E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_0E_0E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_0E_1E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_0E_1E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_0E_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_0E_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_0T_0E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_0T_0E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_0T_1E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_0T_1E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_0T_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_0T_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_1E_1E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_1E_1E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_1E_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_1E_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_1T_1E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_1T_1E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_1T_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_1T_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_2E_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_2E_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_2T_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_1_2T_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_0E_0E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_0E_0E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_0E_1E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_0E_1E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_0E_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_0E_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_0T_0E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_0T_0E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_0T_1E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_0T_1E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_0T_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_0T_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_1E_1E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_1E_1E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_1E_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_1E_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_1T_1E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_1T_1E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_1T_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_1T_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_2E_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_2E_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_2T_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_2_2T_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_0E_0E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_0E_0E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_0E_1E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_0E_1E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_0E_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_0E_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_0T_0E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_0T_0E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_0T_1E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_0T_1E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_0T_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_0T_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_1E_1E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_1E_1E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_1E_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_1E_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_1T_1E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_1T_1E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_1T_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_1T_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_2E_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_2E_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_2T_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_3_2T_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_0E_0E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_0E_0E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_0E_1E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_0E_1E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_0E_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_0E_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_0T_0E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_0T_0E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_0T_1E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_0T_1E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_0T_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_0T_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_1E_1E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_1E_1E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_1E_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_1E_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_1T_1E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_1T_1E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_1T_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_1T_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_2E_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_2E_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_2T_2E"
              value="0.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_bleak_epsilon_4_2T_2E">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_calib_100P"
              value="1.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_calib_100P">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_calib_143P"
              value="1.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_calib_143P">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_calib_217P"
              value="1.000000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_calib_217P">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_galf_EE_A_100"
              value="0.060000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_galf_EE_A_100">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_galf_EE_A_100_143"
              value="0.050000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_galf_EE_A_100_143">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_galf_EE_A_100_217"
              value="0.110000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_galf_EE_A_100_217">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_galf_EE_A_143"
              value="0.100000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_galf_EE_A_143">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_galf_EE_A_143_217"
              value="0.240000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_galf_EE_A_143_217">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_galf_EE_A_217"
              value="0.720000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_galf_EE_A_217">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_galf_EE_index"
              value="2.400000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_galf_EE_index">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_galf_TE_A_100"
              value="0.140000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_galf_TE_A_100">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_galf_TE_A_100_143"
              value="0.120000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_galf_TE_A_100_143">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_galf_TE_A_100_217"
              value="0.300000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_galf_TE_A_100_217">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_galf_TE_A_143"
              value="0.240000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_galf_TE_A_143">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_galf_TE_A_143_217"
              value="0.600000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_galf_TE_A_143_217">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_galf_TE_A_217"
              value="1.800000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_galf_TE_A_217">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TTTEEE_DEFAULT_galf_TE_index"
              value="2.400000"
              c:type="NC_PLANCK_FI_COR_TTTEEE_DEFAULT_galf_TE_index">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TT_DEFAULT_A_cib_217"
              value="100.000000"
              c:type="NC_PLANCK_FI_COR_TT_DEFAULT_A_cib_217">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TT_DEFAULT_A_planck"
              value="1.000000"
              c:type="NC_PLANCK_FI_COR_TT_DEFAULT_A_planck">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TT_DEFAULT_A_sz"
              value="5.000000"
              c:type="NC_PLANCK_FI_COR_TT_DEFAULT_A_sz">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TT_DEFAULT_calib_100T"
              value="0.999000"
              c:type="NC_PLANCK_FI_COR_TT_DEFAULT_calib_100T">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TT_DEFAULT_calib_217T"
              value="0.995010"
              c:type="NC_PLANCK_FI_COR_TT_DEFAULT_calib_217T">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TT_DEFAULT_cib_index"
              value="1.300000"
              c:type="NC_PLANCK_FI_COR_TT_DEFAULT_cib_index">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TT_DEFAULT_gal545_A_100"
              value="7.000000"
              c:type="NC_PLANCK_FI_COR_TT_DEFAULT_gal545_A_100">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TT_DEFAULT_gal545_A_143"
              value="9.000000"
              c:type="NC_PLANCK_FI_COR_TT_DEFAULT_gal545_A_143">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TT_DEFAULT_gal545_A_143_217"
              value="21.000000"
              c:type="NC_PLANCK_FI_COR_TT_DEFAULT_gal545_A_143_217">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TT_DEFAULT_gal545_A_217"
              value="80.000000"
              c:type="NC_PLANCK_FI_COR_TT_DEFAULT_gal545_A_217">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TT_DEFAULT_ksz_norm"
              value="5.000000"
              c:type="NC_PLANCK_FI_COR_TT_DEFAULT_ksz_norm">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TT_DEFAULT_ps_A_100_100"
              value="200.000000"
              c:type="NC_PLANCK_FI_COR_TT_DEFAULT_ps_A_100_100">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TT_DEFAULT_ps_A_143_143"
              value="200.000000"
              c:type="NC_PLANCK_FI_COR_TT_DEFAULT_ps_A_143_143">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TT_DEFAULT_ps_A_143_217"
              value="200.000000"
              c:type="NC_PLANCK_FI_COR_TT_DEFAULT_ps_A_143_217">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TT_DEFAULT_ps_A_217_217"
              value="200.000000"
              c:type="NC_PLANCK_FI_COR_TT_DEFAULT_ps_A_217_217">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_COR_TT_DEFAULT_xi_sz_cib"
              value="0.500000"
              c:type="NC_PLANCK_FI_COR_TT_DEFAULT_xi_sz_cib">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="PLANCK_FI_DEFAULT_PARAMS_ABSTOL"
              value="0.000000"
              c:type="NC_PLANCK_FI_DEFAULT_PARAMS_ABSTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="POWSPEC_ML_CBE_INTERN_KMAX"
              value="10.000000"
              c:type="NC_POWSPEC_ML_CBE_INTERN_KMAX">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="POWSPEC_ML_CBE_INTERN_KMIN"
              value="0.000010"
              c:type="NC_POWSPEC_ML_CBE_INTERN_KMIN">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="POWSPEC_MNL_HALOFIT_F1aPOW"
              value="0.073200"
              c:type="NC_POWSPEC_MNL_HALOFIT_F1aPOW">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="POWSPEC_MNL_HALOFIT_F1bPOW"
              value="0.030700"
              c:type="NC_POWSPEC_MNL_HALOFIT_F1bPOW">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="POWSPEC_MNL_HALOFIT_F2aPOW"
              value="0.142300"
              c:type="NC_POWSPEC_MNL_HALOFIT_F2aPOW">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="POWSPEC_MNL_HALOFIT_F2bPOW"
              value="0.058500"
              c:type="NC_POWSPEC_MNL_HALOFIT_F2bPOW">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="POWSPEC_MNL_HALOFIT_F3aPOW"
              value="0.072500"
              c:type="NC_POWSPEC_MNL_HALOFIT_F3aPOW">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="POWSPEC_MNL_HALOFIT_F3bPOW"
              value="0.074300"
              c:type="NC_POWSPEC_MNL_HALOFIT_F3bPOW">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="POWSPEC_MNL_HALOFIT_LOGRMIN"
              value="35.000000"
              c:type="NC_POWSPEC_MNL_HALOFIT_LOGRMIN">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <class name="PlanckFI"
           c:symbol-prefix="planck_fi"
           c:type="NcPlanckFI"
           parent="NumCosmoMath.Model"
           glib:type-name="NcPlanckFI"
           glib:get-type="nc_planck_fi_get_type"
           glib:type-struct="PlanckFIClass">
      <constructor name="new_from_name"
                   c:identifier="nc_planck_fi_new_from_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="PlanckFI" c:type="NcPlanckFI*"/>
        </return-value>
        <parameters>
          <parameter name="pfi_name" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_planck_fi_clear">
        <doc xml:space="preserve">The reference count of @pfi is decreased and the pointer is set to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pfi" transfer-ownership="none">
            <doc xml:space="preserve">a #NcPlanckFI</doc>
            <type name="PlanckFI" c:type="NcPlanckFI**"/>
          </parameter>
        </parameters>
      </function>
      <function name="id" c:identifier="nc_planck_fi_id">
        <return-value transfer-ownership="none">
          <type name="gint32" c:type="gint32"/>
        </return-value>
      </function>
      <function name="log_all_models"
                c:identifier="nc_planck_fi_log_all_models">
        <doc xml:space="preserve">This function lists all implemented models of cluster mass distributions.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <method name="free" c:identifier="nc_planck_fi_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pfi" transfer-ownership="none">
            <doc xml:space="preserve">a #NcPlanckFI</doc>
            <type name="PlanckFI" c:type="NcPlanckFI*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_planck_fi_ref">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="PlanckFI" c:type="NcPlanckFI*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pfi" transfer-ownership="none">
            <doc xml:space="preserve">a #NcPlanckFI</doc>
            <type name="PlanckFI" c:type="NcPlanckFI*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="version" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Model" c:type="NcmModel"/>
      </field>
      <field name="version" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="PlanckFIClass"
            c:type="NcPlanckFIClass"
            glib:is-gtype-struct-for="PlanckFI">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.ModelClass" c:type="NcmModelClass"/>
      </field>
    </record>
    <class name="PlanckFICorTT"
           c:symbol-prefix="planck_fi_cor_tt"
           c:type="NcPlanckFICorTT"
           parent="PlanckFI"
           glib:type-name="NcPlanckFICorTT"
           glib:get-type="nc_planck_fi_cor_tt_get_type"
           glib:type-struct="PlanckFICorTTClass">
      <function name="add_all_default_priors"
                c:identifier="nc_planck_fi_cor_tt_add_all_default_priors">
        <doc xml:space="preserve">Adds all default priors above:
- nc_planck_fi_cor_tt_add_default_gal_priors()
- nc_planck_fi_cor_tt_add_default_calib_priors()
- nc_planck_fi_cor_tt_add_default_sz_prior()</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="NumCosmoMath.Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
        </parameters>
      </function>
      <function name="add_calib_priors"
                c:identifier="nc_planck_fi_cor_tt_add_calib_priors">
        <doc xml:space="preserve">Add the calibration priors as described in [Planck 2015 results XI (2015)][XPlanckCollaboration2015a].</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="NumCosmoMath.Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="mean" transfer-ownership="none">
            <doc xml:space="preserve">a vector containing the means</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="sigma" transfer-ownership="none">
            <doc xml:space="preserve">a vector containing the standard deviations</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </function>
      <function name="add_default_calib_priors"
                c:identifier="nc_planck_fi_cor_tt_add_default_calib_priors">
        <doc xml:space="preserve">Add the calibration priors as described in [Planck 2015 results XI (2015)][XPlanckCollaboration2015a].
It uses the default values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="NumCosmoMath.Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
        </parameters>
      </function>
      <function name="add_default_gal_priors"
                c:identifier="nc_planck_fi_cor_tt_add_default_gal_priors">
        <doc xml:space="preserve">Add the galaxy dust priors as described in [Planck 2015 results XI (2015)][XPlanckCollaboration2015a].
It uses the default values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="NumCosmoMath.Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
        </parameters>
      </function>
      <function name="add_default_sz_prior"
                c:identifier="nc_planck_fi_cor_tt_add_default_sz_prior">
        <doc xml:space="preserve">Add the SZ prior as described in [Planck 2015 results XI (2015)][XPlanckCollaboration2015a].
The prior is given by a $\chi^2$ factor in the form $$\frac{(A^{\\mathrm{kSZ}} + f_\\mathrm{tSZ} A^{\\mathrm{tSZ}} - \\mu)^2}{\sigma^2}.$$
It uses the default values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="NumCosmoMath.Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
        </parameters>
      </function>
      <function name="add_gal_priors"
                c:identifier="nc_planck_fi_cor_tt_add_gal_priors">
        <doc xml:space="preserve">Add the galaxy dust priors as described in [Planck 2015 results XI (2015)][XPlanckCollaboration2015a].</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="NumCosmoMath.Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="mean" transfer-ownership="none">
            <doc xml:space="preserve">a vector containing the means</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="sigma" transfer-ownership="none">
            <doc xml:space="preserve">a vector containing the standard deviations</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </function>
      <function name="add_sz_prior"
                c:identifier="nc_planck_fi_cor_tt_add_sz_prior">
        <doc xml:space="preserve">Add the SZ prior as described in [Planck 2015 results XI (2015)][XPlanckCollaboration2015a].
The prior is given by a $\chi^2$ factor in the form $$\frac{(A^{\\mathrm{kSZ}} + f_\\mathrm{tSZ} A^{\\mathrm{tSZ}} - \\mu)^2}{\sigma^2}.$$</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="NumCosmoMath.Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="f_tSZ" transfer-ownership="none">
            <doc xml:space="preserve">the tSZ factor</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="mean" transfer-ownership="none">
            <doc xml:space="preserve">the mean $\mu$</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="sigma" transfer-ownership="none">
            <doc xml:space="preserve">the standard deviation</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </function>
      <property name="A-cib-217" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="A-cib-217-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="A-planck" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="A-planck-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="A-sz" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="A-sz-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="calib-100T" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="calib-100T-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="calib-217T" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="calib-217T-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="cib-index" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="cib-index-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="gal545-A-100" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="gal545-A-100-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="gal545-A-143" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="gal545-A-143-217" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="gal545-A-143-217-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="gal545-A-143-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="gal545-A-217" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="gal545-A-217-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ksz-norm" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="ksz-norm-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ps-A-100-100" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="ps-A-100-100-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ps-A-143-143" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="ps-A-143-143-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ps-A-143-217" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="ps-A-143-217-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ps-A-217-217" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="ps-A-217-217-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="xi-sz-cib" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="xi-sz-cib-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="PlanckFI" c:type="NcPlanckFI"/>
      </field>
    </class>
    <record name="PlanckFICorTTClass"
            c:type="NcPlanckFICorTTClass"
            glib:is-gtype-struct-for="PlanckFICorTT">
      <field name="parent_class" readable="0" private="1">
        <type name="PlanckFIClass" c:type="NcPlanckFIClass"/>
      </field>
    </record>
    <enumeration name="PlanckFICorTTParams"
                 glib:type-name="NcPlanckFICorTTParams"
                 glib:get-type="nc_planck_fi_cor_tt_params_get_type"
                 c:type="NcPlanckFICorTTParams">
      <doc xml:space="preserve">Planck Foregound and Instrument parameters, compatible with 2013 and 2015
releases (see [Planck 2015 results XI (2015)][XPlanckCollaboration2015a]).</doc>
      <member name="a_cib_217"
              value="0"
              c:identifier="NC_PLANCK_FI_COR_TT_A_cib_217"
              glib:nick="a-cib-217">
        <doc xml:space="preserve">Contribution of CIB power to $\mathcal{D}^{217}_{3000}$ at the Planck CMB frequency for $217\,$GHz (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="cib_index"
              value="1"
              c:identifier="NC_PLANCK_FI_COR_TT_cib_index"
              glib:nick="cib-index">
        <doc xml:space="preserve">The effective slope of the CIB spectrum</doc>
      </member>
      <member name="xi_sz_cib"
              value="2"
              c:identifier="NC_PLANCK_FI_COR_TT_xi_sz_cib"
              glib:nick="xi-sz-cib">
        <doc xml:space="preserve">Correlation coefficient between the CIB and tSZ</doc>
      </member>
      <member name="a_sz"
              value="3"
              c:identifier="NC_PLANCK_FI_COR_TT_A_sz"
              glib:nick="a-sz">
        <doc xml:space="preserve">Contribution of tSZ to $\mathcal{D}_{3000}^{143\times 143}$ at $143\,$GHz (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="ps_a_100_100"
              value="4"
              c:identifier="NC_PLANCK_FI_COR_TT_ps_A_100_100"
              glib:nick="ps-a-100-100">
        <doc xml:space="preserve">Contribution of Poisson point-source power to $\mathcal{D}^{100\times 100}_{3000}$ for Planck (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="ps_a_143_143"
              value="5"
              c:identifier="NC_PLANCK_FI_COR_TT_ps_A_143_143"
              glib:nick="ps-a-143-143">
        <doc xml:space="preserve">Contribution of Poisson point-source power to $\mathcal{D}^{143\times 143}_{3000}$ for Planck (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="ps_a_143_217"
              value="6"
              c:identifier="NC_PLANCK_FI_COR_TT_ps_A_143_217"
              glib:nick="ps-a-143-217">
        <doc xml:space="preserve">Contribution of Poisson point-source power to $\mathcal{D}^{143\times 217}_{3000}$ for Planck (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="ps_a_217_217"
              value="7"
              c:identifier="NC_PLANCK_FI_COR_TT_ps_A_217_217"
              glib:nick="ps-a-217-217">
        <doc xml:space="preserve">Contribution of Poisson point-source power to $\mathcal{D}^{217\times 217}_{3000}$ for Planck (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="ksz_norm"
              value="8"
              c:identifier="NC_PLANCK_FI_COR_TT_ksz_norm"
              glib:nick="ksz-norm">
        <doc xml:space="preserve">Contribution of kSZ to $\mathcal{D}_{3000}$ (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="gal545_a_100"
              value="9"
              c:identifier="NC_PLANCK_FI_COR_TT_gal545_A_100"
              glib:nick="gal545-a-100">
        <doc xml:space="preserve">Amplitude of Galactic dust power at $\ell=200$ at $100\,$GHz (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="gal545_a_143"
              value="10"
              c:identifier="NC_PLANCK_FI_COR_TT_gal545_A_143"
              glib:nick="gal545-a-143">
        <doc xml:space="preserve">Amplitude of Galactic dust power at $\ell=200$ at $143\,$GHz (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="gal545_a_143_217"
              value="11"
              c:identifier="NC_PLANCK_FI_COR_TT_gal545_A_143_217"
              glib:nick="gal545-a-143-217">
        <doc xml:space="preserve">Amplitude of Galactic dust power at $\ell=200$ at $143\times 217\,$GHz (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="gal545_a_217"
              value="12"
              c:identifier="NC_PLANCK_FI_COR_TT_gal545_A_217"
              glib:nick="gal545-a-217">
        <doc xml:space="preserve">Amplitude of Galactic dust power at $\ell=200$ at $217\,$GHz (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="calib_100t"
              value="13"
              c:identifier="NC_PLANCK_FI_COR_TT_calib_100T"
              glib:nick="calib-100t">
        <doc xml:space="preserve">Power spectrum calibration for the $100\,$GHz</doc>
      </member>
      <member name="calib_217t"
              value="14"
              c:identifier="NC_PLANCK_FI_COR_TT_calib_217T"
              glib:nick="calib-217t">
        <doc xml:space="preserve">Power spectrum calibration for the $217\,$GHz</doc>
      </member>
      <member name="a_planck"
              value="15"
              c:identifier="NC_PLANCK_FI_COR_TT_A_planck"
              glib:nick="a-planck">
        <doc xml:space="preserve">Absolute map calibration for Planck</doc>
      </member>
    </enumeration>
    <class name="PlanckFICorTTTEEE"
           c:symbol-prefix="planck_fi_cor_ttteee"
           c:type="NcPlanckFICorTTTEEE"
           parent="PlanckFICorTT"
           glib:type-name="NcPlanckFICorTTTEEE"
           glib:get-type="nc_planck_fi_cor_ttteee_get_type"
           glib:type-struct="PlanckFICorTTTEEEClass">
      <function name="add_all_default_priors"
                c:identifier="nc_planck_fi_cor_ttteee_add_all_default_priors">
        <doc xml:space="preserve">Adds all default priors above:
- nc_planck_fi_cor_ttteee_add_default_gal_priors()
- nc_planck_fi_cor_ttteee_add_default_calib_priors()
- nc_planck_fi_cor_ttteee_add_default_sz_prior()</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="NumCosmoMath.Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
        </parameters>
      </function>
      <function name="add_calib_priors"
                c:identifier="nc_planck_fi_cor_ttteee_add_calib_priors">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <type name="NumCosmoMath.Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="mean" transfer-ownership="none">
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="sigma" transfer-ownership="none">
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </function>
      <function name="add_default_calib_priors"
                c:identifier="nc_planck_fi_cor_ttteee_add_default_calib_priors">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <type name="NumCosmoMath.Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
        </parameters>
      </function>
      <function name="add_default_galf_priors"
                c:identifier="nc_planck_fi_cor_ttteee_add_default_galf_priors">
        <doc xml:space="preserve">Add the galaxy dust priors (on polarization data) as described in [Planck 2015 results XI (2015)][XPlanckCollaboration2015a].
It uses the default values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="NumCosmoMath.Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
        </parameters>
      </function>
      <function name="add_default_sz_prior"
                c:identifier="nc_planck_fi_cor_ttteee_add_default_sz_prior">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <type name="NumCosmoMath.Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
        </parameters>
      </function>
      <function name="add_galf_priors"
                c:identifier="nc_planck_fi_cor_ttteee_add_galf_priors">
        <doc xml:space="preserve">Add the galaxy dust priors (on polarization data) as described in [Planck 2015 results XI (2015)][XPlanckCollaboration2015a].</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmLikelihood</doc>
            <type name="NumCosmoMath.Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="mean" transfer-ownership="none">
            <doc xml:space="preserve">a vector containing the means</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="sigma" transfer-ownership="none">
            <doc xml:space="preserve">a vector containing the standard deviations</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </function>
      <function name="add_sz_prior"
                c:identifier="nc_planck_fi_cor_ttteee_add_sz_prior">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lh" transfer-ownership="none">
            <type name="NumCosmoMath.Likelihood" c:type="NcmLikelihood*"/>
          </parameter>
          <parameter name="f_tSZ" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="mean" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="sigma" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </function>
      <property name="A-pol" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="A-pol-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-0-0E-0E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-0-0E-0E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-0-0E-1E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-0-0E-1E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-0-0E-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-0-0E-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-0-0T-0E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-0-0T-0E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-0-0T-1E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-0-0T-1E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-0-0T-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-0-0T-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-0-1E-1E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-0-1E-1E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-0-1E-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-0-1E-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-0-1T-1E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-0-1T-1E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-0-1T-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-0-1T-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-0-2E-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-0-2E-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-0-2T-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-0-2T-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-1-0E-0E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-1-0E-0E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-1-0E-1E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-1-0E-1E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-1-0E-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-1-0E-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-1-0T-0E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-1-0T-0E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-1-0T-1E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-1-0T-1E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-1-0T-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-1-0T-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-1-1E-1E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-1-1E-1E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-1-1E-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-1-1E-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-1-1T-1E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-1-1T-1E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-1-1T-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-1-1T-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-1-2E-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-1-2E-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-1-2T-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-1-2T-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-2-0E-0E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-2-0E-0E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-2-0E-1E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-2-0E-1E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-2-0E-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-2-0E-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-2-0T-0E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-2-0T-0E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-2-0T-1E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-2-0T-1E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-2-0T-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-2-0T-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-2-1E-1E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-2-1E-1E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-2-1E-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-2-1E-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-2-1T-1E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-2-1T-1E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-2-1T-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-2-1T-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-2-2E-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-2-2E-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-2-2T-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-2-2T-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-3-0E-0E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-3-0E-0E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-3-0E-1E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-3-0E-1E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-3-0E-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-3-0E-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-3-0T-0E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-3-0T-0E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-3-0T-1E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-3-0T-1E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-3-0T-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-3-0T-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-3-1E-1E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-3-1E-1E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-3-1E-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-3-1E-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-3-1T-1E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-3-1T-1E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-3-1T-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-3-1T-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-3-2E-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-3-2E-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-3-2T-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-3-2T-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-4-0E-0E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-4-0E-0E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-4-0E-1E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-4-0E-1E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-4-0E-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-4-0E-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-4-0T-0E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-4-0T-0E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-4-0T-1E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-4-0T-1E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-4-0T-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-4-0T-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-4-1E-1E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-4-1E-1E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-4-1E-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-4-1E-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-4-1T-1E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-4-1T-1E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-4-1T-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-4-1T-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-4-2E-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-4-2E-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bleak-epsilon-4-2T-2E"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bleak-epsilon-4-2T-2E-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="calib-100P" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="calib-100P-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="calib-143P" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="calib-143P-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="calib-217P" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="calib-217P-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="galf-EE-A-100" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="galf-EE-A-100-143"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="galf-EE-A-100-143-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="galf-EE-A-100-217"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="galf-EE-A-100-217-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="galf-EE-A-100-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="galf-EE-A-143" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="galf-EE-A-143-217"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="galf-EE-A-143-217-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="galf-EE-A-143-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="galf-EE-A-217" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="galf-EE-A-217-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="galf-EE-index" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="galf-EE-index-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="galf-TE-A-100" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="galf-TE-A-100-143"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="galf-TE-A-100-143-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="galf-TE-A-100-217"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="galf-TE-A-100-217-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="galf-TE-A-100-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="galf-TE-A-143" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="galf-TE-A-143-217"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="galf-TE-A-143-217-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="galf-TE-A-143-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="galf-TE-A-217" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="galf-TE-A-217-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="galf-TE-index" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="galf-TE-index-fit"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="PlanckFICorTT" c:type="NcPlanckFICorTT"/>
      </field>
    </class>
    <record name="PlanckFICorTTTEEEClass"
            c:type="NcPlanckFICorTTTEEEClass"
            glib:is-gtype-struct-for="PlanckFICorTTTEEE">
      <field name="parent_class" readable="0" private="1">
        <type name="PlanckFICorTTClass" c:type="NcPlanckFICorTTClass"/>
      </field>
    </record>
    <enumeration name="PlanckFICorTTTEEEParams"
                 glib:type-name="NcPlanckFICorTTTEEEParams"
                 glib:get-type="nc_planck_fi_cor_ttteee_params_get_type"
                 c:type="NcPlanckFICorTTTEEEParams">
      <doc xml:space="preserve">Planck Foregound and Instrument parameters, compatible with 2013 and 2015
releases (see [Planck 2015 results XI (2015)][XPlanckCollaboration2015a]).</doc>
      <member name="galf_ee_a_100"
              value="16"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_galf_EE_A_100"
              glib:nick="galf-ee-a-100">
        <doc xml:space="preserve">EE amplitude of Galactic dust power at $\ell = 500$ at $100\,$GHz (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="galf_ee_a_100_143"
              value="17"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_galf_EE_A_100_143"
              glib:nick="galf-ee-a-100-143">
        <doc xml:space="preserve">EE amplitude of Galactic dust power at $\ell = 500$ at $100 \times 143\,$GHz (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="galf_ee_a_100_217"
              value="18"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_galf_EE_A_100_217"
              glib:nick="galf-ee-a-100-217">
        <doc xml:space="preserve">EE amplitude of Galactic dust power at $\ell = 500$ at $100 \times 217\,$GHz (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="galf_ee_a_143"
              value="19"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_galf_EE_A_143"
              glib:nick="galf-ee-a-143">
        <doc xml:space="preserve">EE amplitude of Galactic dust power at $\ell = 500$ at $143\,$GHz (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="galf_ee_a_143_217"
              value="20"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_galf_EE_A_143_217"
              glib:nick="galf-ee-a-143-217">
        <doc xml:space="preserve">EE amplitude of Galactic dust power at $\ell = 500$ at $143 \times 217\,$GHz (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="galf_ee_a_217"
              value="21"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_galf_EE_A_217"
              glib:nick="galf-ee-a-217">
        <doc xml:space="preserve">EE amplitude of Galactic dust power at $\ell = 500$ at $217\,$GHz (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="galf_ee_index"
              value="22"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_galf_EE_index"
              glib:nick="galf-ee-index">
        <doc xml:space="preserve">the dust EE template slope</doc>
      </member>
      <member name="galf_te_a_100"
              value="23"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_galf_TE_A_100"
              glib:nick="galf-te-a-100">
        <doc xml:space="preserve">TE amplitude of Galactic dust power at $\ell = 500$ at $100\,$GHz (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="galf_te_a_100_143"
              value="24"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_galf_TE_A_100_143"
              glib:nick="galf-te-a-100-143">
        <doc xml:space="preserve">TE amplitude of Galactic dust power at $\ell = 500$ at $100 \times 143\,$GHz (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="galf_te_a_100_217"
              value="25"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_galf_TE_A_100_217"
              glib:nick="galf-te-a-100-217">
        <doc xml:space="preserve">TE amplitude of Galactic dust power at $\ell = 500$ at $100 \times 217\,$GHz (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="galf_te_a_143"
              value="26"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_galf_TE_A_143"
              glib:nick="galf-te-a-143">
        <doc xml:space="preserve">TE amplitude of Galactic dust power at $\ell = 500$ at $143\,$GHz (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="galf_te_a_143_217"
              value="27"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_galf_TE_A_143_217"
              glib:nick="galf-te-a-143-217">
        <doc xml:space="preserve">TE amplitude of Galactic dust power at $\ell = 500$ at $143 \times 217\,$GHz (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="galf_te_a_217"
              value="28"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_galf_TE_A_217"
              glib:nick="galf-te-a-217">
        <doc xml:space="preserve">TE amplitude of Galactic dust power at $\ell = 500$ at $217\,$GHz (in $\mu\mathrm{K}^2$)</doc>
      </member>
      <member name="galf_te_index"
              value="29"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_galf_TE_index"
              glib:nick="galf-te-index">
        <doc xml:space="preserve">the dust TE template slope</doc>
      </member>
      <member name="bleak_epsilon_0_0t_0e"
              value="30"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_0_0T_0E"
              glib:nick="bleak-epsilon-0-0t-0e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_0$, $100\times100$ TE</doc>
      </member>
      <member name="bleak_epsilon_1_0t_0e"
              value="31"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_1_0T_0E"
              glib:nick="bleak-epsilon-1-0t-0e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_1$, $100\times100$ TE</doc>
      </member>
      <member name="bleak_epsilon_2_0t_0e"
              value="32"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_2_0T_0E"
              glib:nick="bleak-epsilon-2-0t-0e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_2$, $100\times100$ TE</doc>
      </member>
      <member name="bleak_epsilon_3_0t_0e"
              value="33"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_3_0T_0E"
              glib:nick="bleak-epsilon-3-0t-0e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_3$, $100\times100$ TE</doc>
      </member>
      <member name="bleak_epsilon_4_0t_0e"
              value="34"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_4_0T_0E"
              glib:nick="bleak-epsilon-4-0t-0e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_4$, $100\times100$ TE</doc>
      </member>
      <member name="bleak_epsilon_0_0t_1e"
              value="35"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_0_0T_1E"
              glib:nick="bleak-epsilon-0-0t-1e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_0$, $100\times143$ TE</doc>
      </member>
      <member name="bleak_epsilon_1_0t_1e"
              value="36"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_1_0T_1E"
              glib:nick="bleak-epsilon-1-0t-1e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_1$, $100\times143$ TE</doc>
      </member>
      <member name="bleak_epsilon_2_0t_1e"
              value="37"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_2_0T_1E"
              glib:nick="bleak-epsilon-2-0t-1e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_2$, $100\times143$ TE</doc>
      </member>
      <member name="bleak_epsilon_3_0t_1e"
              value="38"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_3_0T_1E"
              glib:nick="bleak-epsilon-3-0t-1e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_3$, $100\times143$ TE</doc>
      </member>
      <member name="bleak_epsilon_4_0t_1e"
              value="39"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_4_0T_1E"
              glib:nick="bleak-epsilon-4-0t-1e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_4$, $100\times143$ TE</doc>
      </member>
      <member name="bleak_epsilon_0_0t_2e"
              value="40"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_0_0T_2E"
              glib:nick="bleak-epsilon-0-0t-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_0$, $100\times217$ TE</doc>
      </member>
      <member name="bleak_epsilon_1_0t_2e"
              value="41"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_1_0T_2E"
              glib:nick="bleak-epsilon-1-0t-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_1$, $100\times217$ TE</doc>
      </member>
      <member name="bleak_epsilon_2_0t_2e"
              value="42"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_2_0T_2E"
              glib:nick="bleak-epsilon-2-0t-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_2$, $100\times217$ TE</doc>
      </member>
      <member name="bleak_epsilon_3_0t_2e"
              value="43"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_3_0T_2E"
              glib:nick="bleak-epsilon-3-0t-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_3$, $100\times217$ TE</doc>
      </member>
      <member name="bleak_epsilon_4_0t_2e"
              value="44"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_4_0T_2E"
              glib:nick="bleak-epsilon-4-0t-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_4$, $100\times217$ TE</doc>
      </member>
      <member name="bleak_epsilon_0_1t_1e"
              value="45"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_0_1T_1E"
              glib:nick="bleak-epsilon-0-1t-1e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_0$, $143\times143$ TE</doc>
      </member>
      <member name="bleak_epsilon_1_1t_1e"
              value="46"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_1_1T_1E"
              glib:nick="bleak-epsilon-1-1t-1e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_1$, $143\times143$ TE</doc>
      </member>
      <member name="bleak_epsilon_2_1t_1e"
              value="47"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_2_1T_1E"
              glib:nick="bleak-epsilon-2-1t-1e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_2$, $143\times143$ TE</doc>
      </member>
      <member name="bleak_epsilon_3_1t_1e"
              value="48"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_3_1T_1E"
              glib:nick="bleak-epsilon-3-1t-1e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_3$, $143\times143$ TE</doc>
      </member>
      <member name="bleak_epsilon_4_1t_1e"
              value="49"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_4_1T_1E"
              glib:nick="bleak-epsilon-4-1t-1e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_4$, $143\times143$ TE</doc>
      </member>
      <member name="bleak_epsilon_0_1t_2e"
              value="50"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_0_1T_2E"
              glib:nick="bleak-epsilon-0-1t-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_0$, $143\times217$ TE</doc>
      </member>
      <member name="bleak_epsilon_1_1t_2e"
              value="51"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_1_1T_2E"
              glib:nick="bleak-epsilon-1-1t-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_1$, $143\times217$ TE</doc>
      </member>
      <member name="bleak_epsilon_2_1t_2e"
              value="52"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_2_1T_2E"
              glib:nick="bleak-epsilon-2-1t-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_2$, $143\times217$ TE</doc>
      </member>
      <member name="bleak_epsilon_3_1t_2e"
              value="53"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_3_1T_2E"
              glib:nick="bleak-epsilon-3-1t-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_3$, $143\times217$ TE</doc>
      </member>
      <member name="bleak_epsilon_4_1t_2e"
              value="54"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_4_1T_2E"
              glib:nick="bleak-epsilon-4-1t-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_4$, $143\times217$ TE</doc>
      </member>
      <member name="bleak_epsilon_0_2t_2e"
              value="55"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_0_2T_2E"
              glib:nick="bleak-epsilon-0-2t-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_0$, $217\times217$ TE</doc>
      </member>
      <member name="bleak_epsilon_1_2t_2e"
              value="56"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_1_2T_2E"
              glib:nick="bleak-epsilon-1-2t-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_1$, $217\times217$ TE</doc>
      </member>
      <member name="bleak_epsilon_2_2t_2e"
              value="57"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_2_2T_2E"
              glib:nick="bleak-epsilon-2-2t-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_2$, $217\times217$ TE</doc>
      </member>
      <member name="bleak_epsilon_3_2t_2e"
              value="58"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_3_2T_2E"
              glib:nick="bleak-epsilon-3-2t-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_3$, $217\times217$ TE</doc>
      </member>
      <member name="bleak_epsilon_4_2t_2e"
              value="59"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_4_2T_2E"
              glib:nick="bleak-epsilon-4-2t-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_4$, $217\times217$ TE</doc>
      </member>
      <member name="bleak_epsilon_0_0e_0e"
              value="60"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_0_0E_0E"
              glib:nick="bleak-epsilon-0-0e-0e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_0$, $100\times100$ EE</doc>
      </member>
      <member name="bleak_epsilon_1_0e_0e"
              value="61"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_1_0E_0E"
              glib:nick="bleak-epsilon-1-0e-0e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_1$, $100\times100$ EE</doc>
      </member>
      <member name="bleak_epsilon_2_0e_0e"
              value="62"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_2_0E_0E"
              glib:nick="bleak-epsilon-2-0e-0e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_2$, $100\times100$ EE</doc>
      </member>
      <member name="bleak_epsilon_3_0e_0e"
              value="63"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_3_0E_0E"
              glib:nick="bleak-epsilon-3-0e-0e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_3$, $100\times100$ EE</doc>
      </member>
      <member name="bleak_epsilon_4_0e_0e"
              value="64"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_4_0E_0E"
              glib:nick="bleak-epsilon-4-0e-0e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_4$, $100\times100$ EE</doc>
      </member>
      <member name="bleak_epsilon_0_0e_1e"
              value="65"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_0_0E_1E"
              glib:nick="bleak-epsilon-0-0e-1e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_0$, $100\times143$ EE</doc>
      </member>
      <member name="bleak_epsilon_1_0e_1e"
              value="66"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_1_0E_1E"
              glib:nick="bleak-epsilon-1-0e-1e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_1$, $100\times143$ EE</doc>
      </member>
      <member name="bleak_epsilon_2_0e_1e"
              value="67"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_2_0E_1E"
              glib:nick="bleak-epsilon-2-0e-1e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_2$, $100\times143$ EE</doc>
      </member>
      <member name="bleak_epsilon_3_0e_1e"
              value="68"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_3_0E_1E"
              glib:nick="bleak-epsilon-3-0e-1e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_3$, $100\times143$ EE</doc>
      </member>
      <member name="bleak_epsilon_4_0e_1e"
              value="69"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_4_0E_1E"
              glib:nick="bleak-epsilon-4-0e-1e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_4$, $100\times143$ EE</doc>
      </member>
      <member name="bleak_epsilon_0_0e_2e"
              value="70"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_0_0E_2E"
              glib:nick="bleak-epsilon-0-0e-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_0$, $100\times217$ EE</doc>
      </member>
      <member name="bleak_epsilon_1_0e_2e"
              value="71"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_1_0E_2E"
              glib:nick="bleak-epsilon-1-0e-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_1$, $100\times217$ EE</doc>
      </member>
      <member name="bleak_epsilon_2_0e_2e"
              value="72"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_2_0E_2E"
              glib:nick="bleak-epsilon-2-0e-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_2$, $100\times217$ EE</doc>
      </member>
      <member name="bleak_epsilon_3_0e_2e"
              value="73"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_3_0E_2E"
              glib:nick="bleak-epsilon-3-0e-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_3$, $100\times217$ EE</doc>
      </member>
      <member name="bleak_epsilon_4_0e_2e"
              value="74"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_4_0E_2E"
              glib:nick="bleak-epsilon-4-0e-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_4$, $100\times217$ EE</doc>
      </member>
      <member name="bleak_epsilon_0_1e_1e"
              value="75"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_0_1E_1E"
              glib:nick="bleak-epsilon-0-1e-1e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_0$, $143\times143$ EE</doc>
      </member>
      <member name="bleak_epsilon_1_1e_1e"
              value="76"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_1_1E_1E"
              glib:nick="bleak-epsilon-1-1e-1e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_1$, $143\times143$ EE</doc>
      </member>
      <member name="bleak_epsilon_2_1e_1e"
              value="77"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_2_1E_1E"
              glib:nick="bleak-epsilon-2-1e-1e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_2$, $143\times143$ EE</doc>
      </member>
      <member name="bleak_epsilon_3_1e_1e"
              value="78"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_3_1E_1E"
              glib:nick="bleak-epsilon-3-1e-1e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_3$, $143\times143$ EE</doc>
      </member>
      <member name="bleak_epsilon_4_1e_1e"
              value="79"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_4_1E_1E"
              glib:nick="bleak-epsilon-4-1e-1e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_4$, $143\times143$ EE</doc>
      </member>
      <member name="bleak_epsilon_0_1e_2e"
              value="80"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_0_1E_2E"
              glib:nick="bleak-epsilon-0-1e-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_0$, $143\times217$ EE</doc>
      </member>
      <member name="bleak_epsilon_1_1e_2e"
              value="81"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_1_1E_2E"
              glib:nick="bleak-epsilon-1-1e-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_1$, $143\times217$ EE</doc>
      </member>
      <member name="bleak_epsilon_2_1e_2e"
              value="82"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_2_1E_2E"
              glib:nick="bleak-epsilon-2-1e-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_2$, $143\times217$ EE</doc>
      </member>
      <member name="bleak_epsilon_3_1e_2e"
              value="83"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_3_1E_2E"
              glib:nick="bleak-epsilon-3-1e-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_3$, $143\times217$ EE</doc>
      </member>
      <member name="bleak_epsilon_4_1e_2e"
              value="84"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_4_1E_2E"
              glib:nick="bleak-epsilon-4-1e-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_4$, $143\times217$ EE</doc>
      </member>
      <member name="bleak_epsilon_0_2e_2e"
              value="85"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_0_2E_2E"
              glib:nick="bleak-epsilon-0-2e-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_0$, $217\times217$ EE</doc>
      </member>
      <member name="bleak_epsilon_1_2e_2e"
              value="86"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_1_2E_2E"
              glib:nick="bleak-epsilon-1-2e-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_1$, $217\times217$ EE</doc>
      </member>
      <member name="bleak_epsilon_2_2e_2e"
              value="87"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_2_2E_2E"
              glib:nick="bleak-epsilon-2-2e-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_2$, $217\times217$ EE</doc>
      </member>
      <member name="bleak_epsilon_3_2e_2e"
              value="88"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_3_2E_2E"
              glib:nick="bleak-epsilon-3-2e-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_3$, $217\times217$ EE</doc>
      </member>
      <member name="bleak_epsilon_4_2e_2e"
              value="89"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_bleak_epsilon_4_2E_2E"
              glib:nick="bleak-epsilon-4-2e-2e">
        <doc xml:space="preserve">beam-leakage parameter, $\epsilon_4$, $217\times217$ EE</doc>
      </member>
      <member name="calib_100p"
              value="90"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_calib_100P"
              glib:nick="calib-100p">
        <doc xml:space="preserve">Calibration of the 100 EE spectra</doc>
      </member>
      <member name="calib_143p"
              value="91"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_calib_143P"
              glib:nick="calib-143p">
        <doc xml:space="preserve">Calibration of the 143 EE spectra</doc>
      </member>
      <member name="calib_217p"
              value="92"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_calib_217P"
              glib:nick="calib-217p">
        <doc xml:space="preserve">Calibration of the 217 EE spectra</doc>
      </member>
      <member name="a_pol"
              value="93"
              c:identifier="NC_PLANCK_FI_COR_TTTEEE_A_pol"
              glib:nick="a-pol">
        <doc xml:space="preserve">Calibration of the polarization relative to the temperature</doc>
      </member>
    </enumeration>
    <class name="PowspecML"
           c:symbol-prefix="powspec_ml"
           c:type="NcPowspecML"
           parent="NumCosmoMath.Powspec"
           abstract="1"
           glib:type-name="NcPowspecML"
           glib:get-type="nc_powspec_ml_get_type"
           glib:type-struct="PowspecMLClass">
      <constructor name="new_from_name"
                   c:identifier="nc_powspec_ml_new_from_name">
        <doc xml:space="preserve">This function returns a new #NcPowspecML whose type is defined by @ps_ml_name.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcPowspecML.</doc>
          <type name="PowspecML" c:type="NcPowspecML*"/>
        </return-value>
        <parameters>
          <parameter name="ps_ml_name" transfer-ownership="none">
            <doc xml:space="preserve">string which specifies the linear matter power spectrum object to be used</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_powspec_ml_clear">
        <doc xml:space="preserve">Decreses the reference count of *@ps_ml atomically and sets the pointer *@ps_ml to null.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ps_ml" transfer-ownership="none">
            <doc xml:space="preserve">a #NcPowspecML</doc>
            <type name="PowspecML" c:type="NcPowspecML**"/>
          </parameter>
        </parameters>
      </function>
      <method name="free" c:identifier="nc_powspec_ml_free">
        <doc xml:space="preserve">Decreases the reference count of @ps_ml atomically.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps_ml" transfer-ownership="none">
            <doc xml:space="preserve">a #NcPowspecML</doc>
            <type name="PowspecML" c:type="NcPowspecML*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_powspec_ml_ref">
        <doc xml:space="preserve">Increases the reference count of @ps_ml atomically.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@ps_ml.</doc>
          <type name="PowspecML" c:type="NcPowspecML*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps_ml" transfer-ownership="none">
            <doc xml:space="preserve">a #NcPowspecML</doc>
            <type name="PowspecML" c:type="NcPowspecML*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Powspec" c:type="NcmPowspec"/>
      </field>
    </class>
    <class name="PowspecMLCBE"
           c:symbol-prefix="powspec_ml_cbe"
           c:type="NcPowspecMLCBE"
           parent="PowspecML"
           glib:type-name="NcPowspecMLCBE"
           glib:get-type="nc_powspec_ml_cbe_get_type"
           glib:type-struct="PowspecMLCBEClass">
      <constructor name="new" c:identifier="nc_powspec_ml_cbe_new">
        <doc xml:space="preserve">Creates a new #NcPowspecMLCBE from a new #NcCBE.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcPowspecMLCBE.</doc>
          <type name="PowspecMLCBE" c:type="NcPowspecMLCBE*"/>
        </return-value>
      </constructor>
      <constructor name="new_full" c:identifier="nc_powspec_ml_cbe_new_full">
        <doc xml:space="preserve">Creates a new #NcPowspecMLCBE from @cbe.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcPowspecMLCBE.</doc>
          <type name="PowspecMLCBE" c:type="NcPowspecMLCBE*"/>
        </return-value>
        <parameters>
          <parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="peek_cbe" c:identifier="nc_powspec_ml_cbe_peek_cbe">
        <doc xml:space="preserve">Peeks the #NcCBE inside @ps_cbe.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #NcCBE inside @ps_cbe.</doc>
          <type name="CBE" c:type="NcCBE*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps_cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcPowspecMLCBE</doc>
            <type name="PowspecMLCBE" c:type="NcPowspecMLCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_cbe" c:identifier="nc_powspec_ml_cbe_set_cbe">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps_cbe" transfer-ownership="none">
            <type name="PowspecMLCBE" c:type="NcPowspecMLCBE*"/>
          </instance-parameter>
          <parameter name="cbe" transfer-ownership="none">
            <type name="CBE" c:type="NcCBE*"/>
          </parameter>
        </parameters>
      </method>
      <property name="cbe" writable="1" transfer-ownership="none">
        <type name="CBE"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="PowspecML" c:type="NcPowspecML"/>
      </field>
      <field name="cbe" readable="0" private="1">
        <type name="CBE" c:type="NcCBE*"/>
      </field>
      <field name="lnPk" readable="0" private="1">
        <type name="NumCosmoMath.Spline2d" c:type="NcmSpline2d*"/>
      </field>
      <field name="eh" readable="0" private="1">
        <type name="PowspecML" c:type="NcPowspecML*"/>
      </field>
    </class>
    <record name="PowspecMLCBEClass"
            c:type="NcPowspecMLCBEClass"
            glib:is-gtype-struct-for="PowspecMLCBE">
      <field name="parent_class" readable="0" private="1">
        <type name="PowspecMLClass" c:type="NcPowspecMLClass"/>
      </field>
    </record>
    <record name="PowspecMLClass"
            c:type="NcPowspecMLClass"
            glib:is-gtype-struct-for="PowspecML">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.PowspecClass" c:type="NcmPowspecClass"/>
      </field>
    </record>
    <class name="PowspecMLTransfer"
           c:symbol-prefix="powspec_ml_transfer"
           c:type="NcPowspecMLTransfer"
           parent="PowspecML"
           glib:type-name="NcPowspecMLTransfer"
           glib:get-type="nc_powspec_ml_transfer_get_type"
           glib:type-struct="PowspecMLTransferClass">
      <constructor name="new" c:identifier="nc_powspec_ml_transfer_new">
        <doc xml:space="preserve">Creates a new #NcPowspecMLTransfer from the transfer
function @tf.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcPowspecMLTransfer.</doc>
          <type name="PowspecMLTransfer" c:type="NcPowspecMLTransfer*"/>
        </return-value>
        <parameters>
          <parameter name="tf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcTransferFunc</doc>
            <type name="TransferFunc" c:type="NcTransferFunc*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="peek_gf" c:identifier="nc_powspec_ml_transfer_peek_gf">
        <doc xml:space="preserve">Peeks the #NcGrowthFunc inside @ps_mlt.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #NcGrowthFunc inside @ps_mlt.</doc>
          <type name="GrowthFunc" c:type="NcGrowthFunc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps_mlt" transfer-ownership="none">
            <doc xml:space="preserve">a #NcPowspecMLTransfer</doc>
            <type name="PowspecMLTransfer" c:type="NcPowspecMLTransfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_tf" c:identifier="nc_powspec_ml_transfer_peek_tf">
        <doc xml:space="preserve">Peeks the #NcTransferFunc inside @ps_mlt.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #NcTransferFunc inside @ps_mlt.</doc>
          <type name="TransferFunc" c:type="NcTransferFunc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps_mlt" transfer-ownership="none">
            <doc xml:space="preserve">a #NcPowspecMLTransfer</doc>
            <type name="PowspecMLTransfer" c:type="NcPowspecMLTransfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_gf" c:identifier="nc_powspec_ml_transfer_set_gf">
        <doc xml:space="preserve">Sets the #NcGrowthFunc to @gf.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps_mlt" transfer-ownership="none">
            <doc xml:space="preserve">a #NcPowspecMLTransfer</doc>
            <type name="PowspecMLTransfer" c:type="NcPowspecMLTransfer*"/>
          </instance-parameter>
          <parameter name="gf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcGrowthFunc</doc>
            <type name="GrowthFunc" c:type="NcGrowthFunc*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tf" c:identifier="nc_powspec_ml_transfer_set_tf">
        <doc xml:space="preserve">Sets the #NcTransferFunc to @tf.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps_mlt" transfer-ownership="none">
            <doc xml:space="preserve">a #NcPowspecMLTransfer</doc>
            <type name="PowspecMLTransfer" c:type="NcPowspecMLTransfer*"/>
          </instance-parameter>
          <parameter name="tf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcTransferFunc</doc>
            <type name="TransferFunc" c:type="NcTransferFunc*"/>
          </parameter>
        </parameters>
      </method>
      <property name="growth" writable="1" transfer-ownership="none">
        <type name="GrowthFunc"/>
      </property>
      <property name="transfer"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="TransferFunc"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="PowspecML" c:type="NcPowspecML"/>
      </field>
      <field name="tf" readable="0" private="1">
        <type name="TransferFunc" c:type="NcTransferFunc*"/>
      </field>
      <field name="gf" readable="0" private="1">
        <type name="GrowthFunc" c:type="NcGrowthFunc*"/>
      </field>
      <field name="Pm_k2Pzeta" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="PowspecMLTransferClass"
            c:type="NcPowspecMLTransferClass"
            glib:is-gtype-struct-for="PowspecMLTransfer">
      <field name="parent_class" readable="0" private="1">
        <type name="PowspecMLClass" c:type="NcPowspecMLClass"/>
      </field>
    </record>
    <class name="PowspecMNL"
           c:symbol-prefix="powspec_mnl"
           c:type="NcPowspecMNL"
           parent="NumCosmoMath.Powspec"
           abstract="1"
           glib:type-name="NcPowspecMNL"
           glib:get-type="nc_powspec_mnl_get_type"
           glib:type-struct="PowspecMNLClass">
      <constructor name="new_from_name"
                   c:identifier="nc_powspec_mnl_new_from_name">
        <doc xml:space="preserve">This function returns a new #NcPowspecMNL whose type is defined by @ps_mnl_name.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcPowspecMNL.</doc>
          <type name="PowspecMNL" c:type="NcPowspecMNL*"/>
        </return-value>
        <parameters>
          <parameter name="ps_mnl_name" transfer-ownership="none">
            <doc xml:space="preserve">string which specifies the matter linear power spectrum object to be used</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_powspec_mnl_clear">
        <doc xml:space="preserve">Decrese the reference count of *@ps_mnl atomically and sets the pointer *@ps_mnl to null.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ps_mnl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="PowspecMNL" c:type="NcPowspecMNL**"/>
          </parameter>
        </parameters>
      </function>
      <method name="free" c:identifier="nc_powspec_mnl_free">
        <doc xml:space="preserve">Decreases the reference count of @ps_mnl atomically.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps_mnl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="PowspecMNL" c:type="NcPowspecMNL*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_powspec_mnl_ref">
        <doc xml:space="preserve">Increases the reference count of @ps_mnl atomically.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@ps_mnl.</doc>
          <type name="PowspecMNL" c:type="NcPowspecMNL*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ps_mnl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSetCatalog</doc>
            <type name="PowspecMNL" c:type="NcPowspecMNL*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Powspec" c:type="NcmPowspec"/>
      </field>
    </class>
    <record name="PowspecMNLClass"
            c:type="NcPowspecMNLClass"
            glib:is-gtype-struct-for="PowspecMNL">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.PowspecClass" c:type="NcmPowspecClass"/>
      </field>
    </record>
    <class name="PowspecMNLHaloFit"
           c:symbol-prefix="powspec_mnl_halofit"
           c:type="NcPowspecMNLHaloFit"
           parent="PowspecMNL"
           glib:type-name="NcPowspecMNLHaloFit"
           glib:get-type="nc_powspec_mnl_halofit_get_type"
           glib:type-struct="PowspecMNLHaloFitClass">
      <constructor name="new" c:identifier="nc_powspec_mnl_halofit_new">
        <doc xml:space="preserve">Creates a new #NcPowspecMNLHaloFit from the transfer
function @tf.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcPowspecMNLHaloFit.</doc>
          <type name="PowspecMNLHaloFit" c:type="NcPowspecMNLHaloFit*"/>
        </return-value>
        <parameters>
          <parameter name="psml" transfer-ownership="none">
            <doc xml:space="preserve">a #NcPowspecML</doc>
            <type name="PowspecML" c:type="NcPowspecML*"/>
          </parameter>
          <parameter name="zmaxnl" transfer-ownership="none">
            <doc xml:space="preserve">a gdouble</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="reltol" transfer-ownership="none">
            <doc xml:space="preserve">a gdouble</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="pkequal" c:identifier="nc_powspec_mnl_halofit_pkequal">
        <doc xml:space="preserve">Whether to use PKEqual to adjust the HaloFit formula when using a #NcHICosmoDELinder
model, see [Casarini et al. (2009)][XCasarini2009] and [Casarini et al. (2016)][XCasarini2016].</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pshf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcPowspecMNLHaloFit</doc>
            <type name="PowspecMNLHaloFit" c:type="NcPowspecMNLHaloFit*"/>
          </instance-parameter>
          <parameter name="on" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_kbounds_from_ml"
              c:identifier="nc_powspec_mnl_halofit_set_kbounds_from_ml">
        <doc xml:space="preserve">Sets mode $k$ boundaries from the linear matter power spectrum.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pshf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcPowspecMNLHaloFit</doc>
            <type name="PowspecMNLHaloFit" c:type="NcPowspecMNLHaloFit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="power-spec"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="PowspecML"/>
      </property>
      <property name="reltol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="use-pkequal"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="zmaxnl"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="PowspecMNL" c:type="NcPowspecMNL"/>
      </field>
      <field name="psml" readable="0" private="1">
        <type name="PowspecML" c:type="NcPowspecML*"/>
      </field>
      <field name="zmaxnl" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="znl" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="reltol" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="Rsigma" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="neff" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="Cur" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="psml_gauss" readable="0" private="1">
        <type name="NumCosmoMath.PowspecFilter" c:type="NcmPowspecFilter*"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PowspecMNLHaloFitPrivate"
              c:type="NcPowspecMNLHaloFitPrivate*"/>
      </field>
    </class>
    <record name="PowspecMNLHaloFitClass"
            c:type="NcPowspecMNLHaloFitClass"
            glib:is-gtype-struct-for="PowspecMNLHaloFit">
      <field name="parent_class" readable="0" private="1">
        <type name="PowspecMNLClass" c:type="NcPowspecMNLClass"/>
      </field>
    </record>
    <record name="PowspecMNLHaloFitPrivate"
            c:type="NcPowspecMNLHaloFitPrivate"
            disguised="1">
    </record>
    <class name="PriorQSplineCont"
           c:symbol-prefix="prior_qspline_cont"
           c:type="NcPriorQSplineCont"
           parent="NumCosmoMath.Prior"
           glib:type-name="NcPriorQSplineCont"
           glib:get-type="nc_prior_qspline_cont_get_type"
           glib:type-struct="PriorQSplineContClass">
      <constructor name="new" c:identifier="nc_prior_qspline_cont_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #NcPriorQSplineCont.</doc>
          <type name="PriorQSplineCont" c:type="NcPriorQSplineCont*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Prior" c:type="NcmPrior"/>
      </field>
    </class>
    <record name="PriorQSplineContClass"
            c:type="NcPriorQSplineContClass"
            glib:is-gtype-struct-for="PriorQSplineCont">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.PriorClass" c:type="NcmPriorClass"/>
      </field>
    </record>
    <constant name="RECOMB_SEAGER_HUMMER_HEI_CASE_B_P"
              value="0.711000"
              c:type="NC_RECOMB_SEAGER_HUMMER_HEI_CASE_B_P">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="RECOMB_SEAGER_HUMMER_HEI_CASE_B_P_TRIP"
              value="0.761000"
              c:type="NC_RECOMB_SEAGER_HUMMER_HEI_CASE_B_P_TRIP">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <class name="Recomb"
           c:symbol-prefix="recomb"
           c:type="NcRecomb"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NcRecomb"
           glib:get-type="nc_recomb_get_type"
           glib:type-struct="RecombClass">
      <constructor name="new_from_name" c:identifier="nc_recomb_new_from_name">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcRecomb.</doc>
          <type name="Recomb" c:type="NcRecomb*"/>
        </return-value>
        <parameters>
          <parameter name="recomb_name" transfer-ownership="none">
            <doc xml:space="preserve">a string representing a #NcRecomb object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="HI_ion_saha" c:identifier="nc_recomb_HI_ion_saha">
        <doc xml:space="preserve">Calculate the equilibrium ionized/non-ionized hydrogen abundance ratio
$X_{\HyII}X_\e / X_{\HyI}$. See Eq. \eqref{eq:saha:HyI}.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the abundance ratio $X_{\HyII}X_\e / X_{\HyI}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">redshift factor x.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="HeII_ion_saha" c:identifier="nc_recomb_HeII_ion_saha">
        <doc xml:space="preserve">Calculate the equilibrium double/single ionized helium ratio
($X_{\HeIII}X_\e/X_{\HeII}$). See Eq. \eqref{eq:saha:HeII}.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the ratio $X_{\HeIII}X_\e/X_{\HeII}$</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">redshift factor $x$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="HeII_ion_saha_x"
                c:identifier="nc_recomb_HeII_ion_saha_x">
        <doc xml:space="preserve">Calculate the redshift where the ratio $$X_{\HeIII}X_\e/X_{\HeII} = f.$$

This calculation is done by finding the value of $x$ where
$$\frac{e^{-\HeII_{1s}/(k_BT)}}{4n_{\Hy}\lambda_{\e}^3} = f.$$</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of $x$ where the ratio @f occur.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">$X_{\HeIII}X_\e/X_{\HeII}$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="HeII_ion_saha_x_by_HeIII_He"
                c:identifier="nc_recomb_HeII_ion_saha_x_by_HeIII_He">
        <doc xml:space="preserve">Calculate the redshift where the ratio $$X_{\HeIII}/X_{\He} = f.$$

This calculation is done assuming that hydrogen and helium are
fully ionized, i.e., $\HyI = 0 = \HeI$. In this case
$$\frac{X_{\HeIII}X_\e}{X_{\HeII}} =
\frac{f}{1-f}\left[1 + X_\He(1+f)\right].$$</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of $x$ where the ratio @f occur.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="f" transfer-ownership="none">
            <doc xml:space="preserve">value of $X_{\HeIII}/X_{\He}$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="HeI_ion_saha" c:identifier="nc_recomb_HeI_ion_saha">
        <doc xml:space="preserve">Calculate the equilibrium single/non-ionized helium ratio
$X_{\HeII}X_\e/X_{\HeI}$. See Eq. \eqref{eq:saha:HeI}.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the ratio $X_{\HeII}X_\e/X_{\HeI}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">redshift factor $x$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="He_fully_ionized_Xe"
                c:identifier="nc_recomb_He_fully_ionized_Xe">
        <doc xml:space="preserve">Assuming that all helium is single or double ionized and all hydrogen is
ionized we have $$X_\e = 1 + X_\HeII + 2X_\HeIII,\quad X_\He = X_\HeII +
X_\HeIII,$$ thus, $$X_\HeIII = X_\e-X_\He-1,\quad X_\HeII = 1 + 2X_\He -
X_\e.$$ Using nc_recomb_HeII_ion_saha() and nc_hicosmo_XHe() we obtain
$X_\e$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$X_\e$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">redshift factor $x$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="He_fully_ionized_dtau_dlambda"
                c:identifier="nc_recomb_He_fully_ionized_dtau_dlambda">
        <doc xml:space="preserve">The derivative of the optical depth [Eq. \eqref{eq:def:dtaudlambda}], considering
fully ionized helium and hydrogen [nc_recomb_He_fully_ionized_Xe ()].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$d\tau/d\lambda$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <doc xml:space="preserve">$\lambda$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <function name="clear" c:identifier="nc_recomb_clear">
        <doc xml:space="preserve">Decreases the reference count of *@recomb if
*@recomb is not NULL, then sets *@recomb to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb**"/>
          </parameter>
        </parameters>
      </function>
      <function name="dtau_dlambda_Xe"
                c:identifier="nc_recomb_dtau_dlambda_Xe">
        <doc xml:space="preserve">The derivative of the optical depth [Eq. \eqref{eq:def:dtaudlambda}] over
the ionization fraction $X_\e$ [Eq. \eqref{eq:def:Xe}].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$X_\e^{-1}d\tau/d\lambda$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <doc xml:space="preserve">$\lambda$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="prepare" invoker="prepare">
        <doc xml:space="preserve">Prepare the object using the model @cosmo.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="Xe" c:identifier="nc_recomb_Xe">
        <doc xml:space="preserve">Calculates the value of $X_\e$ at $x$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$X_\e$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <doc xml:space="preserve">$\lambda$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="d2tau_dlambda2" c:identifier="nc_recomb_d2tau_dlambda2">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$d^2\tau/d\lambda^2$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <doc xml:space="preserve">$\lambda$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="d2v_tau_dlambda2"
              c:identifier="nc_recomb_d2v_tau_dlambda2">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$d2v_\tau/d\lambda^2$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <doc xml:space="preserve">$\lambda$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="d3tau_dlambda3" c:identifier="nc_recomb_d3tau_dlambda3">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$d^3\tau/d\lambda^3$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <doc xml:space="preserve">$\lambda$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="dtau_dlambda" c:identifier="nc_recomb_dtau_dlambda">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$d\tau/d\lambda$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <doc xml:space="preserve">$\lambda$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="dtau_dx" c:identifier="nc_recomb_dtau_dx">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$d\tau/dx$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <doc xml:space="preserve">$\lambda$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="dv_tau_dlambda" c:identifier="nc_recomb_dv_tau_dlambda">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$dv_\tau/d\lambda$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <doc xml:space="preserve">$\lambda$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="equilibrium_XHI" c:identifier="nc_recomb_equilibrium_XHI">
        <doc xml:space="preserve">Calculates the hydrogen-I fraction $X_\HyI$ assuming equilibrium at all times.
It solves the system containing all Saha's equations Eqs \eqref{eq:saha:HyI},
\eqref{eq:saha:HeI} and \eqref{eq:saha:HeII} and the constraints Eq
\eqref{eq:Hy:add}, \eqref{eq:He:add} and \eqref{eq:def:Xe}.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$X_\HyI$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">$x$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="equilibrium_XHII"
              c:identifier="nc_recomb_equilibrium_XHII">
        <doc xml:space="preserve">Calculates the hydrogen-II fraction $X_\HyII$ assuming equilibrium at all times.
It solves the system containing all Saha's equations Eqs \eqref{eq:saha:HyI},
\eqref{eq:saha:HeI} and \eqref{eq:saha:HeII} and the constraints Eq
\eqref{eq:Hy:add}, \eqref{eq:He:add} and \eqref{eq:def:Xe}.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$X_\HyII$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">$x$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="equilibrium_XHeI"
              c:identifier="nc_recomb_equilibrium_XHeI">
        <doc xml:space="preserve">Calculates the helium-I fraction $X_\HeI$ assuming equilibrium at all times.
It solves the system containing all Saha's equations Eqs \eqref{eq:saha:HyI},
\eqref{eq:saha:HeI} and \eqref{eq:saha:HeII} and the constraints Eq
\eqref{eq:Hy:add}, \eqref{eq:He:add} and \eqref{eq:def:Xe}.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$X_\HyII$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">$x$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="equilibrium_XHeII"
              c:identifier="nc_recomb_equilibrium_XHeII">
        <doc xml:space="preserve">Calculates the helium-II fraction $X_\HeII$ assuming equilibrium at all times.
It solves the system containing all Saha's equations Eqs \eqref{eq:saha:HyI},
\eqref{eq:saha:HeI} and \eqref{eq:saha:HeII} and the constraints Eq
\eqref{eq:Hy:add}, \eqref{eq:He:add} and \eqref{eq:def:Xe}.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$X_\HyII$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">$x$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="equilibrium_XHeIII"
              c:identifier="nc_recomb_equilibrium_XHeIII">
        <doc xml:space="preserve">Calculates the helium-III fraction $X_\HeIII$ assuming equilibrium at all times.
It solves the system containing all Saha's equations Eqs \eqref{eq:saha:HyI},
\eqref{eq:saha:HeI} and \eqref{eq:saha:HeII} and the constraints Eq
\eqref{eq:Hy:add}, \eqref{eq:He:add} and \eqref{eq:def:Xe}.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$X_\HyII$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">$x$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="equilibrium_Xe" c:identifier="nc_recomb_equilibrium_Xe">
        <doc xml:space="preserve">Calculates the ionization fraction $X_\e$ assuming equilibrium at all times.
It solves the system containing all Saha's equations Eqs \eqref{eq:saha:HyI},
\eqref{eq:saha:HeI} and \eqref{eq:saha:HeII} and the constraints Eq
\eqref{eq:Hy:add}, \eqref{eq:He:add} and \eqref{eq:def:Xe}.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$X_\e$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">$x$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_recomb_free">
        <doc xml:space="preserve">Decreases the reference count of @recomb.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="log_v_tau" c:identifier="nc_recomb_log_v_tau">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\log(v_\tau)$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <doc xml:space="preserve">$\lambda$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="nc_recomb_prepare">
        <doc xml:space="preserve">Prepare the object using the model @cosmo.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_if_needed"
              c:identifier="nc_recomb_prepare_if_needed">
        <doc xml:space="preserve">Prepare the object using the model @cosmo if it was changed
since last preparation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_recomb_ref">
        <doc xml:space="preserve">Increases the reference count of @recomb.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@recomb.</doc>
          <type name="Recomb" c:type="NcRecomb*"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="tau" c:identifier="nc_recomb_tau">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\tau$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <doc xml:space="preserve">$\lambda$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="tau_cutoff" c:identifier="nc_recomb_tau_cutoff">
        <doc xml:space="preserve">Calculate the value of $\lambda$ where the optical depth
[Eq \eqref{eq:def:tau}] attains a value such that
$e^{-\tau(\lambda_\text{cutoff})} = \epsilon_\text{double}$, i.e.,
is equal to the minimum value of a double which add to one.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\lambda_\text{cutoff}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="tau_lambda0_lambda1"
              c:identifier="nc_recomb_tau_lambda0_lambda1">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\tau(\lambda_1) - \tau(\lambda_0)$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lambda0" transfer-ownership="none">
            <doc xml:space="preserve">$\lambda_0$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="lambda1" transfer-ownership="none">
            <doc xml:space="preserve">$\lambda_1$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="tau_zdrag" c:identifier="nc_recomb_tau_zdrag">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="tau_zstar" c:identifier="nc_recomb_tau_zstar">
        <doc xml:space="preserve">Calculate the value of $\lambda$ where the optical depth
[Eq \eqref{eq:def:tau}] is equal to one, i.e., $\tau(\lambda^\star) = 1$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\lambda^\star$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="v_tau" c:identifier="nc_recomb_v_tau">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$v_\tau$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="lambda" transfer-ownership="none">
            <doc xml:space="preserve">$\lambda$.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="v_tau_lambda_features"
              c:identifier="nc_recomb_v_tau_lambda_features">
        <doc xml:space="preserve">Calculate the maximum of the visibility function [Eq \eqref{eq:def:vtau}], i.e,
the value of $\lambda_\text{max}$ where
$dv_\tau(\lambda_\text{max})/d\lambda = 0$, and the values where the
visibility drop to $v_\tau(\lambda_\text{max})e^{-\text{logref}}$ to the left
$\lambda_l$ and to the right $\lambda_u$ of $\lambda_\text{max}$.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="logref" transfer-ownership="none">
            <doc xml:space="preserve">the logarithm of the reference scale.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="lambda_max"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\lambda_\text{max}$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="lambda_l"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\lambda_l$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="lambda_u"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">$\lambda_u$</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="v_tau_lambda_mode"
              c:identifier="nc_recomb_v_tau_lambda_mode">
        <doc xml:space="preserve">Calculate the maximum of the visibility function [Eq \eqref{eq:def:vtau}],
the value of $\lambda_\text{max}$ where
$dv_\tau(\lambda_\text{max})/d\lambda = 0$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\lambda_\text{max}$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecomb.</doc>
            <type name="Recomb" c:type="NcRecomb*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <property name="init-frac"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="prec"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The precision used in the calculations.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="zi" writable="1" construct="1" transfer-ownership="none">
        <doc xml:space="preserve">Initial redshift to prepare the recombination functions.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="zi" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lambdai" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="lambdaf" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="prec" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="init_frac" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="fmin" introspectable="0" readable="0" private="1">
        <type c:type="gsl_min_fminimizer*"/>
      </field>
      <field name="fsol" introspectable="0" readable="0" private="1">
        <type c:type="gsl_root_fsolver*"/>
      </field>
      <field name="Xe_s" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="dtau_dlambda_s" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="tau_s" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="ctrl_cosmo" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
      <field name="ctrl_reion" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
    </class>
    <class name="RecombCBE"
           c:symbol-prefix="recomb_cbe"
           c:type="NcRecombCBE"
           parent="Recomb"
           glib:type-name="NcRecombCBE"
           glib:get-type="nc_recomb_cbe_get_type"
           glib:type-struct="RecombCBEClass">
      <constructor name="full_new" c:identifier="nc_recomb_cbe_full_new">
        <doc xml:space="preserve">Creates a new #NcRecombCBE using default properties
and @cbe as the Class backend object #NcCBE.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcRecombCBE.</doc>
          <type name="RecombCBE" c:type="NcRecombCBE*"/>
        </return-value>
        <parameters>
          <parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE object</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new" c:identifier="nc_recomb_cbe_new">
        <doc xml:space="preserve">Creates a new #NcRecombCBE using default properties.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcRecombCBE.</doc>
          <type name="RecombCBE" c:type="NcRecombCBE*"/>
        </return-value>
      </constructor>
      <function name="clear" c:identifier="nc_recomb_cbe_clear">
        <doc xml:space="preserve">Decreases the reference count of *@recomb_cbe if
*@recomb_cbe is not NULL, then sets *@recomb_cbe to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="recomb_cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecombCBE.</doc>
            <type name="RecombCBE" c:type="NcRecombCBE**"/>
          </parameter>
        </parameters>
      </function>
      <method name="free" c:identifier="nc_recomb_cbe_free">
        <doc xml:space="preserve">Decreases the reference count of @recomb_cbe.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb_cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecombCBE.</doc>
            <type name="RecombCBE" c:type="NcRecombCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_cbe" c:identifier="nc_recomb_cbe_peek_cbe">
        <doc xml:space="preserve">Peeks the currently used #NcCBE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the used #NcCBE.</doc>
          <type name="CBE" c:type="NcCBE*"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb_cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecombCBE.</doc>
            <type name="RecombCBE" c:type="NcRecombCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_recomb_cbe_ref">
        <doc xml:space="preserve">Increases the reference count of @recomb_cbe.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@recomb_cbe.</doc>
          <type name="RecombCBE" c:type="NcRecombCBE*"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb_cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecombCBE.</doc>
            <type name="RecombCBE" c:type="NcRecombCBE*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_cbe" c:identifier="nc_recomb_cbe_set_cbe">
        <doc xml:space="preserve">Sets @cbe as the Class backend to be used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb_cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecombCBE</doc>
            <type name="RecombCBE" c:type="NcRecombCBE*"/>
          </instance-parameter>
          <parameter name="cbe" transfer-ownership="none">
            <doc xml:space="preserve">a #NcCBE</doc>
            <type name="CBE" c:type="NcCBE*"/>
          </parameter>
        </parameters>
      </method>
      <property name="cbe"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="CBE"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Recomb" c:type="NcRecomb"/>
      </field>
      <field name="cbe" readable="0" private="1">
        <type name="CBE" c:type="NcCBE*"/>
      </field>
    </class>
    <record name="RecombCBEClass"
            c:type="NcRecombCBEClass"
            glib:is-gtype-struct-for="RecombCBE">
      <field name="parent_class" readable="0" private="1">
        <type name="RecombClass" c:type="NcRecombClass"/>
      </field>
    </record>
    <record name="RecombClass"
            c:type="NcRecombClass"
            glib:is-gtype-struct-for="Recomb">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="prepare">
        <callback name="prepare">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="recomb" transfer-ownership="none">
              <doc xml:space="preserve">a #NcRecomb</doc>
              <type name="Recomb" c:type="NcRecomb*"/>
            </parameter>
            <parameter name="cosmo" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHICosmo</doc>
              <type name="HICosmo" c:type="NcHICosmo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="RecombSeager"
           c:symbol-prefix="recomb_seager"
           c:type="NcRecombSeager"
           parent="Recomb"
           glib:type-name="NcRecombSeager"
           glib:get-type="nc_recomb_seager_get_type"
           glib:type-struct="RecombSeagerClass">
      <constructor name="new" c:identifier="nc_recomb_seager_new">
        <doc xml:space="preserve">Creates a new #NcRecombSeager using default properties.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcRecombSeager.</doc>
          <type name="RecombSeager" c:type="NcRecombSeager*"/>
        </return-value>
      </constructor>
      <constructor name="new_full" c:identifier="nc_recomb_seager_new_full">
        <doc xml:space="preserve">Creates a new #NcRecombSeager using @init_frac, @zi and @prec.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcRecombSeager.</doc>
          <type name="RecombSeager" c:type="NcRecombSeager*"/>
        </return-value>
        <parameters>
          <parameter name="init_frac" transfer-ownership="none">
            <doc xml:space="preserve">inital fraction of $X_{\HeIII}/X_{\He}$ where to start numerical integration</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="zi" transfer-ownership="none">
            <doc xml:space="preserve">inital redshift</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="prec" transfer-ownership="none">
            <doc xml:space="preserve">integration precision</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_recomb_seager_clear">
        <doc xml:space="preserve">Decreases the reference count of *@recomb_seager if
*@recomb_seager is not NULL, then sets *@recomb_seager to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="recomb_seager" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecombSeager.</doc>
            <type name="RecombSeager" c:type="NcRecombSeager**"/>
          </parameter>
        </parameters>
      </function>
      <method name="free" c:identifier="nc_recomb_seager_free">
        <doc xml:space="preserve">Decreases the reference count of @recomb_seager.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb_seager" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecombSeager.</doc>
            <type name="RecombSeager" c:type="NcRecombSeager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_options" c:identifier="nc_recomb_seager_get_options">
        <doc xml:space="preserve">Gets integration options.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">currently used integration options.</doc>
          <type name="RecombSeagerOpt" c:type="NcRecombSeagerOpt"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb_seager" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecombSeager</doc>
            <type name="RecombSeager" c:type="NcRecombSeager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hummer_HeI_case_B"
              c:identifier="nc_recomb_seager_hummer_HeI_case_B">
        <doc xml:space="preserve">The case B $\HeII$ recombination coefficient.

The fitting formula of the case B recombination coefficient for $\HeII$ as
in [Hummer (1998)][XHummer1998].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the case B recombination coefficient for $\HeII$, $\alpha_H$ .</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb_seager" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecombSeager</doc>
            <type name="RecombSeager" c:type="NcRecombSeager*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="Tm" transfer-ownership="none">
            <doc xml:space="preserve">the matter (baryons) temperature $T_m$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="hummer_HeI_case_B_dTm"
              c:identifier="nc_recomb_seager_hummer_HeI_case_B_dTm">
        <doc xml:space="preserve">The case B $\HeII$ recombination coefficient derivative with respect to Tm.

The derivative of the fitting formula of the case B recombination coefficient for $\HeII$
nc_recomb_seager_hummer_HeI_case_B ().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the case B recombination coefficient for $\HeII$, $d\alpha_H/dT_m$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb_seager" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecombSeager</doc>
            <type name="RecombSeager" c:type="NcRecombSeager*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="Tm" transfer-ownership="none">
            <doc xml:space="preserve">the matter (baryons) temperature $T_m$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="hummer_HeI_case_B_trip"
              c:identifier="nc_recomb_seager_hummer_HeI_case_B_trip">
        <doc xml:space="preserve">The case B via triplets $\HeII$ recombination coefficient.

The fitting formula of the case B via triplets recombination coefficient for $\HeII$ as
in [Hummer (1998)][XHummer1998].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the case B via triplets recombination coefficient for $\HeII$, $\alpha_H$ .</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb_seager" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecombSeager</doc>
            <type name="RecombSeager" c:type="NcRecombSeager*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="Tm" transfer-ownership="none">
            <doc xml:space="preserve">the matter (baryons) temperature $T_m$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="hummer_HeI_case_B_trip_dTm"
              c:identifier="nc_recomb_seager_hummer_HeI_case_B_trip_dTm">
        <doc xml:space="preserve">The case B via triplets $\HeII$ recombination coefficient derivative with respect to Tm.

The derivative of the fitting formula of the case B via triplets recombination coefficient for $\HeII$
nc_recomb_seager_hummer_HeI_case_B_trip().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the case B via triplets recombination coefficient for $\HeII$, $d\alpha_H/dT_m$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb_seager" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecombSeager</doc>
            <type name="RecombSeager" c:type="NcRecombSeager*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="Tm" transfer-ownership="none">
            <doc xml:space="preserve">the matter (baryons) temperature $T_m$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="pequignot_HI_case_B"
              c:identifier="nc_recomb_seager_pequignot_HI_case_B">
        <doc xml:space="preserve">The case B $\HyII$ recombination coefficient.

The fitting formula of the case B recombination coefficient for $\HyII$ as
in [Pequignot (1991)][XPequignot1991].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the case B recombination coefficient for
$\HyII$, $\alpha_H$ .</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb_seager" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecombSeager</doc>
            <type name="RecombSeager" c:type="NcRecombSeager*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="Tm" transfer-ownership="none">
            <doc xml:space="preserve">the matter (baryons) temperature $T_m$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="pequignot_HI_case_B_dTm"
              c:identifier="nc_recomb_seager_pequignot_HI_case_B_dTm">
        <doc xml:space="preserve">The case B $\HyII$ recombination coefficient derivative with respect to $T_m$.

The derivative of the fitting formula of the case B recombination coefficient for $\HyII$
nc_recomb_seager_pequignot_HI_case_B ().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the case B recombination coefficient for $\HyII$, $d\alpha_H/dT_m$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb_seager" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecombSeager</doc>
            <type name="RecombSeager" c:type="NcRecombSeager*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="Tm" transfer-ownership="none">
            <doc xml:space="preserve">the matter (baryons) temperature $T_m$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_recomb_seager_ref">
        <doc xml:space="preserve">Increases the reference count of @recomb_seager.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@recomb_seager.</doc>
          <type name="RecombSeager" c:type="NcRecombSeager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb_seager" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecombSeager</doc>
            <type name="RecombSeager" c:type="NcRecombSeager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_options" c:identifier="nc_recomb_seager_set_options">
        <doc xml:space="preserve">Sets integration options #NcRecombSeagerOpt. To set the integration
options using the recfast compatible flags use nc_recomb_seager_set_switch().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb_seager" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecombSeager</doc>
            <type name="RecombSeager" c:type="NcRecombSeager*"/>
          </instance-parameter>
          <parameter name="opts" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecombSeagerOpt</doc>
            <type name="RecombSeagerOpt" c:type="NcRecombSeagerOpt"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_switch" c:identifier="nc_recomb_seager_set_switch">
        <doc xml:space="preserve">Sets integration options #NcRecombSeagerOpt using the following map:

- @H_switch == 0 =&gt; #NC_RECOM_SEAGER_OPT_HII_FUDGE;
- @H_switch == 1 =&gt; #NC_RECOM_SEAGER_OPT_HII_FUDGE_GAUSS_COR;

- @He_switch == 0 =&gt; no additional flag;
- @He_switch == 1 =&gt; #NC_RECOM_SEAGER_OPT_HEII_SOBOLEV_1P1;
- @He_switch == 2 =&gt; #NC_RECOM_SEAGER_OPT_HEII_SOBOLEV_1P1 | #NC_RECOM_SEAGER_OPT_HEII_SOBOLEV_1P1_CO;
- @He_switch == 3 =&gt; #NC_RECOM_SEAGER_OPT_HEII_SOBOLEV_1P1 | #NC_RECOM_SEAGER_OPT_HEII_SOBOLEV_3P012;
- @He_switch == 4 =&gt; #NC_RECOM_SEAGER_OPT_HEII_SOBOLEV_1P1 | #NC_RECOM_SEAGER_OPT_HEII_SOBOLEV_3P012 | #NC_RECOM_SEAGER_OPT_HEII_SOBOLEV_3P012_CO;
- @He_switch == 5 =&gt; #NC_RECOM_SEAGER_OPT_HEII_SOBOLEV_1P1 | #NC_RECOM_SEAGER_OPT_HEII_SOBOLEV_1P1_CO | #NC_RECOM_SEAGER_OPT_HEII_SOBOLEV_3P012;
- @He_switch == 6 =&gt; #NC_RECOM_SEAGER_OPT_HEII_SOBOLEV_1P1 | #NC_RECOM_SEAGER_OPT_HEII_SOBOLEV_1P1_CO | #NC_RECOM_SEAGER_OPT_HEII_SOBOLEV_3P012 | #NC_RECOM_SEAGER_OPT_HEII_SOBOLEV_3P012_CO;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="recomb_seager" transfer-ownership="none">
            <doc xml:space="preserve">a #NcRecombSeager</doc>
            <type name="RecombSeager" c:type="NcRecombSeager*"/>
          </instance-parameter>
          <parameter name="H_switch" transfer-ownership="none">
            <doc xml:space="preserve">an integer between 0 and 1</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="He_switch" transfer-ownership="none">
            <doc xml:space="preserve">an integer between 0 and 6</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="options"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Integration options.</doc>
        <type name="RecombSeagerOpt"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="Recomb" c:type="NcRecomb"/>
      </field>
      <field name="opts" readable="0" private="1">
        <type name="RecombSeagerOpt" c:type="NcRecombSeagerOpt"/>
      </field>
      <field name="K_HI_2p_2Pmean" readable="0" private="1">
        <type name="RecombSeagerKHI2p2Pmean"
              c:type="NcRecombSeagerKHI2p2Pmean"/>
      </field>
      <field name="KX_HeI_2p_1P1" readable="0" private="1">
        <type name="RecombSeagerKHeI2p" c:type="NcRecombSeagerKHeI2p"/>
      </field>
      <field name="KX_HeI_2p_3Pmean" readable="0" private="1">
        <type name="RecombSeagerKHeI2p" c:type="NcRecombSeagerKHeI2p"/>
      </field>
      <field name="KX_HeI_2p_1P1_grad" readable="0" private="1">
        <type name="RecombSeagerKHeI2pGrad" c:type="NcRecombSeagerKHeI2pGrad"/>
      </field>
      <field name="KX_HeI_2p_3Pmean_grad" readable="0" private="1">
        <type name="RecombSeagerKHeI2pGrad" c:type="NcRecombSeagerKHeI2pGrad"/>
      </field>
      <field name="H_fudge" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="AGauss1" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="AGauss2" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="zGauss1" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="zGauss2" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="wGauss1" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="wGauss2" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="A2P_s" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="A2P_t" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="sigma_He_2P_s" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="sigma_He_2P_t" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="Pb" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="Pb_t" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="Qb" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="Qb_t" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="cvode" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="init" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="y0" introspectable="0" readable="0" private="1">
        <type c:type="N_Vector"/>
      </field>
      <field name="y" introspectable="0" readable="0" private="1">
        <type c:type="N_Vector"/>
      </field>
      <field name="abstol" introspectable="0" readable="0" private="1">
        <type c:type="N_Vector"/>
      </field>
      <field name="n" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="RecombSeagerClass"
            c:type="NcRecombSeagerClass"
            glib:is-gtype-struct-for="RecombSeager">
      <field name="parent_class" readable="0" private="1">
        <type name="RecombClass" c:type="NcRecombClass"/>
      </field>
    </record>
    <callback name="RecombSeagerKHI2p2Pmean"
              c:type="NcRecombSeagerKHI2p2Pmean">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="recomb_seager" transfer-ownership="none">
          <type name="RecombSeager" c:type="NcRecombSeager*"/>
        </parameter>
        <parameter name="cosmo" transfer-ownership="none">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="H" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="RecombSeagerKHeI2p" c:type="NcRecombSeagerKHeI2p">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="recomb_seager" transfer-ownership="none">
          <type name="RecombSeager" c:type="NcRecombSeager*"/>
        </parameter>
        <parameter name="cosmo" transfer-ownership="none">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="XHI" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="T" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="XHeI" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="H" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="n_H" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="RecombSeagerKHeI2pGrad" c:type="NcRecombSeagerKHeI2pGrad">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="recomb_seager" transfer-ownership="none">
          <type name="RecombSeager" c:type="NcRecombSeager*"/>
        </parameter>
        <parameter name="cosmo" transfer-ownership="none">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="XHI" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="T" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="XHeI" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="H" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="n_H" transfer-ownership="none">
          <type name="gdouble" c:type="const gdouble"/>
        </parameter>
        <parameter name="grad" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </callback>
    <bitfield name="RecombSeagerOpt"
              glib:type-name="NcRecombSeagerOpt"
              glib:get-type="nc_recomb_seager_opt_get_type"
              c:type="NcRecombSeagerOpt">
      <doc xml:space="preserve">FIXME</doc>
      <member name="hii_fudge"
              value="1"
              c:identifier="NC_RECOM_SEAGER_OPT_HII_FUDGE"
              glib:nick="hii-fudge">
        <doc xml:space="preserve">Includes fudge factor in the case_B recombination fitting formulas.</doc>
      </member>
      <member name="hii_fudge_gauss_cor"
              value="2"
              c:identifier="NC_RECOM_SEAGER_OPT_HII_FUDGE_GAUSS_COR"
              glib:nick="hii-fudge-gauss-cor">
        <doc xml:space="preserve">Includes gaussian correction in the case_B recombination fitting formulas.</doc>
      </member>
      <member name="heii_sobolev_1p1"
              value="4"
              c:identifier="NC_RECOM_SEAGER_OPT_HEII_SOBOLEV_1P1"
              glib:nick="heii-sobolev-1p1">
        <doc xml:space="preserve">Includes Sobolev scape probability for the $2p\,{}^1\\!P_{1} \to 1s\,{}^1\\!S_{0}$.</doc>
      </member>
      <member name="heii_sobolev_1p1_co"
              value="8"
              c:identifier="NC_RECOM_SEAGER_OPT_HEII_SOBOLEV_1P1_CO"
              glib:nick="heii-sobolev-1p1-co">
        <doc xml:space="preserve">Also includes the continum opacity effect due to H.</doc>
      </member>
      <member name="heii_sobolev_3p012"
              value="16"
              c:identifier="NC_RECOM_SEAGER_OPT_HEII_SOBOLEV_3P012"
              glib:nick="heii-sobolev-3p012">
        <doc xml:space="preserve">Includes Sobolev scape probability for the $2p\,{}^3\\!P_{0,1,2} \to 1s\,{}^1\\!S_{0}$.</doc>
      </member>
      <member name="heii_sobolev_3p012_co"
              value="32"
              c:identifier="NC_RECOM_SEAGER_OPT_HEII_SOBOLEV_3P012_CO"
              glib:nick="heii-sobolev-3p012-co">
        <doc xml:space="preserve">Also includes the continum opacity effect due to H.</doc>
      </member>
      <member name="all"
              value="63"
              c:identifier="NC_RECOM_SEAGER_OPT_ALL"
              glib:nick="all">
        <doc xml:space="preserve">All options.</doc>
      </member>
    </bitfield>
    <constant name="SCALEFACTOR_DEFAULT_A0"
              value="1.000000"
              c:type="NC_SCALEFACTOR_DEFAULT_A0">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="SCALEFACTOR_DEFAULT_ABSTOL"
              value="0.000000"
              c:type="NC_SCALEFACTOR_DEFAULT_ABSTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="SCALEFACTOR_DEFAULT_RELTOL"
              value="0.000000"
              c:type="NC_SCALEFACTOR_DEFAULT_RELTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="SCALEFACTOR_DEFAULT_ZF"
              value="100000000000000.000000"
              c:type="NC_SCALEFACTOR_DEFAULT_ZF">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="SCALEFACTOR_MIN_ETA_STEP"
              value="0.000000"
              c:type="NC_SCALEFACTOR_MIN_ETA_STEP">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="SCALEFACTOR_OMEGA_K_ZERO"
              value="0.000000"
              c:type="NC_SCALEFACTOR_OMEGA_K_ZERO">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <class name="SNIADistCov"
           c:symbol-prefix="snia_dist_cov"
           c:type="NcSNIADistCov"
           parent="NumCosmoMath.Model"
           glib:type-name="NcSNIADistCov"
           glib:get-type="nc_snia_dist_cov_get_type"
           glib:type-struct="SNIADistCovClass">
      <constructor name="new" c:identifier="nc_snia_dist_cov_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="SNIADistCov" c:type="NcSNIADistCov*"/>
        </return-value>
        <parameters>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
          <parameter name="sigma_int_len" transfer-ownership="none">
            <doc xml:space="preserve">length of the sigma_int dataset</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_snia_dist_cov_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dcov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcSNIADistCov</doc>
            <type name="SNIADistCov" c:type="NcSNIADistCov**"/>
          </parameter>
        </parameters>
      </function>
      <function name="id" c:identifier="nc_snia_dist_cov_id">
        <return-value transfer-ownership="none">
          <type name="gint32" c:type="gint32"/>
        </return-value>
      </function>
      <method name="alpha_beta" c:identifier="nc_snia_dist_cov_alpha_beta">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dcov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcSNIADistCov</doc>
            <type name="SNIADistCov" c:type="NcSNIADistCov*"/>
          </instance-parameter>
          <parameter name="alpha"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">value of alpha</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="beta"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">value of beta</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="calc" c:identifier="nc_snia_dist_cov_calc">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dcov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcSNIADistCov</doc>
            <type name="SNIADistCov" c:type="NcSNIADistCov*"/>
          </instance-parameter>
          <parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </parameter>
          <parameter name="cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="extra_var" c:identifier="nc_snia_dist_cov_extra_var">
        <doc xml:space="preserve">Computes the total variance of the @i-th distance, not related to the
magnitute, width or colour errors.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the variance</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dcov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcSNIADistCov</doc>
            <type name="SNIADistCov" c:type="NcSNIADistCov*"/>
          </instance-parameter>
          <parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">the distance index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_snia_dist_cov_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dcov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcSNIADistCov</doc>
            <type name="SNIADistCov" c:type="NcSNIADistCov*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mag" c:identifier="nc_snia_dist_cov_mag">
        <doc xml:space="preserve">Computes the apparent magniture from model, width and colour.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the apparent magniture.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="dcov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcSNIADistCov</doc>
            <type name="SNIADistCov" c:type="NcSNIADistCov*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve">the distance index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="width_th" transfer-ownership="none">
            <doc xml:space="preserve">the true width</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="colour_th" transfer-ownership="none">
            <doc xml:space="preserve">the true colour</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="mag_to_width_colour"
              c:identifier="nc_snia_dist_cov_mag_to_width_colour">
        <doc xml:space="preserve">Computes effective observed vector @obs, the first @snia_cov-&gt;mu_len params
are set to the width colour combination using the values of the distance
modulus from the model @cosmo and the SNIa model @dcov, i.e.,
$-\alpha{}w_i+\beta{}c_i = m_{\mathrm{B},i} - \mu_{\mathrm{th},i}-\alpha-\mathcal{M}_i$.
The next 2 * @snia_cov-&gt;mu_len are the observed widths and then the observed colours.

The vector @obs must be of size 3 * @snia_cov-&gt;mu_len.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dcov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcSNIADistCov</doc>
            <type name="SNIADistCov" c:type="NcSNIADistCov*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </parameter>
          <parameter name="obs" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="X" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMatrix</doc>
            <type name="NumCosmoMath.Matrix" c:type="NcmMatrix*"/>
          </parameter>
          <parameter name="colmajor" transfer-ownership="none">
            <doc xml:space="preserve">whether to fill the matrices in a col-major format</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="mean" c:identifier="nc_snia_dist_cov_mean">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dcov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcSNIADistCov</doc>
            <type name="SNIADistCov" c:type="NcSNIADistCov*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="snia_cov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDataSNIACov</doc>
            <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="nc_snia_dist_cov_prepare">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dcov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcSNIADistCov</doc>
            <type name="SNIADistCov" c:type="NcSNIADistCov*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="NumCosmoMath.MSet" c:type="NcmMSet*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_if_needed"
              c:identifier="nc_snia_dist_cov_prepare_if_needed">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dcov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcSNIADistCov</doc>
            <type name="SNIADistCov" c:type="NcSNIADistCov*"/>
          </instance-parameter>
          <parameter name="mset" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmMSet</doc>
            <type name="NumCosmoMath.MSet" c:type="NcmMSet*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_snia_dist_cov_ref">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="SNIADistCov" c:type="NcSNIADistCov*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dcov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcSNIADistCov</doc>
            <type name="SNIADistCov" c:type="NcSNIADistCov*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_dist" c:identifier="nc_snia_dist_cov_set_dist">
        <doc xml:space="preserve">Sets the #NcDistance object to @dist.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dcov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcSNIADistCov</doc>
            <type name="SNIADistCov" c:type="NcSNIADistCov*"/>
          </instance-parameter>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_empty_fac"
              c:identifier="nc_snia_dist_cov_set_empty_fac">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dcov" transfer-ownership="none">
            <doc xml:space="preserve">a #NcSNIADistCov</doc>
            <type name="SNIADistCov" c:type="NcSNIADistCov*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="M1" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="M1-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="M2" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="M2-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="alpha" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="alpha-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="beta" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="beta-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="dist"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="Distance"/>
      </property>
      <property name="empty-fac"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="lnsigma-int" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="lnsigma-int-fit" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <property name="lnsigma-int-length"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="lnsigma-lens" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="lnsigma-lens-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="lnsigma-pecz" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="lnsigma-pecz-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mu" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="mu-fit" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <property name="mu-length"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Model" c:type="NcmModel"/>
      </field>
      <field name="dist" readable="0" private="1">
        <type name="Distance" c:type="NcDistance*"/>
      </field>
      <field name="var_int" readable="0" private="1">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="empty_fac" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="SNIADistCovClass"
            c:type="NcSNIADistCovClass"
            glib:is-gtype-struct-for="SNIADistCov">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.ModelClass" c:type="NcmModelClass"/>
      </field>
    </record>
    <enumeration name="SNIADistCovSParams"
                 glib:type-name="NcSNIADistCovSParams"
                 glib:get-type="nc_snia_dist_cov_sparams_get_type"
                 c:type="NcSNIADistCovSParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="alpha"
              value="0"
              c:identifier="NC_SNIA_DIST_COV_ALPHA"
              glib:nick="alpha">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="beta"
              value="1"
              c:identifier="NC_SNIA_DIST_COV_BETA"
              glib:nick="beta">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="m1"
              value="2"
              c:identifier="NC_SNIA_DIST_COV_M1"
              glib:nick="m1">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="m2"
              value="3"
              c:identifier="NC_SNIA_DIST_COV_M2"
              glib:nick="m2">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="lnsigma_pecz"
              value="4"
              c:identifier="NC_SNIA_DIST_COV_LNSIGMA_PECZ"
              glib:nick="lnsigma-pecz">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="lnsigma_lens"
              value="5"
              c:identifier="NC_SNIA_DIST_COV_LNSIGMA_LENS"
              glib:nick="lnsigma-lens">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <enumeration name="SNIADistCovVParams"
                 glib:type-name="NcSNIADistCovVParams"
                 glib:get-type="nc_snia_dist_cov_vparams_get_type"
                 c:type="NcSNIADistCovVParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="lnsigma_int"
              value="0"
              c:identifier="NC_SNIA_DIST_COV_LNSIGMA_INT"
              glib:nick="lnsigma-int">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="mu"
              value="1"
              c:identifier="NC_SNIA_DIST_COV_MU"
              glib:nick="mu">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <constant name="SNIA_DIST_COV_DEFAULT_ALPHA"
              value="1.450000"
              c:type="NC_SNIA_DIST_COV_DEFAULT_ALPHA">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="SNIA_DIST_COV_DEFAULT_BETA"
              value="3.160000"
              c:type="NC_SNIA_DIST_COV_DEFAULT_BETA">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="SNIA_DIST_COV_DEFAULT_M1"
              value="19.168613"
              c:type="NC_SNIA_DIST_COV_DEFAULT_M1">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="SNIA_DIST_COV_DEFAULT_M2"
              value="19.185613"
              c:type="NC_SNIA_DIST_COV_DEFAULT_M2">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="SNIA_DIST_COV_DEFAULT_MU"
              value="18.000000"
              c:type="NC_SNIA_DIST_COV_DEFAULT_MU">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="SNIA_DIST_COV_DEFAULT_PARAMS_ABSTOL"
              value="0.000000"
              c:type="NC_SNIA_DIST_COV_DEFAULT_PARAMS_ABSTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="SNIA_DIST_COV_LNSIGMA_INT_DEFAULT_LEN"
              value="4"
              c:type="NC_SNIA_DIST_COV_LNSIGMA_INT_DEFAULT_LEN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SNIA_DIST_COV_MU_DEFAULT_LEN"
              value="0"
              c:type="NC_SNIA_DIST_COV_MU_DEFAULT_LEN">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Scalefactor"
           c:symbol-prefix="scalefactor"
           c:type="NcScalefactor"
           parent="GObject.Object"
           glib:type-name="NcScalefactor"
           glib:get-type="nc_scalefactor_get_type"
           glib:type-struct="ScalefactorClass">
      <constructor name="new" c:identifier="nc_scalefactor_new">
        <doc xml:space="preserve">Creates a new #NcScalefactor valid for calculations in
the $[0, z_f]$ interval.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #NcScalefactor.</doc>
          <type name="Scalefactor" c:type="NcScalefactor*"/>
        </return-value>
        <parameters>
          <parameter name="ttype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactorTimeType</doc>
            <type name="ScalefactorTimeType" c:type="NcScalefactorTimeType"/>
          </parameter>
          <parameter name="zf" transfer-ownership="none">
            <doc xml:space="preserve">maximum redshift $z_f$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_scalefactor_clear">
        <doc xml:space="preserve">If *@a is different from NULL, decreases the reference
count of *@a by one and sets *@a to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor**"/>
          </parameter>
        </parameters>
      </function>
      <method name="a_eta" c:identifier="nc_scalefactor_a_eta">
        <doc xml:space="preserve">Calculates the value of the scale factor in $\eta$,
i.e., $a(\eta)$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$a(\eta)$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
          <parameter name="eta" transfer-ownership="none">
            <doc xml:space="preserve">conformal time $\eta$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eta_t" c:identifier="nc_scalefactor_eta_t">
        <doc xml:space="preserve">Calculates the value of the conformal time at $t$,
i.e., $\eta(t)$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\eta(t)$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve">cosmic time $t$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eta_x" c:identifier="nc_scalefactor_eta_x">
        <doc xml:space="preserve">Calculates the value of the conformal time at $x$,
i.e., $\eta(z(x))$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\eta(z(x))$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">redshift x variable $x = 1 + z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eta_z" c:identifier="nc_scalefactor_eta_z">
        <doc xml:space="preserve">Calculates the value of the conformal time at $z$,
i.e., $\eta(z)$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$\eta(z)$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">redshift $z$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_scalefactor_free">
        <doc xml:space="preserve">Decreases the reference count of @a by one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_a0" c:identifier="nc_scalefactor_get_a0">
        <doc xml:space="preserve">Gets the current value of the scale factor today $a_0$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$a_0$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_abstol" c:identifier="nc_scalefactor_get_abstol">
        <doc xml:space="preserve">Gets the current absolute tolerance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">abstol.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reltol" c:identifier="nc_scalefactor_get_reltol">
        <doc xml:space="preserve">Gets the current relative tolerance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">reltol.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_time_type" c:identifier="nc_scalefactor_get_time_type">
        <doc xml:space="preserve">Gets the current time type flag.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">ttime.</doc>
          <type name="ScalefactorTimeType" c:type="NcScalefactorTimeType"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_zf" c:identifier="nc_scalefactor_get_zf">
        <doc xml:space="preserve">Gets the current final redshift $z_f$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$z_f$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="nc_scalefactor_prepare">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_if_needed"
              c:identifier="nc_scalefactor_prepare_if_needed">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_scalefactor_ref">
        <doc xml:space="preserve">Increases the reference count of @a by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@a.</doc>
          <type name="Scalefactor" c:type="NcScalefactor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_a0" c:identifier="nc_scalefactor_set_a0">
        <doc xml:space="preserve">Sets the value of the scale factor today.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
          <parameter name="a0" transfer-ownership="none">
            <doc xml:space="preserve">scale factor today $a_0$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_a0_conformal_normal"
              c:identifier="nc_scalefactor_set_a0_conformal_normal">
        <doc xml:space="preserve">When @enable is TRUE, it sets the value of the scale factor
today $a_0$, assuming that the conformal hypersurface
 the spatial hypersurface where ($a=1$) hascurvature
equals to 1Mpc, i.e., $1/\sqrt{K} = 1\,\mathrm{Mpc}$.
If @enable is FALSE it lets $a_0$ untouched.   *</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <doc xml:space="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_abstol" c:identifier="nc_scalefactor_set_abstol">
        <doc xml:space="preserve">Sets the absolute tolerance of the integration.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
          <parameter name="abstol" transfer-ownership="none">
            <doc xml:space="preserve">absolute tolerance</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reltol" c:identifier="nc_scalefactor_set_reltol">
        <doc xml:space="preserve">Sets the relative tolerance of the integration.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
          <parameter name="reltol" transfer-ownership="none">
            <doc xml:space="preserve">relative tolerance</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time_type" c:identifier="nc_scalefactor_set_time_type">
        <doc xml:space="preserve">Sets the which other time variables it should integrate.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
          <parameter name="ttype" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactorTimeType flag</doc>
            <type name="ScalefactorTimeType" c:type="NcScalefactorTimeType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_zf" c:identifier="nc_scalefactor_set_zf">
        <doc xml:space="preserve">Sets the final redshift of the integration.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
          <parameter name="zf" transfer-ownership="none">
            <doc xml:space="preserve">final redshift $z_f$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="t_eta" c:identifier="nc_scalefactor_t_eta">
        <doc xml:space="preserve">Calculates the value of the cosmic time at $\eta$,
i.e., $t(\eta)$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$t(\eta)$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
          <parameter name="eta" transfer-ownership="none">
            <doc xml:space="preserve">conformal time $\eta$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="z_eta" c:identifier="nc_scalefactor_z_eta">
        <doc xml:space="preserve">Calculates the value of the redshift in $\eta$,
i.e., $z(\eta)$.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">$z(\eta)$.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #NcScalefactor</doc>
            <type name="Scalefactor" c:type="NcScalefactor*"/>
          </instance-parameter>
          <parameter name="eta" transfer-ownership="none">
            <doc xml:space="preserve">conformal time $\eta$</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="a0" writable="1" construct="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="a0-conformal-normal"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="abstol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="dist"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Distance"/>
      </property>
      <property name="reltol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="time-type"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="ScalefactorTimeType"/>
      </property>
      <property name="zf" writable="1" construct="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="dist" readable="0" private="1">
        <type name="Distance" c:type="NcDistance*"/>
      </field>
      <field name="ttype" readable="0" private="1">
        <type name="ScalefactorTimeType" c:type="NcScalefactorTimeType"/>
      </field>
      <field name="ctrl" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
      <field name="a_eta" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="eta_a" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="t_eta" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="eta_t" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="a0" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="zf" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="eta_i" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="eta_f" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="sets_conf_norm" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="spline_init" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="cvode_init" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="quad_init" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="cvode" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="reltol" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="abstol" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="y" introspectable="0" readable="0" private="1">
        <type c:type="N_Vector"/>
      </field>
      <field name="yQ" introspectable="0" readable="0" private="1">
        <type c:type="N_Vector"/>
      </field>
    </class>
    <record name="ScalefactorClass"
            c:type="NcScalefactorClass"
            glib:is-gtype-struct-for="Scalefactor">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="ScalefactorTimeType"
              glib:type-name="NcScalefactorTimeType"
              glib:get-type="nc_scalefactor_time_type_get_type"
              c:type="NcScalefactorTimeType">
      <doc xml:space="preserve">Controls which time variables are also integrated.</doc>
      <member name="cosmic"
              value="1"
              c:identifier="NC_SCALEFACTOR_TIME_TYPE_COSMIC"
              glib:nick="cosmic">
        <doc xml:space="preserve">Cosmic time $\mathrm{d}t = a\mathrm{d}\eta$.</doc>
      </member>
    </bitfield>
    <class name="TransferFunc"
           c:symbol-prefix="transfer_func"
           c:type="NcTransferFunc"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NcTransferFunc"
           glib:get-type="nc_transfer_func_get_type"
           glib:type-struct="TransferFuncClass">
      <constructor name="new_from_name"
                   c:identifier="nc_transfer_func_new_from_name">
        <doc xml:space="preserve">This function returns a new #NcTransferFunc whose type is defined by @transfer_name.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcTransferFunc.</doc>
          <type name="TransferFunc" c:type="NcTransferFunc*"/>
        </return-value>
        <parameters>
          <parameter name="transfer_name" transfer-ownership="none">
            <doc xml:space="preserve">string which specifies the transfer function type.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_transfer_func_clear">
        <doc xml:space="preserve">Atomically decrements the reference count of @tf by one. If the reference count drops to 0,
all memory allocated by @tf is released. Set the pointer to NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcTransferFunc.</doc>
            <type name="TransferFunc" c:type="NcTransferFunc**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="calc">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="tf" transfer-ownership="none">
            <type name="TransferFunc" c:type="NcTransferFunc*"/>
          </instance-parameter>
          <parameter name="k" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare" invoker="prepare">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcTransferFunc</doc>
            <type name="TransferFunc" c:type="NcTransferFunc*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="eval" c:identifier="nc_transfer_func_eval">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="tf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcTransferFunc.</doc>
            <type name="TransferFunc" c:type="NcTransferFunc*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo.</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="kh" transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_transfer_func_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @tf by one. If the reference count drops to 0,
all memory allocated by @tf is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcTransferFunc.</doc>
            <type name="TransferFunc" c:type="NcTransferFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="nc_transfer_func_prepare">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcTransferFunc</doc>
            <type name="TransferFunc" c:type="NcTransferFunc*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_if_needed"
              c:identifier="nc_transfer_func_prepare_if_needed">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcTransferFunc</doc>
            <type name="TransferFunc" c:type="NcTransferFunc*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_transfer_func_ref">
        <doc xml:space="preserve">Increases the reference count of @tf atomically.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@tf.</doc>
          <type name="TransferFunc" c:type="NcTransferFunc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcTransferFunc</doc>
            <type name="TransferFunc" c:type="NcTransferFunc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="ctrl_cosmo" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
      <field name="ctrl_reion" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
    </class>
    <class name="TransferFuncBBKS"
           c:symbol-prefix="transfer_func_bbks"
           c:type="NcTransferFuncBBKS"
           parent="TransferFunc"
           glib:type-name="NcTransferFuncBBKS"
           glib:get-type="nc_transfer_func_bbks_get_type"
           glib:type-struct="TransferFuncBBKSClass">
      <constructor name="new" c:identifier="nc_transfer_func_bbks_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcTransferFunc.</doc>
          <type name="TransferFunc" c:type="NcTransferFunc*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="TransferFunc" c:type="NcTransferFunc"/>
      </field>
      <field name="c1" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="c2" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="c3" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="c4" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="c5_wm" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="h" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="TransferFuncBBKSClass"
            c:type="NcTransferFuncBBKSClass"
            glib:is-gtype-struct-for="TransferFuncBBKS">
      <field name="parent_class" readable="0" private="1">
        <type name="TransferFuncClass" c:type="NcTransferFuncClass"/>
      </field>
    </record>
    <class name="TransferFuncCAMB"
           c:symbol-prefix="transfer_func_camb"
           c:type="NcTransferFuncCAMB"
           parent="TransferFunc"
           glib:type-name="NcTransferFuncCAMB"
           glib:get-type="nc_transfer_func_camb_get_type"
           glib:type-struct="TransferFuncCAMBClass">
      <constructor name="new" c:identifier="nc_transfer_func_camb_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcTransferFunc.</doc>
          <type name="TransferFunc" c:type="NcTransferFunc*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="TransferFunc" c:type="NcTransferFunc"/>
      </field>
      <field name="T_spline" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="init" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="TransferFuncCAMBClass"
            c:type="NcTransferFuncCAMBClass"
            glib:is-gtype-struct-for="TransferFuncCAMB">
      <field name="parent_class" readable="0" private="1">
        <type name="TransferFuncClass" c:type="NcTransferFuncClass"/>
      </field>
    </record>
    <record name="TransferFuncClass"
            c:type="NcTransferFuncClass"
            glib:is-gtype-struct-for="TransferFunc">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="alloc">
        <callback name="alloc">
          <return-value transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </return-value>
        </callback>
      </field>
      <field name="prepare">
        <callback name="prepare">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tf" transfer-ownership="none">
              <doc xml:space="preserve">a #NcTransferFunc</doc>
              <type name="TransferFunc" c:type="NcTransferFunc*"/>
            </parameter>
            <parameter name="cosmo" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHICosmo</doc>
              <type name="HICosmo" c:type="NcHICosmo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="calc">
        <callback name="calc">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="tf" transfer-ownership="none">
              <type name="TransferFunc" c:type="NcTransferFunc*"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="TransferFuncEH"
           c:symbol-prefix="transfer_func_eh"
           c:type="NcTransferFuncEH"
           parent="TransferFunc"
           glib:type-name="NcTransferFuncEH"
           glib:get-type="nc_transfer_func_eh_get_type"
           glib:type-struct="TransferFuncEHClass">
      <constructor name="new" c:identifier="nc_transfer_func_eh_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcTransferFunc.</doc>
          <type name="TransferFunc" c:type="NcTransferFunc*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="TransferFunc" c:type="NcTransferFunc"/>
      </field>
      <field name="h" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="s" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="keq_1341" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="ksilk" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="b_node3" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="ab" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="bc" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="bb" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="bb3" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="ac_142" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="wb_wm" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="wc_wm" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="TransferFuncEHClass"
            c:type="NcTransferFuncEHClass"
            glib:is-gtype-struct-for="TransferFuncEH">
      <field name="parent_class" readable="0" private="1">
        <type name="TransferFuncClass" c:type="NcTransferFuncClass"/>
      </field>
    </record>
    <class name="TransferFuncPert"
           c:symbol-prefix="transfer_func_pert"
           c:type="NcTransferFuncPert"
           parent="TransferFunc"
           glib:type-name="NcTransferFuncPert"
           glib:get-type="nc_transfer_func_pert_get_type"
           glib:type-struct="TransferFuncPertClass">
      <field name="parent_instance" readable="0" private="1">
        <type name="TransferFunc" c:type="NcTransferFunc"/>
      </field>
      <field name="pert" readable="0" private="1">
        <type name="LinearPert" c:type="NcLinearPert*"/>
      </field>
      <field name="pspline" readable="0" private="1">
        <type name="LinearPertSplines" c:type="NcLinearPertSplines*"/>
      </field>
      <field name="init" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="TransferFuncPertClass"
            c:type="NcTransferFuncPertClass"
            glib:is-gtype-struct-for="TransferFuncPert">
      <field name="parent_class" readable="0" private="1">
        <type name="TransferFuncClass" c:type="NcTransferFuncClass"/>
      </field>
    </record>
    <constant name="WINDOW_VOLUME_GAUSSIAN"
              value="0"
              c:type="NC_WINDOW_VOLUME_GAUSSIAN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="WINDOW_VOLUME_TOPHAT"
              value="0"
              c:type="NC_WINDOW_VOLUME_TOPHAT">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Window"
           c:symbol-prefix="window"
           c:type="NcWindow"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NcWindow"
           glib:get-type="nc_window_get_type"
           glib:type-struct="WindowClass">
      <constructor name="new_from_name" c:identifier="nc_window_new_from_name">
        <doc xml:space="preserve">This function returns a new #NcWindow whose type is defined by @window_name string.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcWindow.</doc>
          <type name="Window" c:type="NcWindow*"/>
        </return-value>
        <parameters>
          <parameter name="window_name" transfer-ownership="none">
            <doc xml:space="preserve">"#NcWindowTophat" or "#NcWindowGaussian".</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_window_clear">
        <doc xml:space="preserve">Atomically decrements the reference count of @wf by one. If the reference count drops to 0,
all memory allocated by @wf is released. Set the pointer to NULL;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="wf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcWindow.</doc>
            <type name="Window" c:type="NcWindow**"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="deriv_fourier" invoker="deriv_fourier">
        <doc xml:space="preserve">This function returns the derivative with respect to R of the window function
in the Fourier space.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of the first derivative of the window function in the Fourier space at scale @R.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="wf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcWindow.</doc>
            <type name="Window" c:type="const NcWindow*"/>
          </instance-parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="R" transfer-ownership="none">
            <doc xml:space="preserve">scale.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_fourier" invoker="eval_fourier">
        <doc xml:space="preserve">This function computes the window function in the Fourier space.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of the window function in the Fourier space at scale @R.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="wf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcWindow.</doc>
            <type name="Window" c:type="const NcWindow*"/>
          </instance-parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="R" transfer-ownership="none">
            <doc xml:space="preserve">scale.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eval_real">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="wf" transfer-ownership="none">
            <type name="Window" c:type="const NcWindow*"/>
          </instance-parameter>
          <parameter name="r" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="R" transfer-ownership="none">
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="deriv_fourier" c:identifier="nc_window_deriv_fourier">
        <doc xml:space="preserve">This function returns the derivative with respect to R of the window function
in the Fourier space.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of the first derivative of the window function in the Fourier space at scale @R.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="wf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcWindow.</doc>
            <type name="Window" c:type="const NcWindow*"/>
          </instance-parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="R" transfer-ownership="none">
            <doc xml:space="preserve">scale.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_fourier" c:identifier="nc_window_eval_fourier">
        <doc xml:space="preserve">This function computes the window function in the Fourier space.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of the window function in the Fourier space at scale @R.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="wf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcWindow.</doc>
            <type name="Window" c:type="const NcWindow*"/>
          </instance-parameter>
          <parameter name="k" transfer-ownership="none">
            <doc xml:space="preserve">mode.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="R" transfer-ownership="none">
            <doc xml:space="preserve">scale.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="eval_realspace" c:identifier="nc_window_eval_realspace">
        <doc xml:space="preserve">This function computes the window function in real space.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The value of the window function in the real space at scale @R.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="wf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcWindow.</doc>
            <type name="Window" c:type="const NcWindow*"/>
          </instance-parameter>
          <parameter name="r" transfer-ownership="none">
            <doc xml:space="preserve">distance module to the center point of the filtered region.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
          <parameter name="R" transfer-ownership="none">
            <doc xml:space="preserve">scale.</doc>
            <type name="gdouble" c:type="const gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_window_free">
        <doc xml:space="preserve">Atomically decrements the reference count of @wf by one. If the reference count drops to 0,
all memory allocated by @wf is released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcWindow.</doc>
            <type name="Window" c:type="NcWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="volume" c:identifier="nc_window_volume">
        <doc xml:space="preserve">This function returns the volume of the region (with radius 1) defined by the window function.

Top-hat volume: #NC_WINDOW_VOLUME_TOPHAT.

Gaussian volume: #NC_WINDOW_VOLUME_GAUSSIAN.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The volume (with radius 1) defined by @wf.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="wf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcWindow.</doc>
            <type name="Window" c:type="NcWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="WindowClass"
            c:type="NcWindowClass"
            glib:is-gtype-struct-for="Window">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="volume" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="eval_fourier">
        <callback name="eval_fourier">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The value of the window function in the Fourier space at scale @R.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="wf" transfer-ownership="none">
              <doc xml:space="preserve">a #NcWindow.</doc>
              <type name="Window" c:type="const NcWindow*"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">mode.</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="R" transfer-ownership="none">
              <doc xml:space="preserve">scale.</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="deriv_fourier">
        <callback name="deriv_fourier">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The value of the first derivative of the window function in the Fourier space at scale @R.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="wf" transfer-ownership="none">
              <doc xml:space="preserve">a #NcWindow.</doc>
              <type name="Window" c:type="const NcWindow*"/>
            </parameter>
            <parameter name="k" transfer-ownership="none">
              <doc xml:space="preserve">mode.</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="R" transfer-ownership="none">
              <doc xml:space="preserve">scale.</doc>
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eval_real">
        <callback name="eval_real">
          <return-value transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="wf" transfer-ownership="none">
              <type name="Window" c:type="const NcWindow*"/>
            </parameter>
            <parameter name="r" transfer-ownership="none">
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
            <parameter name="R" transfer-ownership="none">
              <type name="gdouble" c:type="const gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="WindowGaussian"
           c:symbol-prefix="window_gaussian"
           c:type="NcWindowGaussian"
           parent="Window"
           glib:type-name="NcWindowGaussian"
           glib:get-type="nc_window_gaussian_get_type"
           glib:type-struct="WindowGaussianClass">
      <constructor name="new" c:identifier="nc_window_gaussian_new">
        <doc xml:space="preserve">This function returns a #NcWindow with a #NcWindowGaussian implementation.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcWindow.</doc>
          <type name="Window" c:type="NcWindow*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Window" c:type="NcWindow"/>
      </field>
    </class>
    <record name="WindowGaussianClass"
            c:type="NcWindowGaussianClass"
            glib:is-gtype-struct-for="WindowGaussian">
      <field name="parent_class" readable="0" private="1">
        <type name="WindowClass" c:type="NcWindowClass"/>
      </field>
    </record>
    <class name="WindowTophat"
           c:symbol-prefix="window_tophat"
           c:type="NcWindowTophat"
           parent="Window"
           glib:type-name="NcWindowTophat"
           glib:get-type="nc_window_tophat_get_type"
           glib:type-struct="WindowTophatClass">
      <constructor name="new" c:identifier="nc_window_tophat_new">
        <doc xml:space="preserve">This function returns a #NcWindow with a #NcWindowTophat implementation.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcWindow.</doc>
          <type name="Window" c:type="NcWindow*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Window" c:type="NcWindow"/>
      </field>
    </class>
    <record name="WindowTophatClass"
            c:type="NcWindowTophatClass"
            glib:is-gtype-struct-for="WindowTophat">
      <field name="parent_class" readable="0" private="1">
        <type name="WindowClass" c:type="NcWindowClass"/>
      </field>
    </record>
    <constant name="XCOR_LIMBER_GAL_DEFAULT_BIAS"
              value="1.000000"
              c:type="NC_XCOR_LIMBER_GAL_DEFAULT_BIAS">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="XCOR_LIMBER_GAL_DEFAULT_PARAMS_ABSTOL"
              value="0.000000"
              c:type="NC_XCOR_LIMBER_GAL_DEFAULT_PARAMS_ABSTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="XCOR_LIMBER_LENSING_DEFAULT_PARAMS_ABSTOL"
              value="0.000000"
              c:type="NC_XCOR_LIMBER_LENSING_DEFAULT_PARAMS_ABSTOL">
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <class name="Xcor"
           c:symbol-prefix="xcor"
           c:type="NcXcor"
           parent="GObject.Object"
           glib:type-name="NcXcor"
           glib:get-type="nc_xcor_get_type"
           glib:type-struct="XcorClass">
      <constructor name="new" c:identifier="nc_xcor_new">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Xcor" c:type="NcXcor*"/>
        </return-value>
        <parameters>
          <parameter name="dist" transfer-ownership="none">
            <doc xml:space="preserve">a #NcDistance</doc>
            <type name="Distance" c:type="NcDistance*"/>
          </parameter>
          <parameter name="tf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcTransferFunc</doc>
            <type name="TransferFunc" c:type="NcTransferFunc*"/>
          </parameter>
          <parameter name="gf" transfer-ownership="none">
            <doc xml:space="preserve">a #NcGrowthFunc</doc>
            <type name="GrowthFunc" c:type="NcGrowthFunc*"/>
          </parameter>
          <parameter name="zl" transfer-ownership="none">
            <doc xml:space="preserve">a #gdouble</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="zu" transfer-ownership="none">
            <doc xml:space="preserve">a #gdouble</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_xcor_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xcl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcor.</doc>
            <type name="Xcor" c:type="NcXcor**"/>
          </parameter>
        </parameters>
      </function>
      <method name="free" c:identifier="nc_xcor_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xcl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcor.</doc>
            <type name="Xcor" c:type="NcXcor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="limber_auto_cl" c:identifier="nc_xcor_limber_auto_cl">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcor</doc>
            <type name="Xcor" c:type="NcXcor*"/>
          </instance-parameter>
          <parameter name="xcl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcorLimber</doc>
            <type name="XcorLimber" c:type="NcXcorLimber*"/>
          </parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="ell" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="vp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="lmin_idx" transfer-ownership="none">
            <doc xml:space="preserve">a #guint</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="withnoise" transfer-ownership="none">
            <doc xml:space="preserve">a #gboolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="limber_cross_cl" c:identifier="nc_xcor_limber_cross_cl">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xc" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcor</doc>
            <type name="Xcor" c:type="NcXcor*"/>
          </instance-parameter>
          <parameter name="xcl1" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcorLimber</doc>
            <type name="XcorLimber" c:type="NcXcorLimber*"/>
          </parameter>
          <parameter name="xcl2" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcorLimber</doc>
            <type name="XcorLimber" c:type="NcXcorLimber*"/>
          </parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="ell" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="vp" transfer-ownership="none">
            <doc xml:space="preserve">a #NcmVector</doc>
            <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
          </parameter>
          <parameter name="lmin_idx" transfer-ownership="none">
            <doc xml:space="preserve">a #guint</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="nc_xcor_prepare">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xc" transfer-ownership="none">
            <type name="Xcor" c:type="NcXcor*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_xcor_ref">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@xcl.</doc>
          <type name="Xcor" c:type="NcXcor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="xcl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcor.</doc>
            <type name="Xcor" c:type="NcXcor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="distance"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">This property keeps the distance object.</doc>
        <type name="Distance"/>
      </property>
      <property name="growth-func"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GrowthFunc"/>
      </property>
      <property name="transfer-func"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="TransferFunc"/>
      </property>
      <property name="zl" writable="1" construct="1" transfer-ownership="none">
        <doc xml:space="preserve">This property sets lower redshift bound.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="zu" writable="1" construct="1" transfer-ownership="none">
        <doc xml:space="preserve">This property sets the upper redshift bound.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="ctrlcosmo" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
      <field name="ctrl1" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
      <field name="ctrl2" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
      <field name="dist" readable="0" private="1">
        <type name="Distance" c:type="NcDistance*"/>
      </field>
      <field name="tf" readable="0" private="1">
        <type name="TransferFunc" c:type="NcTransferFunc*"/>
      </field>
      <field name="gf" readable="0" private="1">
        <type name="GrowthFunc" c:type="NcGrowthFunc*"/>
      </field>
      <field name="normPS" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="zl" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="zu" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="XcorClass"
            c:type="NcXcorClass"
            glib:is-gtype-struct-for="Xcor">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="alloc">
        <callback name="alloc">
          <return-value transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="XcorLimber"
           c:symbol-prefix="xcor_limber"
           c:type="NcXcorLimber"
           parent="NumCosmoMath.Model"
           abstract="1"
           glib:type-name="NcXcorLimber"
           glib:get-type="nc_xcor_limber_get_type"
           glib:type-struct="XcorLimberClass">
      <constructor name="new_from_name"
                   c:identifier="nc_xcor_limber_new_from_name">
        <doc xml:space="preserve">This function returns a new #NcXcorLimber whose type is defined by
@xcor_name.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #NcXcorLimber.</doc>
          <type name="XcorLimber" c:type="NcXcorLimber*"/>
        </return-value>
        <parameters>
          <parameter name="xcor_name" transfer-ownership="none">
            <doc xml:space="preserve">string which specifies the type of the observable.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="clear" c:identifier="nc_xcor_limber_clear">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xcl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcorLimber.</doc>
            <type name="XcorLimber" c:type="NcXcorLimber**"/>
          </parameter>
        </parameters>
      </function>
      <function name="id" c:identifier="nc_xcor_limber_id">
        <return-value transfer-ownership="none">
          <type name="gint32" c:type="gint32"/>
        </return-value>
      </function>
      <function name="log_all_models"
                c:identifier="nc_xcor_limber_log_all_models">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <virtual-method name="eval_kernel" invoker="eval_kernel">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="xcl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcorLimber</doc>
            <type name="XcorLimber" c:type="NcXcorLimber*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">a #gdouble</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="l" transfer-ownership="none">
            <doc xml:space="preserve">a #gint</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="noise_spec" invoker="noise_spec">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="xcl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcorLimber</doc>
            <type name="XcorLimber" c:type="NcXcorLimber*"/>
          </instance-parameter>
          <parameter name="l" transfer-ownership="none">
            <doc xml:space="preserve">a #guint</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="obs_len" invoker="obs_len">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="xcl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcorLimber.</doc>
            <type name="XcorLimber" c:type="NcXcorLimber*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="obs_params_len" invoker="obs_params_len">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="xcl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcorLimber.</doc>
            <type name="XcorLimber" c:type="NcXcorLimber*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare" invoker="prepare">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xcl" transfer-ownership="none">
            <doc xml:space="preserve">a NcXcorLimber</doc>
            <type name="XcorLimber" c:type="NcXcorLimber*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="eval_kernel" c:identifier="nc_xcor_limber_eval_kernel">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="xcl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcorLimber</doc>
            <type name="XcorLimber" c:type="NcXcorLimber*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a #NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">a #gdouble</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="l" transfer-ownership="none">
            <doc xml:space="preserve">a #gint</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nc_xcor_limber_free">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xcl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcorLimber.</doc>
            <type name="XcorLimber" c:type="NcXcorLimber*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="noise_spec" c:identifier="nc_xcor_limber_noise_spec">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="xcl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcorLimber</doc>
            <type name="XcorLimber" c:type="NcXcorLimber*"/>
          </instance-parameter>
          <parameter name="l" transfer-ownership="none">
            <doc xml:space="preserve">a #guint</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="obs_len" c:identifier="nc_xcor_limber_obs_len">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="xcl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcorLimber.</doc>
            <type name="XcorLimber" c:type="NcXcorLimber*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="obs_params_len"
              c:identifier="nc_xcor_limber_obs_params_len">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="xcl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcorLimber.</doc>
            <type name="XcorLimber" c:type="NcXcorLimber*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="nc_xcor_limber_prepare">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xcl" transfer-ownership="none">
            <doc xml:space="preserve">a NcXcorLimber</doc>
            <type name="XcorLimber" c:type="NcXcorLimber*"/>
          </instance-parameter>
          <parameter name="cosmo" transfer-ownership="none">
            <doc xml:space="preserve">a NcHICosmo</doc>
            <type name="HICosmo" c:type="NcHICosmo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nc_xcor_limber_ref">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@xcl.</doc>
          <type name="XcorLimber" c:type="NcXcorLimber*"/>
        </return-value>
        <parameters>
          <instance-parameter name="xcl" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcorLimber.</doc>
            <type name="XcorLimber" c:type="NcXcorLimber*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="NumCosmoMath.Model" c:type="NcmModel"/>
      </field>
      <field name="cons_factor" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="cosmo_ctrl" readable="0" private="1">
        <type name="NumCosmoMath.ModelCtrl" c:type="NcmModelCtrl*"/>
      </field>
    </class>
    <record name="XcorLimberClass"
            c:type="NcXcorLimberClass"
            glib:is-gtype-struct-for="XcorLimber">
      <field name="parent_class" readable="0" private="1">
        <type name="NumCosmoMath.ModelClass" c:type="NcmModelClass"/>
      </field>
      <field name="eval_kernel">
        <callback name="eval_kernel">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="xcl" transfer-ownership="none">
              <doc xml:space="preserve">a #NcXcorLimber</doc>
              <type name="XcorLimber" c:type="NcXcorLimber*"/>
            </parameter>
            <parameter name="cosmo" transfer-ownership="none">
              <doc xml:space="preserve">a #NcHICosmo</doc>
              <type name="HICosmo" c:type="NcHICosmo*"/>
            </parameter>
            <parameter name="z" transfer-ownership="none">
              <doc xml:space="preserve">a #gdouble</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="l" transfer-ownership="none">
              <doc xml:space="preserve">a #gint</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare">
        <callback name="prepare">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="xcl" transfer-ownership="none">
              <doc xml:space="preserve">a NcXcorLimber</doc>
              <type name="XcorLimber" c:type="NcXcorLimber*"/>
            </parameter>
            <parameter name="cosmo" transfer-ownership="none">
              <doc xml:space="preserve">a NcHICosmo</doc>
              <type name="HICosmo" c:type="NcHICosmo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="noise_spec">
        <callback name="noise_spec">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="xcl" transfer-ownership="none">
              <doc xml:space="preserve">a #NcXcorLimber</doc>
              <type name="XcorLimber" c:type="NcXcorLimber*"/>
            </parameter>
            <parameter name="l" transfer-ownership="none">
              <doc xml:space="preserve">a #guint</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="obs_len">
        <callback name="obs_len">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="xcl" transfer-ownership="none">
              <doc xml:space="preserve">a #NcXcorLimber.</doc>
              <type name="XcorLimber" c:type="NcXcorLimber*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="obs_params_len">
        <callback name="obs_params_len">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">FIXME</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="xcl" transfer-ownership="none">
              <doc xml:space="preserve">a #NcXcorLimber.</doc>
              <type name="XcorLimber" c:type="NcXcorLimber*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="XcorLimberGal"
           c:symbol-prefix="xcor_limber_gal"
           c:type="NcXcorLimberGal"
           parent="XcorLimber"
           glib:type-name="NcXcorLimberGal"
           glib:get-type="nc_xcor_limber_gal_get_type"
           glib:type-struct="XcorLimberGalClass">
      <method name="set_dNdz" c:identifier="nc_xcor_limber_gal_set_dNdz">
        <doc xml:space="preserve">FIXME</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xclg" transfer-ownership="none">
            <doc xml:space="preserve">a #NcXcorLimberGal</doc>
            <type name="XcorLimberGal" c:type="NcXcorLimberGal*"/>
          </instance-parameter>
          <parameter name="z" transfer-ownership="none">
            <doc xml:space="preserve">a #GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gdouble"/>
            </array>
          </parameter>
          <parameter name="dN_dz_array" transfer-ownership="none">
            <doc xml:space="preserve">a #GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gdouble"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <property name="bias" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="bias-fit" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="dNdz" writable="1" transfer-ownership="none">
        <type name="NumCosmoMath.Spline"/>
      </property>
      <property name="nbarm1"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="zmax"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="zmin"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="XcorLimber" c:type="NcXcorLimber"/>
      </field>
      <field name="dN_dz" readable="0" private="1">
        <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
      </field>
      <field name="z_max" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="z_min" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="nbar" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="nbarm1" readable="0" private="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </class>
    <record name="XcorLimberGalClass"
            c:type="NcXcorLimberGalClass"
            glib:is-gtype-struct-for="XcorLimberGal">
      <field name="parent_class" readable="0" private="1">
        <type name="XcorLimberClass" c:type="NcXcorLimberClass"/>
      </field>
    </record>
    <enumeration name="XcorLimberGalParams"
                 glib:type-name="NcXcorLimberGalParams"
                 glib:get-type="nc_xcor_limber_gal_params_get_type"
                 c:type="NcXcorLimberGalParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="bias"
              value="0"
              c:identifier="NC_XCOR_LIMBER_GAL_BIAS"
              glib:nick="bias">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <enumeration name="XcorLimberImpl"
                 glib:type-name="NcXcorLimberImpl"
                 glib:get-type="nc_xcor_limber_impl_get_type"
                 c:type="NcXcorLimberImpl">
      <member name="eval_kernel"
              value="0"
              c:identifier="NC_XCOR_LIMBER_EVAL_KERNEL"
              glib:nick="eval-kernel">
        <doc xml:space="preserve">FIXME</doc>
      </member>
      <member name="prepare"
              value="1"
              c:identifier="NC_XCOR_LIMBER_PREPARE"
              glib:nick="prepare">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <class name="XcorLimberLensing"
           c:symbol-prefix="xcor_limber_lensing"
           c:type="NcXcorLimberLensing"
           parent="XcorLimber"
           glib:type-name="NcXcorLimberLensing"
           glib:get-type="nc_xcor_limber_lensing_get_type"
           glib:type-struct="XcorLimberLensingClass">
      <property name="Nl" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="NumCosmoMath.Vector"/>
      </property>
      <property name="dist" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">FIXME Set correct values (limits)</doc>
        <type name="Distance"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="XcorLimber" c:type="NcXcorLimber"/>
      </field>
      <field name="dist" readable="0" private="1">
        <type name="Distance" c:type="NcDistance*"/>
      </field>
      <field name="Nl" readable="0" private="1">
        <type name="NumCosmoMath.Vector" c:type="NcmVector*"/>
      </field>
      <field name="Nlmax" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="XcorLimberLensingClass"
            c:type="NcXcorLimberLensingClass"
            glib:is-gtype-struct-for="XcorLimberLensing">
      <field name="parent_class" readable="0" private="1">
        <type name="XcorLimberClass" c:type="NcXcorLimberClass"/>
      </field>
    </record>
    <enumeration name="XcorLimberLensingParams"
                 glib:type-name="NcXcorLimberLensingParams"
                 glib:get-type="nc_xcor_limber_lensing_params_get_type"
                 c:type="NcXcorLimberLensingParams">
      <doc xml:space="preserve">FIXME</doc>
      <member name="placeholder"
              value="0"
              c:identifier="NC_XCOR_LIMBER_LENSING_SPARAM_PLACEHOLDER"
              glib:nick="placeholder">
        <doc xml:space="preserve">FIXME</doc>
      </member>
    </enumeration>
    <function name="bias_mean_prepare" c:identifier="nc_bias_mean_prepare">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cad" transfer-ownership="none">
          <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
        </parameter>
        <parameter name="cosmo" transfer-ownership="none">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="bias_mean_val" c:identifier="nc_bias_mean_val">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="cad" transfer-ownership="none">
          <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
        </parameter>
        <parameter name="cosmo" transfer-ownership="none">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
        <parameter name="lnMl" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="lnMu" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="z" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="ca_mean_bias" c:identifier="nc_ca_mean_bias">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="cad" transfer-ownership="none">
          <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
        </parameter>
        <parameter name="cosmo" transfer-ownership="none">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
        <parameter name="lnM" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="z" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="ca_mean_bias_Mobs_denominator"
              c:identifier="nc_ca_mean_bias_Mobs_denominator">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="cad" transfer-ownership="none">
          <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
        </parameter>
        <parameter name="cosmo" transfer-ownership="none">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
        <parameter name="lnMobs" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="z" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="ca_mean_bias_Mobs_numerator"
              c:identifier="nc_ca_mean_bias_Mobs_numerator">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="cad" transfer-ownership="none">
          <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
        </parameter>
        <parameter name="cosmo" transfer-ownership="none">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
        <parameter name="lnMobs" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="z" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="ca_mean_bias_denominator"
              c:identifier="nc_ca_mean_bias_denominator">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="cad" transfer-ownership="none">
          <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
        </parameter>
        <parameter name="cosmo" transfer-ownership="none">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
        <parameter name="lnM" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="z" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="ca_mean_bias_numerator"
              c:identifier="nc_ca_mean_bias_numerator">
      <return-value transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="cad" transfer-ownership="none">
          <type name="ClusterAbundance" c:type="NcClusterAbundance*"/>
        </parameter>
        <parameter name="cosmo" transfer-ownership="none">
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
        <parameter name="lnM" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="z" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="data_bao_create" c:identifier="nc_data_bao_create">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a #NcmData</doc>
        <type name="NumCosmoMath.Data" c:type="NcmData*"/>
      </return-value>
      <parameters>
        <parameter name="dist" transfer-ownership="none">
          <doc xml:space="preserve">a #NcDistance</doc>
          <type name="Distance" c:type="NcDistance*"/>
        </parameter>
        <parameter name="id" transfer-ownership="none">
          <doc xml:space="preserve">a #NcDataBaoId</doc>
          <type name="DataBaoId" c:type="NcDataBaoId"/>
        </parameter>
      </parameters>
    </function>
    <function name="data_cmb_create" c:identifier="nc_data_cmb_create">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">FIXME</doc>
        <type name="NumCosmoMath.Data" c:type="NcmData*"/>
      </return-value>
      <parameters>
        <parameter name="dist" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Distance" c:type="NcDistance*"/>
        </parameter>
        <parameter name="id" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="DataCMBId" c:type="NcDataCMBId"/>
        </parameter>
      </parameters>
    </function>
    <function name="data_snia_get_catalog"
              c:identifier="nc_data_snia_get_catalog">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">FIXME</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="id" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="data_snia_get_catalog_by_id"
              c:identifier="nc_data_snia_get_catalog_by_id">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">FIXME</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="id" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="DataSNIAId" c:type="NcDataSNIAId"/>
        </parameter>
      </parameters>
    </function>
    <function name="data_snia_get_fits" c:identifier="nc_data_snia_get_fits">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="check_size" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="data_snia_load_cat" c:identifier="nc_data_snia_load_cat">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="snia_cov" transfer-ownership="none">
          <type name="DataSNIACov" c:type="NcDataSNIACov*"/>
        </parameter>
        <parameter name="id" transfer-ownership="none">
          <type name="DataSNIAId" c:type="NcDataSNIAId"/>
        </parameter>
      </parameters>
    </function>
    <function name="pert_cov_direct" c:identifier="nc_pert_cov_direct">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pert" transfer-ownership="none">
          <type name="LinearPert" c:type="NcLinearPert*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pert_linear_calc_Nc_spline"
              c:identifier="nc_pert_linear_calc_Nc_spline"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcLinearPertSplines</doc>
          <type name="LinearPertSplines" c:type="NcLinearPertSplines*"/>
        </parameter>
        <parameter name="pw_spline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcmSpline</doc>
          <type name="NumCosmoMath.Spline" c:type="NcmSpline*"/>
        </parameter>
        <parameter name="los_table" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
        <parameter name="n_interp" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
      </parameters>
    </function>
    <function name="pert_linear_clear" c:identifier="nc_pert_linear_clear">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pert" transfer-ownership="none">
          <doc xml:space="preserve">a #NcLinearPert.</doc>
          <type name="LinearPert" c:type="NcLinearPert**"/>
        </parameter>
      </parameters>
    </function>
    <function name="pert_linear_create_los_table"
              c:identifier="nc_pert_linear_create_los_table"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="lmax_los" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="los_ini" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
        <parameter name="los_step" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pert_linear_free" c:identifier="nc_pert_linear_free">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pert" transfer-ownership="none">
          <doc xml:space="preserve">a #NcLinearPert.</doc>
          <type name="LinearPert" c:type="NcLinearPert*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pert_linear_los_integrate"
              c:identifier="nc_pert_linear_los_integrate">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="pspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcLinearPertSplines</doc>
          <type name="LinearPertSplines" c:type="NcLinearPertSplines*"/>
        </parameter>
        <parameter name="l" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="k" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="pert_linear_new"
              c:identifier="nc_pert_linear_new"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="LinearPert" c:type="NcLinearPert*"/>
      </return-value>
      <parameters>
        <parameter name="cosmo" transfer-ownership="none">
          <doc xml:space="preserve">a #NcHICosmo</doc>
          <type name="HICosmo" c:type="NcHICosmo*"/>
        </parameter>
        <parameter name="recomb" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="Recomb" c:type="NcRecomb*"/>
        </parameter>
        <parameter name="lmax" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="tc_reltol" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="reltol" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="tc_abstol" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="abstol" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="pert_linear_prepare_splines"
              c:identifier="nc_pert_linear_prepare_splines">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcLinearPertSplines</doc>
          <type name="LinearPertSplines" c:type="NcLinearPertSplines*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pert_linear_spline_set_source_at"
              c:identifier="nc_pert_linear_spline_set_source_at">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcLinearPertSplines</doc>
          <type name="LinearPertSplines" c:type="NcLinearPertSplines*"/>
        </parameter>
        <parameter name="k" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="pert_linear_splines_clear"
              c:identifier="nc_pert_linear_splines_clear">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcLinearPertSplines.</doc>
          <type name="LinearPertSplines" c:type="NcLinearPertSplines**"/>
        </parameter>
      </parameters>
    </function>
    <function name="pert_linear_splines_free"
              c:identifier="nc_pert_linear_splines_free">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pspline" transfer-ownership="none">
          <doc xml:space="preserve">a #NcLinearPertSplines.</doc>
          <type name="LinearPertSplines" c:type="NcLinearPertSplines*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pert_linear_splines_new"
              c:identifier="nc_pert_linear_splines_new"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="LinearPertSplines" c:type="NcLinearPertSplines*"/>
      </return-value>
      <parameters>
        <parameter name="pert" transfer-ownership="none">
          <doc xml:space="preserve">a #NcLinearPert</doc>
          <type name="LinearPert" c:type="NcLinearPert*"/>
        </parameter>
        <parameter name="types" transfer-ownership="none">
          <doc xml:space="preserve">a #NcLinearPertSplineTypes</doc>
          <type name="LinearPertSplineTypes" c:type="NcLinearPertSplineTypes"/>
        </parameter>
        <parameter name="n_deta" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="n_evol" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="k0" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="k1" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="pert_transfer_function_get"
              c:identifier="nc_pert_transfer_function_get">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">FIXME</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="perttf" transfer-ownership="none">
          <doc xml:space="preserve">a #NcLinearPertTF</doc>
          <type name="LinearPertTF" c:type="NcLinearPertTF*"/>
        </parameter>
        <parameter name="kh" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="pert_transfer_function_new"
              c:identifier="nc_pert_transfer_function_new"
              introspectable="0">
      <doc xml:space="preserve">FIXME</doc>
      <return-value>
        <doc xml:space="preserve">FIXME</doc>
        <type name="LinearPertTF" c:type="NcLinearPertTF*"/>
      </return-value>
      <parameters>
        <parameter name="pert" transfer-ownership="none">
          <doc xml:space="preserve">a #NcLinearPert</doc>
          <type name="LinearPert" c:type="NcLinearPert*"/>
        </parameter>
        <parameter name="k0" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="k1" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="np" transfer-ownership="none">
          <doc xml:space="preserve">FIXME</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
      </parameters>
    </function>
    <function name="pert_transfer_function_prepare"
              c:identifier="nc_pert_transfer_function_prepare">
      <doc xml:space="preserve">FIXME</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="perttf" transfer-ownership="none">
          <doc xml:space="preserve">a #NcLinearPertTF</doc>
          <type name="LinearPertTF" c:type="NcLinearPertTF*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
