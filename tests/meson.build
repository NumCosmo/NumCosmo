c_tests = [
    {
        'name': 'ncm_cfg',
        'sources': ['test_ncm_cfg.c'],
    },
    {
        'name': 'ncm_generic',
        'sources': ['test_ncm_generic.c'],
    },
    {
        'name': 'ncm_sparam',
        'sources': ['test_ncm_sparam.c'],
    },
    {
        'name': 'ncm_diff',
        'sources': ['test_ncm_diff.c'],
    },
    {
        'name': 'ncm_dtuple',
        'sources': ['test_ncm_dtuple.c'],
    },
    {
        'name': 'ncm_fftlog',
        'sources': ['test_ncm_fftlog.c'],
        'timeout': 0,
        'priority': 10,
    },
    {
        'name': 'ncm_vector',
        'sources': ['test_ncm_vector.c'],
    },
    {
        'name': 'ncm_matrix',
        'sources': ['test_ncm_matrix.c'],
    },
    {
        'name': 'ncm_stats_vec',
        'sources': ['test_ncm_stats_vec.c'],
    },
    {
        'name': 'ncm_stats_dist1d_epdf',
        'sources': ['test_ncm_stats_dist1d_epdf.c'],
    },
    {
        'name': 'ncm_stats_dist',
        'sources': ['test_ncm_stats_dist.c'],
        'timeout': 0,
        'priority': 10,
    },
    {
        'name': 'ncm_stats_dist_kernel',
        'sources': ['test_ncm_stats_dist_kernel.c'],
    },
    {
        'name': 'ncm_spline',
        'sources': ['test_ncm_spline.c'],
    },
    {
        'name': 'ncm_spline2d',
        'sources': ['test_ncm_spline2d.c'],
    },
    {
        'name': 'ncm_integral1d',
        'sources': ['test_ncm_integral1d.c'],
    },
    {
        'name': 'ncm_integral_nd',
        'sources': ['test_ncm_integral_nd.c'],
    },
    {
        'name': 'ncm_sf_sbessel',
        'sources': ['test_ncm_sf_sbessel.c'],
    },
    {
        'name': 'ncm_mpsf_0F1',
        'sources': ['test_ncm_mpsf_0F1.c'],
    },
    {
        'name': 'ncm_mpsf_trig_int',
        'sources': ['test_ncm_mpsf_trig_int.c'],
    },
    {
        'name': 'ncm_model',
        'sources': ['test_ncm_model.c', 'ncm_model_test.c', 'ncm_model_test.h'],
    },
    {
        'name': 'ncm_model_ctrl',
        'sources': ['test_ncm_model_ctrl.c'],
    },
    {
        'name': 'ncm_mset',
        'sources': ['test_ncm_mset.c'],
    },
    {
        'name': 'ncm_mset_catalog',
        'sources': ['test_ncm_mset_catalog.c'],
        'timeout': 0,
        'priority': 10,
    },
    {
        'name': 'ncm_obj_array',
        'sources': ['test_ncm_obj_array.c'],
    },
    {
        'name': 'ncm_serialize',
        'sources': ['test_ncm_serialize.c'],
    },
    {
        'name': 'ncm_data_gauss_cov',
        'sources': [
            'test_ncm_data_gauss_cov.c',
            'ncm_data_gauss_cov_test.c',
            'ncm_data_gauss_cov_test.h',
        ],
        'timeout': 0,
    },
    {
        'name': 'ncm_fit',
        'sources': ['test_ncm_fit.c'],
        'timeout': 0,
    },
    {
        'name': 'ncm_fit_state',
        'sources': ['test_ncm_fit_state.c'],
    },
    {
        'name': 'ncm_fit_esmcmc',
        'sources': ['test_ncm_fit_esmcmc.c'],
        'timeout': 0,
        'priority': 10,
    },
    {
        'name': 'ncm_func_eval',
        'sources': ['test_ncm_func_eval.c'],
    },
    {
        'name': 'ncm_sf_spherical_harmonics',
        'sources': ['test_ncm_sf_spherical_harmonics.c'],
    },
    {
        'name': 'ncm_sphere_map',
        'sources': ['test_ncm_sphere_map.c'],
        'timeout': 0,
    },
    {
        'name': 'ncm_util',
        'sources': ['test_ncm_util.c'],
    },
    {
        'name': 'ncm_quaternion',
        'sources': ['test_ncm_quaternion.c'],
    },
    {
        'name': 'nc_halo_bias',
        'sources': ['test_nc_halo_bias.c'],
    },
    {
        'name': 'nc_hicosmo_de',
        'sources': ['test_nc_hicosmo_de.c'],
    },
    {
        'name': 'nc_hicosmo_qgw',
        'sources': ['test_nc_hicosmo_qgw.c'],
    },
    {
        'name': 'nc_window',
        'sources': ['test_nc_window.c'],
    },
    {
        'name': 'nc_transfer_func',
        'sources': ['test_nc_transfer_func.c'],
    },
    {
        'name': 'nc_galaxy_acf',
        'sources': ['test_nc_galaxy_acf.c'],
    },
    {
        'name': 'nc_recomb',
        'sources': ['test_nc_recomb.c'],
    },
    {
        'name': 'nc_cbe',
        'sources': ['test_nc_cbe.c'],
        'timeout': 0,
    },
    {
        'name': 'nc_hiqg_1d',
        'sources': ['test_nc_hiqg_1d.c'],
    },
    {
        'name': 'nc_data_bao_dtr_dhr',
        'sources': ['test_nc_data_bao_dtr_dhr.c'],
    },
    {
        'name': 'nc_data_bao_rdv',
        'sources': ['test_nc_data_bao_rdv.c'],
    },
    {
        'name': 'nc_data_bao_dvdv',
        'sources': ['test_nc_data_bao_dvdv.c'],
    },
    {
        'name': 'nc_data_bao_dvr_dtdh',
        'sources': ['test_nc_data_bao_dvr_dtdh.c'],
    },
    {
        'name': 'nc_data_cluster_ncount',
        'sources': ['test_nc_data_cluster_ncount.c'],
    },
    {
        'name': 'nc_cluster_pseudo_counts',
        'sources': ['test_nc_cluster_pseudo_counts.c'],
    },
    {
        'name': 'nc_data_cluster_ncounts_gauss',
        'sources': ['test_nc_data_cluster_ncounts_gauss.c'],
    },
    {
        'name': 'nc_cluster_abundance',
        'sources': ['test_nc_cluster_abundance.c'],
    },
    {
        'name': 'nc_halo_density_profile',
        'sources': ['test_nc_halo_density_profile.c'],
    },
    {
        'name': 'nc_halo_position',
        'sources': ['test_nc_halo_position.c'],
    },
    {
        'name': 'nc_data_hubble',
        'sources': ['test_nc_data_hubble.c'],
    },
    {
        'name': 'nc_wl_surface_mass_density',
        'sources': ['test_nc_wl_surface_mass_density.c'],
    },
    {
        'name': 'nc_powspec',
        'sources': ['test_nc_powspec.c'],
        'timeout': 0,
    },
    {
        'name': 'nc_distance',
        'sources': ['test_nc_distance.c'],
    },
    {
        'name': 'nc_data_cluster_wl',
        'sources': ['test_nc_data_cluster_wl.c'],
    },
    {
        'name': 'nc_galaxy_wl_obs',
        'sources': ['test_nc_galaxy_wl_obs.c'],
    },
    {
        'name': 'nc_galaxy_sd_position',
        'sources': ['test_nc_galaxy_sd_position.c'],
    },
    {
        'name': 'nc_galaxy_sd_true_redshift',
        'sources': ['test_nc_galaxy_sd_true_redshift.c'],
    },
    {
        'name': 'nc_galaxy_sd_obs_redshift',
        'sources': ['test_nc_galaxy_sd_obs_redshift.c'],
    },
    {
        'name': 'nc_galaxy_sd_shape',
        'sources': ['test_nc_galaxy_sd_shape.c'],
    },
]
tests_c_args = ['-DG_LOG_DOMAIN="NUMCOSMO"', '-DHAVE_CONFIG_H']

foreach c_test : c_tests
    executable_test = executable(
        c_test['name'],
        c_test['sources'],
        c_args: tests_c_args,
        dependencies: [libnumcosmo_dep, gsl_dep],
        include_directories: [configinc, numcosmoinc],
    )
    if c_test.has_key('timeout')
        timeout = c_test['timeout']
    else
        timeout = 60
    endif
    if c_test.has_key('priority')
        priority = c_test['priority']
    else
        priority = 0
    endif
    test(
        c_test['name'],
        executable_test,
        timeout: timeout,
        env: [
            'G_TEST_SRCDIR=@0@'.format(meson.current_source_dir()),
            'G_TEST_BUILDDIR=@0@'.format(meson.current_build_dir()),
        ],
        protocol: 'tap',
        priority: priority,
    )
endforeach

if mpi_c_dep.found()
    mpiexec = find_program('mpiexec', required: false)
    if mpiexec.found()

        c_tests_mpi = [
            {
                'name': 'ncm_fit_esmcmc_mpi',
                'sources': ['test_ncm_fit_esmcmc_mpi.c'],
                'timeout': 0,
            },
        ]
        foreach c_test_mpi : c_tests_mpi
            executable_test = executable(
                c_test_mpi['name'],
                c_test_mpi['sources'],
                c_args: tests_c_args,
                dependencies: [libnumcosmo_dep],
                include_directories: [configinc, numcosmoinc],
            )
            if c_test_mpi.has_key('timeout')
                timeout = c_test_mpi['timeout']
            else
                timeout = 60
            endif

            mpiexec_args = (
                [
                    '-n', '2',
                    executable_test.full_path(),
                ]
            )
            test(
                c_test_mpi['name'],
                mpiexec,
                args: mpiexec_args,
                timeout: timeout,
                env: [
                    'G_TEST_SRCDIR=@0@'.format(meson.current_source_dir()),
                    'G_TEST_BUILDDIR=@0@'.format(meson.current_build_dir()),
                ],
                protocol: 'tap',
            )
        endforeach
    endif

endif

python_tests = [
    {
        'name': 'py_cfg',
        'source': 'test_py_cfg.py',
    },
    {
        'name': 'py_cluster_abundance_sampling',
        'source': 'test_py_cluster_abundance_sampling.py',
    },
    {
        'name': 'py_hicosmo',
        'source': 'test_py_hicosmo.py',
    },
    {
        'name': 'py_hicosmo_Vexp',
        'source': 'test_py_hicosmo_Vexp.py',
    },
    {
        'name': 'py_hireion',
        'source': 'test_py_hireion.py',
    },
    {
        'name': 'py_hiprim_two_fluids',
        'source': 'test_py_hiprim_two_fluids.py',
    },
    {
        'name': 'py_hipert_em',
        'source': 'test_py_hipert_em.py',
    },
    {
        'name': 'py_hipert_gw',
        'source': 'test_py_hipert_gw.py',
    },
    {
        'name': 'py_hipert_two_fluids',
        'source': 'test_py_hipert_two_fluids.py',
    },
    {
        'name': 'py_halo_mass_summary',
        'source': 'test_py_halo_mass_summary.py',
    },
    {
        'name': 'py_halo_density_profile',
        'source': 'test_py_halo_density_profile.py',
    },
    {
        'name': 'py_de_cont',
        'source': 'test_py_de_cont.py',
    },
    {
        'name': 'py_diff',
        'source': 'test_py_diff.py',
    },
    {
        'name': 'py_integralnd',
        'source': 'test_py_integralnd.py',
    },
    {
        'name': 'py_spline_cubic_d2',
        'source': 'test_py_spline_cubic_d2.py',
    },
    {
        'name': 'py_sphere_nn',
        'source': 'test_py_sphere_nn.py',
    },
    {
        'name': 'py_sanity',
        'source': 'test_py_sanity.py',
    },
    {
        'name': 'py_data_funnel',
        'source': 'test_py_data_funnel.py',
    },
    {
        'name': 'py_data_gaussmix2d',
        'source': 'test_py_data_gaussmix2d.py',
    },
    {
        'name': 'py_data_gauss',
        'source': 'test_py_data_gauss.py',
    },
    {
        'name': 'py_data_gauss_cov',
        'source': 'test_py_data_gauss_cov.py',
    },
    {
        'name': 'py_data_gauss_diag',
        'source': 'test_py_data_gauss_diag.py',
    },
    {
        'name': 'py_data_poisson',
        'source': 'test_py_data_poisson.py',
    },
    {
        'name': 'py_data_rosenbrock',
        'source': 'test_py_data_rosenbrock.py',
    },
    {
        'name': 'py_data_snia_cov',
        'source': 'test_py_data_snia_cov.py',
    },
    {
        'name': 'py_dataset',
        'source': 'test_py_dataset.py',
    },
    {
        'name': 'py_prior',
        'source': 'test_py_prior.py',
    },
    {
        'name': 'py_ode_spline',
        'source': 'test_py_ode_spline.py',
    },
    {
        'name': 'py_serialize',
        'source': 'test_py_serialize.py',
    },
    {
        'name': 'py_obj_array',
        'source': 'test_py_obj_array.py',
    },
    {
        'name': 'py_model',
        'source': 'test_py_model.py',
    },
    {
        'name': 'py_mset',
        'source': 'test_py_mset.py',
    },
    {
        'name': 'py_test_data_objects',
        'source': 'test_py_test_data_objects.py',
    },
    {
        'name': 'py_model_builder',
        'source': 'test_py_model_builder.py',
    },
    {
        'name': 'py_fit',
        'source': 'test_py_fit.py',
    },
    {
        'name': 'py_powspec_ml_spline',
        'source': 'test_py_powspec_ml_spline.py',
    },
    {
        'name': 'py_powspec_spline2d',
        'source': 'test_py_powspec_spline2d.py',
    },
    {
        'name': 'cosmology',
        'source': 'test_cosmology.py',
    },
    {
        'name': 'py_numcosmo_py',
        'source': 'test_py_numcosmo_py.py',
    },
]

if mpi_c_dep.found()
    python_tests += [
        {
            'name': 'py_mpi',
            'source': 'test_py_mpi.py',
            'mpi': true,
        },
    ]
endif

python_astropy_scipy = python_module.find_installation(
    'python3',
    modules: ['astropy', 'scipy'],
    required: false,
)

if python_astropy_scipy.found()
    python_tests += [
        {
            'name': 'py_constants',
            'source': 'test_py_constants.py',
        },
        {
            'name': 'py_csq1d',
            'source': 'test_py_csq1d.py',
        },
        {
            'name': 'py_hipert_adiab',
            'source': 'test_py_hipert_adiab.py',
        },
        {
            'name': 'py_data_dist1d',
            'source': 'test_py_data_dist1d.py',
        },
        {
            'name': 'py_data_dist2d',
            'source': 'test_py_data_dist2d.py',
        },
        {
            'name': 'sky_match',
            'source': 'test_sky_match.py',
        },
    ]
endif

python_typer = python_module.find_installation(
    'python3',
    modules: ['typer', 'rich'],
    required: false,
)

if python_typer.found()
    python_tests += [
        {
            'name': 'py_numcosmo_app',
            'source': 'test_py_numcosmo_app.py',
            'timeout': 0,
        },
    ]
endif

python_pyccl = python_module.find_installation(
    'python3',
    modules: ['pyccl'],
    required: false,
)

if python_pyccl.found()
    python_tests += [
        {
            'name': 'py_background_ccl',
            'source': 'test_py_background_ccl.py',
            'timeout': 0,
        },
        {
            'name': 'py_powspec',
            'source': 'test_py_powspec.py',
            'timeout': 0,
        },
        {
            'name': 'py_massfunc',
            'source': 'test_py_massfunc.py',
            'timeout': 0,
        },
        {
            'name': 'py_concentration_mass_relations',
            'source': 'test_py_concentration_mass_relations.py',
            'timeout': 0,
        },
        {
            'name': 'py_xcor',
            'source': 'test_py_xcor.py',
            'timeout': 0,
        },
    ]
endif

python_getdist = python_module.find_installation(
    'python3',
    modules: ['getdist'],
    required: false,
)

if python_getdist.found()
    python_tests += [
        {
            'name': 'plotting',
            'source': 'test_plotting.py',
            'timeout': 0,
        },
    ]
endif

if enable_gir
    env = environment()
    env.prepend(
        'GI_TYPELIB_PATH',
        numcosmo_build_dir / 'numcosmo',
    )

    env.prepend(
        'LD_LIBRARY_PATH',
        numcosmo_build_dir / 'numcosmo',
    )

    env.prepend(
        'DYLD_LIBRARY_PATH',
        numcosmo_build_dir / 'numcosmo',
    )

    env.prepend(
        'PYTHONPATH',
        numcosmo_source_dir,
    )

    pytest_args = ['-m', 'pytest']
    pytest_protocol = 'exitcode'
    pytest_is_parallel = true

    if get_option('b_coverage')
        python_module.find_installation(
            'python3',
            modules: ['pytest_cov'],
            required: true,
        )
        pytest_args += ['--cov', 'numcosmo_py']
        pytest_args += ['--cov-report', 'xml']
        pytest_args += ['--cov-append']
        pytest_is_parallel = false
    endif

    py_tap = python_module.find_installation(
        'python3',
        modules: ['pytest_tap'],
        required: false,
    )
    if py_tap.found() and get_option('pytest_tap')
        r = run_command(
            python,
            '-c', 'import importlib.metadata; import sys; sys.stdout.write(importlib.metadata.version("pytest-tap"))',
            check: true,
        )
        message('pytest-tap version: @0@'.format(r.stdout().strip()))

        if r.stdout().version_compare('>= 3.4')
            pytest_args += ['--tap']
        else
            pytest_args += ['--tap-stream']
        endif
        pytest_protocol = 'tap'
    endif

    foreach python_test : python_tests
        if python_test.has_key('timeout')
            timeout = python_test['timeout']
        else
            timeout = 60
        endif

        test(
            python_test['name'],
            python,
            args: pytest_args
            + join_paths(
                meson.current_source_dir(),
                python_test['source'],
            ),
            depends: [numcosmo_gir, numcosmo_math_gir],
            env: env,
            protocol: pytest_protocol,
            is_parallel: pytest_is_parallel,
            timeout: timeout,
        )
    endforeach

    if mpi_c_dep.found()
        mpiexec = find_program('mpiexec', required: false)
        if mpiexec.found()
            mpiexec_args = (
                [
                    '-n', '2',
                    python.full_path(),
                ]
                + pytest_args
            )
            foreach python_test : python_tests
                if python_test.has_key('mpi') and python_test['mpi']
                    if python_test.has_key('timeout')
                        timeout = python_test['timeout']
                    else
                        timeout = 60
                    endif
                    test(
                        'mpiexec_' + python_test['name'],
                        mpiexec,
                        args: mpiexec_args
                        + join_paths(
                            meson.current_source_dir(),
                            python_test['source'],
                        ),
                        depends: [numcosmo_gir, numcosmo_math_gir],
                        env: env,
                        timeout: timeout,
                        # protocol: pytest_protocol, # FIXME: mpiexec does not support TAP
                    )
                endif
            endforeach
        endif
    endif
endif